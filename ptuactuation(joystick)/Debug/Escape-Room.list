
Escape-Room.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000591c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bbc  08005bbc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005bbc  08005bbc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bbc  08005bbc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000004bc  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000524  20000524  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e40  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aec  00000000  00000000  00034ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  000379c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001080  00000000  00000000  00038b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eac3  00000000  00000000  00039be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ddb  00000000  00000000  000586ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b90f1  00000000  00000000  0006e486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127577  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ae8  00000000  00000000  001275c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a8c 	.word	0x08005a8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08005a8c 	.word	0x08005a8c

080001c8 <enable_clocks>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <enable_clocks+0x1c>)
 80001ce:	695b      	ldr	r3, [r3, #20]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <enable_clocks+0x1c>)
 80001d2:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80001d6:	6153      	str	r3, [r2, #20]
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	40021000 	.word	0x40021000

080001e8 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001ee:	4b06      	ldr	r3, [pc, #24]	; (8000208 <initialise_board+0x20>)
 80001f0:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f245 5255 	movw	r2, #21845	; 0x5555
 80001f8:	801a      	strh	r2, [r3, #0]
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	48001002 	.word	0x48001002

0800020c <HAL_TIM_IC_CaptureCallback>:

uint16_t rise_time = 0;
uint16_t last_period = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b08c      	sub	sp, #48	; 0x30
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	uint8_t buffer[32];
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a17      	ldr	r2, [pc, #92]	; (8000278 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d127      	bne.n	800026e <HAL_TIM_IC_CaptureCallback+0x62>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	7f1b      	ldrb	r3, [r3, #28]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d123      	bne.n	800026e <HAL_TIM_IC_CaptureCallback+0x62>
	{
		uint16_t IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000226:	2100      	movs	r1, #0
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f004 fd71 	bl	8004d10 <HAL_TIM_ReadCapturedValue>
 800022e:	4603      	mov	r3, r0
 8000230:	85fb      	strh	r3, [r7, #46]	; 0x2e

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 8000232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023a:	f001 faed 	bl	8001818 <HAL_GPIO_ReadPin>
 800023e:	4603      	mov	r3, r0
 8000240:	2b01      	cmp	r3, #1
 8000242:	d103      	bne.n	800024c <HAL_TIM_IC_CaptureCallback+0x40>
			rise_time = IC_Val1;
 8000244:	4a0d      	ldr	r2, [pc, #52]	; (800027c <HAL_TIM_IC_CaptureCallback+0x70>)
 8000246:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000248:	8013      	strh	r3, [r2, #0]
 800024a:	e006      	b.n	800025a <HAL_TIM_IC_CaptureCallback+0x4e>
		else
			last_period = IC_Val1 - rise_time;
 800024c:	4b0b      	ldr	r3, [pc, #44]	; (800027c <HAL_TIM_IC_CaptureCallback+0x70>)
 800024e:	881b      	ldrh	r3, [r3, #0]
 8000250:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000252:	1ad3      	subs	r3, r2, r3
 8000254:	b29a      	uxth	r2, r3
 8000256:	4b0a      	ldr	r3, [pc, #40]	; (8000280 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000258:	801a      	strh	r2, [r3, #0]

		diff = IC_Val1 - last_capture;
 800025a:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <HAL_TIM_IC_CaptureCallback+0x78>)
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000260:	1ad3      	subs	r3, r2, r3
 8000262:	b29a      	uxth	r2, r3
 8000264:	4b08      	ldr	r3, [pc, #32]	; (8000288 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000266:	801a      	strh	r2, [r3, #0]
		last_capture = IC_Val1;
 8000268:	4a06      	ldr	r2, [pc, #24]	; (8000284 <HAL_TIM_IC_CaptureCallback+0x78>)
 800026a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800026c:	8013      	strh	r3, [r2, #0]
	}
}
 800026e:	bf00      	nop
 8000270:	3730      	adds	r7, #48	; 0x30
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40012c00 	.word	0x40012c00
 800027c:	200004c4 	.word	0x200004c4
 8000280:	200004c6 	.word	0x200004c6
 8000284:	200004c0 	.word	0x200004c0
 8000288:	200004c2 	.word	0x200004c2

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b5b0      	push	{r4, r5, r7, lr}
 800028e:	b096      	sub	sp, #88	; 0x58
 8000290:	af00      	add	r7, sp, #0

	// look at the size difference between these structs,
	//  they are because the 32 bit microcontroller
	//  packs the data so the divisions are in groups
	//  of 4bytes (4bytes=32bit)
	uint8_t size_1 = sizeof(struct_1);
 8000292:	2314      	movs	r3, #20
 8000294:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t size_2 = sizeof(struct_2);
 8000298:	230c      	movs	r3, #12
 800029a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56


	uint8_t string_to_send[64] = "This is a string !\r\n";
 800029e:	4b5a      	ldr	r3, [pc, #360]	; (8000408 <main+0x17c>)
 80002a0:	f107 0408 	add.w	r4, r7, #8
 80002a4:	461d      	mov	r5, r3
 80002a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002ae:	6020      	str	r0, [r4, #0]
 80002b0:	3404      	adds	r4, #4
 80002b2:	7021      	strb	r1, [r4, #0]
 80002b4:	f107 031d 	add.w	r3, r7, #29
 80002b8:	222b      	movs	r2, #43	; 0x2b
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f005 fbd5 	bl	8005a6c <memset>

	enable_clocks();
 80002c2:	f7ff ff81 	bl	80001c8 <enable_clocks>
	initialise_board();
 80002c6:	f7ff ff8f 	bl	80001e8 <initialise_board>

	LedRegister *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80002ca:	4b50      	ldr	r3, [pc, #320]	; (800040c <main+0x180>)
 80002cc:	653b      	str	r3, [r7, #80]	; 0x50

	SerialInitialise(BAUD_115200, &USART1_PORT);
 80002ce:	4950      	ldr	r1, [pc, #320]	; (8000410 <main+0x184>)
 80002d0:	2000      	movs	r0, #0
 80002d2:	f000 fcab 	bl	8000c2c <SerialInitialise>

	HAL_StatusTypeDef return_value = 0x00;
 80002d6:	2300      	movs	r3, #0
 80002d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	volatile uint16_t vertical_PWM = 1000;
 80002dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e0:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t horizontal_PWM = 1000;
 80002e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e6:	80bb      	strh	r3, [r7, #4]


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e8:	f000 ffa4 	bl	8001234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ec:	f000 f898 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f0:	f000 fa76 	bl	80007e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002f4:	f000 f8f8 	bl	80004e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80002f8:	f000 f936 	bl	8000568 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80002fc:	f000 fa4e 	bl	800079c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000300:	f000 f9e6 	bl	80006d0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000304:	f000 f96e 	bl	80005e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000308:	2100      	movs	r1, #0
 800030a:	4842      	ldr	r0, [pc, #264]	; (8000414 <main+0x188>)
 800030c:	f003 fec2 	bl	8004094 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000310:	2104      	movs	r1, #4
 8000312:	4840      	ldr	r0, [pc, #256]	; (8000414 <main+0x188>)
 8000314:	f003 febe 	bl	8004094 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000318:	2100      	movs	r1, #0
 800031a:	483f      	ldr	r0, [pc, #252]	; (8000418 <main+0x18c>)
 800031c:	f004 f81c 	bl	8004358 <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 8000320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000324:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 800032a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000338:	6013      	str	r3, [r2, #0]

	// note: for PWM if you continually change the clock period
	// you can get unexpected results. To remove this, set ARPE so that the
	// ARR settings are not activated until the next cycle.

	initialise_ptu_i2c(&hi2c1);
 800033a:	4838      	ldr	r0, [pc, #224]	; (800041c <main+0x190>)
 800033c:	f000 faf0 	bl	8000920 <initialise_ptu_i2c>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	while (1) {
		GPIO_PinState pinState1 = (HAL_GPIO_ReadPin(left_Pin, GPIO_PIN_12) == GPIO_PIN_SET);
 8000340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000344:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000348:	f001 fa66 	bl	8001818 <HAL_GPIO_ReadPin>
 800034c:	4603      	mov	r3, r0
 800034e:	2b01      	cmp	r3, #1
 8000350:	bf0c      	ite	eq
 8000352:	2301      	moveq	r3, #1
 8000354:	2300      	movne	r3, #0
 8000356:	b2db      	uxtb	r3, r3
 8000358:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		GPIO_PinState pinState2 = (HAL_GPIO_ReadPin(right_Pin, GPIO_PIN_13) == GPIO_PIN_SET);
 800035c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000360:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000364:	f001 fa58 	bl	8001818 <HAL_GPIO_ReadPin>
 8000368:	4603      	mov	r3, r0
 800036a:	2b01      	cmp	r3, #1
 800036c:	bf0c      	ite	eq
 800036e:	2301      	moveq	r3, #1
 8000370:	2300      	movne	r3, #0
 8000372:	b2db      	uxtb	r3, r3
 8000374:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		GPIO_PinState pinState3 = (HAL_GPIO_ReadPin(up_Pin, GPIO_PIN_14) == GPIO_PIN_SET);
 8000378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800037c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000380:	f001 fa4a 	bl	8001818 <HAL_GPIO_ReadPin>
 8000384:	4603      	mov	r3, r0
 8000386:	2b01      	cmp	r3, #1
 8000388:	bf0c      	ite	eq
 800038a:	2301      	moveq	r3, #1
 800038c:	2300      	movne	r3, #0
 800038e:	b2db      	uxtb	r3, r3
 8000390:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		GPIO_PinState pinState4 = (HAL_GPIO_ReadPin(down_Pin, GPIO_PIN_15) == GPIO_PIN_SET);
 8000394:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000398:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800039c:	f001 fa3c 	bl	8001818 <HAL_GPIO_ReadPin>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	bf0c      	ite	eq
 80003a6:	2301      	moveq	r3, #1
 80003a8:	2300      	movne	r3, #0
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		// Adjust PTU PWM values based on pin states
		if (pinState1 == GPIO_PIN_SET) {
 80003b0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d102      	bne.n	80003be <main+0x132>
		horizontal_PWM = 1900;  // Move PTU left
 80003b8:	f240 736c 	movw	r3, #1900	; 0x76c
 80003bc:	80bb      	strh	r3, [r7, #4]
		} //else if (pinState2 == GPIO_PIN_SET){
		//horizontal_PWM = 1200;  // Move PTU right
		//}//

		if (pinState3 == GPIO_PIN_SET) {
 80003be:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d102      	bne.n	80003cc <main+0x140>
		vertical_PWM = 1900;    // Move PTU up
 80003c6:	f240 736c 	movw	r3, #1900	; 0x76c
 80003ca:	80fb      	strh	r3, [r7, #6]
		} //else if (pinState4 == GPIO_PIN_SET) {
		//vertical_PWM = 1200;    // Move PTU down
		//}

		// Limit the PWM values within desired range
		if (vertical_PWM > 1900) {
 80003cc:	88fb      	ldrh	r3, [r7, #6]
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	f240 726c 	movw	r2, #1900	; 0x76c
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d903      	bls.n	80003e0 <main+0x154>
		vertical_PWM = 1200;
 80003d8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80003dc:	80fb      	strh	r3, [r7, #6]
 80003de:	e007      	b.n	80003f0 <main+0x164>
		}
		else if (vertical_PWM < 1200) {
 80003e0:	88fb      	ldrh	r3, [r7, #6]
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80003e8:	d202      	bcs.n	80003f0 <main+0x164>
		vertical_PWM = 1200;
 80003ea:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80003ee:	80fb      	strh	r3, [r7, #6]
		}


		// Update PTU PWM outputs
		TIM2->CCR1 = vertical_PWM;
 80003f0:	88fb      	ldrh	r3, [r7, #6]
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f8:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = horizontal_PWM;
 80003fa:	88bb      	ldrh	r3, [r7, #4]
 80003fc:	b29a      	uxth	r2, r3
 80003fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000402:	639a      	str	r2, [r3, #56]	; 0x38
	while (1) {
 8000404:	e79c      	b.n	8000340 <main+0xb4>
 8000406:	bf00      	nop
 8000408:	08005aa4 	.word	0x08005aa4
 800040c:	48001015 	.word	0x48001015
 8000410:	2000001c 	.word	0x2000001c
 8000414:	20000188 	.word	0x20000188
 8000418:	2000013c 	.word	0x2000013c
 800041c:	20000084 	.word	0x20000084

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b09e      	sub	sp, #120	; 0x78
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800042a:	2228      	movs	r2, #40	; 0x28
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f005 fb1c 	bl	8005a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
 8000442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000444:	463b      	mov	r3, r7
 8000446:	223c      	movs	r2, #60	; 0x3c
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f005 fb0e 	bl	8005a6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000450:	2303      	movs	r3, #3
 8000452:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000454:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000458:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045e:	2301      	movs	r3, #1
 8000460:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000462:	2310      	movs	r3, #16
 8000464:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000466:	2302      	movs	r3, #2
 8000468:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800046a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800046e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000470:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000474:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000476:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800047a:	4618      	mov	r0, r3
 800047c:	f002 f8dc 	bl	8002638 <HAL_RCC_OscConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000486:	f000 fa45 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048a:	230f      	movs	r3, #15
 800048c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048e:	2302      	movs	r3, #2
 8000490:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004a4:	2101      	movs	r1, #1
 80004a6:	4618      	mov	r0, r3
 80004a8:	f003 f904 	bl	80036b4 <HAL_RCC_ClockConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004b2:	f000 fa2f 	bl	8000914 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <SystemClock_Config+0xc4>)
 80004b8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80004be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004c2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80004c4:	2300      	movs	r3, #0
 80004c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c8:	463b      	mov	r3, r7
 80004ca:	4618      	mov	r0, r3
 80004cc:	f003 fad8 	bl	8003a80 <HAL_RCCEx_PeriphCLKConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0xba>
  {
    Error_Handler();
 80004d6:	f000 fa1d 	bl	8000914 <Error_Handler>
  }
}
 80004da:	bf00      	nop
 80004dc:	3778      	adds	r7, #120	; 0x78
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	00021020 	.word	0x00021020

080004e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_I2C1_Init+0x74>)
 80004ee:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <MX_I2C1_Init+0x78>)
 80004f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80004f2:	4b1a      	ldr	r3, [pc, #104]	; (800055c <MX_I2C1_Init+0x74>)
 80004f4:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <MX_I2C1_Init+0x7c>)
 80004f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_I2C1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_I2C1_Init+0x74>)
 8000500:	2201      	movs	r2, #1
 8000502:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_I2C1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_I2C1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_I2C1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_I2C1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_I2C1_Init+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000522:	480e      	ldr	r0, [pc, #56]	; (800055c <MX_I2C1_Init+0x74>)
 8000524:	f001 f9a8 	bl	8001878 <HAL_I2C_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800052e:	f000 f9f1 	bl	8000914 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000532:	2100      	movs	r1, #0
 8000534:	4809      	ldr	r0, [pc, #36]	; (800055c <MX_I2C1_Init+0x74>)
 8000536:	f001 ff15 	bl	8002364 <HAL_I2CEx_ConfigAnalogFilter>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000540:	f000 f9e8 	bl	8000914 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000544:	2100      	movs	r1, #0
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_I2C1_Init+0x74>)
 8000548:	f001 ff57 	bl	80023fa <HAL_I2CEx_ConfigDigitalFilter>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000552:	f000 f9df 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000084 	.word	0x20000084
 8000560:	40005400 	.word	0x40005400
 8000564:	2000090e 	.word	0x2000090e

08000568 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <MX_SPI1_Init+0x74>)
 800056e:	4a1c      	ldr	r2, [pc, #112]	; (80005e0 <MX_SPI1_Init+0x78>)
 8000570:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000572:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <MX_SPI1_Init+0x74>)
 8000574:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000578:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <MX_SPI1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <MX_SPI1_Init+0x74>)
 8000582:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000586:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <MX_SPI1_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <MX_SPI1_Init+0x74>)
 8000590:	2200      	movs	r2, #0
 8000592:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_SPI1_Init+0x74>)
 8000596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800059a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_SPI1_Init+0x74>)
 800059e:	2208      	movs	r2, #8
 80005a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_SPI1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_SPI1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <MX_SPI1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_SPI1_Init+0x74>)
 80005b6:	2207      	movs	r2, #7
 80005b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <MX_SPI1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_SPI1_Init+0x74>)
 80005c2:	2208      	movs	r2, #8
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_SPI1_Init+0x74>)
 80005c8:	f003 fc0a 	bl	8003de0 <HAL_SPI_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005d2:	f000 f99f 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000d8 	.word	0x200000d8
 80005e0:	40013000 	.word	0x40013000

080005e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000610:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <MX_TIM1_Init+0xe4>)
 8000612:	4a2e      	ldr	r2, [pc, #184]	; (80006cc <MX_TIM1_Init+0xe8>)
 8000614:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8000616:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <MX_TIM1_Init+0xe4>)
 8000618:	222f      	movs	r2, #47	; 0x2f
 800061a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061c:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <MX_TIM1_Init+0xe4>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000622:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <MX_TIM1_Init+0xe4>)
 8000624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000628:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800062a:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <MX_TIM1_Init+0xe4>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <MX_TIM1_Init+0xe4>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000636:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <MX_TIM1_Init+0xe4>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800063c:	4822      	ldr	r0, [pc, #136]	; (80006c8 <MX_TIM1_Init+0xe4>)
 800063e:	f003 fc7a 	bl	8003f36 <HAL_TIM_Base_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000648:	f000 f964 	bl	8000914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	4619      	mov	r1, r3
 8000658:	481b      	ldr	r0, [pc, #108]	; (80006c8 <MX_TIM1_Init+0xe4>)
 800065a:	f004 fa8f 	bl	8004b7c <HAL_TIM_ConfigClockSource>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000664:	f000 f956 	bl	8000914 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000668:	4817      	ldr	r0, [pc, #92]	; (80006c8 <MX_TIM1_Init+0xe4>)
 800066a:	f003 fe13 	bl	8004294 <HAL_TIM_IC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000674:	f000 f94e 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	480f      	ldr	r0, [pc, #60]	; (80006c8 <MX_TIM1_Init+0xe4>)
 800068c:	f005 f8f0 	bl	8005870 <HAL_TIMEx_MasterConfigSynchronization>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000696:	f000 f93d 	bl	8000914 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800069a:	230a      	movs	r3, #10
 800069c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800069e:	2301      	movs	r3, #1
 80006a0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_TIM1_Init+0xe4>)
 80006b2:	f004 f8b2 	bl	800481a <HAL_TIM_IC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80006bc:	f000 f92a 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	3730      	adds	r7, #48	; 0x30
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000013c 	.word	0x2000013c
 80006cc:	40012c00 	.word	0x40012c00

080006d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08a      	sub	sp, #40	; 0x28
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
 80006f0:	615a      	str	r2, [r3, #20]
 80006f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006f4:	4b28      	ldr	r3, [pc, #160]	; (8000798 <MX_TIM2_Init+0xc8>)
 80006f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_TIM2_Init+0xc8>)
 80006fe:	222f      	movs	r2, #47	; 0x2f
 8000700:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <MX_TIM2_Init+0xc8>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_TIM2_Init+0xc8>)
 800070a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800070e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <MX_TIM2_Init+0xc8>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_TIM2_Init+0xc8>)
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800071c:	481e      	ldr	r0, [pc, #120]	; (8000798 <MX_TIM2_Init+0xc8>)
 800071e:	f003 fc61 	bl	8003fe4 <HAL_TIM_PWM_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000728:	f000 f8f4 	bl	8000914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4817      	ldr	r0, [pc, #92]	; (8000798 <MX_TIM2_Init+0xc8>)
 800073c:	f005 f898 	bl	8005870 <HAL_TIMEx_MasterConfigSynchronization>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000746:	f000 f8e5 	bl	8000914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800074a:	2360      	movs	r3, #96	; 0x60
 800074c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 800074e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000752:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800075c:	463b      	mov	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	4619      	mov	r1, r3
 8000762:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_TIM2_Init+0xc8>)
 8000764:	f004 f8f6 	bl	8004954 <HAL_TIM_PWM_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800076e:	f000 f8d1 	bl	8000914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	2204      	movs	r2, #4
 8000776:	4619      	mov	r1, r3
 8000778:	4807      	ldr	r0, [pc, #28]	; (8000798 <MX_TIM2_Init+0xc8>)
 800077a:	f004 f8eb 	bl	8004954 <HAL_TIM_PWM_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000784:	f000 f8c6 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000788:	4803      	ldr	r0, [pc, #12]	; (8000798 <MX_TIM2_Init+0xc8>)
 800078a:	f000 fc5f 	bl	800104c <HAL_TIM_MspPostInit>

}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	; 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000188 	.word	0x20000188

0800079c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_USB_PCD_Init+0x3c>)
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <MX_USB_PCD_Init+0x40>)
 80007a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USB_PCD_Init+0x3c>)
 80007a8:	2208      	movs	r2, #8
 80007aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_USB_PCD_Init+0x3c>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USB_PCD_Init+0x3c>)
 80007b4:	2202      	movs	r2, #2
 80007b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_USB_PCD_Init+0x3c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USB_PCD_Init+0x3c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_USB_PCD_Init+0x3c>)
 80007c6:	f001 fe64 	bl	8002492 <HAL_PCD_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80007d0:	f000 f8a0 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200001d4 	.word	0x200001d4
 80007dc:	40005c00 	.word	0x40005c00

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08c      	sub	sp, #48	; 0x30
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f6:	4b44      	ldr	r3, [pc, #272]	; (8000908 <MX_GPIO_Init+0x128>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a43      	ldr	r2, [pc, #268]	; (8000908 <MX_GPIO_Init+0x128>)
 80007fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b41      	ldr	r3, [pc, #260]	; (8000908 <MX_GPIO_Init+0x128>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	4b3e      	ldr	r3, [pc, #248]	; (8000908 <MX_GPIO_Init+0x128>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a3d      	ldr	r2, [pc, #244]	; (8000908 <MX_GPIO_Init+0x128>)
 8000814:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000818:	6153      	str	r3, [r2, #20]
 800081a:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <MX_GPIO_Init+0x128>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000826:	4b38      	ldr	r3, [pc, #224]	; (8000908 <MX_GPIO_Init+0x128>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a37      	ldr	r2, [pc, #220]	; (8000908 <MX_GPIO_Init+0x128>)
 800082c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000830:	6153      	str	r3, [r2, #20]
 8000832:	4b35      	ldr	r3, [pc, #212]	; (8000908 <MX_GPIO_Init+0x128>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b32      	ldr	r3, [pc, #200]	; (8000908 <MX_GPIO_Init+0x128>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	4a31      	ldr	r2, [pc, #196]	; (8000908 <MX_GPIO_Init+0x128>)
 8000844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000848:	6153      	str	r3, [r2, #20]
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <MX_GPIO_Init+0x128>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <MX_GPIO_Init+0x128>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a2b      	ldr	r2, [pc, #172]	; (8000908 <MX_GPIO_Init+0x128>)
 800085c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000860:	6153      	str	r3, [r2, #20]
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <MX_GPIO_Init+0x128>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_GPIO_Init+0x128>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a25      	ldr	r2, [pc, #148]	; (8000908 <MX_GPIO_Init+0x128>)
 8000874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b23      	ldr	r3, [pc, #140]	; (8000908 <MX_GPIO_Init+0x128>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000886:	2200      	movs	r2, #0
 8000888:	f64f 7108 	movw	r1, #65288	; 0xff08
 800088c:	481f      	ldr	r0, [pc, #124]	; (800090c <MX_GPIO_Init+0x12c>)
 800088e:	f000 ffdb 	bl	8001848 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000892:	2337      	movs	r3, #55	; 0x37
 8000894:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000896:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4819      	ldr	r0, [pc, #100]	; (800090c <MX_GPIO_Init+0x12c>)
 80008a8:	f000 fe3c 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80008ac:	f64f 7308 	movw	r3, #65288	; 0xff08
 80008b0:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <MX_GPIO_Init+0x12c>)
 80008c6:	f000 fe2d 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e0:	f000 fe20 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : left_Pin right_Pin up_Pin down_Pin */
  GPIO_InitStruct.Pin = left_Pin|right_Pin|up_Pin|down_Pin;
 80008e4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_GPIO_Init+0x130>)
 80008fa:	f000 fe13 	bl	8001524 <HAL_GPIO_Init>

}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000
 800090c:	48001000 	.word	0x48001000
 8000910:	48000c00 	.word	0x48000c00

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b0d2      	sub	sp, #328	; 0x148
 8000924:	af04      	add	r7, sp, #16
 8000926:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800092a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800092e:	6018      	str	r0, [r3, #0]

	  /* USER CODE BEGIN 1 */
		uint8_t i2cBuf[2];
		uint8_t accdata[6];
		uint16_t x,y,z;
		uint8_t reg1a = 0x00;
 8000930:	2300      	movs	r3, #0
 8000932:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
		uint8_t reg2a = 0x00;
 8000936:	2300      	movs	r3, #0
 8000938:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
		uint8_t reg4a = 0x00;
 800093c:	2300      	movs	r3, #0
 800093e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

	  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 8000942:	2300      	movs	r3, #0
 8000944:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 8000948:	2300      	movs	r3, #0
 800094a:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135

	  HAL_StatusTypeDef return_value = 0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
	  //CTRL_REG2_A
	  i2cBuf[0]=0x21;
	  i2cBuf[1]=0x38;
	  HAL_I2C_Master_Transmit(&hi2c1, gyro_wr, i2cBuf, 2, 10);
	*/
	  uint8_t reg_1 = 0b00001111;
 8000954:	230f      	movs	r3, #15
 8000956:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	  // Enable x, y, z and turn off power down:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 800095a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800095e:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8000962:	230a      	movs	r3, #10
 8000964:	9302      	str	r3, [sp, #8]
 8000966:	2301      	movs	r3, #1
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	f207 1319 	addw	r3, r7, #281	; 0x119
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2301      	movs	r3, #1
 8000972:	2220      	movs	r2, #32
 8000974:	21d2      	movs	r1, #210	; 0xd2
 8000976:	6800      	ldr	r0, [r0, #0]
 8000978:	f001 f80e 	bl	8001998 <HAL_I2C_Mem_Write>


	  uint8_t reg_2 = 0b00000000;
 800097c:	2300      	movs	r3, #0
 800097e:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	  // If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 8000982:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000986:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 800098a:	230a      	movs	r3, #10
 800098c:	9302      	str	r3, [sp, #8]
 800098e:	2301      	movs	r3, #1
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	2301      	movs	r3, #1
 800099a:	2221      	movs	r2, #33	; 0x21
 800099c:	21d2      	movs	r1, #210	; 0xd2
 800099e:	6800      	ldr	r0, [r0, #0]
 80009a0:	f000 fffa 	bl	8001998 <HAL_I2C_Mem_Write>


	  // Configure CTRL_REG3 to generate data ready interrupt on INT2
	  // No interrupts used on INT1, if you'd like to configure INT1
	  // or INT2 otherwise, consult the datasheet:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 80009a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009a8:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 80009ac:	230a      	movs	r3, #10
 80009ae:	9302      	str	r3, [sp, #8]
 80009b0:	2301      	movs	r3, #1
 80009b2:	9301      	str	r3, [sp, #4]
 80009b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2301      	movs	r3, #1
 80009bc:	2222      	movs	r2, #34	; 0x22
 80009be:	21d2      	movs	r1, #210	; 0xd2
 80009c0:	6800      	ldr	r0, [r0, #0]
 80009c2:	f000 ffe9 	bl	8001998 <HAL_I2C_Mem_Write>




	  //trying to read from the same registers where we wrote in
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x20,1,&reg1a,1,10);
 80009c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009ca:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 80009ce:	230a      	movs	r3, #10
 80009d0:	9302      	str	r3, [sp, #8]
 80009d2:	2301      	movs	r3, #1
 80009d4:	9301      	str	r3, [sp, #4]
 80009d6:	f207 131b 	addw	r3, r7, #283	; 0x11b
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2301      	movs	r3, #1
 80009de:	2220      	movs	r2, #32
 80009e0:	21d3      	movs	r1, #211	; 0xd3
 80009e2:	6800      	ldr	r0, [r0, #0]
 80009e4:	f001 f8ec 	bl	8001bc0 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x21,1,&reg2a,1,10);
 80009e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009ec:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 80009f0:	230a      	movs	r3, #10
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	2301      	movs	r3, #1
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	f507 738d 	add.w	r3, r7, #282	; 0x11a
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2301      	movs	r3, #1
 8000a00:	2221      	movs	r2, #33	; 0x21
 8000a02:	21d3      	movs	r1, #211	; 0xd3
 8000a04:	6800      	ldr	r0, [r0, #0]
 8000a06:	f001 f8db 	bl	8001bc0 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1,ACC_I2C_ADDRESS_READ,0x23,1,&reg4a,1,10);

	*/

	//uint8_t status = 0x00;
	uint8_t ready = 0x00;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
	uint8_t return_status = 0x00;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132

	uint8_t val_1[2];
	uint16_t* val_1p = &val_1[0];
 8000a16:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000a1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	val_1p = 0x00;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint8_t text_buffer[255];

	uint16_t val_2 = 0x00;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	uint16_t val_3 = 0x00;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128

	uint8_t Text[] = "Hello\r\n";
 8000a30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000a38:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <initialise_ptu_i2c+0x160>)
 8000a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a3e:	e883 0003 	stmia.w	r3, {r0, r1}
//	BSP_LED_Toggle(LED_GREEN);
	//BSP_GYRO_Init();
	//BSP_ACCELERO_Init();

	// reset lidar board
	uint8_t reset_value = 0x00;
 8000a42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a46:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000a4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a52:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8000a56:	230a      	movs	r3, #10
 8000a58:	9302      	str	r3, [sp, #8]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	f107 030b 	add.w	r3, r7, #11
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2301      	movs	r3, #1
 8000a66:	2200      	movs	r2, #0
 8000a68:	21c4      	movs	r1, #196	; 0xc4
 8000a6a:	6800      	ldr	r0, [r0, #0]
 8000a6c:	f000 ff94 	bl	8001998 <HAL_I2C_Mem_Write>
 8000a70:	4603      	mov	r3, r0
 8000a72:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
	//return_value = HAL_I2C_Mem_Write(&hi2c1, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);




}
 8000a76:	bf00      	nop
 8000a78:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	08005ae4 	.word	0x08005ae4

08000a84 <CheckSequence>:
volatile int nest = 0;
volatile int timer_expired = 0; // Timer expiration flag
volatile int first_timer = 0;
volatile int timer_initialised = 0;

void CheckSequence(uint8_t *input){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b096      	sub	sp, #88	; 0x58
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	char seq[7];
	int i;
	if (count == 1){
 8000a8c:	4b43      	ldr	r3, [pc, #268]	; (8000b9c <CheckSequence+0x118>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d106      	bne.n	8000aa2 <CheckSequence+0x1e>
		strcpy(seq, seq1);
 8000a94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a98:	4941      	ldr	r1, [pc, #260]	; (8000ba0 <CheckSequence+0x11c>)
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 ffee 	bl	8005a7c <strcpy>
 8000aa0:	e01f      	b.n	8000ae2 <CheckSequence+0x5e>
	}
	else if (count == 2){
 8000aa2:	4b3e      	ldr	r3, [pc, #248]	; (8000b9c <CheckSequence+0x118>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d106      	bne.n	8000ab8 <CheckSequence+0x34>
		strcpy(seq, seq2);
 8000aaa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000aae:	493d      	ldr	r1, [pc, #244]	; (8000ba4 <CheckSequence+0x120>)
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f004 ffe3 	bl	8005a7c <strcpy>
 8000ab6:	e014      	b.n	8000ae2 <CheckSequence+0x5e>
	}
	else if (count == 3){
 8000ab8:	4b38      	ldr	r3, [pc, #224]	; (8000b9c <CheckSequence+0x118>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	d106      	bne.n	8000ace <CheckSequence+0x4a>
		strcpy(seq, seq3);
 8000ac0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ac4:	4938      	ldr	r1, [pc, #224]	; (8000ba8 <CheckSequence+0x124>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f004 ffd8 	bl	8005a7c <strcpy>
 8000acc:	e009      	b.n	8000ae2 <CheckSequence+0x5e>
	}
	else if (count == 4){
 8000ace:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <CheckSequence+0x118>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	d105      	bne.n	8000ae2 <CheckSequence+0x5e>
		strcpy(seq, seq4);
 8000ad6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ada:	4934      	ldr	r1, [pc, #208]	; (8000bac <CheckSequence+0x128>)
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 ffcd 	bl	8005a7c <strcpy>
	}

	uint8_t fail_message[32] = "Fail\n";
 8000ae2:	4a33      	ldr	r2, [pc, #204]	; (8000bb0 <CheckSequence+0x12c>)
 8000ae4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aec:	6018      	str	r0, [r3, #0]
 8000aee:	3304      	adds	r3, #4
 8000af0:	8019      	strh	r1, [r3, #0]
 8000af2:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
 8000b02:	615a      	str	r2, [r3, #20]
 8000b04:	831a      	strh	r2, [r3, #24]
	uint8_t pass_message[32] = "Success\n";
 8000b06:	4a2b      	ldr	r2, [pc, #172]	; (8000bb4 <CheckSequence+0x130>)
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b0e:	c303      	stmia	r3!, {r0, r1}
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	f107 0315 	add.w	r3, r7, #21
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
 8000b22:	f8c3 2013 	str.w	r2, [r3, #19]

	char current_char;
	for (i = 0; i < count; i++){
 8000b26:	2300      	movs	r3, #0
 8000b28:	657b      	str	r3, [r7, #84]	; 0x54
 8000b2a:	e01b      	b.n	8000b64 <CheckSequence+0xe0>
		current_char = (char)input[i];
 8000b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		if (current_char != seq[i]){
 8000b38:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b3e:	4413      	add	r3, r2
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d009      	beq.n	8000b5e <CheckSequence+0xda>
			SerialOutputString(fail_message, &USART1_PORT);
 8000b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b4e:	491a      	ldr	r1, [pc, #104]	; (8000bb8 <CheckSequence+0x134>)
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f8d6 	bl	8000d02 <SerialOutputString>
			substage_state = 0;
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <CheckSequence+0x138>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
			break;
 8000b5c:	e007      	b.n	8000b6e <CheckSequence+0xea>
	for (i = 0; i < count; i++){
 8000b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b60:	3301      	adds	r3, #1
 8000b62:	657b      	str	r3, [r7, #84]	; 0x54
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <CheckSequence+0x118>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dbde      	blt.n	8000b2c <CheckSequence+0xa8>
		}
	}

	if (substage_state == 1){
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <CheckSequence+0x138>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d10d      	bne.n	8000b92 <CheckSequence+0x10e>
		SerialOutputString(pass_message, &USART1_PORT);
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	490f      	ldr	r1, [pc, #60]	; (8000bb8 <CheckSequence+0x134>)
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f8c0 	bl	8000d02 <SerialOutputString>
		count ++;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <CheckSequence+0x118>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	3301      	adds	r3, #1
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <CheckSequence+0x118>)
 8000b8a:	6013      	str	r3, [r2, #0]
		next_stage = 1;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <CheckSequence+0x13c>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	601a      	str	r2, [r3, #0]
	}
}
 8000b92:	bf00      	nop
 8000b94:	3758      	adds	r7, #88	; 0x58
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200004cc 	.word	0x200004cc
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000004 	.word	0x20000004
 8000ba8:	2000000c 	.word	0x2000000c
 8000bac:	20000014 	.word	0x20000014
 8000bb0:	08005aec 	.word	0x08005aec
 8000bb4:	08005b0c 	.word	0x08005b0c
 8000bb8:	2000001c 	.word	0x2000001c
 8000bbc:	200004c8 	.word	0x200004c8
 8000bc0:	200004d0 	.word	0x200004d0

08000bc4 <TIM3_IRQHandler>:
    	TIM3->CR1 |= TIM_CR1_CEN;
    }

}

void TIM3_IRQHandler() {
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
	if (first_timer == 0) {
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <TIM3_IRQHandler+0x5c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d109      	bne.n	8000be4 <TIM3_IRQHandler+0x20>
		first_timer = 1;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <TIM3_IRQHandler+0x5c>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]
		TIM3->SR &= ~TIM_SR_UIF; // Put down the overflow flag
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <TIM3_IRQHandler+0x60>)
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <TIM3_IRQHandler+0x60>)
 8000bdc:	f023 0301 	bic.w	r3, r3, #1
 8000be0:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_UIF; // Put down the overflow flag
		TIM3->CR1 &= ~TIM_CR1_CEN; // Disable the timer
		TIM3->CNT = 0; // Reset the timer counter
		timer_expired = 1;
	}
}
 8000be2:	e017      	b.n	8000c14 <TIM3_IRQHandler+0x50>
	else if ((TIM3->SR & TIM_SR_UIF) != 0) {
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <TIM3_IRQHandler+0x60>)
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d011      	beq.n	8000c14 <TIM3_IRQHandler+0x50>
		TIM3->SR &= ~TIM_SR_UIF; // Put down the overflow flag
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <TIM3_IRQHandler+0x60>)
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <TIM3_IRQHandler+0x60>)
 8000bf6:	f023 0301 	bic.w	r3, r3, #1
 8000bfa:	6113      	str	r3, [r2, #16]
		TIM3->CR1 &= ~TIM_CR1_CEN; // Disable the timer
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <TIM3_IRQHandler+0x60>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <TIM3_IRQHandler+0x60>)
 8000c02:	f023 0301 	bic.w	r3, r3, #1
 8000c06:	6013      	str	r3, [r2, #0]
		TIM3->CNT = 0; // Reset the timer counter
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <TIM3_IRQHandler+0x60>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
		timer_expired = 1;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <TIM3_IRQHandler+0x64>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200004d8 	.word	0x200004d8
 8000c24:	40000400 	.word	0x40000400
 8000c28:	200004d4 	.word	0x200004d4

08000c2c <SerialInitialise>:



// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <SerialInitialise+0xa0>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a24      	ldr	r2, [pc, #144]	; (8000ccc <SerialInitialise+0xa0>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000c42:	4b22      	ldr	r3, [pc, #136]	; (8000ccc <SerialInitialise+0xa0>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <SerialInitialise+0xa0>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	6a1b      	ldr	r3, [r3, #32]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d106      	bne.n	8000c64 <SerialInitialise+0x38>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <SerialInitialise+0xa0>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <SerialInitialise+0xa0>)
 8000c5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c60:	6153      	str	r3, [r2, #20]
		break;
 8000c62:	e000      	b.n	8000c66 <SerialInitialise+0x3a>
	default:
		break;
 8000c64:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000c6e:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000c78:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7e:	683a      	ldr	r2, [r7, #0]
 8000c80:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	69d9      	ldr	r1, [r3, #28]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	430a      	orrs	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	60fb      	str	r3, [r7, #12]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d104      	bne.n	8000cb0 <SerialInitialise+0x84>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000cac:	801a      	strh	r2, [r3, #0]
		break;
 8000cae:	bf00      	nop
	}

	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f042 020d 	orr.w	r2, r2, #13
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <SerialOutputChar>:
    NVIC_EnableIRQ(USART1_IRQn);

    __enable_irq(); // Re-enable all interrupts now that we are finished editing settings.
}

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8000cdc:	bf00      	nop
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f8      	beq.n	8000cde <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	79fa      	ldrb	r2, [r7, #7]
 8000cf2:	b292      	uxth	r2, r2
 8000cf4:	801a      	strh	r2, [r3, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <SerialOutputString>:

void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b084      	sub	sp, #16
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000d10:	e00b      	b.n	8000d2a <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	6839      	ldr	r1, [r7, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ffd9 	bl	8000cd0 <SerialOutputChar>
		counter++;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	3301      	adds	r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
		pt++;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3301      	adds	r3, #1
 8000d28:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1ef      	bne.n	8000d12 <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	4798      	blx	r3
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <SerialInputSequence>:



void SerialInputSequence(SerialPort *serial_port) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
		if (rx_index < 32) {
 8000d54:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <SerialInputSequence+0x9c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b1f      	cmp	r3, #31
 8000d5c:	d82d      	bhi.n	8000dba <SerialInputSequence+0x6e>
			uint8_t rx_data = *(serial_port->DataInputRegister);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	73fb      	strb	r3, [r7, #15]

			// exit if new line is detected
			if (rx_data == CARRIAGE_RETURN) {
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	2b0d      	cmp	r3, #13
 8000d6c:	d113      	bne.n	8000d96 <SerialInputSequence+0x4a>
				// disable receive interrupt
				*(serial_port->ControlRegister1) &= ~USART_CR1_RXNEIE;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f022 0220 	bic.w	r2, r2, #32
 8000d7c:	601a      	str	r2, [r3, #0]

				CheckSequence(rx_buffer);
 8000d7e:	481b      	ldr	r0, [pc, #108]	; (8000dec <SerialInputSequence+0xa0>)
 8000d80:	f7ff fe80 	bl	8000a84 <CheckSequence>

				// reset index & buffer
				rx_index = 0;
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <SerialInputSequence+0x9c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
				memset(rx_buffer, 0, sizeof(rx_buffer));
 8000d8a:	2240      	movs	r2, #64	; 0x40
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4817      	ldr	r0, [pc, #92]	; (8000dec <SerialInputSequence+0xa0>)
 8000d90:	f004 fe6c 	bl	8005a6c <memset>

			// reset index & buffer
			rx_index = 0;
			memset(rx_buffer, 0, sizeof(rx_buffer));
		}
}
 8000d94:	e024      	b.n	8000de0 <SerialInputSequence+0x94>
			else if (rx_data == LINE_FEED){
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	2b0a      	cmp	r3, #10
 8000d9a:	d021      	beq.n	8000de0 <SerialInputSequence+0x94>
				rx_buffer[rx_index]= rx_data;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <SerialInputSequence+0x9c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	4619      	mov	r1, r3
 8000da4:	4a11      	ldr	r2, [pc, #68]	; (8000dec <SerialInputSequence+0xa0>)
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	5453      	strb	r3, [r2, r1]
				rx_index++;
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <SerialInputSequence+0x9c>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	3301      	adds	r3, #1
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <SerialInputSequence+0x9c>)
 8000db6:	701a      	strb	r2, [r3, #0]
}
 8000db8:	e012      	b.n	8000de0 <SerialInputSequence+0x94>
			*(serial_port->ControlRegister1) &= ~USART_CR1_RXNEIE;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f022 0220 	bic.w	r2, r2, #32
 8000dc8:	601a      	str	r2, [r3, #0]
			CheckSequence(rx_buffer);
 8000dca:	4808      	ldr	r0, [pc, #32]	; (8000dec <SerialInputSequence+0xa0>)
 8000dcc:	f7ff fe5a 	bl	8000a84 <CheckSequence>
			rx_index = 0;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SerialInputSequence+0x9c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8000dd6:	2240      	movs	r2, #64	; 0x40
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <SerialInputSequence+0xa0>)
 8000ddc:	f004 fe46 	bl	8005a6c <memset>
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000051c 	.word	0x2000051c
 8000dec:	200004dc 	.word	0x200004dc

08000df0 <USART1_IRQHandler>:
		rx_index++;
	}
}

void USART1_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~TIM_CR1_CEN; // Disable the timer
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <USART1_IRQHandler+0x20>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <USART1_IRQHandler+0x20>)
 8000dfa:	f023 0301 	bic.w	r3, r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]
	TIM3->CNT = 0; // Reset the timer counter
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <USART1_IRQHandler+0x20>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
	SerialInputSequence(&USART1_PORT);
 8000e06:	4803      	ldr	r0, [pc, #12]	; (8000e14 <USART1_IRQHandler+0x24>)
 8000e08:	f7ff ffa0 	bl	8000d4c <SerialInputSequence>
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40000400 	.word	0x40000400
 8000e14:	2000001c 	.word	0x2000001c

08000e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_MspInit+0x44>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <HAL_MspInit+0x44>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6193      	str	r3, [r2, #24]
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_MspInit+0x44>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_MspInit+0x44>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_MspInit+0x44>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	61d3      	str	r3, [r2, #28]
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_MspInit+0x44>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e4e:	2007      	movs	r0, #7
 8000e50:	f000 fb26 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a17      	ldr	r2, [pc, #92]	; (8000edc <HAL_I2C_MspInit+0x7c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d127      	bne.n	8000ed2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_I2C_MspInit+0x80>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a16      	ldr	r2, [pc, #88]	; (8000ee0 <HAL_I2C_MspInit+0x80>)
 8000e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_I2C_MspInit+0x80>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000e9a:	23c0      	movs	r3, #192	; 0xc0
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9e:	2312      	movs	r3, #18
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <HAL_I2C_MspInit+0x84>)
 8000eb6:	f000 fb35 	bl	8001524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_I2C_MspInit+0x80>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_I2C_MspInit+0x80>)
 8000ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec4:	61d3      	str	r3, [r2, #28]
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_I2C_MspInit+0x80>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	48000400 	.word	0x48000400

08000ee8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <HAL_SPI_MspInit+0x7c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d128      	bne.n	8000f5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <HAL_SPI_MspInit+0x80>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <HAL_SPI_MspInit+0x80>)
 8000f10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f14:	6193      	str	r3, [r2, #24]
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_SPI_MspInit+0x80>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_SPI_MspInit+0x80>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_SPI_MspInit+0x80>)
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	6153      	str	r3, [r2, #20]
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_SPI_MspInit+0x80>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000f3a:	23e0      	movs	r3, #224	; 0xe0
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f000 fae4 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	3728      	adds	r7, #40	; 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40013000 	.word	0x40013000
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <HAL_TIM_Base_MspInit+0x90>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d131      	bne.n	8000ff2 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_TIM_Base_MspInit+0x94>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <HAL_TIM_Base_MspInit+0x94>)
 8000f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_TIM_Base_MspInit+0x94>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <HAL_TIM_Base_MspInit+0x94>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a15      	ldr	r2, [pc, #84]	; (8001000 <HAL_TIM_Base_MspInit+0x94>)
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <HAL_TIM_Base_MspInit+0x94>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fd0:	2306      	movs	r3, #6
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f000 faa1 	bl	8001524 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	201b      	movs	r0, #27
 8000fe8:	f000 fa65 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fec:	201b      	movs	r0, #27
 8000fee:	f000 fa7e 	bl	80014ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40012c00 	.word	0x40012c00
 8001000:	40021000 	.word	0x40021000

08001004 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001014:	d113      	bne.n	800103e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_TIM_PWM_MspInit+0x44>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_TIM_PWM_MspInit+0x44>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_TIM_PWM_MspInit+0x44>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	201c      	movs	r0, #28
 8001034:	f000 fa3f 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001038:	201c      	movs	r0, #28
 800103a:	f000 fa58 	bl	80014ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106c:	d11d      	bne.n	80010aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_TIM_MspPostInit+0x68>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <HAL_TIM_MspPostInit+0x68>)
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	6153      	str	r3, [r2, #20]
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_TIM_MspPostInit+0x68>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001086:	f248 0302 	movw	r3, #32770	; 0x8002
 800108a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001098:	2301      	movs	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a6:	f000 fa3d 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010aa:	bf00      	nop
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <HAL_PCD_MspInit+0x80>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d129      	bne.n	800112e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_PCD_MspInit+0x84>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4a17      	ldr	r2, [pc, #92]	; (800113c <HAL_PCD_MspInit+0x84>)
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	6153      	str	r3, [r2, #20]
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_PCD_MspInit+0x84>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80010f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001104:	230e      	movs	r3, #14
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001112:	f000 fa07 	bl	8001524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_PCD_MspInit+0x84>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_PCD_MspInit+0x84>)
 800111c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_PCD_MspInit+0x84>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	; 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40005c00 	.word	0x40005c00
 800113c:	40021000 	.word	0x40021000

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <NMI_Handler+0x4>

08001146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <HardFault_Handler+0x4>

0800114c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <MemManage_Handler+0x4>

08001152 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <UsageFault_Handler+0x4>

0800115e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118c:	f000 f898 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <TIM1_CC_IRQHandler+0x10>)
 800119a:	f003 fa1f 	bl	80045dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000013c 	.word	0x2000013c

080011a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <TIM2_IRQHandler+0x10>)
 80011ae:	f003 fa15 	bl	80045dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000188 	.word	0x20000188

080011bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <SystemInit+0x20>)
 80011c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <SystemInit+0x20>)
 80011c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001218 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e4:	f7ff ffea 	bl	80011bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <LoopForever+0x6>)
  ldr r1, =_edata
 80011ea:	490d      	ldr	r1, [pc, #52]	; (8001220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <LoopForever+0xe>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f0:	e002      	b.n	80011f8 <LoopCopyDataInit>

080011f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f6:	3304      	adds	r3, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011fc:	d3f9      	bcc.n	80011f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001200:	4c0a      	ldr	r4, [pc, #40]	; (800122c <LoopForever+0x16>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001204:	e001      	b.n	800120a <LoopFillZerobss>

08001206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001208:	3204      	adds	r2, #4

0800120a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800120c:	d3fb      	bcc.n	8001206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120e:	f004 fc09 	bl	8005a24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001212:	f7ff f83b 	bl	800028c <main>

08001216 <LoopForever>:

LoopForever:
    b LoopForever
 8001216:	e7fe      	b.n	8001216 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001218:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001224:	08005bc4 	.word	0x08005bc4
  ldr r2, =_sbss
 8001228:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800122c:	20000524 	.word	0x20000524

08001230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC1_2_IRQHandler>
	...

08001234 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x28>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x28>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f92b 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fde2 	bl	8000e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40022000 	.word	0x40022000

08001260 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f943 	bl	800150a <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129c:	f000 f90b 	bl	80014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000005c 	.word	0x2000005c
 80012b8:	20000064 	.word	0x20000064
 80012bc:	20000060 	.word	0x20000060

080012c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000064 	.word	0x20000064
 80012e4:	20000520 	.word	0x20000520

080012e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000520 	.word	0x20000520

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4907      	ldr	r1, [pc, #28]	; (800139c <__NVIC_EnableIRQ+0x38>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	; (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	; (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001480:	f7ff ff8e 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff29 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff3e 	bl	8001348 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff8e 	bl	80013f4 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5d 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff31 	bl	8001364 <__NVIC_EnableIRQ>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffa2 	bl	800145c <SysTick_Config>
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001532:	e154      	b.n	80017de <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2101      	movs	r1, #1
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8146 	beq.w	80017d8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d005      	beq.n	8001564 <HAL_GPIO_Init+0x40>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d130      	bne.n	80015c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800159a:	2201      	movs	r2, #1
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	f003 0201 	and.w	r2, r3, #1
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d017      	beq.n	8001602 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d123      	bne.n	8001656 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	08da      	lsrs	r2, r3, #3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3208      	adds	r2, #8
 8001616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	6939      	ldr	r1, [r7, #16]
 8001652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 0203 	and.w	r2, r3, #3
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 80a0 	beq.w	80017d8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001698:	4b58      	ldr	r3, [pc, #352]	; (80017fc <HAL_GPIO_Init+0x2d8>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a57      	ldr	r2, [pc, #348]	; (80017fc <HAL_GPIO_Init+0x2d8>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b55      	ldr	r3, [pc, #340]	; (80017fc <HAL_GPIO_Init+0x2d8>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016b0:	4a53      	ldr	r2, [pc, #332]	; (8001800 <HAL_GPIO_Init+0x2dc>)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	089b      	lsrs	r3, r3, #2
 80016b6:	3302      	adds	r3, #2
 80016b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	220f      	movs	r2, #15
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016da:	d019      	beq.n	8001710 <HAL_GPIO_Init+0x1ec>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a49      	ldr	r2, [pc, #292]	; (8001804 <HAL_GPIO_Init+0x2e0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d013      	beq.n	800170c <HAL_GPIO_Init+0x1e8>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a48      	ldr	r2, [pc, #288]	; (8001808 <HAL_GPIO_Init+0x2e4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d00d      	beq.n	8001708 <HAL_GPIO_Init+0x1e4>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a47      	ldr	r2, [pc, #284]	; (800180c <HAL_GPIO_Init+0x2e8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d007      	beq.n	8001704 <HAL_GPIO_Init+0x1e0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a46      	ldr	r2, [pc, #280]	; (8001810 <HAL_GPIO_Init+0x2ec>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d101      	bne.n	8001700 <HAL_GPIO_Init+0x1dc>
 80016fc:	2304      	movs	r3, #4
 80016fe:	e008      	b.n	8001712 <HAL_GPIO_Init+0x1ee>
 8001700:	2305      	movs	r3, #5
 8001702:	e006      	b.n	8001712 <HAL_GPIO_Init+0x1ee>
 8001704:	2303      	movs	r3, #3
 8001706:	e004      	b.n	8001712 <HAL_GPIO_Init+0x1ee>
 8001708:	2302      	movs	r3, #2
 800170a:	e002      	b.n	8001712 <HAL_GPIO_Init+0x1ee>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_GPIO_Init+0x1ee>
 8001710:	2300      	movs	r3, #0
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	f002 0203 	and.w	r2, r2, #3
 8001718:	0092      	lsls	r2, r2, #2
 800171a:	4093      	lsls	r3, r2
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001722:	4937      	ldr	r1, [pc, #220]	; (8001800 <HAL_GPIO_Init+0x2dc>)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001730:	4b38      	ldr	r3, [pc, #224]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001754:	4a2f      	ldr	r2, [pc, #188]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800177e:	4a25      	ldr	r2, [pc, #148]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017a8:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017d2:	4a10      	ldr	r2, [pc, #64]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3301      	adds	r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	fa22 f303 	lsr.w	r3, r2, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f47f aea3 	bne.w	8001534 <HAL_GPIO_Init+0x10>
  }
}
 80017ee:	bf00      	nop
 80017f0:	bf00      	nop
 80017f2:	371c      	adds	r7, #28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000
 8001804:	48000400 	.word	0x48000400
 8001808:	48000800 	.word	0x48000800
 800180c:	48000c00 	.word	0x48000c00
 8001810:	48001000 	.word	0x48001000
 8001814:	40010400 	.word	0x40010400

08001818 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	887b      	ldrh	r3, [r7, #2]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e001      	b.n	800183a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800183a:	7bfb      	ldrb	r3, [r7, #15]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
 8001854:	4613      	mov	r3, r2
 8001856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001858:	787b      	ldrb	r3, [r7, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001864:	e002      	b.n	800186c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e081      	b.n	800198e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fade 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2224      	movs	r2, #36	; 0x24
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0201 	bic.w	r2, r2, #1
 80018ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d107      	bne.n	80018f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	e006      	b.n	8001900 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d104      	bne.n	8001912 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001910:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001924:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001934:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691a      	ldr	r2, [r3, #16]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69d9      	ldr	r1, [r3, #28]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1a      	ldr	r2, [r3, #32]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2220      	movs	r2, #32
 800197a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af02      	add	r7, sp, #8
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	4608      	mov	r0, r1
 80019a2:	4611      	mov	r1, r2
 80019a4:	461a      	mov	r2, r3
 80019a6:	4603      	mov	r3, r0
 80019a8:	817b      	strh	r3, [r7, #10]
 80019aa:	460b      	mov	r3, r1
 80019ac:	813b      	strh	r3, [r7, #8]
 80019ae:	4613      	mov	r3, r2
 80019b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	f040 80f9 	bne.w	8001bb2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <HAL_I2C_Mem_Write+0x34>
 80019c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0ed      	b.n	8001bb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_I2C_Mem_Write+0x4e>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e0e6      	b.n	8001bb4 <HAL_I2C_Mem_Write+0x21c>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80019ee:	f7ff fc7b 	bl	80012e8 <HAL_GetTick>
 80019f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2319      	movs	r3, #25
 80019fa:	2201      	movs	r2, #1
 80019fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 fac3 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0d1      	b.n	8001bb4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2221      	movs	r2, #33	; 0x21
 8001a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a3a      	ldr	r2, [r7, #32]
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a38:	88f8      	ldrh	r0, [r7, #6]
 8001a3a:	893a      	ldrh	r2, [r7, #8]
 8001a3c:	8979      	ldrh	r1, [r7, #10]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	4603      	mov	r3, r0
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 f9d3 	bl	8001df4 <I2C_RequestMemoryWrite>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0a9      	b.n	8001bb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2bff      	cmp	r3, #255	; 0xff
 8001a68:	d90e      	bls.n	8001a88 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	22ff      	movs	r2, #255	; 0xff
 8001a6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	8979      	ldrh	r1, [r7, #10]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 fc3d 	bl	8002300 <I2C_TransferConfig>
 8001a86:	e00f      	b.n	8001aa8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	8979      	ldrh	r1, [r7, #10]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fc2c 	bl	8002300 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 fabc 	bl	800202a <I2C_WaitOnTXISFlagUntilTimeout>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e07b      	b.n	8001bb4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d034      	beq.n	8001b60 <HAL_I2C_Mem_Write+0x1c8>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d130      	bne.n	8001b60 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b04:	2200      	movs	r2, #0
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 fa3f 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e04d      	b.n	8001bb4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	2bff      	cmp	r3, #255	; 0xff
 8001b20:	d90e      	bls.n	8001b40 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	22ff      	movs	r2, #255	; 0xff
 8001b26:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	8979      	ldrh	r1, [r7, #10]
 8001b30:	2300      	movs	r3, #0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 fbe1 	bl	8002300 <I2C_TransferConfig>
 8001b3e:	e00f      	b.n	8001b60 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	8979      	ldrh	r1, [r7, #10]
 8001b52:	2300      	movs	r3, #0
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 fbd0 	bl	8002300 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d19e      	bne.n	8001aa8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 faa2 	bl	80020b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e01a      	b.n	8001bb4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2220      	movs	r2, #32
 8001b84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_I2C_Mem_Write+0x224>)
 8001b92:	400b      	ands	r3, r1
 8001b94:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e000      	b.n	8001bb4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
  }
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	fe00e800 	.word	0xfe00e800

08001bc0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4611      	mov	r1, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4603      	mov	r3, r0
 8001bd0:	817b      	strh	r3, [r7, #10]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	813b      	strh	r3, [r7, #8]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	f040 80fd 	bne.w	8001de2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <HAL_I2C_Mem_Read+0x34>
 8001bee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bfa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0f1      	b.n	8001de4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <HAL_I2C_Mem_Read+0x4e>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e0ea      	b.n	8001de4 <HAL_I2C_Mem_Read+0x224>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c16:	f7ff fb67 	bl	80012e8 <HAL_GetTick>
 8001c1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2319      	movs	r3, #25
 8001c22:	2201      	movs	r2, #1
 8001c24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f9af 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0d5      	b.n	8001de4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2222      	movs	r2, #34	; 0x22
 8001c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2240      	movs	r2, #64	; 0x40
 8001c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6a3a      	ldr	r2, [r7, #32]
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c60:	88f8      	ldrh	r0, [r7, #6]
 8001c62:	893a      	ldrh	r2, [r7, #8]
 8001c64:	8979      	ldrh	r1, [r7, #10]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	4603      	mov	r3, r0
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f913 	bl	8001e9c <I2C_RequestMemoryRead>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0ad      	b.n	8001de4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	2bff      	cmp	r3, #255	; 0xff
 8001c90:	d90e      	bls.n	8001cb0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	22ff      	movs	r2, #255	; 0xff
 8001c96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	8979      	ldrh	r1, [r7, #10]
 8001ca0:	4b52      	ldr	r3, [pc, #328]	; (8001dec <HAL_I2C_Mem_Read+0x22c>)
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 fb29 	bl	8002300 <I2C_TransferConfig>
 8001cae:	e00f      	b.n	8001cd0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	8979      	ldrh	r1, [r7, #10]
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_I2C_Mem_Read+0x22c>)
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 fb18 	bl	8002300 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2104      	movs	r1, #4
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f956 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e07c      	b.n	8001de4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d034      	beq.n	8001d90 <HAL_I2C_Mem_Read+0x1d0>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d130      	bne.n	8001d90 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d34:	2200      	movs	r2, #0
 8001d36:	2180      	movs	r1, #128	; 0x80
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 f927 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e04d      	b.n	8001de4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2bff      	cmp	r3, #255	; 0xff
 8001d50:	d90e      	bls.n	8001d70 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	22ff      	movs	r2, #255	; 0xff
 8001d56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	8979      	ldrh	r1, [r7, #10]
 8001d60:	2300      	movs	r3, #0
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 fac9 	bl	8002300 <I2C_TransferConfig>
 8001d6e:	e00f      	b.n	8001d90 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	8979      	ldrh	r1, [r7, #10]
 8001d82:	2300      	movs	r3, #0
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 fab8 	bl	8002300 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d19a      	bne.n	8001cd0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 f98a 	bl	80020b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e01a      	b.n	8001de4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2220      	movs	r2, #32
 8001db4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6859      	ldr	r1, [r3, #4]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_I2C_Mem_Read+0x230>)
 8001dc2:	400b      	ands	r3, r1
 8001dc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e000      	b.n	8001de4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001de2:	2302      	movs	r3, #2
  }
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	80002400 	.word	0x80002400
 8001df0:	fe00e800 	.word	0xfe00e800

08001df4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	4608      	mov	r0, r1
 8001dfe:	4611      	mov	r1, r2
 8001e00:	461a      	mov	r2, r3
 8001e02:	4603      	mov	r3, r0
 8001e04:	817b      	strh	r3, [r7, #10]
 8001e06:	460b      	mov	r3, r1
 8001e08:	813b      	strh	r3, [r7, #8]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	8979      	ldrh	r1, [r7, #10]
 8001e14:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <I2C_RequestMemoryWrite+0xa4>)
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 fa6f 	bl	8002300 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	69b9      	ldr	r1, [r7, #24]
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f000 f8ff 	bl	800202a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e02c      	b.n	8001e90 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e36:	88fb      	ldrh	r3, [r7, #6]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d105      	bne.n	8001e48 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e3c:	893b      	ldrh	r3, [r7, #8]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28
 8001e46:	e015      	b.n	8001e74 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e48:	893b      	ldrh	r3, [r7, #8]
 8001e4a:	0a1b      	lsrs	r3, r3, #8
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	69b9      	ldr	r1, [r7, #24]
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f8e5 	bl	800202a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e012      	b.n	8001e90 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e6a:	893b      	ldrh	r3, [r7, #8]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2180      	movs	r1, #128	; 0x80
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f884 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	80002000 	.word	0x80002000

08001e9c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af02      	add	r7, sp, #8
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	4608      	mov	r0, r1
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	817b      	strh	r3, [r7, #10]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	813b      	strh	r3, [r7, #8]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	8979      	ldrh	r1, [r7, #10]
 8001ebc:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <I2C_RequestMemoryRead+0xa4>)
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 fa1c 	bl	8002300 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	69b9      	ldr	r1, [r7, #24]
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f8ac 	bl	800202a <I2C_WaitOnTXISFlagUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e02c      	b.n	8001f36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d105      	bne.n	8001eee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ee2:	893b      	ldrh	r3, [r7, #8]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
 8001eec:	e015      	b.n	8001f1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eee:	893b      	ldrh	r3, [r7, #8]
 8001ef0:	0a1b      	lsrs	r3, r3, #8
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	69b9      	ldr	r1, [r7, #24]
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 f892 	bl	800202a <I2C_WaitOnTXISFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e012      	b.n	8001f36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f10:	893b      	ldrh	r3, [r7, #8]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2200      	movs	r2, #0
 8001f22:	2140      	movs	r1, #64	; 0x40
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 f831 	bl	8001f8c <I2C_WaitOnFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	80002000 	.word	0x80002000

08001f44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d103      	bne.n	8001f62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d007      	beq.n	8001f80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	619a      	str	r2, [r3, #24]
  }
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f9c:	e031      	b.n	8002002 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fa4:	d02d      	beq.n	8002002 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa6:	f7ff f99f 	bl	80012e8 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d302      	bcc.n	8001fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d122      	bne.n	8002002 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	bf0c      	ite	eq
 8001fcc:	2301      	moveq	r3, #1
 8001fce:	2300      	movne	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d113      	bne.n	8002002 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f043 0220 	orr.w	r2, r3, #32
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00f      	b.n	8002022 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4013      	ands	r3, r2
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	429a      	cmp	r2, r3
 8002010:	bf0c      	ite	eq
 8002012:	2301      	moveq	r3, #1
 8002014:	2300      	movne	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	429a      	cmp	r2, r3
 800201e:	d0be      	beq.n	8001f9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002036:	e033      	b.n	80020a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f87f 	bl	8002140 <I2C_IsErrorOccurred>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e031      	b.n	80020b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002052:	d025      	beq.n	80020a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002054:	f7ff f948 	bl	80012e8 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	429a      	cmp	r2, r3
 8002062:	d302      	bcc.n	800206a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11a      	bne.n	80020a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b02      	cmp	r3, #2
 8002076:	d013      	beq.n	80020a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207c:	f043 0220 	orr.w	r2, r3, #32
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e007      	b.n	80020b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d1c4      	bne.n	8002038 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020c4:	e02f      	b.n	8002126 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f838 	bl	8002140 <I2C_IsErrorOccurred>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e02d      	b.n	8002136 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020da:	f7ff f905 	bl	80012e8 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d302      	bcc.n	80020f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d11a      	bne.n	8002126 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	d013      	beq.n	8002126 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f043 0220 	orr.w	r2, r3, #32
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e007      	b.n	8002136 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	2b20      	cmp	r3, #32
 8002132:	d1c8      	bne.n	80020c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d068      	beq.n	800223e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2210      	movs	r2, #16
 8002172:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002174:	e049      	b.n	800220a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800217c:	d045      	beq.n	800220a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800217e:	f7ff f8b3 	bl	80012e8 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	429a      	cmp	r2, r3
 800218c:	d302      	bcc.n	8002194 <I2C_IsErrorOccurred+0x54>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d13a      	bne.n	800220a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021b6:	d121      	bne.n	80021fc <I2C_IsErrorOccurred+0xbc>
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021be:	d01d      	beq.n	80021fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d01a      	beq.n	80021fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021d6:	f7ff f887 	bl	80012e8 <HAL_GetTick>
 80021da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021dc:	e00e      	b.n	80021fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021de:	f7ff f883 	bl	80012e8 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b19      	cmp	r3, #25
 80021ea:	d907      	bls.n	80021fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	f043 0320 	orr.w	r3, r3, #32
 80021f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80021fa:	e006      	b.n	800220a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	2b20      	cmp	r3, #32
 8002208:	d1e9      	bne.n	80021de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b20      	cmp	r3, #32
 8002216:	d003      	beq.n	8002220 <I2C_IsErrorOccurred+0xe0>
 8002218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0aa      	beq.n	8002176 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002224:	2b00      	cmp	r3, #0
 8002226:	d103      	bne.n	8002230 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2220      	movs	r2, #32
 800222e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	f043 0304 	orr.w	r3, r3, #4
 8002236:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00b      	beq.n	8002268 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002260:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	f043 0308 	orr.w	r3, r3, #8
 8002278:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002282:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00b      	beq.n	80022ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80022ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01c      	beq.n	80022ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f7ff fe45 	bl	8001f44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <I2C_IsErrorOccurred+0x1bc>)
 80022c6:	400b      	ands	r3, r1
 80022c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	431a      	orrs	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80022ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3728      	adds	r7, #40	; 0x28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	fe00e800 	.word	0xfe00e800

08002300 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002300:	b480      	push	{r7}
 8002302:	b087      	sub	sp, #28
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	817b      	strh	r3, [r7, #10]
 800230e:	4613      	mov	r3, r2
 8002310:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002312:	897b      	ldrh	r3, [r7, #10]
 8002314:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002318:	7a7b      	ldrb	r3, [r7, #9]
 800231a:	041b      	lsls	r3, r3, #16
 800231c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002320:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	4313      	orrs	r3, r2
 800232a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800232e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	0d5b      	lsrs	r3, r3, #21
 800233a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <I2C_TransferConfig+0x60>)
 8002340:	430b      	orrs	r3, r1
 8002342:	43db      	mvns	r3, r3
 8002344:	ea02 0103 	and.w	r1, r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002352:	bf00      	nop
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	03ff63ff 	.word	0x03ff63ff

08002364 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b20      	cmp	r3, #32
 8002378:	d138      	bne.n	80023ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002384:	2302      	movs	r3, #2
 8002386:	e032      	b.n	80023ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2224      	movs	r2, #36	; 0x24
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6819      	ldr	r1, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b085      	sub	sp, #20
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b20      	cmp	r3, #32
 800240e:	d139      	bne.n	8002484 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800241a:	2302      	movs	r3, #2
 800241c:	e033      	b.n	8002486 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2224      	movs	r2, #36	; 0x24
 800242a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800244c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	e000      	b.n	8002486 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
  }
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002494:	b08b      	sub	sp, #44	; 0x2c
 8002496:	af06      	add	r7, sp, #24
 8002498:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0c4      	b.n	800262e <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d106      	bne.n	80024be <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7fe fdfd 	bl	80010b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2203      	movs	r2, #3
 80024c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 fa6e 	bl	80059ac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	e040      	b.n	8002558 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	440b      	add	r3, r1
 80024e6:	3301      	adds	r3, #1
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	440b      	add	r3, r1
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	3303      	adds	r3, #3
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	3338      	adds	r3, #56	; 0x38
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	333c      	adds	r3, #60	; 0x3c
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	440b      	add	r3, r1
 800254c:	3340      	adds	r3, #64	; 0x40
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002552:	7bfb      	ldrb	r3, [r7, #15]
 8002554:	3301      	adds	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	429a      	cmp	r2, r3
 8002560:	d3b9      	bcc.n	80024d6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	e044      	b.n	80025f2 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002568:	7bfa      	ldrb	r2, [r7, #15]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	440b      	add	r3, r1
 8002576:	f203 1369 	addw	r3, r3, #361	; 0x169
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	440b      	add	r3, r1
 80025a2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	440b      	add	r3, r1
 80025ce:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	3301      	adds	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d3b5      	bcc.n	8002568 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	687e      	ldr	r6, [r7, #4]
 8002604:	466d      	mov	r5, sp
 8002606:	f106 0410 	add.w	r4, r6, #16
 800260a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	602b      	str	r3, [r5, #0]
 8002612:	1d33      	adds	r3, r6, #4
 8002614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002616:	6838      	ldr	r0, [r7, #0]
 8002618:	f003 f9e3 	bl	80059e2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800263e:	af00      	add	r7, sp, #0
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002648:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800264a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d102      	bne.n	800265e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	f001 b823 	b.w	80036a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002662:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 817d 	beq.w	800296e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002674:	4bbc      	ldr	r3, [pc, #752]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b04      	cmp	r3, #4
 800267e:	d00c      	beq.n	800269a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002680:	4bb9      	ldr	r3, [pc, #740]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b08      	cmp	r3, #8
 800268a:	d15c      	bne.n	8002746 <HAL_RCC_OscConfig+0x10e>
 800268c:	4bb6      	ldr	r3, [pc, #728]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002698:	d155      	bne.n	8002746 <HAL_RCC_OscConfig+0x10e>
 800269a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800269e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d102      	bne.n	80026cc <HAL_RCC_OscConfig+0x94>
 80026c6:	4ba8      	ldr	r3, [pc, #672]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	e015      	b.n	80026f8 <HAL_RCC_OscConfig+0xc0>
 80026cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80026e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026e4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80026e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80026ec:	fa93 f3a3 	rbit	r3, r3
 80026f0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80026f4:	4b9c      	ldr	r3, [pc, #624]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026fc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002700:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002704:	fa92 f2a2 	rbit	r2, r2
 8002708:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800270c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002710:	fab2 f282 	clz	r2, r2
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f042 0220 	orr.w	r2, r2, #32
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	f002 021f 	and.w	r2, r2, #31
 8002720:	2101      	movs	r1, #1
 8002722:	fa01 f202 	lsl.w	r2, r1, r2
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 811f 	beq.w	800296c <HAL_RCC_OscConfig+0x334>
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f040 8116 	bne.w	800296c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	f000 bfaf 	b.w	80036a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x12e>
 8002758:	4b83      	ldr	r3, [pc, #524]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a82      	ldr	r2, [pc, #520]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 800275e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	e036      	b.n	80027d4 <HAL_RCC_OscConfig+0x19c>
 8002766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x158>
 8002776:	4b7c      	ldr	r3, [pc, #496]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a7b      	ldr	r2, [pc, #492]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 800277c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b79      	ldr	r3, [pc, #484]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a78      	ldr	r2, [pc, #480]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 8002788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e021      	b.n	80027d4 <HAL_RCC_OscConfig+0x19c>
 8002790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002794:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x184>
 80027a2:	4b71      	ldr	r3, [pc, #452]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a70      	ldr	r2, [pc, #448]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 80027a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	4b6e      	ldr	r3, [pc, #440]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a6d      	ldr	r2, [pc, #436]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e00b      	b.n	80027d4 <HAL_RCC_OscConfig+0x19c>
 80027bc:	4b6a      	ldr	r3, [pc, #424]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a69      	ldr	r2, [pc, #420]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 80027c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	4b67      	ldr	r3, [pc, #412]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a66      	ldr	r2, [pc, #408]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 80027ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027d4:	4b64      	ldr	r3, [pc, #400]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	f023 020f 	bic.w	r2, r3, #15
 80027dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	495f      	ldr	r1, [pc, #380]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d059      	beq.n	80028b2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7fe fd73 	bl	80012e8 <HAL_GetTick>
 8002802:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002808:	f7fe fd6e 	bl	80012e8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b64      	cmp	r3, #100	; 0x64
 8002816:	d902      	bls.n	800281e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	f000 bf43 	b.w	80036a4 <HAL_RCC_OscConfig+0x106c>
 800281e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002822:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800282a:	fa93 f3a3 	rbit	r3, r3
 800282e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002832:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b01      	cmp	r3, #1
 8002848:	d102      	bne.n	8002850 <HAL_RCC_OscConfig+0x218>
 800284a:	4b47      	ldr	r3, [pc, #284]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	e015      	b.n	800287c <HAL_RCC_OscConfig+0x244>
 8002850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002854:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002864:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002868:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800286c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002878:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002880:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002884:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002888:	fa92 f2a2 	rbit	r2, r2
 800288c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002890:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002894:	fab2 f282 	clz	r2, r2
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	f042 0220 	orr.w	r2, r2, #32
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	f002 021f 	and.w	r2, r2, #31
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f202 	lsl.w	r2, r1, r2
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ab      	beq.n	8002808 <HAL_RCC_OscConfig+0x1d0>
 80028b0:	e05d      	b.n	800296e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b2:	f7fe fd19 	bl	80012e8 <HAL_GetTick>
 80028b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fe fd14 	bl	80012e8 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b64      	cmp	r3, #100	; 0x64
 80028ca:	d902      	bls.n	80028d2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	f000 bee9 	b.w	80036a4 <HAL_RCC_OscConfig+0x106c>
 80028d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028d6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80028e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d102      	bne.n	8002904 <HAL_RCC_OscConfig+0x2cc>
 80028fe:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	e015      	b.n	8002930 <HAL_RCC_OscConfig+0x2f8>
 8002904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002908:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800291c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002920:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <HAL_RCC_OscConfig+0x330>)
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002934:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002938:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800293c:	fa92 f2a2 	rbit	r2, r2
 8002940:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002944:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002948:	fab2 f282 	clz	r2, r2
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	f042 0220 	orr.w	r2, r2, #32
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	f002 021f 	and.w	r2, r2, #31
 8002958:	2101      	movs	r1, #1
 800295a:	fa01 f202 	lsl.w	r2, r1, r2
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1ab      	bne.n	80028bc <HAL_RCC_OscConfig+0x284>
 8002964:	e003      	b.n	800296e <HAL_RCC_OscConfig+0x336>
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 817d 	beq.w	8002c7e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002984:	4ba6      	ldr	r3, [pc, #664]	; (8002c20 <HAL_RCC_OscConfig+0x5e8>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00b      	beq.n	80029a8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002990:	4ba3      	ldr	r3, [pc, #652]	; (8002c20 <HAL_RCC_OscConfig+0x5e8>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d172      	bne.n	8002a82 <HAL_RCC_OscConfig+0x44a>
 800299c:	4ba0      	ldr	r3, [pc, #640]	; (8002c20 <HAL_RCC_OscConfig+0x5e8>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d16c      	bne.n	8002a82 <HAL_RCC_OscConfig+0x44a>
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80029ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d102      	bne.n	80029d8 <HAL_RCC_OscConfig+0x3a0>
 80029d2:	4b93      	ldr	r3, [pc, #588]	; (8002c20 <HAL_RCC_OscConfig+0x5e8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	e013      	b.n	8002a00 <HAL_RCC_OscConfig+0x3c8>
 80029d8:	2302      	movs	r3, #2
 80029da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80029ea:	2302      	movs	r3, #2
 80029ec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80029f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80029fc:	4b88      	ldr	r3, [pc, #544]	; (8002c20 <HAL_RCC_OscConfig+0x5e8>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	2202      	movs	r2, #2
 8002a02:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002a06:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002a0a:	fa92 f2a2 	rbit	r2, r2
 8002a0e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002a12:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002a16:	fab2 f282 	clz	r2, r2
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f042 0220 	orr.w	r2, r2, #32
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f002 021f 	and.w	r2, r2, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCC_OscConfig+0x410>
 8002a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d002      	beq.n	8002a48 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f000 be2e 	b.w	80036a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b75      	ldr	r3, [pc, #468]	; (8002c20 <HAL_RCC_OscConfig+0x5e8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	21f8      	movs	r1, #248	; 0xf8
 8002a5e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002a66:	fa91 f1a1 	rbit	r1, r1
 8002a6a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002a6e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002a72:	fab1 f181 	clz	r1, r1
 8002a76:	b2c9      	uxtb	r1, r1
 8002a78:	408b      	lsls	r3, r1
 8002a7a:	4969      	ldr	r1, [pc, #420]	; (8002c20 <HAL_RCC_OscConfig+0x5e8>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a80:	e0fd      	b.n	8002c7e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 8088 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x56c>
 8002a94:	2301      	movs	r3, #1
 8002a96:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002aa6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ab4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	461a      	mov	r2, r3
 8002abc:	2301      	movs	r3, #1
 8002abe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fc12 	bl	80012e8 <HAL_GetTick>
 8002ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac8:	e00a      	b.n	8002ae0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aca:	f7fe fc0d 	bl	80012e8 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d902      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	f000 bde2 	b.w	80036a4 <HAL_RCC_OscConfig+0x106c>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002af2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d102      	bne.n	8002b10 <HAL_RCC_OscConfig+0x4d8>
 8002b0a:	4b45      	ldr	r3, [pc, #276]	; (8002c20 <HAL_RCC_OscConfig+0x5e8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	e013      	b.n	8002b38 <HAL_RCC_OscConfig+0x500>
 8002b10:	2302      	movs	r3, #2
 8002b12:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b22:	2302      	movs	r3, #2
 8002b24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b28:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002b34:	4b3a      	ldr	r3, [pc, #232]	; (8002c20 <HAL_RCC_OscConfig+0x5e8>)
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	2202      	movs	r2, #2
 8002b3a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002b3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002b42:	fa92 f2a2 	rbit	r2, r2
 8002b46:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002b4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002b4e:	fab2 f282 	clz	r2, r2
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	f042 0220 	orr.w	r2, r2, #32
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	f002 021f 	and.w	r2, r2, #31
 8002b5e:	2101      	movs	r1, #1
 8002b60:	fa01 f202 	lsl.w	r2, r1, r2
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0af      	beq.n	8002aca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6a:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <HAL_RCC_OscConfig+0x5e8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	21f8      	movs	r1, #248	; 0xf8
 8002b80:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b84:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002b88:	fa91 f1a1 	rbit	r1, r1
 8002b8c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002b90:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b94:	fab1 f181 	clz	r1, r1
 8002b98:	b2c9      	uxtb	r1, r1
 8002b9a:	408b      	lsls	r3, r1
 8002b9c:	4920      	ldr	r1, [pc, #128]	; (8002c20 <HAL_RCC_OscConfig+0x5e8>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]
 8002ba2:	e06c      	b.n	8002c7e <HAL_RCC_OscConfig+0x646>
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002bb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2300      	movs	r3, #0
 8002bce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fb8a 	bl	80012e8 <HAL_GetTick>
 8002bd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bda:	f7fe fb85 	bl	80012e8 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d902      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	f000 bd5a 	b.w	80036a4 <HAL_RCC_OscConfig+0x106c>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002c02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d104      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5ec>
 8002c1a:	4b01      	ldr	r3, [pc, #4]	; (8002c20 <HAL_RCC_OscConfig+0x5e8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	e015      	b.n	8002c4c <HAL_RCC_OscConfig+0x614>
 8002c20:	40021000 	.word	0x40021000
 8002c24:	2302      	movs	r3, #2
 8002c26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c36:	2302      	movs	r3, #2
 8002c38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002c3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c48:	4bc8      	ldr	r3, [pc, #800]	; (8002f6c <HAL_RCC_OscConfig+0x934>)
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002c52:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002c56:	fa92 f2a2 	rbit	r2, r2
 8002c5a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002c5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002c62:	fab2 f282 	clz	r2, r2
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	f042 0220 	orr.w	r2, r2, #32
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	f002 021f 	and.w	r2, r2, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f202 	lsl.w	r2, r1, r2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1ad      	bne.n	8002bda <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8110 	beq.w	8002eb4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d079      	beq.n	8002d98 <HAL_RCC_OscConfig+0x760>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002cae:	fa93 f3a3 	rbit	r3, r3
 8002cb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4bab      	ldr	r3, [pc, #684]	; (8002f70 <HAL_RCC_OscConfig+0x938>)
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2301      	movs	r3, #1
 8002ccc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cce:	f7fe fb0b 	bl	80012e8 <HAL_GetTick>
 8002cd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd8:	f7fe fb06 	bl	80012e8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d902      	bls.n	8002cee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	f000 bcdb 	b.w	80036a4 <HAL_RCC_OscConfig+0x106c>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d08:	2202      	movs	r2, #2
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	fa93 f2a3 	rbit	r2, r3
 8002d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	fa93 f2a3 	rbit	r2, r3
 8002d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d48:	4b88      	ldr	r3, [pc, #544]	; (8002f6c <HAL_RCC_OscConfig+0x934>)
 8002d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d54:	2102      	movs	r1, #2
 8002d56:	6019      	str	r1, [r3, #0]
 8002d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fa93 f1a3 	rbit	r1, r3
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d6e:	6019      	str	r1, [r3, #0]
  return result;
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0a0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x6a0>
 8002d96:	e08d      	b.n	8002eb4 <HAL_RCC_OscConfig+0x87c>
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	fa93 f2a3 	rbit	r2, r3
 8002db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002dba:	601a      	str	r2, [r3, #0]
  return result;
 8002dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002dc4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b68      	ldr	r3, [pc, #416]	; (8002f70 <HAL_RCC_OscConfig+0x938>)
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dda:	f7fe fa85 	bl	80012e8 <HAL_GetTick>
 8002dde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de4:	f7fe fa80 	bl	80012e8 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d902      	bls.n	8002dfa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	f000 bc55 	b.w	80036a4 <HAL_RCC_OscConfig+0x106c>
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e02:	2202      	movs	r2, #2
 8002e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	fa93 f2a3 	rbit	r2, r3
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e26:	2202      	movs	r2, #2
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	fa93 f2a3 	rbit	r2, r3
 8002e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	fa93 f2a3 	rbit	r2, r3
 8002e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e60:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002e64:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e66:	4b41      	ldr	r3, [pc, #260]	; (8002f6c <HAL_RCC_OscConfig+0x934>)
 8002e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e72:	2102      	movs	r1, #2
 8002e74:	6019      	str	r1, [r3, #0]
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	fa93 f1a3 	rbit	r1, r3
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e8c:	6019      	str	r1, [r3, #0]
  return result;
 8002e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e92:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d197      	bne.n	8002de4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 81a1 	beq.w	800320c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed0:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <HAL_RCC_OscConfig+0x934>)
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d116      	bne.n	8002f0a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002edc:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <HAL_RCC_OscConfig+0x934>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	4a22      	ldr	r2, [pc, #136]	; (8002f6c <HAL_RCC_OscConfig+0x934>)
 8002ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	61d3      	str	r3, [r2, #28]
 8002ee8:	4b20      	ldr	r3, [pc, #128]	; (8002f6c <HAL_RCC_OscConfig+0x934>)
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002f02:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_RCC_OscConfig+0x93c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11a      	bne.n	8002f4c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f16:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <HAL_RCC_OscConfig+0x93c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a16      	ldr	r2, [pc, #88]	; (8002f74 <HAL_RCC_OscConfig+0x93c>)
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f22:	f7fe f9e1 	bl	80012e8 <HAL_GetTick>
 8002f26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2a:	e009      	b.n	8002f40 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fe f9dc 	bl	80012e8 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b64      	cmp	r3, #100	; 0x64
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e3b1      	b.n	80036a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_RCC_OscConfig+0x93c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ef      	beq.n	8002f2c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d10d      	bne.n	8002f78 <HAL_RCC_OscConfig+0x940>
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_RCC_OscConfig+0x934>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4a02      	ldr	r2, [pc, #8]	; (8002f6c <HAL_RCC_OscConfig+0x934>)
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	6213      	str	r3, [r2, #32]
 8002f68:	e03c      	b.n	8002fe4 <HAL_RCC_OscConfig+0x9ac>
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	10908120 	.word	0x10908120
 8002f74:	40007000 	.word	0x40007000
 8002f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10c      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x96a>
 8002f88:	4bc1      	ldr	r3, [pc, #772]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4ac0      	ldr	r2, [pc, #768]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	6213      	str	r3, [r2, #32]
 8002f94:	4bbe      	ldr	r3, [pc, #760]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4abd      	ldr	r2, [pc, #756]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8002f9a:	f023 0304 	bic.w	r3, r3, #4
 8002f9e:	6213      	str	r3, [r2, #32]
 8002fa0:	e020      	b.n	8002fe4 <HAL_RCC_OscConfig+0x9ac>
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x994>
 8002fb2:	4bb7      	ldr	r3, [pc, #732]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	4ab6      	ldr	r2, [pc, #728]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6213      	str	r3, [r2, #32]
 8002fbe:	4bb4      	ldr	r3, [pc, #720]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	4ab3      	ldr	r2, [pc, #716]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6213      	str	r3, [r2, #32]
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0x9ac>
 8002fcc:	4bb0      	ldr	r3, [pc, #704]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4aaf      	ldr	r2, [pc, #700]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	6213      	str	r3, [r2, #32]
 8002fd8:	4bad      	ldr	r3, [pc, #692]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4aac      	ldr	r2, [pc, #688]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8002fde:	f023 0304 	bic.w	r3, r3, #4
 8002fe2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 8081 	beq.w	80030f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff6:	f7fe f977 	bl	80012e8 <HAL_GetTick>
 8002ffa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003000:	f7fe f972 	bl	80012e8 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e345      	b.n	80036a4 <HAL_RCC_OscConfig+0x106c>
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003020:	2202      	movs	r2, #2
 8003022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003028:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	fa93 f2a3 	rbit	r2, r3
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003040:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003044:	2202      	movs	r2, #2
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	fa93 f2a3 	rbit	r2, r3
 8003056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800305e:	601a      	str	r2, [r3, #0]
  return result;
 8003060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003064:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003068:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d102      	bne.n	8003084 <HAL_RCC_OscConfig+0xa4c>
 800307e:	4b84      	ldr	r3, [pc, #528]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	e013      	b.n	80030ac <HAL_RCC_OscConfig+0xa74>
 8003084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003088:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800308c:	2202      	movs	r2, #2
 800308e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003094:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	fa93 f2a3 	rbit	r2, r3
 800309e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	4b79      	ldr	r3, [pc, #484]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80030b4:	2102      	movs	r1, #2
 80030b6:	6011      	str	r1, [r2, #0]
 80030b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	fa92 f1a2 	rbit	r1, r2
 80030c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80030ce:	6011      	str	r1, [r2, #0]
  return result;
 80030d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	fab2 f282 	clz	r2, r2
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f002 021f 	and.w	r2, r2, #31
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f202 	lsl.w	r2, r1, r2
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d084      	beq.n	8003000 <HAL_RCC_OscConfig+0x9c8>
 80030f6:	e07f      	b.n	80031f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f8:	f7fe f8f6 	bl	80012e8 <HAL_GetTick>
 80030fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003100:	e00b      	b.n	800311a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f7fe f8f1 	bl	80012e8 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e2c4      	b.n	80036a4 <HAL_RCC_OscConfig+0x106c>
 800311a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003122:	2202      	movs	r2, #2
 8003124:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	fa93 f2a3 	rbit	r2, r3
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003142:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003146:	2202      	movs	r2, #2
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	fa93 f2a3 	rbit	r2, r3
 8003158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003160:	601a      	str	r2, [r3, #0]
  return result;
 8003162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003166:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800316a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316c:	fab3 f383 	clz	r3, r3
 8003170:	b2db      	uxtb	r3, r3
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f043 0302 	orr.w	r3, r3, #2
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d102      	bne.n	8003186 <HAL_RCC_OscConfig+0xb4e>
 8003180:	4b43      	ldr	r3, [pc, #268]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	e013      	b.n	80031ae <HAL_RCC_OscConfig+0xb76>
 8003186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800318e:	2202      	movs	r2, #2
 8003190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	fa93 f2a3 	rbit	r2, r3
 80031a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	4b39      	ldr	r3, [pc, #228]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80031b6:	2102      	movs	r1, #2
 80031b8:	6011      	str	r1, [r2, #0]
 80031ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	fa92 f1a2 	rbit	r1, r2
 80031c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80031d0:	6011      	str	r1, [r2, #0]
  return result;
 80031d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	fab2 f282 	clz	r2, r2
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	f002 021f 	and.w	r2, r2, #31
 80031ec:	2101      	movs	r1, #1
 80031ee:	fa01 f202 	lsl.w	r2, r1, r2
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d184      	bne.n	8003102 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003200:	4b23      	ldr	r3, [pc, #140]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	4a22      	ldr	r2, [pc, #136]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8003206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003210:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8242 	beq.w	80036a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800321e:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <HAL_RCC_OscConfig+0xc58>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	f000 8213 	beq.w	8003652 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003230:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	2b02      	cmp	r3, #2
 800323a:	f040 8162 	bne.w	8003502 <HAL_RCC_OscConfig+0xeca>
 800323e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003242:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003246:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800324a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003250:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	fa93 f2a3 	rbit	r2, r3
 800325a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003262:	601a      	str	r2, [r3, #0]
  return result;
 8003264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003268:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800326c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003278:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	461a      	mov	r2, r3
 8003280:	2300      	movs	r3, #0
 8003282:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fe f830 	bl	80012e8 <HAL_GetTick>
 8003288:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328c:	e00c      	b.n	80032a8 <HAL_RCC_OscConfig+0xc70>
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003294:	f7fe f828 	bl	80012e8 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e1fd      	b.n	80036a4 <HAL_RCC_OscConfig+0x106c>
 80032a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80032b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	fa93 f2a3 	rbit	r2, r3
 80032c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80032cc:	601a      	str	r2, [r3, #0]
  return result;
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80032d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d102      	bne.n	80032f2 <HAL_RCC_OscConfig+0xcba>
 80032ec:	4bb0      	ldr	r3, [pc, #704]	; (80035b0 <HAL_RCC_OscConfig+0xf78>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	e027      	b.n	8003342 <HAL_RCC_OscConfig+0xd0a>
 80032f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80032fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	fa93 f2a3 	rbit	r2, r3
 800330e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003312:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	fa93 f2a3 	rbit	r2, r3
 8003334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003338:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	4b9c      	ldr	r3, [pc, #624]	; (80035b0 <HAL_RCC_OscConfig+0xf78>)
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003346:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800334a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800334e:	6011      	str	r1, [r2, #0]
 8003350:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003354:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	fa92 f1a2 	rbit	r1, r2
 800335e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003362:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003366:	6011      	str	r1, [r2, #0]
  return result;
 8003368:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800336c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003370:	6812      	ldr	r2, [r2, #0]
 8003372:	fab2 f282 	clz	r2, r2
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	f042 0220 	orr.w	r2, r2, #32
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	f002 021f 	and.w	r2, r2, #31
 8003382:	2101      	movs	r1, #1
 8003384:	fa01 f202 	lsl.w	r2, r1, r2
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d182      	bne.n	8003294 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800338e:	4b88      	ldr	r3, [pc, #544]	; (80035b0 <HAL_RCC_OscConfig+0xf78>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	430b      	orrs	r3, r1
 80033b0:	497f      	ldr	r1, [pc, #508]	; (80035b0 <HAL_RCC_OscConfig+0xf78>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	604b      	str	r3, [r1, #4]
 80033b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80033be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	fa93 f2a3 	rbit	r2, r3
 80033d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033da:	601a      	str	r2, [r3, #0]
  return result;
 80033dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80033e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	461a      	mov	r2, r3
 80033f8:	2301      	movs	r3, #1
 80033fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fd ff74 	bl	80012e8 <HAL_GetTick>
 8003400:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003404:	e009      	b.n	800341a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003406:	f7fd ff6f 	bl	80012e8 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e144      	b.n	80036a4 <HAL_RCC_OscConfig+0x106c>
 800341a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003422:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	fa93 f2a3 	rbit	r2, r3
 8003436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800343e:	601a      	str	r2, [r3, #0]
  return result;
 8003440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003444:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003448:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d102      	bne.n	8003464 <HAL_RCC_OscConfig+0xe2c>
 800345e:	4b54      	ldr	r3, [pc, #336]	; (80035b0 <HAL_RCC_OscConfig+0xf78>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	e027      	b.n	80034b4 <HAL_RCC_OscConfig+0xe7c>
 8003464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003468:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800346c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003476:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	fa93 f2a3 	rbit	r2, r3
 8003480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003484:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003492:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	fa93 f2a3 	rbit	r2, r3
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	4b3f      	ldr	r3, [pc, #252]	; (80035b0 <HAL_RCC_OscConfig+0xf78>)
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034b8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80034bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034c0:	6011      	str	r1, [r2, #0]
 80034c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034c6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	fa92 f1a2 	rbit	r1, r2
 80034d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80034d8:	6011      	str	r1, [r2, #0]
  return result;
 80034da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	fab2 f282 	clz	r2, r2
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	f042 0220 	orr.w	r2, r2, #32
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	f002 021f 	and.w	r2, r2, #31
 80034f4:	2101      	movs	r1, #1
 80034f6:	fa01 f202 	lsl.w	r2, r1, r2
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d082      	beq.n	8003406 <HAL_RCC_OscConfig+0xdce>
 8003500:	e0cf      	b.n	80036a2 <HAL_RCC_OscConfig+0x106a>
 8003502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003506:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800350a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800350e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003514:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	fa93 f2a3 	rbit	r2, r3
 800351e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003522:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003526:	601a      	str	r2, [r3, #0]
  return result;
 8003528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003530:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800353c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	461a      	mov	r2, r3
 8003544:	2300      	movs	r3, #0
 8003546:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fd fece 	bl	80012e8 <HAL_GetTick>
 800354c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003550:	e009      	b.n	8003566 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003552:	f7fd fec9 	bl	80012e8 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e09e      	b.n	80036a4 <HAL_RCC_OscConfig+0x106c>
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800356e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003572:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003578:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	fa93 f2a3 	rbit	r2, r3
 8003582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003586:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800358a:	601a      	str	r2, [r3, #0]
  return result;
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003594:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d104      	bne.n	80035b4 <HAL_RCC_OscConfig+0xf7c>
 80035aa:	4b01      	ldr	r3, [pc, #4]	; (80035b0 <HAL_RCC_OscConfig+0xf78>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	e029      	b.n	8003604 <HAL_RCC_OscConfig+0xfcc>
 80035b0:	40021000 	.word	0x40021000
 80035b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80035bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	fa93 f2a3 	rbit	r2, r3
 80035d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035de:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80035e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	fa93 f2a3 	rbit	r2, r3
 80035f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <HAL_RCC_OscConfig+0x1078>)
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003608:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800360c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003610:	6011      	str	r1, [r2, #0]
 8003612:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003616:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	fa92 f1a2 	rbit	r1, r2
 8003620:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003624:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003628:	6011      	str	r1, [r2, #0]
  return result;
 800362a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800362e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	fab2 f282 	clz	r2, r2
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	f042 0220 	orr.w	r2, r2, #32
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	f002 021f 	and.w	r2, r2, #31
 8003644:	2101      	movs	r1, #1
 8003646:	fa01 f202 	lsl.w	r2, r1, r2
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d180      	bne.n	8003552 <HAL_RCC_OscConfig+0xf1a>
 8003650:	e027      	b.n	80036a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003656:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e01e      	b.n	80036a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_RCC_OscConfig+0x1078>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800366e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003672:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	429a      	cmp	r2, r3
 8003684:	d10b      	bne.n	800369e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003686:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800368a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800368e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003692:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800369a:	429a      	cmp	r2, r3
 800369c:	d001      	beq.n	80036a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40021000 	.word	0x40021000

080036b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b09e      	sub	sp, #120	; 0x78
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e162      	b.n	8003992 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036cc:	4b90      	ldr	r3, [pc, #576]	; (8003910 <HAL_RCC_ClockConfig+0x25c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d910      	bls.n	80036fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b8d      	ldr	r3, [pc, #564]	; (8003910 <HAL_RCC_ClockConfig+0x25c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 0207 	bic.w	r2, r3, #7
 80036e2:	498b      	ldr	r1, [pc, #556]	; (8003910 <HAL_RCC_ClockConfig+0x25c>)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b89      	ldr	r3, [pc, #548]	; (8003910 <HAL_RCC_ClockConfig+0x25c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e14a      	b.n	8003992 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003708:	4b82      	ldr	r3, [pc, #520]	; (8003914 <HAL_RCC_ClockConfig+0x260>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	497f      	ldr	r1, [pc, #508]	; (8003914 <HAL_RCC_ClockConfig+0x260>)
 8003716:	4313      	orrs	r3, r2
 8003718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 80dc 	beq.w	80038e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d13c      	bne.n	80037aa <HAL_RCC_ClockConfig+0xf6>
 8003730:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003734:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800373e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d102      	bne.n	800375a <HAL_RCC_ClockConfig+0xa6>
 8003754:	4b6f      	ldr	r3, [pc, #444]	; (8003914 <HAL_RCC_ClockConfig+0x260>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	e00f      	b.n	800377a <HAL_RCC_ClockConfig+0xc6>
 800375a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800375e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	667b      	str	r3, [r7, #100]	; 0x64
 8003768:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800376c:	663b      	str	r3, [r7, #96]	; 0x60
 800376e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003776:	4b67      	ldr	r3, [pc, #412]	; (8003914 <HAL_RCC_ClockConfig+0x260>)
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800377e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003780:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003782:	fa92 f2a2 	rbit	r2, r2
 8003786:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003788:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800378a:	fab2 f282 	clz	r2, r2
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	f042 0220 	orr.w	r2, r2, #32
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	f002 021f 	and.w	r2, r2, #31
 800379a:	2101      	movs	r1, #1
 800379c:	fa01 f202 	lsl.w	r2, r1, r2
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d17b      	bne.n	800389e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0f3      	b.n	8003992 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d13c      	bne.n	800382c <HAL_RCC_ClockConfig+0x178>
 80037b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d102      	bne.n	80037dc <HAL_RCC_ClockConfig+0x128>
 80037d6:	4b4f      	ldr	r3, [pc, #316]	; (8003914 <HAL_RCC_ClockConfig+0x260>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	e00f      	b.n	80037fc <HAL_RCC_ClockConfig+0x148>
 80037dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	647b      	str	r3, [r7, #68]	; 0x44
 80037ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ee:	643b      	str	r3, [r7, #64]	; 0x40
 80037f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f8:	4b46      	ldr	r3, [pc, #280]	; (8003914 <HAL_RCC_ClockConfig+0x260>)
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003800:	63ba      	str	r2, [r7, #56]	; 0x38
 8003802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003804:	fa92 f2a2 	rbit	r2, r2
 8003808:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800380a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800380c:	fab2 f282 	clz	r2, r2
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	f042 0220 	orr.w	r2, r2, #32
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	f002 021f 	and.w	r2, r2, #31
 800381c:	2101      	movs	r1, #1
 800381e:	fa01 f202 	lsl.w	r2, r1, r2
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d13a      	bne.n	800389e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0b2      	b.n	8003992 <HAL_RCC_ClockConfig+0x2de>
 800382c:	2302      	movs	r3, #2
 800382e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383a:	fab3 f383 	clz	r3, r3
 800383e:	b2db      	uxtb	r3, r3
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d102      	bne.n	8003854 <HAL_RCC_ClockConfig+0x1a0>
 800384e:	4b31      	ldr	r3, [pc, #196]	; (8003914 <HAL_RCC_ClockConfig+0x260>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	e00d      	b.n	8003870 <HAL_RCC_ClockConfig+0x1bc>
 8003854:	2302      	movs	r3, #2
 8003856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
 8003860:	2302      	movs	r3, #2
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	61fb      	str	r3, [r7, #28]
 800386c:	4b29      	ldr	r3, [pc, #164]	; (8003914 <HAL_RCC_ClockConfig+0x260>)
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	2202      	movs	r2, #2
 8003872:	61ba      	str	r2, [r7, #24]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	fa92 f2a2 	rbit	r2, r2
 800387a:	617a      	str	r2, [r7, #20]
  return result;
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	fab2 f282 	clz	r2, r2
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	f042 0220 	orr.w	r2, r2, #32
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f002 021f 	and.w	r2, r2, #31
 800388e:	2101      	movs	r1, #1
 8003890:	fa01 f202 	lsl.w	r2, r1, r2
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e079      	b.n	8003992 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389e:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <HAL_RCC_ClockConfig+0x260>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f023 0203 	bic.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	491a      	ldr	r1, [pc, #104]	; (8003914 <HAL_RCC_ClockConfig+0x260>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b0:	f7fd fd1a 	bl	80012e8 <HAL_GetTick>
 80038b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b8:	f7fd fd16 	bl	80012e8 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e061      	b.n	8003992 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	4b11      	ldr	r3, [pc, #68]	; (8003914 <HAL_RCC_ClockConfig+0x260>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 020c 	and.w	r2, r3, #12
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	429a      	cmp	r2, r3
 80038de:	d1eb      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_RCC_ClockConfig+0x25c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d214      	bcs.n	8003918 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b08      	ldr	r3, [pc, #32]	; (8003910 <HAL_RCC_ClockConfig+0x25c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 0207 	bic.w	r2, r3, #7
 80038f6:	4906      	ldr	r1, [pc, #24]	; (8003910 <HAL_RCC_ClockConfig+0x25c>)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b04      	ldr	r3, [pc, #16]	; (8003910 <HAL_RCC_ClockConfig+0x25c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d005      	beq.n	8003918 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e040      	b.n	8003992 <HAL_RCC_ClockConfig+0x2de>
 8003910:	40022000 	.word	0x40022000
 8003914:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_RCC_ClockConfig+0x2e8>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	491a      	ldr	r1, [pc, #104]	; (800399c <HAL_RCC_ClockConfig+0x2e8>)
 8003932:	4313      	orrs	r3, r2
 8003934:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003942:	4b16      	ldr	r3, [pc, #88]	; (800399c <HAL_RCC_ClockConfig+0x2e8>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4912      	ldr	r1, [pc, #72]	; (800399c <HAL_RCC_ClockConfig+0x2e8>)
 8003952:	4313      	orrs	r3, r2
 8003954:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003956:	f000 f829 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 800395a:	4601      	mov	r1, r0
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <HAL_RCC_ClockConfig+0x2e8>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003964:	22f0      	movs	r2, #240	; 0xf0
 8003966:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	fa92 f2a2 	rbit	r2, r2
 800396e:	60fa      	str	r2, [r7, #12]
  return result;
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	fab2 f282 	clz	r2, r2
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	40d3      	lsrs	r3, r2
 800397a:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <HAL_RCC_ClockConfig+0x2ec>)
 800397c:	5cd3      	ldrb	r3, [r2, r3]
 800397e:	fa21 f303 	lsr.w	r3, r1, r3
 8003982:	4a08      	ldr	r2, [pc, #32]	; (80039a4 <HAL_RCC_ClockConfig+0x2f0>)
 8003984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <HAL_RCC_ClockConfig+0x2f4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd fc68 	bl	8001260 <HAL_InitTick>
  
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3778      	adds	r7, #120	; 0x78
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40021000 	.word	0x40021000
 80039a0:	08005b8c 	.word	0x08005b8c
 80039a4:	2000005c 	.word	0x2000005c
 80039a8:	20000060 	.word	0x20000060

080039ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b08b      	sub	sp, #44	; 0x2c
 80039b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	2300      	movs	r3, #0
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	2300      	movs	r3, #0
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <HAL_RCC_GetSysClockFreq+0xc0>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d002      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x30>
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d003      	beq.n	80039e2 <HAL_RCC_GetSysClockFreq+0x36>
 80039da:	e03c      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039dc:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xc4>)
 80039de:	623b      	str	r3, [r7, #32]
      break;
 80039e0:	e03c      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80039e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80039ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	fa92 f2a2 	rbit	r2, r2
 80039f4:	607a      	str	r2, [r7, #4]
  return result;
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	fab2 f282 	clz	r2, r2
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	40d3      	lsrs	r3, r2
 8003a00:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a06:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	220f      	movs	r2, #15
 8003a10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	fa92 f2a2 	rbit	r2, r2
 8003a18:	60fa      	str	r2, [r7, #12]
  return result;
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	fab2 f282 	clz	r2, r2
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	40d3      	lsrs	r3, r2
 8003a24:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a26:	5cd3      	ldrb	r3, [r2, r3]
 8003a28:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a34:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
 8003a44:	e004      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a4a:	fb02 f303 	mul.w	r3, r2, r3
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	623b      	str	r3, [r7, #32]
      break;
 8003a54:	e002      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a58:	623b      	str	r3, [r7, #32]
      break;
 8003a5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	372c      	adds	r7, #44	; 0x2c
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	007a1200 	.word	0x007a1200
 8003a74:	08005b9c 	.word	0x08005b9c
 8003a78:	08005bac 	.word	0x08005bac
 8003a7c:	003d0900 	.word	0x003d0900

08003a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b092      	sub	sp, #72	; 0x48
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003a90:	2300      	movs	r3, #0
 8003a92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80d4 	beq.w	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa4:	4b4e      	ldr	r3, [pc, #312]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10e      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab0:	4b4b      	ldr	r3, [pc, #300]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	4a4a      	ldr	r2, [pc, #296]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aba:	61d3      	str	r3, [r2, #28]
 8003abc:	4b48      	ldr	r3, [pc, #288]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	4b45      	ldr	r3, [pc, #276]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d118      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ada:	4b42      	ldr	r3, [pc, #264]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a41      	ldr	r2, [pc, #260]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae6:	f7fd fbff 	bl	80012e8 <HAL_GetTick>
 8003aea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	e008      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aee:	f7fd fbfb 	bl	80012e8 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b64      	cmp	r3, #100	; 0x64
 8003afa:	d901      	bls.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e169      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	4b38      	ldr	r3, [pc, #224]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b0c:	4b34      	ldr	r3, [pc, #208]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b14:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8084 	beq.w	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d07c      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b2c:	4b2c      	ldr	r3, [pc, #176]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	fa93 f3a3 	rbit	r3, r3
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	461a      	mov	r2, r3
 8003b56:	2301      	movs	r3, #1
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b62:	fa93 f3a3 	rbit	r3, r3
 8003b66:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b1d      	ldr	r3, [pc, #116]	; (8003be8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b7e:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b82:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d04b      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8e:	f7fd fbab 	bl	80012e8 <HAL_GetTick>
 8003b92:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b94:	e00a      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b96:	f7fd fba7 	bl	80012e8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e113      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003bac:	2302      	movs	r3, #2
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb2:	fa93 f3a3 	rbit	r3, r3
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb8:	2302      	movs	r3, #2
 8003bba:	623b      	str	r3, [r7, #32]
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	61fb      	str	r3, [r7, #28]
  return result;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc6:	fab3 f383 	clz	r3, r3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	f043 0302 	orr.w	r3, r3, #2
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d108      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003bda:	4b01      	ldr	r3, [pc, #4]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	e00d      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40007000 	.word	0x40007000
 8003be8:	10908100 	.word	0x10908100
 8003bec:	2302      	movs	r3, #2
 8003bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	4b78      	ldr	r3, [pc, #480]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	613a      	str	r2, [r7, #16]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	fa92 f2a2 	rbit	r2, r2
 8003c06:	60fa      	str	r2, [r7, #12]
  return result;
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	fab2 f282 	clz	r2, r2
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	f002 021f 	and.w	r2, r2, #31
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0b7      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c26:	4b6d      	ldr	r3, [pc, #436]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	496a      	ldr	r1, [pc, #424]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d105      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c40:	4b66      	ldr	r3, [pc, #408]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	4a65      	ldr	r2, [pc, #404]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c58:	4b60      	ldr	r3, [pc, #384]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	f023 0203 	bic.w	r2, r3, #3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	495d      	ldr	r1, [pc, #372]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c76:	4b59      	ldr	r3, [pc, #356]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	4956      	ldr	r1, [pc, #344]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d008      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c94:	4b51      	ldr	r3, [pc, #324]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	494e      	ldr	r1, [pc, #312]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d008      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cb2:	4b4a      	ldr	r3, [pc, #296]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	f023 0210 	bic.w	r2, r3, #16
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	4947      	ldr	r1, [pc, #284]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003cd0:	4b42      	ldr	r3, [pc, #264]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	493f      	ldr	r1, [pc, #252]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cee:	4b3b      	ldr	r3, [pc, #236]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f023 0220 	bic.w	r2, r3, #32
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	4938      	ldr	r1, [pc, #224]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d0c:	4b33      	ldr	r3, [pc, #204]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	4930      	ldr	r1, [pc, #192]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d2a:	4b2c      	ldr	r3, [pc, #176]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	4929      	ldr	r1, [pc, #164]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d48:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	4921      	ldr	r1, [pc, #132]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d66:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	491a      	ldr	r1, [pc, #104]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003d84:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	4912      	ldr	r1, [pc, #72]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	490b      	ldr	r1, [pc, #44]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	4903      	ldr	r1, [pc, #12]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3748      	adds	r7, #72	; 0x48
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000

08003de0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e09d      	b.n	8003f2e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d108      	bne.n	8003e0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e02:	d009      	beq.n	8003e18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	61da      	str	r2, [r3, #28]
 8003e0a:	e005      	b.n	8003e18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fd f858 	bl	8000ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e58:	d902      	bls.n	8003e60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	e002      	b.n	8003e66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e6e:	d007      	beq.n	8003e80 <HAL_SPI_Init+0xa0>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e78:	d002      	beq.n	8003e80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	ea42 0103 	orr.w	r1, r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	0c1b      	lsrs	r3, r3, #16
 8003edc:	f003 0204 	and.w	r2, r3, #4
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003efc:	ea42 0103 	orr.w	r1, r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e049      	b.n	8003fdc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d106      	bne.n	8003f62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fd f805 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3304      	adds	r3, #4
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f000 ff37 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e049      	b.n	800408a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fc fffa 	bl	8001004 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f000 fee0 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d109      	bne.n	80040b8 <HAL_TIM_PWM_Start+0x24>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	bf14      	ite	ne
 80040b0:	2301      	movne	r3, #1
 80040b2:	2300      	moveq	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	e03c      	b.n	8004132 <HAL_TIM_PWM_Start+0x9e>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d109      	bne.n	80040d2 <HAL_TIM_PWM_Start+0x3e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	bf14      	ite	ne
 80040ca:	2301      	movne	r3, #1
 80040cc:	2300      	moveq	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	e02f      	b.n	8004132 <HAL_TIM_PWM_Start+0x9e>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d109      	bne.n	80040ec <HAL_TIM_PWM_Start+0x58>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	bf14      	ite	ne
 80040e4:	2301      	movne	r3, #1
 80040e6:	2300      	moveq	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	e022      	b.n	8004132 <HAL_TIM_PWM_Start+0x9e>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b0c      	cmp	r3, #12
 80040f0:	d109      	bne.n	8004106 <HAL_TIM_PWM_Start+0x72>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	bf14      	ite	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	2300      	moveq	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	e015      	b.n	8004132 <HAL_TIM_PWM_Start+0x9e>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b10      	cmp	r3, #16
 800410a:	d109      	bne.n	8004120 <HAL_TIM_PWM_Start+0x8c>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e008      	b.n	8004132 <HAL_TIM_PWM_Start+0x9e>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	bf14      	ite	ne
 800412c:	2301      	movne	r3, #1
 800412e:	2300      	moveq	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e097      	b.n	800426a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d104      	bne.n	800414a <HAL_TIM_PWM_Start+0xb6>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004148:	e023      	b.n	8004192 <HAL_TIM_PWM_Start+0xfe>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b04      	cmp	r3, #4
 800414e:	d104      	bne.n	800415a <HAL_TIM_PWM_Start+0xc6>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004158:	e01b      	b.n	8004192 <HAL_TIM_PWM_Start+0xfe>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b08      	cmp	r3, #8
 800415e:	d104      	bne.n	800416a <HAL_TIM_PWM_Start+0xd6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004168:	e013      	b.n	8004192 <HAL_TIM_PWM_Start+0xfe>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b0c      	cmp	r3, #12
 800416e:	d104      	bne.n	800417a <HAL_TIM_PWM_Start+0xe6>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004178:	e00b      	b.n	8004192 <HAL_TIM_PWM_Start+0xfe>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b10      	cmp	r3, #16
 800417e:	d104      	bne.n	800418a <HAL_TIM_PWM_Start+0xf6>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004188:	e003      	b.n	8004192 <HAL_TIM_PWM_Start+0xfe>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2202      	movs	r2, #2
 800418e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2201      	movs	r2, #1
 8004198:	6839      	ldr	r1, [r7, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f001 fb42 	bl	8005824 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a33      	ldr	r2, [pc, #204]	; (8004274 <HAL_TIM_PWM_Start+0x1e0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x13e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a32      	ldr	r2, [pc, #200]	; (8004278 <HAL_TIM_PWM_Start+0x1e4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00e      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x13e>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a30      	ldr	r2, [pc, #192]	; (800427c <HAL_TIM_PWM_Start+0x1e8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x13e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2f      	ldr	r2, [pc, #188]	; (8004280 <HAL_TIM_PWM_Start+0x1ec>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_TIM_PWM_Start+0x13e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2d      	ldr	r2, [pc, #180]	; (8004284 <HAL_TIM_PWM_Start+0x1f0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d101      	bne.n	80041d6 <HAL_TIM_PWM_Start+0x142>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <HAL_TIM_PWM_Start+0x144>
 80041d6:	2300      	movs	r3, #0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d007      	beq.n	80041ec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a20      	ldr	r2, [pc, #128]	; (8004274 <HAL_TIM_PWM_Start+0x1e0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d018      	beq.n	8004228 <HAL_TIM_PWM_Start+0x194>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fe:	d013      	beq.n	8004228 <HAL_TIM_PWM_Start+0x194>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a20      	ldr	r2, [pc, #128]	; (8004288 <HAL_TIM_PWM_Start+0x1f4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00e      	beq.n	8004228 <HAL_TIM_PWM_Start+0x194>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1f      	ldr	r2, [pc, #124]	; (800428c <HAL_TIM_PWM_Start+0x1f8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d009      	beq.n	8004228 <HAL_TIM_PWM_Start+0x194>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a17      	ldr	r2, [pc, #92]	; (8004278 <HAL_TIM_PWM_Start+0x1e4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <HAL_TIM_PWM_Start+0x194>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a16      	ldr	r2, [pc, #88]	; (800427c <HAL_TIM_PWM_Start+0x1e8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d115      	bne.n	8004254 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	4b18      	ldr	r3, [pc, #96]	; (8004290 <HAL_TIM_PWM_Start+0x1fc>)
 8004230:	4013      	ands	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b06      	cmp	r3, #6
 8004238:	d015      	beq.n	8004266 <HAL_TIM_PWM_Start+0x1d2>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004240:	d011      	beq.n	8004266 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004252:	e008      	b.n	8004266 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e000      	b.n	8004268 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004266:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40013400 	.word	0x40013400
 800427c:	40014000 	.word	0x40014000
 8004280:	40014400 	.word	0x40014400
 8004284:	40014800 	.word	0x40014800
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	00010007 	.word	0x00010007

08004294 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e049      	b.n	800433a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f841 	bl	8004342 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4619      	mov	r1, r3
 80042d2:	4610      	mov	r0, r2
 80042d4:	f000 fd88 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d104      	bne.n	8004376 <HAL_TIM_IC_Start_IT+0x1e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004372:	b2db      	uxtb	r3, r3
 8004374:	e023      	b.n	80043be <HAL_TIM_IC_Start_IT+0x66>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b04      	cmp	r3, #4
 800437a:	d104      	bne.n	8004386 <HAL_TIM_IC_Start_IT+0x2e>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004382:	b2db      	uxtb	r3, r3
 8004384:	e01b      	b.n	80043be <HAL_TIM_IC_Start_IT+0x66>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d104      	bne.n	8004396 <HAL_TIM_IC_Start_IT+0x3e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004392:	b2db      	uxtb	r3, r3
 8004394:	e013      	b.n	80043be <HAL_TIM_IC_Start_IT+0x66>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b0c      	cmp	r3, #12
 800439a:	d104      	bne.n	80043a6 <HAL_TIM_IC_Start_IT+0x4e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	e00b      	b.n	80043be <HAL_TIM_IC_Start_IT+0x66>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d104      	bne.n	80043b6 <HAL_TIM_IC_Start_IT+0x5e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	e003      	b.n	80043be <HAL_TIM_IC_Start_IT+0x66>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d104      	bne.n	80043d0 <HAL_TIM_IC_Start_IT+0x78>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e013      	b.n	80043f8 <HAL_TIM_IC_Start_IT+0xa0>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d104      	bne.n	80043e0 <HAL_TIM_IC_Start_IT+0x88>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	e00b      	b.n	80043f8 <HAL_TIM_IC_Start_IT+0xa0>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d104      	bne.n	80043f0 <HAL_TIM_IC_Start_IT+0x98>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	e003      	b.n	80043f8 <HAL_TIM_IC_Start_IT+0xa0>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80043fa:	7bbb      	ldrb	r3, [r7, #14]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d102      	bne.n	8004406 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004400:	7b7b      	ldrb	r3, [r7, #13]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d001      	beq.n	800440a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e0d8      	b.n	80045bc <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d104      	bne.n	800441a <HAL_TIM_IC_Start_IT+0xc2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004418:	e023      	b.n	8004462 <HAL_TIM_IC_Start_IT+0x10a>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b04      	cmp	r3, #4
 800441e:	d104      	bne.n	800442a <HAL_TIM_IC_Start_IT+0xd2>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004428:	e01b      	b.n	8004462 <HAL_TIM_IC_Start_IT+0x10a>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d104      	bne.n	800443a <HAL_TIM_IC_Start_IT+0xe2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004438:	e013      	b.n	8004462 <HAL_TIM_IC_Start_IT+0x10a>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b0c      	cmp	r3, #12
 800443e:	d104      	bne.n	800444a <HAL_TIM_IC_Start_IT+0xf2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004448:	e00b      	b.n	8004462 <HAL_TIM_IC_Start_IT+0x10a>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b10      	cmp	r3, #16
 800444e:	d104      	bne.n	800445a <HAL_TIM_IC_Start_IT+0x102>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004458:	e003      	b.n	8004462 <HAL_TIM_IC_Start_IT+0x10a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2202      	movs	r2, #2
 800445e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <HAL_TIM_IC_Start_IT+0x11a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004470:	e013      	b.n	800449a <HAL_TIM_IC_Start_IT+0x142>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b04      	cmp	r3, #4
 8004476:	d104      	bne.n	8004482 <HAL_TIM_IC_Start_IT+0x12a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004480:	e00b      	b.n	800449a <HAL_TIM_IC_Start_IT+0x142>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b08      	cmp	r3, #8
 8004486:	d104      	bne.n	8004492 <HAL_TIM_IC_Start_IT+0x13a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004490:	e003      	b.n	800449a <HAL_TIM_IC_Start_IT+0x142>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2202      	movs	r2, #2
 8004496:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b0c      	cmp	r3, #12
 800449e:	d841      	bhi.n	8004524 <HAL_TIM_IC_Start_IT+0x1cc>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <HAL_TIM_IC_Start_IT+0x150>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044dd 	.word	0x080044dd
 80044ac:	08004525 	.word	0x08004525
 80044b0:	08004525 	.word	0x08004525
 80044b4:	08004525 	.word	0x08004525
 80044b8:	080044ef 	.word	0x080044ef
 80044bc:	08004525 	.word	0x08004525
 80044c0:	08004525 	.word	0x08004525
 80044c4:	08004525 	.word	0x08004525
 80044c8:	08004501 	.word	0x08004501
 80044cc:	08004525 	.word	0x08004525
 80044d0:	08004525 	.word	0x08004525
 80044d4:	08004525 	.word	0x08004525
 80044d8:	08004513 	.word	0x08004513
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0202 	orr.w	r2, r2, #2
 80044ea:	60da      	str	r2, [r3, #12]
      break;
 80044ec:	e01d      	b.n	800452a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0204 	orr.w	r2, r2, #4
 80044fc:	60da      	str	r2, [r3, #12]
      break;
 80044fe:	e014      	b.n	800452a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0208 	orr.w	r2, r2, #8
 800450e:	60da      	str	r2, [r3, #12]
      break;
 8004510:	e00b      	b.n	800452a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0210 	orr.w	r2, r2, #16
 8004520:	60da      	str	r2, [r3, #12]
      break;
 8004522:	e002      	b.n	800452a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
      break;
 8004528:	bf00      	nop
  }

  if (status == HAL_OK)
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d144      	bne.n	80045ba <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2201      	movs	r2, #1
 8004536:	6839      	ldr	r1, [r7, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f001 f973 	bl	8005824 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a20      	ldr	r2, [pc, #128]	; (80045c4 <HAL_TIM_IC_Start_IT+0x26c>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d018      	beq.n	800457a <HAL_TIM_IC_Start_IT+0x222>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004550:	d013      	beq.n	800457a <HAL_TIM_IC_Start_IT+0x222>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1c      	ldr	r2, [pc, #112]	; (80045c8 <HAL_TIM_IC_Start_IT+0x270>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00e      	beq.n	800457a <HAL_TIM_IC_Start_IT+0x222>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1a      	ldr	r2, [pc, #104]	; (80045cc <HAL_TIM_IC_Start_IT+0x274>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d009      	beq.n	800457a <HAL_TIM_IC_Start_IT+0x222>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a19      	ldr	r2, [pc, #100]	; (80045d0 <HAL_TIM_IC_Start_IT+0x278>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d004      	beq.n	800457a <HAL_TIM_IC_Start_IT+0x222>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a17      	ldr	r2, [pc, #92]	; (80045d4 <HAL_TIM_IC_Start_IT+0x27c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d115      	bne.n	80045a6 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <HAL_TIM_IC_Start_IT+0x280>)
 8004582:	4013      	ands	r3, r2
 8004584:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b06      	cmp	r3, #6
 800458a:	d015      	beq.n	80045b8 <HAL_TIM_IC_Start_IT+0x260>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004592:	d011      	beq.n	80045b8 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a4:	e008      	b.n	80045b8 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0201 	orr.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e000      	b.n	80045ba <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40013400 	.word	0x40013400
 80045d4:	40014000 	.word	0x40014000
 80045d8:	00010007 	.word	0x00010007

080045dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d122      	bne.n	8004638 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d11b      	bne.n	8004638 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0202 	mvn.w	r2, #2
 8004608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fb fdf4 	bl	800020c <HAL_TIM_IC_CaptureCallback>
 8004624:	e005      	b.n	8004632 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fbc0 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fbc7 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b04      	cmp	r3, #4
 8004644:	d122      	bne.n	800468c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b04      	cmp	r3, #4
 8004652:	d11b      	bne.n	800468c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0204 	mvn.w	r2, #4
 800465c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2202      	movs	r2, #2
 8004662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fb fdca 	bl	800020c <HAL_TIM_IC_CaptureCallback>
 8004678:	e005      	b.n	8004686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fb96 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fb9d 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b08      	cmp	r3, #8
 8004698:	d122      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d11b      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0208 	mvn.w	r2, #8
 80046b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2204      	movs	r2, #4
 80046b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fb fda0 	bl	800020c <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fb6c 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fb73 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b10      	cmp	r3, #16
 80046ec:	d122      	bne.n	8004734 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d11b      	bne.n	8004734 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0210 	mvn.w	r2, #16
 8004704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2208      	movs	r2, #8
 800470a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fb fd76 	bl	800020c <HAL_TIM_IC_CaptureCallback>
 8004720:	e005      	b.n	800472e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fb42 	bl	8004dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 fb49 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10e      	bne.n	8004760 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d107      	bne.n	8004760 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0201 	mvn.w	r2, #1
 8004758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fb1c 	bl	8004d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b80      	cmp	r3, #128	; 0x80
 800476c:	d10e      	bne.n	800478c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004778:	2b80      	cmp	r3, #128	; 0x80
 800477a:	d107      	bne.n	800478c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f001 f8fc 	bl	8005984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800479a:	d10e      	bne.n	80047ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a6:	2b80      	cmp	r3, #128	; 0x80
 80047a8:	d107      	bne.n	80047ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f001 f8ef 	bl	8005998 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	d10e      	bne.n	80047e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b40      	cmp	r3, #64	; 0x40
 80047d4:	d107      	bne.n	80047e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 faf7 	bl	8004dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d10e      	bne.n	8004812 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d107      	bne.n	8004812 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f06f 0220 	mvn.w	r2, #32
 800480a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f001 f8af 	bl	8005970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b086      	sub	sp, #24
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004834:	2302      	movs	r3, #2
 8004836:	e088      	b.n	800494a <HAL_TIM_IC_ConfigChannel+0x130>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d11b      	bne.n	800487e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	6819      	ldr	r1, [r3, #0]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f000 fe2d 	bl	80054b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699a      	ldr	r2, [r3, #24]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 020c 	bic.w	r2, r2, #12
 8004868:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6999      	ldr	r1, [r3, #24]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	619a      	str	r2, [r3, #24]
 800487c:	e060      	b.n	8004940 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b04      	cmp	r3, #4
 8004882:	d11c      	bne.n	80048be <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	6819      	ldr	r1, [r3, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f000 fea5 	bl	80055e2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80048a6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6999      	ldr	r1, [r3, #24]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	021a      	lsls	r2, r3, #8
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	619a      	str	r2, [r3, #24]
 80048bc:	e040      	b.n	8004940 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d11b      	bne.n	80048fc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6819      	ldr	r1, [r3, #0]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f000 fef2 	bl	80056bc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 020c 	bic.w	r2, r2, #12
 80048e6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69d9      	ldr	r1, [r3, #28]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	689a      	ldr	r2, [r3, #8]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	61da      	str	r2, [r3, #28]
 80048fa:	e021      	b.n	8004940 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	d11c      	bne.n	800493c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6819      	ldr	r1, [r3, #0]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f000 ff0f 	bl	8005734 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004924:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69d9      	ldr	r1, [r3, #28]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	021a      	lsls	r2, r3, #8
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	61da      	str	r2, [r3, #28]
 800493a:	e001      	b.n	8004940 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004948:	7dfb      	ldrb	r3, [r7, #23]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800496e:	2302      	movs	r3, #2
 8004970:	e0ff      	b.n	8004b72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b14      	cmp	r3, #20
 800497e:	f200 80f0 	bhi.w	8004b62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004982:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	080049dd 	.word	0x080049dd
 800498c:	08004b63 	.word	0x08004b63
 8004990:	08004b63 	.word	0x08004b63
 8004994:	08004b63 	.word	0x08004b63
 8004998:	08004a1d 	.word	0x08004a1d
 800499c:	08004b63 	.word	0x08004b63
 80049a0:	08004b63 	.word	0x08004b63
 80049a4:	08004b63 	.word	0x08004b63
 80049a8:	08004a5f 	.word	0x08004a5f
 80049ac:	08004b63 	.word	0x08004b63
 80049b0:	08004b63 	.word	0x08004b63
 80049b4:	08004b63 	.word	0x08004b63
 80049b8:	08004a9f 	.word	0x08004a9f
 80049bc:	08004b63 	.word	0x08004b63
 80049c0:	08004b63 	.word	0x08004b63
 80049c4:	08004b63 	.word	0x08004b63
 80049c8:	08004ae1 	.word	0x08004ae1
 80049cc:	08004b63 	.word	0x08004b63
 80049d0:	08004b63 	.word	0x08004b63
 80049d4:	08004b63 	.word	0x08004b63
 80049d8:	08004b21 	.word	0x08004b21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fa90 	bl	8004f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0208 	orr.w	r2, r2, #8
 80049f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0204 	bic.w	r2, r2, #4
 8004a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6999      	ldr	r1, [r3, #24]
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	691a      	ldr	r2, [r3, #16]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	619a      	str	r2, [r3, #24]
      break;
 8004a1a:	e0a5      	b.n	8004b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fb00 	bl	8005028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699a      	ldr	r2, [r3, #24]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6999      	ldr	r1, [r3, #24]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	021a      	lsls	r2, r3, #8
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	619a      	str	r2, [r3, #24]
      break;
 8004a5c:	e084      	b.n	8004b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68b9      	ldr	r1, [r7, #8]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fb69 	bl	800513c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69da      	ldr	r2, [r3, #28]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0208 	orr.w	r2, r2, #8
 8004a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0204 	bic.w	r2, r2, #4
 8004a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69d9      	ldr	r1, [r3, #28]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	61da      	str	r2, [r3, #28]
      break;
 8004a9c:	e064      	b.n	8004b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fbd1 	bl	800524c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69da      	ldr	r2, [r3, #28]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69d9      	ldr	r1, [r3, #28]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	021a      	lsls	r2, r3, #8
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	61da      	str	r2, [r3, #28]
      break;
 8004ade:	e043      	b.n	8004b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fc1a 	bl	8005320 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0208 	orr.w	r2, r2, #8
 8004afa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0204 	bic.w	r2, r2, #4
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b1e:	e023      	b.n	8004b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fc5e 	bl	80053e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	021a      	lsls	r2, r3, #8
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b60:	e002      	b.n	8004b68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	75fb      	strb	r3, [r7, #23]
      break;
 8004b66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop

08004b7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_TIM_ConfigClockSource+0x1c>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e0b6      	b.n	8004d06 <HAL_TIM_ConfigClockSource+0x18a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd4:	d03e      	beq.n	8004c54 <HAL_TIM_ConfigClockSource+0xd8>
 8004bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bda:	f200 8087 	bhi.w	8004cec <HAL_TIM_ConfigClockSource+0x170>
 8004bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be2:	f000 8086 	beq.w	8004cf2 <HAL_TIM_ConfigClockSource+0x176>
 8004be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bea:	d87f      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x170>
 8004bec:	2b70      	cmp	r3, #112	; 0x70
 8004bee:	d01a      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0xaa>
 8004bf0:	2b70      	cmp	r3, #112	; 0x70
 8004bf2:	d87b      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x170>
 8004bf4:	2b60      	cmp	r3, #96	; 0x60
 8004bf6:	d050      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0x11e>
 8004bf8:	2b60      	cmp	r3, #96	; 0x60
 8004bfa:	d877      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x170>
 8004bfc:	2b50      	cmp	r3, #80	; 0x50
 8004bfe:	d03c      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0xfe>
 8004c00:	2b50      	cmp	r3, #80	; 0x50
 8004c02:	d873      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x170>
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d058      	beq.n	8004cba <HAL_TIM_ConfigClockSource+0x13e>
 8004c08:	2b40      	cmp	r3, #64	; 0x40
 8004c0a:	d86f      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x170>
 8004c0c:	2b30      	cmp	r3, #48	; 0x30
 8004c0e:	d064      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0x15e>
 8004c10:	2b30      	cmp	r3, #48	; 0x30
 8004c12:	d86b      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x170>
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d060      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0x15e>
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d867      	bhi.n	8004cec <HAL_TIM_ConfigClockSource+0x170>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d05c      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0x15e>
 8004c20:	2b10      	cmp	r3, #16
 8004c22:	d05a      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0x15e>
 8004c24:	e062      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6899      	ldr	r1, [r3, #8]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f000 fdd5 	bl	80057e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	609a      	str	r2, [r3, #8]
      break;
 8004c52:	e04f      	b.n	8004cf4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	6899      	ldr	r1, [r3, #8]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f000 fdbe 	bl	80057e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c76:	609a      	str	r2, [r3, #8]
      break;
 8004c78:	e03c      	b.n	8004cf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6859      	ldr	r1, [r3, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f000 fc7c 	bl	8005584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2150      	movs	r1, #80	; 0x50
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fd8b 	bl	80057ae <TIM_ITRx_SetConfig>
      break;
 8004c98:	e02c      	b.n	8004cf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6859      	ldr	r1, [r3, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f000 fcd8 	bl	800565c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2160      	movs	r1, #96	; 0x60
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fd7b 	bl	80057ae <TIM_ITRx_SetConfig>
      break;
 8004cb8:	e01c      	b.n	8004cf4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	6859      	ldr	r1, [r3, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f000 fc5c 	bl	8005584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2140      	movs	r1, #64	; 0x40
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 fd6b 	bl	80057ae <TIM_ITRx_SetConfig>
      break;
 8004cd8:	e00c      	b.n	8004cf4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	f000 fd62 	bl	80057ae <TIM_ITRx_SetConfig>
      break;
 8004cea:	e003      	b.n	8004cf4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf0:	e000      	b.n	8004cf4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	d831      	bhi.n	8004d88 <HAL_TIM_ReadCapturedValue+0x78>
 8004d24:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2a:	bf00      	nop
 8004d2c:	08004d61 	.word	0x08004d61
 8004d30:	08004d89 	.word	0x08004d89
 8004d34:	08004d89 	.word	0x08004d89
 8004d38:	08004d89 	.word	0x08004d89
 8004d3c:	08004d6b 	.word	0x08004d6b
 8004d40:	08004d89 	.word	0x08004d89
 8004d44:	08004d89 	.word	0x08004d89
 8004d48:	08004d89 	.word	0x08004d89
 8004d4c:	08004d75 	.word	0x08004d75
 8004d50:	08004d89 	.word	0x08004d89
 8004d54:	08004d89 	.word	0x08004d89
 8004d58:	08004d89 	.word	0x08004d89
 8004d5c:	08004d7f 	.word	0x08004d7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d66:	60fb      	str	r3, [r7, #12]

      break;
 8004d68:	e00f      	b.n	8004d8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	60fb      	str	r3, [r7, #12]

      break;
 8004d72:	e00a      	b.n	8004d8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	60fb      	str	r3, [r7, #12]

      break;
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	60fb      	str	r3, [r7, #12]

      break;
 8004d86:	e000      	b.n	8004d8a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004d88:	bf00      	nop
  }

  return tmpreg;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a3c      	ldr	r2, [pc, #240]	; (8004eec <TIM_Base_SetConfig+0x104>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00f      	beq.n	8004e20 <TIM_Base_SetConfig+0x38>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e06:	d00b      	beq.n	8004e20 <TIM_Base_SetConfig+0x38>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a39      	ldr	r2, [pc, #228]	; (8004ef0 <TIM_Base_SetConfig+0x108>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d007      	beq.n	8004e20 <TIM_Base_SetConfig+0x38>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a38      	ldr	r2, [pc, #224]	; (8004ef4 <TIM_Base_SetConfig+0x10c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <TIM_Base_SetConfig+0x38>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a37      	ldr	r2, [pc, #220]	; (8004ef8 <TIM_Base_SetConfig+0x110>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d108      	bne.n	8004e32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2d      	ldr	r2, [pc, #180]	; (8004eec <TIM_Base_SetConfig+0x104>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d01b      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e40:	d017      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2a      	ldr	r2, [pc, #168]	; (8004ef0 <TIM_Base_SetConfig+0x108>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a29      	ldr	r2, [pc, #164]	; (8004ef4 <TIM_Base_SetConfig+0x10c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00f      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a28      	ldr	r2, [pc, #160]	; (8004ef8 <TIM_Base_SetConfig+0x110>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00b      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a27      	ldr	r2, [pc, #156]	; (8004efc <TIM_Base_SetConfig+0x114>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d007      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a26      	ldr	r2, [pc, #152]	; (8004f00 <TIM_Base_SetConfig+0x118>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d003      	beq.n	8004e72 <TIM_Base_SetConfig+0x8a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a25      	ldr	r2, [pc, #148]	; (8004f04 <TIM_Base_SetConfig+0x11c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d108      	bne.n	8004e84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a10      	ldr	r2, [pc, #64]	; (8004eec <TIM_Base_SetConfig+0x104>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00f      	beq.n	8004ed0 <TIM_Base_SetConfig+0xe8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a11      	ldr	r2, [pc, #68]	; (8004ef8 <TIM_Base_SetConfig+0x110>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00b      	beq.n	8004ed0 <TIM_Base_SetConfig+0xe8>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a10      	ldr	r2, [pc, #64]	; (8004efc <TIM_Base_SetConfig+0x114>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d007      	beq.n	8004ed0 <TIM_Base_SetConfig+0xe8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a0f      	ldr	r2, [pc, #60]	; (8004f00 <TIM_Base_SetConfig+0x118>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_Base_SetConfig+0xe8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a0e      	ldr	r2, [pc, #56]	; (8004f04 <TIM_Base_SetConfig+0x11c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d103      	bne.n	8004ed8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	615a      	str	r2, [r3, #20]
}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	40013400 	.word	0x40013400
 8004efc:	40014000 	.word	0x40014000
 8004f00:	40014400 	.word	0x40014400
 8004f04:	40014800 	.word	0x40014800

08004f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f023 0201 	bic.w	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0303 	bic.w	r3, r3, #3
 8004f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f023 0302 	bic.w	r3, r3, #2
 8004f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a2c      	ldr	r2, [pc, #176]	; (8005014 <TIM_OC1_SetConfig+0x10c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00f      	beq.n	8004f88 <TIM_OC1_SetConfig+0x80>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a2b      	ldr	r2, [pc, #172]	; (8005018 <TIM_OC1_SetConfig+0x110>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00b      	beq.n	8004f88 <TIM_OC1_SetConfig+0x80>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a2a      	ldr	r2, [pc, #168]	; (800501c <TIM_OC1_SetConfig+0x114>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <TIM_OC1_SetConfig+0x80>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a29      	ldr	r2, [pc, #164]	; (8005020 <TIM_OC1_SetConfig+0x118>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_OC1_SetConfig+0x80>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a28      	ldr	r2, [pc, #160]	; (8005024 <TIM_OC1_SetConfig+0x11c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d10c      	bne.n	8004fa2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f023 0308 	bic.w	r3, r3, #8
 8004f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f023 0304 	bic.w	r3, r3, #4
 8004fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a1b      	ldr	r2, [pc, #108]	; (8005014 <TIM_OC1_SetConfig+0x10c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00f      	beq.n	8004fca <TIM_OC1_SetConfig+0xc2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a1a      	ldr	r2, [pc, #104]	; (8005018 <TIM_OC1_SetConfig+0x110>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00b      	beq.n	8004fca <TIM_OC1_SetConfig+0xc2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a19      	ldr	r2, [pc, #100]	; (800501c <TIM_OC1_SetConfig+0x114>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <TIM_OC1_SetConfig+0xc2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a18      	ldr	r2, [pc, #96]	; (8005020 <TIM_OC1_SetConfig+0x118>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_OC1_SetConfig+0xc2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a17      	ldr	r2, [pc, #92]	; (8005024 <TIM_OC1_SetConfig+0x11c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d111      	bne.n	8004fee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	621a      	str	r2, [r3, #32]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40012c00 	.word	0x40012c00
 8005018:	40013400 	.word	0x40013400
 800501c:	40014000 	.word	0x40014000
 8005020:	40014400 	.word	0x40014400
 8005024:	40014800 	.word	0x40014800

08005028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0210 	bic.w	r2, r3, #16
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 0320 	bic.w	r3, r3, #32
 8005076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a28      	ldr	r2, [pc, #160]	; (8005128 <TIM_OC2_SetConfig+0x100>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d003      	beq.n	8005094 <TIM_OC2_SetConfig+0x6c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a27      	ldr	r2, [pc, #156]	; (800512c <TIM_OC2_SetConfig+0x104>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d10d      	bne.n	80050b0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800509a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a1d      	ldr	r2, [pc, #116]	; (8005128 <TIM_OC2_SetConfig+0x100>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00f      	beq.n	80050d8 <TIM_OC2_SetConfig+0xb0>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a1c      	ldr	r2, [pc, #112]	; (800512c <TIM_OC2_SetConfig+0x104>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00b      	beq.n	80050d8 <TIM_OC2_SetConfig+0xb0>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	; (8005130 <TIM_OC2_SetConfig+0x108>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d007      	beq.n	80050d8 <TIM_OC2_SetConfig+0xb0>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a1a      	ldr	r2, [pc, #104]	; (8005134 <TIM_OC2_SetConfig+0x10c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_OC2_SetConfig+0xb0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a19      	ldr	r2, [pc, #100]	; (8005138 <TIM_OC2_SetConfig+0x110>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d113      	bne.n	8005100 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050de:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050e6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40013400 	.word	0x40013400
 8005130:	40014000 	.word	0x40014000
 8005134:	40014400 	.word	0x40014400
 8005138:	40014800 	.word	0x40014800

0800513c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800516a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0303 	bic.w	r3, r3, #3
 8005176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005188:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a27      	ldr	r2, [pc, #156]	; (8005238 <TIM_OC3_SetConfig+0xfc>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_OC3_SetConfig+0x6a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a26      	ldr	r2, [pc, #152]	; (800523c <TIM_OC3_SetConfig+0x100>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d10d      	bne.n	80051c2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051c0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a1c      	ldr	r2, [pc, #112]	; (8005238 <TIM_OC3_SetConfig+0xfc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00f      	beq.n	80051ea <TIM_OC3_SetConfig+0xae>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a1b      	ldr	r2, [pc, #108]	; (800523c <TIM_OC3_SetConfig+0x100>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00b      	beq.n	80051ea <TIM_OC3_SetConfig+0xae>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1a      	ldr	r2, [pc, #104]	; (8005240 <TIM_OC3_SetConfig+0x104>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d007      	beq.n	80051ea <TIM_OC3_SetConfig+0xae>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a19      	ldr	r2, [pc, #100]	; (8005244 <TIM_OC3_SetConfig+0x108>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d003      	beq.n	80051ea <TIM_OC3_SetConfig+0xae>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a18      	ldr	r2, [pc, #96]	; (8005248 <TIM_OC3_SetConfig+0x10c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d113      	bne.n	8005212 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	621a      	str	r2, [r3, #32]
}
 800522c:	bf00      	nop
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40013400 	.word	0x40013400
 8005240:	40014000 	.word	0x40014000
 8005244:	40014400 	.word	0x40014400
 8005248:	40014800 	.word	0x40014800

0800524c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800527a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800529a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	031b      	lsls	r3, r3, #12
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a18      	ldr	r2, [pc, #96]	; (800530c <TIM_OC4_SetConfig+0xc0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00f      	beq.n	80052d0 <TIM_OC4_SetConfig+0x84>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a17      	ldr	r2, [pc, #92]	; (8005310 <TIM_OC4_SetConfig+0xc4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00b      	beq.n	80052d0 <TIM_OC4_SetConfig+0x84>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a16      	ldr	r2, [pc, #88]	; (8005314 <TIM_OC4_SetConfig+0xc8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d007      	beq.n	80052d0 <TIM_OC4_SetConfig+0x84>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a15      	ldr	r2, [pc, #84]	; (8005318 <TIM_OC4_SetConfig+0xcc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_OC4_SetConfig+0x84>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a14      	ldr	r2, [pc, #80]	; (800531c <TIM_OC4_SetConfig+0xd0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d109      	bne.n	80052e4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	019b      	lsls	r3, r3, #6
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40012c00 	.word	0x40012c00
 8005310:	40013400 	.word	0x40013400
 8005314:	40014000 	.word	0x40014000
 8005318:	40014400 	.word	0x40014400
 800531c:	40014800 	.word	0x40014800

08005320 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800534e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005364:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	041b      	lsls	r3, r3, #16
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a17      	ldr	r2, [pc, #92]	; (80053d4 <TIM_OC5_SetConfig+0xb4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00f      	beq.n	800539a <TIM_OC5_SetConfig+0x7a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a16      	ldr	r2, [pc, #88]	; (80053d8 <TIM_OC5_SetConfig+0xb8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00b      	beq.n	800539a <TIM_OC5_SetConfig+0x7a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a15      	ldr	r2, [pc, #84]	; (80053dc <TIM_OC5_SetConfig+0xbc>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d007      	beq.n	800539a <TIM_OC5_SetConfig+0x7a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a14      	ldr	r2, [pc, #80]	; (80053e0 <TIM_OC5_SetConfig+0xc0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d003      	beq.n	800539a <TIM_OC5_SetConfig+0x7a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a13      	ldr	r2, [pc, #76]	; (80053e4 <TIM_OC5_SetConfig+0xc4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d109      	bne.n	80053ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	621a      	str	r2, [r3, #32]
}
 80053c8:	bf00      	nop
 80053ca:	371c      	adds	r7, #28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	40012c00 	.word	0x40012c00
 80053d8:	40013400 	.word	0x40013400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40014400 	.word	0x40014400
 80053e4:	40014800 	.word	0x40014800

080053e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800541a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800542e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	051b      	lsls	r3, r3, #20
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	4313      	orrs	r3, r2
 800543a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a18      	ldr	r2, [pc, #96]	; (80054a0 <TIM_OC6_SetConfig+0xb8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00f      	beq.n	8005464 <TIM_OC6_SetConfig+0x7c>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a17      	ldr	r2, [pc, #92]	; (80054a4 <TIM_OC6_SetConfig+0xbc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00b      	beq.n	8005464 <TIM_OC6_SetConfig+0x7c>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a16      	ldr	r2, [pc, #88]	; (80054a8 <TIM_OC6_SetConfig+0xc0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d007      	beq.n	8005464 <TIM_OC6_SetConfig+0x7c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a15      	ldr	r2, [pc, #84]	; (80054ac <TIM_OC6_SetConfig+0xc4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_OC6_SetConfig+0x7c>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a14      	ldr	r2, [pc, #80]	; (80054b0 <TIM_OC6_SetConfig+0xc8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d109      	bne.n	8005478 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800546a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	029b      	lsls	r3, r3, #10
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	40013400 	.word	0x40013400
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40014400 	.word	0x40014400
 80054b0:	40014800 	.word	0x40014800

080054b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f023 0201 	bic.w	r2, r3, #1
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4a24      	ldr	r2, [pc, #144]	; (8005570 <TIM_TI1_SetConfig+0xbc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <TIM_TI1_SetConfig+0x56>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e8:	d00f      	beq.n	800550a <TIM_TI1_SetConfig+0x56>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4a21      	ldr	r2, [pc, #132]	; (8005574 <TIM_TI1_SetConfig+0xc0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00b      	beq.n	800550a <TIM_TI1_SetConfig+0x56>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4a20      	ldr	r2, [pc, #128]	; (8005578 <TIM_TI1_SetConfig+0xc4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d007      	beq.n	800550a <TIM_TI1_SetConfig+0x56>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4a1f      	ldr	r2, [pc, #124]	; (800557c <TIM_TI1_SetConfig+0xc8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d003      	beq.n	800550a <TIM_TI1_SetConfig+0x56>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4a1e      	ldr	r2, [pc, #120]	; (8005580 <TIM_TI1_SetConfig+0xcc>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d101      	bne.n	800550e <TIM_TI1_SetConfig+0x5a>
 800550a:	2301      	movs	r3, #1
 800550c:	e000      	b.n	8005510 <TIM_TI1_SetConfig+0x5c>
 800550e:	2300      	movs	r3, #0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4313      	orrs	r3, r2
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	e003      	b.n	800552e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005534:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	b2db      	uxtb	r3, r3
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f023 030a 	bic.w	r3, r3, #10
 8005548:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f003 030a 	and.w	r3, r3, #10
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40000400 	.word	0x40000400
 8005578:	40000800 	.word	0x40000800
 800557c:	40013400 	.word	0x40013400
 8005580:	40014000 	.word	0x40014000

08005584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 030a 	bic.w	r3, r3, #10
 80055c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b087      	sub	sp, #28
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
 80055ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	f023 0210 	bic.w	r2, r3, #16
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005620:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	031b      	lsls	r3, r3, #12
 8005626:	b29b      	uxth	r3, r3
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005634:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	f023 0210 	bic.w	r2, r3, #16
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005686:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	031b      	lsls	r3, r3, #12
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005698:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	621a      	str	r2, [r3, #32]
}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f023 0303 	bic.w	r3, r3, #3
 80056e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800570c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	621a      	str	r2, [r3, #32]
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005760:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	021b      	lsls	r3, r3, #8
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4313      	orrs	r3, r2
 800576a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005772:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	031b      	lsls	r3, r3, #12
 8005778:	b29b      	uxth	r3, r3
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005786:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	031b      	lsls	r3, r3, #12
 800578c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	621a      	str	r2, [r3, #32]
}
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f043 0307 	orr.w	r3, r3, #7
 80057d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	609a      	str	r2, [r3, #8]
}
 80057d8:	bf00      	nop
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	021a      	lsls	r2, r3, #8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	431a      	orrs	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4313      	orrs	r3, r2
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	609a      	str	r2, [r3, #8]
}
 8005818:	bf00      	nop
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	2201      	movs	r2, #1
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1a      	ldr	r2, [r3, #32]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	43db      	mvns	r3, r3
 8005846:	401a      	ands	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a1a      	ldr	r2, [r3, #32]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f003 031f 	and.w	r3, r3, #31
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	fa01 f303 	lsl.w	r3, r1, r3
 800585c:	431a      	orrs	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	621a      	str	r2, [r3, #32]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005884:	2302      	movs	r3, #2
 8005886:	e063      	b.n	8005950 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a2b      	ldr	r2, [pc, #172]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2a      	ldr	r2, [pc, #168]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d108      	bne.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1b      	ldr	r2, [pc, #108]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d018      	beq.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fa:	d013      	beq.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a18      	ldr	r2, [pc, #96]	; (8005964 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00e      	beq.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a17      	ldr	r2, [pc, #92]	; (8005968 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d009      	beq.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a12      	ldr	r2, [pc, #72]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a13      	ldr	r2, [pc, #76]	; (800596c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d10c      	bne.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800592a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	4313      	orrs	r3, r2
 8005934:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	40012c00 	.word	0x40012c00
 8005960:	40013400 	.word	0x40013400
 8005964:	40000400 	.word	0x40000400
 8005968:	40000800 	.word	0x40000800
 800596c:	40014000 	.word	0x40014000

08005970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059b4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80059b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	43db      	mvns	r3, r3
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	4013      	ands	r3, r2
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80059e2:	b084      	sub	sp, #16
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	f107 0014 	add.w	r0, r7, #20
 80059f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	b004      	add	sp, #16
 8005a22:	4770      	bx	lr

08005a24 <__libc_init_array>:
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	4d0d      	ldr	r5, [pc, #52]	; (8005a5c <__libc_init_array+0x38>)
 8005a28:	4c0d      	ldr	r4, [pc, #52]	; (8005a60 <__libc_init_array+0x3c>)
 8005a2a:	1b64      	subs	r4, r4, r5
 8005a2c:	10a4      	asrs	r4, r4, #2
 8005a2e:	2600      	movs	r6, #0
 8005a30:	42a6      	cmp	r6, r4
 8005a32:	d109      	bne.n	8005a48 <__libc_init_array+0x24>
 8005a34:	4d0b      	ldr	r5, [pc, #44]	; (8005a64 <__libc_init_array+0x40>)
 8005a36:	4c0c      	ldr	r4, [pc, #48]	; (8005a68 <__libc_init_array+0x44>)
 8005a38:	f000 f828 	bl	8005a8c <_init>
 8005a3c:	1b64      	subs	r4, r4, r5
 8005a3e:	10a4      	asrs	r4, r4, #2
 8005a40:	2600      	movs	r6, #0
 8005a42:	42a6      	cmp	r6, r4
 8005a44:	d105      	bne.n	8005a52 <__libc_init_array+0x2e>
 8005a46:	bd70      	pop	{r4, r5, r6, pc}
 8005a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a4c:	4798      	blx	r3
 8005a4e:	3601      	adds	r6, #1
 8005a50:	e7ee      	b.n	8005a30 <__libc_init_array+0xc>
 8005a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a56:	4798      	blx	r3
 8005a58:	3601      	adds	r6, #1
 8005a5a:	e7f2      	b.n	8005a42 <__libc_init_array+0x1e>
 8005a5c:	08005bbc 	.word	0x08005bbc
 8005a60:	08005bbc 	.word	0x08005bbc
 8005a64:	08005bbc 	.word	0x08005bbc
 8005a68:	08005bc0 	.word	0x08005bc0

08005a6c <memset>:
 8005a6c:	4402      	add	r2, r0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d100      	bne.n	8005a76 <memset+0xa>
 8005a74:	4770      	bx	lr
 8005a76:	f803 1b01 	strb.w	r1, [r3], #1
 8005a7a:	e7f9      	b.n	8005a70 <memset+0x4>

08005a7c <strcpy>:
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a82:	f803 2b01 	strb.w	r2, [r3], #1
 8005a86:	2a00      	cmp	r2, #0
 8005a88:	d1f9      	bne.n	8005a7e <strcpy+0x2>
 8005a8a:	4770      	bx	lr

08005a8c <_init>:
 8005a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8e:	bf00      	nop
 8005a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a92:	bc08      	pop	{r3}
 8005a94:	469e      	mov	lr, r3
 8005a96:	4770      	bx	lr

08005a98 <_fini>:
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9a:	bf00      	nop
 8005a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9e:	bc08      	pop	{r3}
 8005aa0:	469e      	mov	lr, r3
 8005aa2:	4770      	bx	lr
