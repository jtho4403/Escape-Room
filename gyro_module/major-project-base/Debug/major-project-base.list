
major-project-base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  0800bcc8  0800bcc8  0001bcc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c550  0800c550  00020410  2**0
                  CONTENTS
  4 .ARM          00000000  0800c550  0800c550  00020410  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c550  0800c550  00020410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c550  0800c550  0001c550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c554  0800c554  0001c554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  0800c558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020410  2**0
                  CONTENTS
 10 .bss          000004e0  20000410  20000410  00020410  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008f0  200008f0  00020410  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003689  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b9f  00000000  00000000  00023ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  00024668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f8  00000000  00000000  000258b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e94d  00000000  00000000  000269a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003004  00000000  00000000  000352f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000382f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006550  00000000  00000000  0003834c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000410 	.word	0x20000410
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bcac 	.word	0x0800bcac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000414 	.word	0x20000414
 80001cc:	0800bcac 	.word	0x0800bcac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <enable_clocks>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <enable_clocks+0x1c>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <enable_clocks+0x1c>)
 8000c92:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000c96:	6153      	str	r3, [r2, #20]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <initialise_board+0x20>)
 8000cb0:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f245 5255 	movw	r2, #21845	; 0x5555
 8000cb8:	801a      	strh	r2, [r3, #0]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	48001002 	.word	0x48001002

08000ccc <HAL_TIM_IC_CaptureCallback>:
uint16_t last_period = 0;

float x = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	; 0x30
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[32];
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d127      	bne.n	8000d2e <HAL_TIM_IC_CaptureCallback+0x62>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7f1b      	ldrb	r3, [r3, #28]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d123      	bne.n	8000d2e <HAL_TIM_IC_CaptureCallback+0x62>
	{
		uint16_t IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f005 fcad 	bl	8006648 <HAL_TIM_ReadCapturedValue>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	85fb      	strh	r3, [r7, #46]	; 0x2e

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 8000cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfa:	f002 fb97 	bl	800342c <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d103      	bne.n	8000d0c <HAL_TIM_IC_CaptureCallback+0x40>
			rise_time = IC_Val1;
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_TIM_IC_CaptureCallback+0x70>)
 8000d06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d08:	8013      	strh	r3, [r2, #0]
 8000d0a:	e006      	b.n	8000d1a <HAL_TIM_IC_CaptureCallback+0x4e>
		else
			last_period = IC_Val1 - rise_time;
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_TIM_IC_CaptureCallback+0x70>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000d18:	801a      	strh	r2, [r3, #0]

		diff = IC_Val1 - last_capture;
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000d26:	801a      	strh	r2, [r3, #0]
		last_capture = IC_Val1;
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000d2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d2c:	8013      	strh	r3, [r2, #0]
	}
}
 8000d2e:	bf00      	nop
 8000d30:	3730      	adds	r7, #48	; 0x30
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	200008c0 	.word	0x200008c0
 8000d40:	200008c2 	.word	0x200008c2
 8000d44:	200008bc 	.word	0x200008bc
 8000d48:	200008be 	.word	0x200008be
 8000d4c:	00000000 	.word	0x00000000

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d54:	ed2d 8b02 	vpush	{d8}
 8000d58:	b0b8      	sub	sp, #224	; 0xe0
 8000d5a:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	enable_clocks();
 8000d5c:	f7ff ff94 	bl	8000c88 <enable_clocks>
	initialise_board();
 8000d60:	f7ff ffa2 	bl	8000ca8 <initialise_board>

	LedRegister *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000d64:	4bc3      	ldr	r3, [pc, #780]	; (8001074 <main+0x324>)
 8000d66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	49c2      	ldr	r1, [pc, #776]	; (8001078 <main+0x328>)
 8000d6e:	2004      	movs	r0, #4
 8000d70:	f001 fc1e 	bl	80025b0 <SerialInitialise>


	HAL_StatusTypeDef return_value = 0x00;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	volatile uint16_t vertical_PWM = 1000;
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	847b      	strh	r3, [r7, #34]	; 0x22
	volatile uint16_t horizontal_PWM = 1000;
 8000d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d84:	843b      	strh	r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d86:	f002 f83b 	bl	8002e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f001 f847 	bl	8001e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f001 fa01 	bl	8002194 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d92:	f001 f8a9 	bl	8001ee8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d96:	f001 f927 	bl	8001fe8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d9a:	f001 f9d9 	bl	8002150 <MX_USB_PCD_Init>
  //MX_TIM2_Init();
  MX_TIM1_Init();
 8000d9e:	f001 f961 	bl	8002064 <MX_TIM1_Init>
  MX_I2C2_Init();
 8000da2:	f001 f8e1 	bl	8001f68 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // PAN
 8000da6:	2100      	movs	r1, #0
 8000da8:	48b4      	ldr	r0, [pc, #720]	; (800107c <main+0x32c>)
 8000daa:	f004 ff25 	bl	8005bf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // TILT
 8000dae:	2104      	movs	r1, #4
 8000db0:	48b2      	ldr	r0, [pc, #712]	; (800107c <main+0x32c>)
 8000db2:	f004 ff21 	bl	8005bf8 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // LIDAR
 8000db6:	2100      	movs	r1, #0
 8000db8:	48b1      	ldr	r0, [pc, #708]	; (8001080 <main+0x330>)
 8000dba:	f005 f87f 	bl	8005ebc <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 8000dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dc2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 8000dc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd6:	6013      	str	r3, [r2, #0]
	// NVIC_EnableIRQ(TIM2_IRQn);

	// literallty set the PTU registers using I2C
	// Stews code to initalise HAL_TYPE_STRUCT used for I2C communications
	// he is exrecting a certain stream of infromation and sets it up like so
	initialise_ptu_i2c(&hi2c2);
 8000dd8:	48aa      	ldr	r0, [pc, #680]	; (8001084 <main+0x334>)
 8000dda:	f001 fa77 	bl	80022cc <initialise_ptu_i2c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	// reset lidar board
	uint8_t reset_value = 0x00;
 8000dde:	2300      	movs	r3, #0
 8000de0:	77fb      	strb	r3, [r7, #31]
	return_value = HAL_I2C_Mem_Write(&hi2c2, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000de2:	230a      	movs	r3, #10
 8000de4:	9302      	str	r3, [sp, #8]
 8000de6:	2301      	movs	r3, #1
 8000de8:	9301      	str	r3, [sp, #4]
 8000dea:	f107 031f 	add.w	r3, r7, #31
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2301      	movs	r3, #1
 8000df2:	2200      	movs	r2, #0
 8000df4:	21c4      	movs	r1, #196	; 0xc4
 8000df6:	48a3      	ldr	r0, [pc, #652]	; (8001084 <main+0x334>)
 8000df8:	f002 fbd8 	bl	80035ac <HAL_I2C_Mem_Write>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	uint8_t PWM_direction_clockwise = 1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	// delay for initialisation of the lidar
	HAL_Delay(100);
 8000e08:	2064      	movs	r0, #100	; 0x64
 8000e0a:	f002 f85f 	bl	8002ecc <HAL_Delay>

	uint16_t time = 100; // 4 seconds = 4000ms // 10ms = 10
 8000e0e:	2364      	movs	r3, #100	; 0x64
 8000e10:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	//Idea get a interrupt every 10ms
	up_count_TIM3(time, PTU_callback_function);
 8000e14:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8000e18:	499b      	ldr	r1, [pc, #620]	; (8001088 <main+0x338>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 ff6e 	bl	8002cfc <up_count_TIM3>

	float x_acc = 0.0;
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	float y_acc = 0.0;
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	float z_acc = 0.0;
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	float x_v = 0.0;
 8000e38:	f04f 0300 	mov.w	r3, #0
 8000e3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float y_v = 0.0;
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float z_v = 0.0;
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float x_angle = 0.0;
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float y_angle = 0.0;
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float z_angle = 0.0;
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	float p_rps = 0.0;
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float q_rps = 0.0;
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	float r_rps = 0.0;
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float global_roll = 0.0;
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	float global_pitch = 0.0;
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float global_yaw = 0.0;
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	while (1)
	{
		if (PWM_direction_clockwise == 1) {
 8000e98:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d10a      	bne.n	8000eb6 <main+0x166>
			vertical_PWM += 3;
 8000ea0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	3303      	adds	r3, #3
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	847b      	strh	r3, [r7, #34]	; 0x22
			horizontal_PWM += 3;
 8000eaa:	8c3b      	ldrh	r3, [r7, #32]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	3303      	adds	r3, #3
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	843b      	strh	r3, [r7, #32]
 8000eb4:	e009      	b.n	8000eca <main+0x17a>
		}
		else {
			vertical_PWM -= 3;
 8000eb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	3b03      	subs	r3, #3
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	847b      	strh	r3, [r7, #34]	; 0x22
			horizontal_PWM -= 3;
 8000ec0:	8c3b      	ldrh	r3, [r7, #32]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	3b03      	subs	r3, #3
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	843b      	strh	r3, [r7, #32]
		}

		if (vertical_PWM > 1900) {
 8000eca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	f240 726c 	movw	r2, #1900	; 0x76c
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d905      	bls.n	8000ee2 <main+0x192>
			vertical_PWM = 1900;
 8000ed6:	f240 736c 	movw	r3, #1900	; 0x76c
 8000eda:	847b      	strh	r3, [r7, #34]	; 0x22
			PWM_direction_clockwise = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}
		if (vertical_PWM < 1200) {
 8000ee2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000eea:	d205      	bcs.n	8000ef8 <main+0x1a8>
			vertical_PWM = 1200;
 8000eec:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000ef0:	847b      	strh	r3, [r7, #34]	; 0x22
			PWM_direction_clockwise = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}

		TIM2->CCR1 = vertical_PWM;
 8000ef8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = horizontal_PWM;
 8000f02:	8c3b      	ldrh	r3, [r7, #32]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f0a:	639a      	str	r2, [r3, #56]	; 0x38


		uint8_t xMSB = 0x00;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	77bb      	strb	r3, [r7, #30]
		HAL_I2C_Mem_Read(&hi2c2,gyro_rd, 0x29, 1, &xMSB, 1, 10);
 8000f10:	230a      	movs	r3, #10
 8000f12:	9302      	str	r3, [sp, #8]
 8000f14:	2301      	movs	r3, #1
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	f107 031e 	add.w	r3, r7, #30
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	2229      	movs	r2, #41	; 0x29
 8000f22:	21d3      	movs	r1, #211	; 0xd3
 8000f24:	4857      	ldr	r0, [pc, #348]	; (8001084 <main+0x334>)
 8000f26:	f002 fc55 	bl	80037d4 <HAL_I2C_Mem_Read>
		uint8_t xLSB = 0x00;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	777b      	strb	r3, [r7, #29]
		HAL_I2C_Mem_Read(&hi2c2,gyro_rd, 0x28, 1, &xLSB, 1, 10);
 8000f2e:	230a      	movs	r3, #10
 8000f30:	9302      	str	r3, [sp, #8]
 8000f32:	2301      	movs	r3, #1
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	f107 031d 	add.w	r3, r7, #29
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2228      	movs	r2, #40	; 0x28
 8000f40:	21d3      	movs	r1, #211	; 0xd3
 8000f42:	4850      	ldr	r0, [pc, #320]	; (8001084 <main+0x334>)
 8000f44:	f002 fc46 	bl	80037d4 <HAL_I2C_Mem_Read>
		int16_t yaw_rate = ((xMSB << 8) | xLSB);
 8000f48:	7fbb      	ldrb	r3, [r7, #30]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	7f7b      	ldrb	r3, [r7, #29]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

		uint8_t yMSB = 0x00;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	773b      	strb	r3, [r7, #28]
		HAL_I2C_Mem_Read(&hi2c2,gyro_rd, 0x2B, 1, &yMSB, 1, 10);
 8000f5c:	230a      	movs	r3, #10
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	2301      	movs	r3, #1
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	222b      	movs	r2, #43	; 0x2b
 8000f6e:	21d3      	movs	r1, #211	; 0xd3
 8000f70:	4844      	ldr	r0, [pc, #272]	; (8001084 <main+0x334>)
 8000f72:	f002 fc2f 	bl	80037d4 <HAL_I2C_Mem_Read>
		uint8_t yLSB = 0x00;
 8000f76:	2300      	movs	r3, #0
 8000f78:	76fb      	strb	r3, [r7, #27]
		HAL_I2C_Mem_Read(&hi2c2,gyro_rd, 0x2A, 1, &yLSB, 1, 10);
 8000f7a:	230a      	movs	r3, #10
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	f107 031b 	add.w	r3, r7, #27
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	222a      	movs	r2, #42	; 0x2a
 8000f8c:	21d3      	movs	r1, #211	; 0xd3
 8000f8e:	483d      	ldr	r0, [pc, #244]	; (8001084 <main+0x334>)
 8000f90:	f002 fc20 	bl	80037d4 <HAL_I2C_Mem_Read>
		int16_t pitch_rate = ((yMSB << 8) | yLSB);
 8000f94:	7f3b      	ldrb	r3, [r7, #28]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7efb      	ldrb	r3, [r7, #27]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

		uint8_t zMSB = 0x00;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	76bb      	strb	r3, [r7, #26]
		HAL_I2C_Mem_Read(&hi2c2,gyro_rd, 0x2D, 1, &zMSB, 1, 10);
 8000fa8:	230a      	movs	r3, #10
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	f107 031a 	add.w	r3, r7, #26
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	222d      	movs	r2, #45	; 0x2d
 8000fba:	21d3      	movs	r1, #211	; 0xd3
 8000fbc:	4831      	ldr	r0, [pc, #196]	; (8001084 <main+0x334>)
 8000fbe:	f002 fc09 	bl	80037d4 <HAL_I2C_Mem_Read>
		uint8_t zLSB = 0x00;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Mem_Read(&hi2c2,gyro_rd, 0x2C, 1, &zLSB, 1, 10);
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	9302      	str	r3, [sp, #8]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	f107 0319 	add.w	r3, r7, #25
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	222c      	movs	r2, #44	; 0x2c
 8000fd8:	21d3      	movs	r1, #211	; 0xd3
 8000fda:	482a      	ldr	r0, [pc, #168]	; (8001084 <main+0x334>)
 8000fdc:	f002 fbfa 	bl	80037d4 <HAL_I2C_Mem_Read>
		int16_t roll_rate = ((zMSB << 8) | zLSB);
 8000fe0:	7ebb      	ldrb	r3, [r7, #26]
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	7e7b      	ldrb	r3, [r7, #25]
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

		if (pitch_rate < 0)
 8000ff0:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	da07      	bge.n	8001008 <main+0x2b8>
			led_register->led_groups.led_pair_1 = 0b01;
 8000ff8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000ffc:	7813      	ldrb	r3, [r2, #0]
 8000ffe:	2101      	movs	r1, #1
 8001000:	f361 0301 	bfi	r3, r1, #0, #2
 8001004:	7013      	strb	r3, [r2, #0]
 8001006:	e006      	b.n	8001016 <main+0x2c6>
		else
			led_register->led_groups.led_pair_1 = 0b10;
 8001008:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800100c:	7813      	ldrb	r3, [r2, #0]
 800100e:	2102      	movs	r1, #2
 8001010:	f361 0301 	bfi	r3, r1, #0, #2
 8001014:	7013      	strb	r3, [r2, #0]

		if (yaw_rate < 0)
 8001016:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800101a:	2b00      	cmp	r3, #0
 800101c:	da07      	bge.n	800102e <main+0x2de>
			led_register->led_groups.led_pair_2 = 1;
 800101e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001022:	7813      	ldrb	r3, [r2, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	f361 0383 	bfi	r3, r1, #2, #2
 800102a:	7013      	strb	r3, [r2, #0]
 800102c:	e006      	b.n	800103c <main+0x2ec>
		else
			led_register->led_groups.led_pair_2 = 2;
 800102e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001032:	7813      	ldrb	r3, [r2, #0]
 8001034:	2102      	movs	r1, #2
 8001036:	f361 0383 	bfi	r3, r1, #2, #2
 800103a:	7013      	strb	r3, [r2, #0]


		uint8_t lidar_value = 0x03;
 800103c:	2303      	movs	r3, #3
 800103e:	763b      	strb	r3, [r7, #24]
		return_value = HAL_I2C_Mem_Write(&hi2c2, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	2301      	movs	r3, #1
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	f107 0318 	add.w	r3, r7, #24
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2200      	movs	r2, #0
 8001052:	21c4      	movs	r1, #196	; 0xc4
 8001054:	480b      	ldr	r0, [pc, #44]	; (8001084 <main+0x334>)
 8001056:	f002 faa9 	bl	80035ac <HAL_I2C_Mem_Write>
 800105a:	4603      	mov	r3, r0
 800105c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

		lidar_value = 0xff;
 8001060:	23ff      	movs	r3, #255	; 0xff
 8001062:	763b      	strb	r3, [r7, #24]

		uint8_t lidar_MSBa = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	75fb      	strb	r3, [r7, #23]
		uint8_t lidar_LSBa = 0x00;
 8001068:	2300      	movs	r3, #0
 800106a:	75bb      	strb	r3, [r7, #22]

		volatile uint16_t lidar_distance = 0xff;
 800106c:	23ff      	movs	r3, #255	; 0xff
 800106e:	82bb      	strh	r3, [r7, #20]

		uint16_t timeout;
// some WERID ERROS happen here
		while ((lidar_value & 0x01) != 0x00) {
 8001070:	e04e      	b.n	8001110 <main+0x3c0>
 8001072:	bf00      	nop
 8001074:	48001015 	.word	0x48001015
 8001078:	200001f4 	.word	0x200001f4
 800107c:	20000584 	.word	0x20000584
 8001080:	20000538 	.word	0x20000538
 8001084:	20000480 	.word	0x20000480
 8001088:	08002291 	.word	0x08002291
			return_value = HAL_I2C_Mem_Read(&hi2c2, LIDAR_RD, 0x01, 1, &lidar_value, 1, 100);
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	2301      	movs	r3, #1
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	2201      	movs	r2, #1
 800109e:	21c5      	movs	r1, #197	; 0xc5
 80010a0:	481e      	ldr	r0, [pc, #120]	; (800111c <main+0x3cc>)
 80010a2:	f002 fb97 	bl	80037d4 <HAL_I2C_Mem_Read>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			return_value = HAL_I2C_Mem_Read(&hi2c2, LIDAR_RD, 0x0f, 1, &lidar_MSBa, 1, 100);
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	2301      	movs	r3, #1
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	f107 0317 	add.w	r3, r7, #23
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	220f      	movs	r2, #15
 80010be:	21c5      	movs	r1, #197	; 0xc5
 80010c0:	4816      	ldr	r0, [pc, #88]	; (800111c <main+0x3cc>)
 80010c2:	f002 fb87 	bl	80037d4 <HAL_I2C_Mem_Read>
 80010c6:	4603      	mov	r3, r0
 80010c8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			return_value = HAL_I2C_Mem_Read(&hi2c2, LIDAR_RD, 0x10, 1, &lidar_LSBa, 1, 100);
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	9302      	str	r3, [sp, #8]
 80010d0:	2301      	movs	r3, #1
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	f107 0316 	add.w	r3, r7, #22
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2301      	movs	r3, #1
 80010dc:	2210      	movs	r2, #16
 80010de:	21c5      	movs	r1, #197	; 0xc5
 80010e0:	480e      	ldr	r0, [pc, #56]	; (800111c <main+0x3cc>)
 80010e2:	f002 fb77 	bl	80037d4 <HAL_I2C_Mem_Read>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			lidar_distance = ((lidar_MSBa << 8) | lidar_LSBa);
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	7dbb      	ldrb	r3, [r7, #22]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	82bb      	strh	r3, [r7, #20]
			timeout += 1;
 80010fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001102:	3301      	adds	r3, #1
 8001104:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
			if (timeout > 0xff)
 8001108:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800110c:	2bff      	cmp	r3, #255	; 0xff
 800110e:	d807      	bhi.n	8001120 <main+0x3d0>
		while ((lidar_value & 0x01) != 0x00) {
 8001110:	7e3b      	ldrb	r3, [r7, #24]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1b8      	bne.n	800108c <main+0x33c>
 800111a:	e002      	b.n	8001122 <main+0x3d2>
 800111c:	20000480 	.word	0x20000480
				break;
 8001120:	bf00      	nop
		}

		uint8_t lidar_ranges = lidar_distance / (100/4); // 100cm broken into 4 groups
 8001122:	8abb      	ldrh	r3, [r7, #20]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4ad8      	ldr	r2, [pc, #864]	; (8001488 <main+0x738>)
 8001128:	fba2 2303 	umull	r2, r3, r2, r3
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	b29b      	uxth	r3, r3
 8001130:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
		if (lidar_ranges > 3)
 8001134:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001138:	2b03      	cmp	r3, #3
 800113a:	d902      	bls.n	8001142 <main+0x3f2>
			lidar_ranges = 3;
 800113c:	2303      	movs	r3, #3
 800113e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

		uint8_t led_values = pow(2, lidar_ranges);
 8001142:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9dc 	bl	8000504 <__aeabi_ui2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	ec43 2b11 	vmov	d1, r2, r3
 8001154:	ed9f 0bc6 	vldr	d0, [pc, #792]	; 8001470 <main+0x720>
 8001158:	f009 f87a 	bl	800a250 <pow>
 800115c:	ec53 2b10 	vmov	r2, r3, d0
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fd20 	bl	8000ba8 <__aeabi_d2uiz>
 8001168:	4603      	mov	r3, r0
 800116a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

		led_register->led_groups.led_set_of_4 = led_values;
 800116e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	b2d9      	uxtb	r1, r3
 8001178:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800117c:	7813      	ldrb	r3, [r2, #0]
 800117e:	f361 1307 	bfi	r3, r1, #4, #4
 8001182:	7013      	strb	r3, [r2, #0]

		volatile int read_values_now = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]

		if (last_period > 4000)
 8001188:	4bc0      	ldr	r3, [pc, #768]	; (800148c <main+0x73c>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001190:	d903      	bls.n	800119a <main+0x44a>
			last_period = 5000;
 8001192:	4bbe      	ldr	r3, [pc, #760]	; (800148c <main+0x73c>)
 8001194:	f241 3288 	movw	r2, #5000	; 0x1388
 8001198:	801a      	strh	r2, [r3, #0]
		if (lidar_distance > 4000)
 800119a:	8abb      	ldrh	r3, [r7, #20]
 800119c:	b29b      	uxth	r3, r3
 800119e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80011a2:	d902      	bls.n	80011aa <main+0x45a>
			lidar_distance = 5500;
 80011a4:	f241 537c 	movw	r3, #5500	; 0x157c
 80011a8:	82bb      	strh	r3, [r7, #20]
		// Read the magnetometer

		uint8_t mag_setting = 0b11111100;
 80011aa:	23fc      	movs	r3, #252	; 0xfc
 80011ac:	73fb      	strb	r3, [r7, #15]
		return_value = HAL_I2C_Mem_Write(&hi2c2, magnet_wr, 0x02, 1, &mag_setting, 1, 10);
 80011ae:	230a      	movs	r3, #10
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2301      	movs	r3, #1
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	f107 030f 	add.w	r3, r7, #15
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	2202      	movs	r2, #2
 80011c0:	213c      	movs	r1, #60	; 0x3c
 80011c2:	48b3      	ldr	r0, [pc, #716]	; (8001490 <main+0x740>)
 80011c4:	f002 f9f2 	bl	80035ac <HAL_I2C_Mem_Write>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

		uint8_t mag_data_buf[6];
		return_value = HAL_I2C_Mem_Read(&hi2c2, magnet_rd, 0x03, 1, mag_data_buf, 6, 10);
 80011ce:	230a      	movs	r3, #10
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2306      	movs	r3, #6
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	213d      	movs	r1, #61	; 0x3d
 80011e2:	48ab      	ldr	r0, [pc, #684]	; (8001490 <main+0x740>)
 80011e4:	f002 faf6 	bl	80037d4 <HAL_I2C_Mem_Read>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		int16_t x_mag = ((mag_data_buf[0] << 8) | mag_data_buf[1]);
 80011ee:	7a3b      	ldrb	r3, [r7, #8]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	7a7b      	ldrb	r3, [r7, #9]
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4313      	orrs	r3, r2
 80011fa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
		int16_t z_mag = ((mag_data_buf[2] << 8) | mag_data_buf[3]);
 80011fe:	7abb      	ldrb	r3, [r7, #10]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7afb      	ldrb	r3, [r7, #11]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
		int16_t y_mag = ((mag_data_buf[4] << 8) | mag_data_buf[5]);
 800120e:	7b3b      	ldrb	r3, [r7, #12]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b21a      	sxth	r2, r3
 8001214:	7b7b      	ldrb	r3, [r7, #13]
 8001216:	b21b      	sxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

		// I'm so confused it seems stw things roll is z yaw is x pitch is y??

		// Read acceleration values from ADXL345 registers
		uint8_t buffer[6];
		HAL_I2C_Mem_Read(&hi2c2, accel_rd, 0x32, 1, buffer, 6, 10);
 800121e:	230a      	movs	r3, #10
 8001220:	9302      	str	r3, [sp, #8]
 8001222:	2306      	movs	r3, #6
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	463b      	mov	r3, r7
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2301      	movs	r3, #1
 800122c:	2232      	movs	r2, #50	; 0x32
 800122e:	21a7      	movs	r1, #167	; 0xa7
 8001230:	4897      	ldr	r0, [pc, #604]	; (8001490 <main+0x740>)
 8001232:	f002 facf 	bl	80037d4 <HAL_I2C_Mem_Read>
		int16_t x_acceleration = ((buffer[1] << 8) | buffer[0]);
 8001236:	787b      	ldrb	r3, [r7, #1]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21a      	sxth	r2, r3
 800123c:	783b      	ldrb	r3, [r7, #0]
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		int16_t y_acceleration = ((buffer[3] << 8) | buffer[2]);
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	b21a      	sxth	r2, r3
 800124c:	78bb      	ldrb	r3, [r7, #2]
 800124e:	b21b      	sxth	r3, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		int16_t z_acceleration = ((buffer[5] << 8) | buffer[4]);
 8001256:	797b      	ldrb	r3, [r7, #5]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b21a      	sxth	r2, r3
 800125c:	793b      	ldrb	r3, [r7, #4]
 800125e:	b21b      	sxth	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70


		// I think these calcs are wrong but wait and see
		int32_t x_input = y_acceleration*y_acceleration + z_acceleration*z_acceleration;
 8001266:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800126a:	f9b7 2072 	ldrsh.w	r2, [r7, #114]	; 0x72
 800126e:	fb03 f202 	mul.w	r2, r3, r2
 8001272:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8001276:	f9b7 1070 	ldrsh.w	r1, [r7, #112]	; 0x70
 800127a:	fb01 f303 	mul.w	r3, r1, r3
 800127e:	4413      	add	r3, r2
 8001280:	66fb      	str	r3, [r7, #108]	; 0x6c
		int32_t y_input = x_acceleration*x_acceleration + z_acceleration*z_acceleration;
 8001282:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8001286:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 800128a:	fb03 f202 	mul.w	r2, r3, r2
 800128e:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8001292:	f9b7 1070 	ldrsh.w	r1, [r7, #112]	; 0x70
 8001296:	fb01 f303 	mul.w	r3, r1, r3
 800129a:	4413      	add	r3, r2
 800129c:	66bb      	str	r3, [r7, #104]	; 0x68
		int32_t z_input = x_acceleration*x_acceleration + y_acceleration*y_acceleration;
 800129e:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80012a2:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 80012a6:	fb03 f202 	mul.w	r2, r3, r2
 80012aa:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80012ae:	f9b7 1072 	ldrsh.w	r1, [r7, #114]	; 0x72
 80012b2:	fb01 f303 	mul.w	r3, r1, r3
 80012b6:	4413      	add	r3, r2
 80012b8:	667b      	str	r3, [r7, #100]	; 0x64
		float ax_roll = (180/3.14)*atan(y_acceleration/sqrt(y_input));
 80012ba:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f930 	bl	8000524 <__aeabi_i2d>
 80012c4:	4604      	mov	r4, r0
 80012c6:	460d      	mov	r5, r1
 80012c8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80012ca:	f7ff f92b 	bl	8000524 <__aeabi_i2d>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	ec43 2b10 	vmov	d0, r2, r3
 80012d6:	f009 f82b 	bl	800a330 <sqrt>
 80012da:	ec53 2b10 	vmov	r2, r3, d0
 80012de:	4620      	mov	r0, r4
 80012e0:	4629      	mov	r1, r5
 80012e2:	f7ff fab3 	bl	800084c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	ec43 2b17 	vmov	d7, r2, r3
 80012ee:	eeb0 0a47 	vmov.f32	s0, s14
 80012f2:	eef0 0a67 	vmov.f32	s1, s15
 80012f6:	f008 fc6f 	bl	8009bd8 <atan>
 80012fa:	ec51 0b10 	vmov	r0, r1, d0
 80012fe:	a35e      	add	r3, pc, #376	; (adr r3, 8001478 <main+0x728>)
 8001300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001304:	f7ff f978 	bl	80005f8 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fc6a 	bl	8000be8 <__aeabi_d2f>
 8001314:	4603      	mov	r3, r0
 8001316:	663b      	str	r3, [r7, #96]	; 0x60
		float ax_pitch = (180/3.14)*atan(x_acceleration/sqrt(x_input));
 8001318:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f901 	bl	8000524 <__aeabi_i2d>
 8001322:	4604      	mov	r4, r0
 8001324:	460d      	mov	r5, r1
 8001326:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001328:	f7ff f8fc 	bl	8000524 <__aeabi_i2d>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	ec43 2b10 	vmov	d0, r2, r3
 8001334:	f008 fffc 	bl	800a330 <sqrt>
 8001338:	ec53 2b10 	vmov	r2, r3, d0
 800133c:	4620      	mov	r0, r4
 800133e:	4629      	mov	r1, r5
 8001340:	f7ff fa84 	bl	800084c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	ec43 2b17 	vmov	d7, r2, r3
 800134c:	eeb0 0a47 	vmov.f32	s0, s14
 8001350:	eef0 0a67 	vmov.f32	s1, s15
 8001354:	f008 fc40 	bl	8009bd8 <atan>
 8001358:	ec51 0b10 	vmov	r0, r1, d0
 800135c:	a346      	add	r3, pc, #280	; (adr r3, 8001478 <main+0x728>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff f949 	bl	80005f8 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fc3b 	bl	8000be8 <__aeabi_d2f>
 8001372:	4603      	mov	r3, r0
 8001374:	65fb      	str	r3, [r7, #92]	; 0x5c
		float ax_yaw = (180/3.14)*atan(z_acceleration/sqrt(z_input));
 8001376:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f8d2 	bl	8000524 <__aeabi_i2d>
 8001380:	4604      	mov	r4, r0
 8001382:	460d      	mov	r5, r1
 8001384:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001386:	f7ff f8cd 	bl	8000524 <__aeabi_i2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	ec43 2b10 	vmov	d0, r2, r3
 8001392:	f008 ffcd 	bl	800a330 <sqrt>
 8001396:	ec53 2b10 	vmov	r2, r3, d0
 800139a:	4620      	mov	r0, r4
 800139c:	4629      	mov	r1, r5
 800139e:	f7ff fa55 	bl	800084c <__aeabi_ddiv>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	ec43 2b17 	vmov	d7, r2, r3
 80013aa:	eeb0 0a47 	vmov.f32	s0, s14
 80013ae:	eef0 0a67 	vmov.f32	s1, s15
 80013b2:	f008 fc11 	bl	8009bd8 <atan>
 80013b6:	ec51 0b10 	vmov	r0, r1, d0
 80013ba:	a32f      	add	r3, pc, #188	; (adr r3, 8001478 <main+0x728>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7ff f91a 	bl	80005f8 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4610      	mov	r0, r2
 80013ca:	4619      	mov	r1, r3
 80013cc:	f7ff fc0c 	bl	8000be8 <__aeabi_d2f>
 80013d0:	4603      	mov	r3, r0
 80013d2:	65bb      	str	r3, [r7, #88]	; 0x58
		float fYg = (roll_rate+86)*0.00875;
 80013d4:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80013d8:	3356      	adds	r3, #86	; 0x56
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8a2 	bl	8000524 <__aeabi_i2d>
 80013e0:	a327      	add	r3, pc, #156	; (adr r3, 8001480 <main+0x730>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7ff f907 	bl	80005f8 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff fbf9 	bl	8000be8 <__aeabi_d2f>
 80013f6:	4603      	mov	r3, r0
 80013f8:	657b      	str	r3, [r7, #84]	; 0x54


		//float fXg = (roll_rate+86)*0.00875;
		// Do some math to get distance

		float ALPHA = 0.1;
 80013fa:	4b26      	ldr	r3, [pc, #152]	; (8001494 <main+0x744>)
 80013fc:	653b      	str	r3, [r7, #80]	; 0x50
		 * 1. find the offset of acceleration to stablise it
		 * 2. see if can combine acceleration and velocity together to get some values for x y and z
		 * 3.
		 *  */
		// filter out information using low pass filter
		x_acc = ((float)x_acceleration) * 0.00390625 + (1.0-ALPHA)*x_acc;
 80013fe:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	ee17 0a90 	vmov	r0, s15
 800140e:	f7ff f89b 	bl	8000548 <__aeabi_f2d>
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <main+0x748>)
 8001418:	f7ff f8ee 	bl	80005f8 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4614      	mov	r4, r2
 8001422:	461d      	mov	r5, r3
 8001424:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001426:	f7ff f88f 	bl	8000548 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	f04f 0000 	mov.w	r0, #0
 8001432:	491a      	ldr	r1, [pc, #104]	; (800149c <main+0x74c>)
 8001434:	f7fe ff28 	bl	8000288 <__aeabi_dsub>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4690      	mov	r8, r2
 800143e:	4699      	mov	r9, r3
 8001440:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001444:	f7ff f880 	bl	8000548 <__aeabi_f2d>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4640      	mov	r0, r8
 800144e:	4649      	mov	r1, r9
 8001450:	f7ff f8d2 	bl	80005f8 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4620      	mov	r0, r4
 800145a:	4629      	mov	r1, r5
 800145c:	f7fe ff16 	bl	800028c <__adddf3>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	e01a      	b.n	80014a0 <main+0x750>
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	00000000 	.word	0x00000000
 8001474:	40000000 	.word	0x40000000
 8001478:	61d59ae7 	.word	0x61d59ae7
 800147c:	404ca994 	.word	0x404ca994
 8001480:	1eb851ec 	.word	0x1eb851ec
 8001484:	3f81eb85 	.word	0x3f81eb85
 8001488:	51eb851f 	.word	0x51eb851f
 800148c:	200008c2 	.word	0x200008c2
 8001490:	20000480 	.word	0x20000480
 8001494:	3dcccccd 	.word	0x3dcccccd
 8001498:	3f700000 	.word	0x3f700000
 800149c:	3ff00000 	.word	0x3ff00000
 80014a0:	f7ff fba2 	bl	8000be8 <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		y_acc = ((float)y_acceleration) * 0.00390625 + (1.0-ALPHA)*y_acc;
 80014aa:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b6:	ee17 0a90 	vmov	r0, s15
 80014ba:	f7ff f845 	bl	8000548 <__aeabi_f2d>
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4bef      	ldr	r3, [pc, #956]	; (8001880 <main+0xb30>)
 80014c4:	f7ff f898 	bl	80005f8 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4614      	mov	r4, r2
 80014ce:	461d      	mov	r5, r3
 80014d0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80014d2:	f7ff f839 	bl	8000548 <__aeabi_f2d>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	f04f 0000 	mov.w	r0, #0
 80014de:	49e9      	ldr	r1, [pc, #932]	; (8001884 <main+0xb34>)
 80014e0:	f7fe fed2 	bl	8000288 <__aeabi_dsub>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4690      	mov	r8, r2
 80014ea:	4699      	mov	r9, r3
 80014ec:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80014f0:	f7ff f82a 	bl	8000548 <__aeabi_f2d>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4640      	mov	r0, r8
 80014fa:	4649      	mov	r1, r9
 80014fc:	f7ff f87c 	bl	80005f8 <__aeabi_dmul>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4620      	mov	r0, r4
 8001506:	4629      	mov	r1, r5
 8001508:	f7fe fec0 	bl	800028c <__adddf3>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb68 	bl	8000be8 <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		z_acc = ((float)z_acceleration) * 0.00390625 + (1.0-ALPHA)*z_acc;
 800151e:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800152a:	ee17 0a90 	vmov	r0, s15
 800152e:	f7ff f80b 	bl	8000548 <__aeabi_f2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4bd2      	ldr	r3, [pc, #840]	; (8001880 <main+0xb30>)
 8001538:	f7ff f85e 	bl	80005f8 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4614      	mov	r4, r2
 8001542:	461d      	mov	r5, r3
 8001544:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001546:	f7fe ffff 	bl	8000548 <__aeabi_f2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	f04f 0000 	mov.w	r0, #0
 8001552:	49cc      	ldr	r1, [pc, #816]	; (8001884 <main+0xb34>)
 8001554:	f7fe fe98 	bl	8000288 <__aeabi_dsub>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4690      	mov	r8, r2
 800155e:	4699      	mov	r9, r3
 8001560:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001564:	f7fe fff0 	bl	8000548 <__aeabi_f2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4640      	mov	r0, r8
 800156e:	4649      	mov	r1, r9
 8001570:	f7ff f842 	bl	80005f8 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4620      	mov	r0, r4
 800157a:	4629      	mov	r1, r5
 800157c:	f7fe fe86 	bl	800028c <__adddf3>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fb2e 	bl	8000be8 <__aeabi_d2f>
 800158c:	4603      	mov	r3, r0
 800158e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		float a_roll = (180/3.14)*atan(y_acc/sqrt(x_acc*x_acc+z_acc*z_acc));
 8001592:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001596:	f7fe ffd7 	bl	8000548 <__aeabi_f2d>
 800159a:	4604      	mov	r4, r0
 800159c:	460d      	mov	r5, r1
 800159e:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80015a2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015a6:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80015aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b2:	ee17 0a90 	vmov	r0, s15
 80015b6:	f7fe ffc7 	bl	8000548 <__aeabi_f2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	ec43 2b10 	vmov	d0, r2, r3
 80015c2:	f008 feb5 	bl	800a330 <sqrt>
 80015c6:	ec53 2b10 	vmov	r2, r3, d0
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7ff f93d 	bl	800084c <__aeabi_ddiv>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	ec43 2b17 	vmov	d7, r2, r3
 80015da:	eeb0 0a47 	vmov.f32	s0, s14
 80015de:	eef0 0a67 	vmov.f32	s1, s15
 80015e2:	f008 faf9 	bl	8009bd8 <atan>
 80015e6:	ec51 0b10 	vmov	r0, r1, d0
 80015ea:	a3a1      	add	r3, pc, #644	; (adr r3, 8001870 <main+0xb20>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7ff f802 	bl	80005f8 <__aeabi_dmul>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff faf4 	bl	8000be8 <__aeabi_d2f>
 8001600:	4603      	mov	r3, r0
 8001602:	64fb      	str	r3, [r7, #76]	; 0x4c
		float a_pitch = (180/3.14)*atan(x_acc/sqrt(y_acc*y_acc+z_acc*z_acc));
 8001604:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001608:	f7fe ff9e 	bl	8000548 <__aeabi_f2d>
 800160c:	4604      	mov	r4, r0
 800160e:	460d      	mov	r5, r1
 8001610:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001614:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001618:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800161c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001624:	ee17 0a90 	vmov	r0, s15
 8001628:	f7fe ff8e 	bl	8000548 <__aeabi_f2d>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	ec43 2b10 	vmov	d0, r2, r3
 8001634:	f008 fe7c 	bl	800a330 <sqrt>
 8001638:	ec53 2b10 	vmov	r2, r3, d0
 800163c:	4620      	mov	r0, r4
 800163e:	4629      	mov	r1, r5
 8001640:	f7ff f904 	bl	800084c <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	ec43 2b17 	vmov	d7, r2, r3
 800164c:	eeb0 0a47 	vmov.f32	s0, s14
 8001650:	eef0 0a67 	vmov.f32	s1, s15
 8001654:	f008 fac0 	bl	8009bd8 <atan>
 8001658:	ec51 0b10 	vmov	r0, r1, d0
 800165c:	a384      	add	r3, pc, #528	; (adr r3, 8001870 <main+0xb20>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7fe ffc9 	bl	80005f8 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fabb 	bl	8000be8 <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	64bb      	str	r3, [r7, #72]	; 0x48
		float a_yaw = (180/3.14)*atan(z_acc/sqrt(y_acc*y_acc+x_acc*x_acc));
 8001676:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800167a:	f7fe ff65 	bl	8000548 <__aeabi_f2d>
 800167e:	4604      	mov	r4, r0
 8001680:	460d      	mov	r5, r1
 8001682:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001686:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800168a:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800168e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001696:	ee17 0a90 	vmov	r0, s15
 800169a:	f7fe ff55 	bl	8000548 <__aeabi_f2d>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	ec43 2b10 	vmov	d0, r2, r3
 80016a6:	f008 fe43 	bl	800a330 <sqrt>
 80016aa:	ec53 2b10 	vmov	r2, r3, d0
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7ff f8cb 	bl	800084c <__aeabi_ddiv>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	ec43 2b17 	vmov	d7, r2, r3
 80016be:	eeb0 0a47 	vmov.f32	s0, s14
 80016c2:	eef0 0a67 	vmov.f32	s1, s15
 80016c6:	f008 fa87 	bl	8009bd8 <atan>
 80016ca:	ec51 0b10 	vmov	r0, r1, d0
 80016ce:	a368      	add	r3, pc, #416	; (adr r3, 8001870 <main+0xb20>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe ff90 	bl	80005f8 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f7ff fa82 	bl	8000be8 <__aeabi_d2f>
 80016e4:	4603      	mov	r3, r0
 80016e6:	647b      	str	r3, [r7, #68]	; 0x44
		//sprintf(string_to_send, "%lf,%lf,%lf,%lf,%lf,%lf\r\n", x_acc, y_acc, z_acc, a_roll, a_pitch, a_yaw);
		//sprintf(string_to_send, "%hd,%hd,%hd\r\n", x_acceleration, y_acceleration, z_acceleration);
		// DO cals on all gryo parts..

		x_v = ((pitch_rate-74)*0.00875* ALPHA + x_v * (1.0-ALPHA));
 80016e8:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 80016ec:	3b4a      	subs	r3, #74	; 0x4a
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ff18 	bl	8000524 <__aeabi_i2d>
 80016f4:	a360      	add	r3, pc, #384	; (adr r3, 8001878 <main+0xb28>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe ff7d 	bl	80005f8 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4614      	mov	r4, r2
 8001704:	461d      	mov	r5, r3
 8001706:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001708:	f7fe ff1e 	bl	8000548 <__aeabi_f2d>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4620      	mov	r0, r4
 8001712:	4629      	mov	r1, r5
 8001714:	f7fe ff70 	bl	80005f8 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4690      	mov	r8, r2
 800171e:	4699      	mov	r9, r3
 8001720:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001724:	f7fe ff10 	bl	8000548 <__aeabi_f2d>
 8001728:	4604      	mov	r4, r0
 800172a:	460d      	mov	r5, r1
 800172c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800172e:	f7fe ff0b 	bl	8000548 <__aeabi_f2d>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	f04f 0000 	mov.w	r0, #0
 800173a:	4952      	ldr	r1, [pc, #328]	; (8001884 <main+0xb34>)
 800173c:	f7fe fda4 	bl	8000288 <__aeabi_dsub>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4620      	mov	r0, r4
 8001746:	4629      	mov	r1, r5
 8001748:	f7fe ff56 	bl	80005f8 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4640      	mov	r0, r8
 8001752:	4649      	mov	r1, r9
 8001754:	f7fe fd9a 	bl	800028c <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff fa42 	bl	8000be8 <__aeabi_d2f>
 8001764:	4603      	mov	r3, r0
 8001766:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		y_v = (yaw_rate+86)*0.00875* ALPHA + y_v * (1.0-ALPHA);
 800176a:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800176e:	3356      	adds	r3, #86	; 0x56
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fed7 	bl	8000524 <__aeabi_i2d>
 8001776:	a340      	add	r3, pc, #256	; (adr r3, 8001878 <main+0xb28>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe ff3c 	bl	80005f8 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4614      	mov	r4, r2
 8001786:	461d      	mov	r5, r3
 8001788:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800178a:	f7fe fedd 	bl	8000548 <__aeabi_f2d>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4620      	mov	r0, r4
 8001794:	4629      	mov	r1, r5
 8001796:	f7fe ff2f 	bl	80005f8 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4690      	mov	r8, r2
 80017a0:	4699      	mov	r9, r3
 80017a2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80017a6:	f7fe fecf 	bl	8000548 <__aeabi_f2d>
 80017aa:	4604      	mov	r4, r0
 80017ac:	460d      	mov	r5, r1
 80017ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80017b0:	f7fe feca 	bl	8000548 <__aeabi_f2d>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	f04f 0000 	mov.w	r0, #0
 80017bc:	4931      	ldr	r1, [pc, #196]	; (8001884 <main+0xb34>)
 80017be:	f7fe fd63 	bl	8000288 <__aeabi_dsub>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4620      	mov	r0, r4
 80017c8:	4629      	mov	r1, r5
 80017ca:	f7fe ff15 	bl	80005f8 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4640      	mov	r0, r8
 80017d4:	4649      	mov	r1, r9
 80017d6:	f7fe fd59 	bl	800028c <__adddf3>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff fa01 	bl	8000be8 <__aeabi_d2f>
 80017e6:	4603      	mov	r3, r0
 80017e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		z_v = (roll_rate-100)*0.00875* ALPHA + z_v * (1.0-ALPHA);
 80017ec:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80017f0:	3b64      	subs	r3, #100	; 0x64
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fe96 	bl	8000524 <__aeabi_i2d>
 80017f8:	a31f      	add	r3, pc, #124	; (adr r3, 8001878 <main+0xb28>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe fefb 	bl	80005f8 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4614      	mov	r4, r2
 8001808:	461d      	mov	r5, r3
 800180a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800180c:	f7fe fe9c 	bl	8000548 <__aeabi_f2d>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4620      	mov	r0, r4
 8001816:	4629      	mov	r1, r5
 8001818:	f7fe feee 	bl	80005f8 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4690      	mov	r8, r2
 8001822:	4699      	mov	r9, r3
 8001824:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001828:	f7fe fe8e 	bl	8000548 <__aeabi_f2d>
 800182c:	4604      	mov	r4, r0
 800182e:	460d      	mov	r5, r1
 8001830:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001832:	f7fe fe89 	bl	8000548 <__aeabi_f2d>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	f04f 0000 	mov.w	r0, #0
 800183e:	4911      	ldr	r1, [pc, #68]	; (8001884 <main+0xb34>)
 8001840:	f7fe fd22 	bl	8000288 <__aeabi_dsub>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4620      	mov	r0, r4
 800184a:	4629      	mov	r1, r5
 800184c:	f7fe fed4 	bl	80005f8 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4640      	mov	r0, r8
 8001856:	4649      	mov	r1, r9
 8001858:	f7fe fd18 	bl	800028c <__adddf3>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f7ff f9c0 	bl	8000be8 <__aeabi_d2f>
 8001868:	e00e      	b.n	8001888 <main+0xb38>
 800186a:	bf00      	nop
 800186c:	f3af 8000 	nop.w
 8001870:	61d59ae7 	.word	0x61d59ae7
 8001874:	404ca994 	.word	0x404ca994
 8001878:	1eb851ec 	.word	0x1eb851ec
 800187c:	3f81eb85 	.word	0x3f81eb85
 8001880:	3f700000 	.word	0x3f700000
 8001884:	3ff00000 	.word	0x3ff00000
 8001888:	4603      	mov	r3, r0
 800188a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		//sprintf(string_to_send, "%hd,%hd,%hd,%lf,%lf,%lf\r\n", roll_rate, pitch_rate, yaw_rate, x_v, y_v, z_v);


		// Now do math to combines readings
		x_angle = 0.95*(x_angle + x_v*0.09) + 0.05*a_roll;
 800188e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001892:	f7fe fe59 	bl	8000548 <__aeabi_f2d>
 8001896:	4604      	mov	r4, r0
 8001898:	460d      	mov	r5, r1
 800189a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800189e:	f7fe fe53 	bl	8000548 <__aeabi_f2d>
 80018a2:	f20f 5360 	addw	r3, pc, #1376	; 0x560
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe fea5 	bl	80005f8 <__aeabi_dmul>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4620      	mov	r0, r4
 80018b4:	4629      	mov	r1, r5
 80018b6:	f7fe fce9 	bl	800028c <__adddf3>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f20f 5348 	addw	r3, pc, #1352	; 0x548
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fe95 	bl	80005f8 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	461d      	mov	r5, r3
 80018d6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80018d8:	f7fe fe36 	bl	8000548 <__aeabi_f2d>
 80018dc:	f20f 5334 	addw	r3, pc, #1332	; 0x534
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fe88 	bl	80005f8 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4620      	mov	r0, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	f7fe fccc 	bl	800028c <__adddf3>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f974 	bl	8000be8 <__aeabi_d2f>
 8001900:	4603      	mov	r3, r0
 8001902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		y_angle = 0.95*(y_angle + y_v*0.09) + 0.05*a_pitch;
 8001906:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800190a:	f7fe fe1d 	bl	8000548 <__aeabi_f2d>
 800190e:	4604      	mov	r4, r0
 8001910:	460d      	mov	r5, r1
 8001912:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001916:	f7fe fe17 	bl	8000548 <__aeabi_f2d>
 800191a:	f20f 43e8 	addw	r3, pc, #1256	; 0x4e8
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fe69 	bl	80005f8 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4620      	mov	r0, r4
 800192c:	4629      	mov	r1, r5
 800192e:	f7fe fcad 	bl	800028c <__adddf3>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f20f 43d0 	addw	r3, pc, #1232	; 0x4d0
 800193e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001942:	f7fe fe59 	bl	80005f8 <__aeabi_dmul>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4614      	mov	r4, r2
 800194c:	461d      	mov	r5, r3
 800194e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001950:	f7fe fdfa 	bl	8000548 <__aeabi_f2d>
 8001954:	f20f 43bc 	addw	r3, pc, #1212	; 0x4bc
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7fe fe4c 	bl	80005f8 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4620      	mov	r0, r4
 8001966:	4629      	mov	r1, r5
 8001968:	f7fe fc90 	bl	800028c <__adddf3>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f938 	bl	8000be8 <__aeabi_d2f>
 8001978:	4603      	mov	r3, r0
 800197a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		z_angle = 0.95*(z_angle + z_v*0.09) + 0.05*a_yaw;
 800197e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001982:	f7fe fde1 	bl	8000548 <__aeabi_f2d>
 8001986:	4604      	mov	r4, r0
 8001988:	460d      	mov	r5, r1
 800198a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800198e:	f7fe fddb 	bl	8000548 <__aeabi_f2d>
 8001992:	f20f 4370 	addw	r3, pc, #1136	; 0x470
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	f7fe fe2d 	bl	80005f8 <__aeabi_dmul>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4620      	mov	r0, r4
 80019a4:	4629      	mov	r1, r5
 80019a6:	f7fe fc71 	bl	800028c <__adddf3>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	f20f 4358 	addw	r3, pc, #1112	; 0x458
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	f7fe fe1d 	bl	80005f8 <__aeabi_dmul>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4614      	mov	r4, r2
 80019c4:	461d      	mov	r5, r3
 80019c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80019c8:	f7fe fdbe 	bl	8000548 <__aeabi_f2d>
 80019cc:	f20f 4344 	addw	r3, pc, #1092	; 0x444
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe fe10 	bl	80005f8 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4620      	mov	r0, r4
 80019de:	4629      	mov	r1, r5
 80019e0:	f7fe fc54 	bl	800028c <__adddf3>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f8fc 	bl	8000be8 <__aeabi_d2f>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		float angle = (y_angle + x_angle);
 80019f6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80019fa:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80019fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a02:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		float y = y_angle - x_angle;
 8001a06:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001a0a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a12:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		//sprintf(string_to_send, "%lf,%lf,%lf,%lf,%lf,%lf\r\n", x_v, y_v, z_v, x_angle, y_angle, z_angle);
		//sprintf(string_to_send, "%lf,%lf,%lf\r\n", x_angle, y_angle, z_angle);
		//sprintf(string_to_send, "%lf,%lf\r\n",angle*100, y*100);

		// Investigating magnetic rates
		float mag_angle = atan(y_mag/x_mag);
 8001a16:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	; 0x76
 8001a1a:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8001a1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd7e 	bl	8000524 <__aeabi_i2d>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	ec43 2b10 	vmov	d0, r2, r3
 8001a30:	f008 f8d2 	bl	8009bd8 <atan>
 8001a34:	ec53 2b10 	vmov	r2, r3, d0
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff f8d4 	bl	8000be8 <__aeabi_d2f>
 8001a40:	4603      	mov	r3, r0
 8001a42:	63bb      	str	r3, [r7, #56]	; 0x38

		sprintf(string_to_send,"%hd,%hd,%hd,%\r\n",x_mag, z_mag, y_mag);
 8001a44:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	; 0x7a
 8001a48:	f9b7 1078 	ldrsh.w	r1, [r7, #120]	; 0x78
 8001a4c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	460b      	mov	r3, r1
 8001a54:	49e8      	ldr	r1, [pc, #928]	; (8001df8 <main+0x10a8>)
 8001a56:	48e9      	ldr	r0, [pc, #932]	; (8001dfc <main+0x10ac>)
 8001a58:	f005 fe46 	bl	80076e8 <siprintf>


		// Global roll pitch can't get yaw
		p_rps = ((pitch_rate-74)*0.00875*ALPHA)*(3.14/180) + p_rps * (1.0-ALPHA);
 8001a5c:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 8001a60:	3b4a      	subs	r3, #74	; 0x4a
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd5e 	bl	8000524 <__aeabi_i2d>
 8001a68:	a3db      	add	r3, pc, #876	; (adr r3, 8001dd8 <main+0x1088>)
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe fdc3 	bl	80005f8 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4614      	mov	r4, r2
 8001a78:	461d      	mov	r5, r3
 8001a7a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001a7c:	f7fe fd64 	bl	8000548 <__aeabi_f2d>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4620      	mov	r0, r4
 8001a86:	4629      	mov	r1, r5
 8001a88:	f7fe fdb6 	bl	80005f8 <__aeabi_dmul>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	a3d2      	add	r3, pc, #840	; (adr r3, 8001de0 <main+0x1090>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fdad 	bl	80005f8 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4690      	mov	r8, r2
 8001aa4:	4699      	mov	r9, r3
 8001aa6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001aaa:	f7fe fd4d 	bl	8000548 <__aeabi_f2d>
 8001aae:	4604      	mov	r4, r0
 8001ab0:	460d      	mov	r5, r1
 8001ab2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001ab4:	f7fe fd48 	bl	8000548 <__aeabi_f2d>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	f04f 0000 	mov.w	r0, #0
 8001ac0:	49cf      	ldr	r1, [pc, #828]	; (8001e00 <main+0x10b0>)
 8001ac2:	f7fe fbe1 	bl	8000288 <__aeabi_dsub>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4620      	mov	r0, r4
 8001acc:	4629      	mov	r1, r5
 8001ace:	f7fe fd93 	bl	80005f8 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4640      	mov	r0, r8
 8001ad8:	4649      	mov	r1, r9
 8001ada:	f7fe fbd7 	bl	800028c <__adddf3>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f87f 	bl	8000be8 <__aeabi_d2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		q_rps = ((yaw_rate+86)*0.00875*ALPHA)*(3.14/180) + q_rps * (1.0-ALPHA);
 8001af0:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 8001af4:	3356      	adds	r3, #86	; 0x56
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fd14 	bl	8000524 <__aeabi_i2d>
 8001afc:	a3b6      	add	r3, pc, #728	; (adr r3, 8001dd8 <main+0x1088>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fd79 	bl	80005f8 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4614      	mov	r4, r2
 8001b0c:	461d      	mov	r5, r3
 8001b0e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b10:	f7fe fd1a 	bl	8000548 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fd6c 	bl	80005f8 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	a3ad      	add	r3, pc, #692	; (adr r3, 8001de0 <main+0x1090>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fd63 	bl	80005f8 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4690      	mov	r8, r2
 8001b38:	4699      	mov	r9, r3
 8001b3a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001b3e:	f7fe fd03 	bl	8000548 <__aeabi_f2d>
 8001b42:	4604      	mov	r4, r0
 8001b44:	460d      	mov	r5, r1
 8001b46:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b48:	f7fe fcfe 	bl	8000548 <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	f04f 0000 	mov.w	r0, #0
 8001b54:	49aa      	ldr	r1, [pc, #680]	; (8001e00 <main+0x10b0>)
 8001b56:	f7fe fb97 	bl	8000288 <__aeabi_dsub>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4620      	mov	r0, r4
 8001b60:	4629      	mov	r1, r5
 8001b62:	f7fe fd49 	bl	80005f8 <__aeabi_dmul>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4640      	mov	r0, r8
 8001b6c:	4649      	mov	r1, r9
 8001b6e:	f7fe fb8d 	bl	800028c <__adddf3>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f7ff f835 	bl	8000be8 <__aeabi_d2f>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		r_rps = ((roll_rate-100)*0.00875*ALPHA)*(3.14/180) + r_rps * (1.0-ALPHA);
 8001b84:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8001b88:	3b64      	subs	r3, #100	; 0x64
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fcca 	bl	8000524 <__aeabi_i2d>
 8001b90:	a391      	add	r3, pc, #580	; (adr r3, 8001dd8 <main+0x1088>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fd2f 	bl	80005f8 <__aeabi_dmul>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4614      	mov	r4, r2
 8001ba0:	461d      	mov	r5, r3
 8001ba2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001ba4:	f7fe fcd0 	bl	8000548 <__aeabi_f2d>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fd22 	bl	80005f8 <__aeabi_dmul>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	a388      	add	r3, pc, #544	; (adr r3, 8001de0 <main+0x1090>)
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	f7fe fd19 	bl	80005f8 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4690      	mov	r8, r2
 8001bcc:	4699      	mov	r9, r3
 8001bce:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001bd2:	f7fe fcb9 	bl	8000548 <__aeabi_f2d>
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	460d      	mov	r5, r1
 8001bda:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001bdc:	f7fe fcb4 	bl	8000548 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	f04f 0000 	mov.w	r0, #0
 8001be8:	4985      	ldr	r1, [pc, #532]	; (8001e00 <main+0x10b0>)
 8001bea:	f7fe fb4d 	bl	8000288 <__aeabi_dsub>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	f7fe fcff 	bl	80005f8 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4640      	mov	r0, r8
 8001c00:	4649      	mov	r1, r9
 8001c02:	f7fe fb43 	bl	800028c <__adddf3>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe ffeb 	bl	8000be8 <__aeabi_d2f>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

		// trial of global pitch, roll using accelerometer
		float global_acc_roll = atanf(y_acc/z_acc);
 8001c18:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8001c1c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001c20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c24:	eeb0 0a66 	vmov.f32	s0, s13
 8001c28:	f008 f980 	bl	8009f2c <atanf>
 8001c2c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
		float global_acc_pitch = atanf(x_acc/9.81);
 8001c30:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001c34:	f7fe fc88 	bl	8000548 <__aeabi_f2d>
 8001c38:	a36b      	add	r3, pc, #428	; (adr r3, 8001de8 <main+0x1098>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fe05 	bl	800084c <__aeabi_ddiv>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4610      	mov	r0, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f7fe ffcd 	bl	8000be8 <__aeabi_d2f>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	ee00 3a10 	vmov	s0, r3
 8001c54:	f008 f96a 	bl	8009f2c <atanf>
 8001c58:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

		float phi_dot = p_rps + tanf(global_acc_pitch)*(sinf(global_acc_roll)*q_rps + cosf(global_acc_roll)*r_rps);
 8001c5c:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001c60:	f008 faca 	bl	800a1f8 <tanf>
 8001c64:	eef0 8a40 	vmov.f32	s17, s0
 8001c68:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001c6c:	f008 fa7e 	bl	800a16c <sinf>
 8001c70:	eeb0 7a40 	vmov.f32	s14, s0
 8001c74:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001c78:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001c7c:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001c80:	f008 fa28 	bl	800a0d4 <cosf>
 8001c84:	eeb0 7a40 	vmov.f32	s14, s0
 8001c88:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c90:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001c94:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001c98:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8001c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float theta_dot = cosf(global_acc_roll)*q_rps - sinf(global_acc_roll)*r_rps;
 8001ca4:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001ca8:	f008 fa14 	bl	800a0d4 <cosf>
 8001cac:	eeb0 7a40 	vmov.f32	s14, s0
 8001cb0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001cb4:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001cb8:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001cbc:	f008 fa56 	bl	800a16c <sinf>
 8001cc0:	eeb0 7a40 	vmov.f32	s14, s0
 8001cc4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ccc:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001cd0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		global_roll = global_roll + 0.1*phi_dot;
 8001cd4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001cd8:	f7fe fc36 	bl	8000548 <__aeabi_f2d>
 8001cdc:	4604      	mov	r4, r0
 8001cde:	460d      	mov	r5, r1
 8001ce0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ce2:	f7fe fc31 	bl	8000548 <__aeabi_f2d>
 8001ce6:	a342      	add	r3, pc, #264	; (adr r3, 8001df0 <main+0x10a0>)
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	f7fe fc84 	bl	80005f8 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	f7fe fac8 	bl	800028c <__adddf3>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe ff70 	bl	8000be8 <__aeabi_d2f>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		global_pitch = global_pitch + 0.1*theta_dot;
 8001d0e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001d12:	f7fe fc19 	bl	8000548 <__aeabi_f2d>
 8001d16:	4604      	mov	r4, r0
 8001d18:	460d      	mov	r5, r1
 8001d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d1c:	f7fe fc14 	bl	8000548 <__aeabi_f2d>
 8001d20:	a333      	add	r3, pc, #204	; (adr r3, 8001df0 <main+0x10a0>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fc67 	bl	80005f8 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4620      	mov	r0, r4
 8001d30:	4629      	mov	r1, r5
 8001d32:	f7fe faab 	bl	800028c <__adddf3>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f7fe ff53 	bl	8000be8 <__aeabi_d2f>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		// try this tomorrow!
		// idea to get si
		float si_dot = sinf(global_acc_roll)*q_rps/cosf(global_acc_pitch) + cosf(global_acc_roll)*r_rps/cosf(global_acc_pitch);
 8001d48:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001d4c:	f008 fa0e 	bl	800a16c <sinf>
 8001d50:	eeb0 7a40 	vmov.f32	s14, s0
 8001d54:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001d58:	ee67 8a27 	vmul.f32	s17, s14, s15
 8001d5c:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001d60:	f008 f9b8 	bl	800a0d4 <cosf>
 8001d64:	eef0 7a40 	vmov.f32	s15, s0
 8001d68:	ee88 8aa7 	vdiv.f32	s16, s17, s15
 8001d6c:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001d70:	f008 f9b0 	bl	800a0d4 <cosf>
 8001d74:	eeb0 7a40 	vmov.f32	s14, s0
 8001d78:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001d7c:	ee67 8a27 	vmul.f32	s17, s14, s15
 8001d80:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8001d84:	f008 f9a6 	bl	800a0d4 <cosf>
 8001d88:	eeb0 7a40 	vmov.f32	s14, s0
 8001d8c:	eec8 7a87 	vdiv.f32	s15, s17, s14
 8001d90:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001d94:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		// So to find global yaw
		global_yaw = global_yaw + 0.1*(si_dot);
 8001d98:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001d9c:	f7fe fbd4 	bl	8000548 <__aeabi_f2d>
 8001da0:	4604      	mov	r4, r0
 8001da2:	460d      	mov	r5, r1
 8001da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001da6:	f7fe fbcf 	bl	8000548 <__aeabi_f2d>
 8001daa:	a311      	add	r3, pc, #68	; (adr r3, 8001df0 <main+0x10a0>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fc22 	bl	80005f8 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4620      	mov	r0, r4
 8001dba:	4629      	mov	r1, r5
 8001dbc:	f7fe fa66 	bl	800028c <__adddf3>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f7fe ff0e 	bl	8000be8 <__aeabi_d2f>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	{
 8001dd2:	f7ff b861 	b.w	8000e98 <main+0x148>
 8001dd6:	bf00      	nop
 8001dd8:	1eb851ec 	.word	0x1eb851ec
 8001ddc:	3f81eb85 	.word	0x3f81eb85
 8001de0:	d98b0955 	.word	0xd98b0955
 8001de4:	3f91dcf4 	.word	0x3f91dcf4
 8001de8:	51eb851f 	.word	0x51eb851f
 8001dec:	40239eb8 	.word	0x40239eb8
 8001df0:	9999999a 	.word	0x9999999a
 8001df4:	3fb99999 	.word	0x3fb99999
 8001df8:	0800bcc8 	.word	0x0800bcc8
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	3ff00000 	.word	0x3ff00000
 8001e04:	70a3d70a 	.word	0x70a3d70a
 8001e08:	3fb70a3d 	.word	0x3fb70a3d
 8001e0c:	66666666 	.word	0x66666666
 8001e10:	3fee6666 	.word	0x3fee6666
 8001e14:	9999999a 	.word	0x9999999a
 8001e18:	3fa99999 	.word	0x3fa99999

08001e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b09e      	sub	sp, #120	; 0x78
 8001e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e26:	2228      	movs	r2, #40	; 0x28
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f004 ffea 	bl	8006e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e40:	463b      	mov	r3, r7
 8001e42:	223c      	movs	r2, #60	; 0x3c
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 ffdc 	bl	8006e04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e54:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e56:	2300      	movs	r3, #0
 8001e58:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e5e:	2310      	movs	r3, #16
 8001e60:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e62:	2302      	movs	r3, #2
 8001e64:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e6a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001e6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e70:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 f9e8 	bl	800424c <HAL_RCC_OscConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001e82:	f000 fa1d 	bl	80022c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e86:	230f      	movs	r3, #15
 8001e88:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fa10 	bl	80052c8 <HAL_RCC_ClockConfig>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001eae:	f000 fa07 	bl	80022c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <SystemClock_Config+0xc8>)
 8001eb4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec8:	463b      	mov	r3, r7
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f003 fbe2 	bl	8005694 <HAL_RCCEx_PeriphCLKConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001ed6:	f000 f9f3 	bl	80022c0 <Error_Handler>
  }
}
 8001eda:	bf00      	nop
 8001edc:	3778      	adds	r7, #120	; 0x78
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	00021060 	.word	0x00021060

08001ee8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001eee:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <MX_I2C1_Init+0x78>)
 8001ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <MX_I2C1_Init+0x7c>)
 8001ef6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ef8:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f22:	480e      	ldr	r0, [pc, #56]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f24:	f001 fab2 	bl	800348c <HAL_I2C_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f2e:	f000 f9c7 	bl	80022c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f32:	2100      	movs	r1, #0
 8001f34:	4809      	ldr	r0, [pc, #36]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f36:	f002 f81f 	bl	8003f78 <HAL_I2CEx_ConfigAnalogFilter>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f40:	f000 f9be 	bl	80022c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f44:	2100      	movs	r1, #0
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_I2C1_Init+0x74>)
 8001f48:	f002 f861 	bl	800400e <HAL_I2CEx_ConfigDigitalFilter>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f52:	f000 f9b5 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000042c 	.word	0x2000042c
 8001f60:	40005400 	.word	0x40005400
 8001f64:	2000090e 	.word	0x2000090e

08001f68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	; (8001fe0 <MX_I2C2_Init+0x78>)
 8001f70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f74:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <MX_I2C2_Init+0x7c>)
 8001f76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f84:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001fa2:	480e      	ldr	r0, [pc, #56]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001fa4:	f001 fa72 	bl	800348c <HAL_I2C_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001fae:	f000 f987 	bl	80022c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4809      	ldr	r0, [pc, #36]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001fb6:	f001 ffdf 	bl	8003f78 <HAL_I2CEx_ConfigAnalogFilter>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001fc0:	f000 f97e 	bl	80022c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_I2C2_Init+0x74>)
 8001fc8:	f002 f821 	bl	800400e <HAL_I2CEx_ConfigDigitalFilter>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001fd2:	f000 f975 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000480 	.word	0x20000480
 8001fe0:	40005800 	.word	0x40005800
 8001fe4:	2000090e 	.word	0x2000090e

08001fe8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <MX_SPI1_Init+0x74>)
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <MX_SPI1_Init+0x78>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <MX_SPI1_Init+0x74>)
 8001ff4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <MX_SPI1_Init+0x74>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <MX_SPI1_Init+0x74>)
 8002002:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002006:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_SPI1_Init+0x74>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <MX_SPI1_Init+0x74>)
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_SPI1_Init+0x74>)
 8002016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800201a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MX_SPI1_Init+0x74>)
 800201e:	2208      	movs	r2, #8
 8002020:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <MX_SPI1_Init+0x74>)
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <MX_SPI1_Init+0x74>)
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <MX_SPI1_Init+0x74>)
 8002030:	2200      	movs	r2, #0
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <MX_SPI1_Init+0x74>)
 8002036:	2207      	movs	r2, #7
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <MX_SPI1_Init+0x74>)
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <MX_SPI1_Init+0x74>)
 8002042:	2208      	movs	r2, #8
 8002044:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_SPI1_Init+0x74>)
 8002048:	f003 fcd4 	bl	80059f4 <HAL_SPI_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002052:	f000 f935 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200004d4 	.word	0x200004d4
 8002060:	40013000 	.word	0x40013000

08002064 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	; 0x30
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206a:	f107 0320 	add.w	r3, r7, #32
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002090:	4b2d      	ldr	r3, [pc, #180]	; (8002148 <MX_TIM1_Init+0xe4>)
 8002092:	4a2e      	ldr	r2, [pc, #184]	; (800214c <MX_TIM1_Init+0xe8>)
 8002094:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <MX_TIM1_Init+0xe4>)
 8002098:	222f      	movs	r2, #47	; 0x2f
 800209a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <MX_TIM1_Init+0xe4>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020a2:	4b29      	ldr	r3, [pc, #164]	; (8002148 <MX_TIM1_Init+0xe4>)
 80020a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020aa:	4b27      	ldr	r3, [pc, #156]	; (8002148 <MX_TIM1_Init+0xe4>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <MX_TIM1_Init+0xe4>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <MX_TIM1_Init+0xe4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020bc:	4822      	ldr	r0, [pc, #136]	; (8002148 <MX_TIM1_Init+0xe4>)
 80020be:	f003 fd44 	bl	8005b4a <HAL_TIM_Base_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80020c8:	f000 f8fa 	bl	80022c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020d2:	f107 0320 	add.w	r3, r7, #32
 80020d6:	4619      	mov	r1, r3
 80020d8:	481b      	ldr	r0, [pc, #108]	; (8002148 <MX_TIM1_Init+0xe4>)
 80020da:	f004 f9ec 	bl	80064b6 <HAL_TIM_ConfigClockSource>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80020e4:	f000 f8ec 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80020e8:	4817      	ldr	r0, [pc, #92]	; (8002148 <MX_TIM1_Init+0xe4>)
 80020ea:	f003 fe85 	bl	8005df8 <HAL_TIM_IC_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80020f4:	f000 f8e4 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	4619      	mov	r1, r3
 800210a:	480f      	ldr	r0, [pc, #60]	; (8002148 <MX_TIM1_Init+0xe4>)
 800210c:	f004 fd76 	bl	8006bfc <HAL_TIMEx_MasterConfigSynchronization>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8002116:	f000 f8d3 	bl	80022c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800211a:	230a      	movs	r3, #10
 800211c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800211e:	2301      	movs	r3, #1
 8002120:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	2200      	movs	r2, #0
 800212e:	4619      	mov	r1, r3
 8002130:	4805      	ldr	r0, [pc, #20]	; (8002148 <MX_TIM1_Init+0xe4>)
 8002132:	f004 f924 	bl	800637e <HAL_TIM_IC_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800213c:	f000 f8c0 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	3730      	adds	r7, #48	; 0x30
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000538 	.word	0x20000538
 800214c:	40012c00 	.word	0x40012c00

08002150 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <MX_USB_PCD_Init+0x3c>)
 8002156:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <MX_USB_PCD_Init+0x40>)
 8002158:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_USB_PCD_Init+0x3c>)
 800215c:	2208      	movs	r2, #8
 800215e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <MX_USB_PCD_Init+0x3c>)
 8002162:	2202      	movs	r2, #2
 8002164:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_USB_PCD_Init+0x3c>)
 8002168:	2202      	movs	r2, #2
 800216a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <MX_USB_PCD_Init+0x3c>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_USB_PCD_Init+0x3c>)
 8002174:	2200      	movs	r2, #0
 8002176:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002178:	4804      	ldr	r0, [pc, #16]	; (800218c <MX_USB_PCD_Init+0x3c>)
 800217a:	f001 ff94 	bl	80040a6 <HAL_PCD_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8002184:	f000 f89c 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200005d0 	.word	0x200005d0
 8002190:	40005c00 	.word	0x40005c00

08002194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
 80021a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021aa:	4b37      	ldr	r3, [pc, #220]	; (8002288 <MX_GPIO_Init+0xf4>)
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	4a36      	ldr	r2, [pc, #216]	; (8002288 <MX_GPIO_Init+0xf4>)
 80021b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021b4:	6153      	str	r3, [r2, #20]
 80021b6:	4b34      	ldr	r3, [pc, #208]	; (8002288 <MX_GPIO_Init+0xf4>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c2:	4b31      	ldr	r3, [pc, #196]	; (8002288 <MX_GPIO_Init+0xf4>)
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	4a30      	ldr	r2, [pc, #192]	; (8002288 <MX_GPIO_Init+0xf4>)
 80021c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021cc:	6153      	str	r3, [r2, #20]
 80021ce:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <MX_GPIO_Init+0xf4>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021da:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <MX_GPIO_Init+0xf4>)
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	4a2a      	ldr	r2, [pc, #168]	; (8002288 <MX_GPIO_Init+0xf4>)
 80021e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021e4:	6153      	str	r3, [r2, #20]
 80021e6:	4b28      	ldr	r3, [pc, #160]	; (8002288 <MX_GPIO_Init+0xf4>)
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	4b25      	ldr	r3, [pc, #148]	; (8002288 <MX_GPIO_Init+0xf4>)
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	4a24      	ldr	r2, [pc, #144]	; (8002288 <MX_GPIO_Init+0xf4>)
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fc:	6153      	str	r3, [r2, #20]
 80021fe:	4b22      	ldr	r3, [pc, #136]	; (8002288 <MX_GPIO_Init+0xf4>)
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <MX_GPIO_Init+0xf4>)
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <MX_GPIO_Init+0xf4>)
 8002210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002214:	6153      	str	r3, [r2, #20]
 8002216:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <MX_GPIO_Init+0xf4>)
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002222:	2200      	movs	r2, #0
 8002224:	f64f 7108 	movw	r1, #65288	; 0xff08
 8002228:	4818      	ldr	r0, [pc, #96]	; (800228c <MX_GPIO_Init+0xf8>)
 800222a:	f001 f917 	bl	800345c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800222e:	2337      	movs	r3, #55	; 0x37
 8002230:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002232:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	4619      	mov	r1, r3
 8002242:	4812      	ldr	r0, [pc, #72]	; (800228c <MX_GPIO_Init+0xf8>)
 8002244:	f000 ff78 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8002248:	f64f 7308 	movw	r3, #65288	; 0xff08
 800224c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224e:	2301      	movs	r3, #1
 8002250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4619      	mov	r1, r3
 8002260:	480a      	ldr	r0, [pc, #40]	; (800228c <MX_GPIO_Init+0xf8>)
 8002262:	f000 ff69 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002266:	2301      	movs	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227c:	f000 ff5c 	bl	8003138 <HAL_GPIO_Init>

}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	48001000 	.word	0x48001000

08002290 <PTU_callback_function>:

/* USER CODE BEGIN 4 */
void PTU_callback_function(){
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	static uint8_t count = 0;
	if(count == 0){
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <PTU_callback_function+0x24>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d106      	bne.n	80022aa <PTU_callback_function+0x1a>
		//setup_transmission(string_to_send, &USART1_PORT);
		count++;
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <PTU_callback_function+0x24>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <PTU_callback_function+0x24>)
 80022a6:	701a      	strb	r2, [r3, #0]
		return;
 80022a8:	e003      	b.n	80022b2 <PTU_callback_function+0x22>
//		return;
//	}

//	LedRegister *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
//	led_register->led_groups.led_pair_1 ^= 0b10;
	setup_transmission(string_to_send, &USART1_PORT);
 80022aa:	4903      	ldr	r1, [pc, #12]	; (80022b8 <PTU_callback_function+0x28>)
 80022ac:	4803      	ldr	r0, [pc, #12]	; (80022bc <PTU_callback_function+0x2c>)
 80022ae:	f000 f9f9 	bl	80026a4 <setup_transmission>
	// usart1_tx_push(string_to_send);
	// when called enable interrupts
	//enable_USART_interrupts(&USART1_PORT);
	// uint8_t *test = "new wtf hty\r\n";

}
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	200008c4 	.word	0x200008c4
 80022b8:	200001f4 	.word	0x200001f4
 80022bc:	20000000 	.word	0x20000000

080022c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c4:	b672      	cpsid	i
}
 80022c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80022c8:	e7fe      	b.n	80022c8 <Error_Handler+0x8>
	...

080022cc <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b0d4      	sub	sp, #336	; 0x150
 80022d0:	af04      	add	r7, sp, #16
 80022d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80022d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022da:	6018      	str	r0, [r3, #0]

	  /* USER CODE BEGIN 1 */
		uint8_t i2cBuf[2];
		uint8_t accdata[6];
		uint16_t x,y,z;
		uint8_t reg1a = 0x00;
 80022dc:	2300      	movs	r3, #0
 80022de:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
		uint8_t reg2a = 0x00;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
		uint8_t reg4a = 0x00;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d

	  HAL_StatusTypeDef return_value = 0x00;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
	  i2cBuf[0]=0x21;
	  i2cBuf[1]=0x38;
	  HAL_I2C_Master_Transmit(&hi2c1, gyro_wr, i2cBuf, 2, 10);
	*/
	  // bit0 = X bit1 = Y bit2 = Z bit 3 = PD = power down
	  uint8_t reg_1 = 0b00001111;
 8002300:	230f      	movs	r3, #15
 8002302:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	  // Enable x, y, z and turn off power down:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 8002306:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800230a:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 800230e:	230a      	movs	r3, #10
 8002310:	9302      	str	r3, [sp, #8]
 8002312:	2301      	movs	r3, #1
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	f207 1321 	addw	r3, r7, #289	; 0x121
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2301      	movs	r3, #1
 800231e:	2220      	movs	r2, #32
 8002320:	21d2      	movs	r1, #210	; 0xd2
 8002322:	6800      	ldr	r0, [r0, #0]
 8002324:	f001 f942 	bl	80035ac <HAL_I2C_Mem_Write>


	  uint8_t reg_2 = 0b00000000;
 8002328:	2300      	movs	r3, #0
 800232a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
	  // HPF = high_pass filter
	  // If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 800232e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002332:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8002336:	230a      	movs	r3, #10
 8002338:	9302      	str	r3, [sp, #8]
 800233a:	2301      	movs	r3, #1
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2301      	movs	r3, #1
 8002346:	2221      	movs	r2, #33	; 0x21
 8002348:	21d2      	movs	r1, #210	; 0xd2
 800234a:	6800      	ldr	r0, [r0, #0]
 800234c:	f001 f92e 	bl	80035ac <HAL_I2C_Mem_Write>

	  // interrupt enabled everyhting else in reg 3 disabled
	  // Configure CTRL_REG3 to generate data ready interrupt on INT2
	  // No interrupts used on INT1, if you'd like to configure INT1
	  // or INT2 otherwise, consult the datasheet:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 8002350:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002354:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8002358:	230a      	movs	r3, #10
 800235a:	9302      	str	r3, [sp, #8]
 800235c:	2301      	movs	r3, #1
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2301      	movs	r3, #1
 8002368:	2222      	movs	r2, #34	; 0x22
 800236a:	21d2      	movs	r1, #210	; 0xd2
 800236c:	6800      	ldr	r0, [r0, #0]
 800236e:	f001 f91d 	bl	80035ac <HAL_I2C_Mem_Write>

	  uint8_t reg_4 = 0b00000000;
 8002372:	2300      	movs	r3, #0
 8002374:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  // CTRL_REG4 controls the full-scale range, among other things:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG4, 1, &reg_4, 1, 10);
 8002378:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800237c:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8002380:	230a      	movs	r3, #10
 8002382:	9302      	str	r3, [sp, #8]
 8002384:	2301      	movs	r3, #1
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	f207 131f 	addw	r3, r7, #287	; 0x11f
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2301      	movs	r3, #1
 8002390:	2223      	movs	r2, #35	; 0x23
 8002392:	21d2      	movs	r1, #210	; 0xd2
 8002394:	6800      	ldr	r0, [r0, #0]
 8002396:	f001 f909 	bl	80035ac <HAL_I2C_Mem_Write>
	  //writeRegister(gyro_Address, gyro_CTRL_REG4, 0b00110000);
	  //}

	  // CTRL_REG5 controls high-pass filtering of outputs, use it
	  // if you'd like:
	  uint8_t reg_5 = 0b00000000;
 800239a:	2300      	movs	r3, #0
 800239c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG5, 1, &reg_5, 1, 10);
 80023a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80023a4:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 80023a8:	230a      	movs	r3, #10
 80023aa:	9302      	str	r3, [sp, #8]
 80023ac:	2301      	movs	r3, #1
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	f507 738f 	add.w	r3, r7, #286	; 0x11e
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2301      	movs	r3, #1
 80023b8:	2224      	movs	r2, #36	; 0x24
 80023ba:	21d2      	movs	r1, #210	; 0xd2
 80023bc:	6800      	ldr	r0, [r0, #0]
 80023be:	f001 f8f5 	bl	80035ac <HAL_I2C_Mem_Write>




	  //trying to read from the same registers where we wrote in
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x20,1,&reg1a,1,10);
 80023c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80023c6:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 80023ca:	230a      	movs	r3, #10
 80023cc:	9302      	str	r3, [sp, #8]
 80023ce:	2301      	movs	r3, #1
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	f207 1323 	addw	r3, r7, #291	; 0x123
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2301      	movs	r3, #1
 80023da:	2220      	movs	r2, #32
 80023dc:	21d3      	movs	r1, #211	; 0xd3
 80023de:	6800      	ldr	r0, [r0, #0]
 80023e0:	f001 f9f8 	bl	80037d4 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x21,1,&reg2a,1,10);
 80023e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80023e8:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 80023ec:	230a      	movs	r3, #10
 80023ee:	9302      	str	r3, [sp, #8]
 80023f0:	2301      	movs	r3, #1
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	f507 7391 	add.w	r3, r7, #290	; 0x122
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	2301      	movs	r3, #1
 80023fc:	2221      	movs	r2, #33	; 0x21
 80023fe:	21d3      	movs	r1, #211	; 0xd3
 8002400:	6800      	ldr	r0, [r0, #0]
 8002402:	f001 f9e7 	bl	80037d4 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1,ACC_I2C_ADDRESS_READ,0x23,1,&reg4a,1,10);

	*/

	//uint8_t status = 0x00;
	uint8_t ready = 0x00;
 8002406:	2300      	movs	r3, #0
 8002408:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	uint8_t return_status = 0x00;
 800240c:	2300      	movs	r3, #0
 800240e:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a

	uint8_t val_1[2];
	uint16_t* val_1p = &val_1[0];
 8002412:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002416:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	val_1p = 0x00;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	uint8_t text_buffer[255];

	uint16_t val_2 = 0x00;
 8002420:	2300      	movs	r3, #0
 8002422:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
	uint16_t val_3 = 0x00;
 8002426:	2300      	movs	r3, #0
 8002428:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

	uint8_t Text[] = "Hello\r\n";
 800242c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002430:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002434:	4a4d      	ldr	r2, [pc, #308]	; (800256c <initialise_ptu_i2c+0x2a0>)
 8002436:	e892 0003 	ldmia.w	r2, {r0, r1}
 800243a:	e883 0003 	stmia.w	r3, {r0, r1}
//	BSP_LED_Toggle(LED_GREEN);
	//BSP_GYRO_Init();
	//BSP_ACCELERO_Init();

	// reset lidar board
	uint8_t reset_value = 0x00;
 800243e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002442:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 800244a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800244e:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8002452:	230a      	movs	r3, #10
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	2301      	movs	r3, #1
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	f107 0313 	add.w	r3, r7, #19
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2301      	movs	r3, #1
 8002462:	2200      	movs	r2, #0
 8002464:	21c4      	movs	r1, #196	; 0xc4
 8002466:	6800      	ldr	r0, [r0, #0]
 8002468:	f001 f8a0 	bl	80035ac <HAL_I2C_Mem_Write>
 800246c:	4603      	mov	r3, r0
 800246e:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c




	// Turn on measurements in power register
	uint8_t areg_1 = 0b00001000;
 8002472:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002476:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800247a:	2208      	movs	r2, #8
 800247c:	701a      	strb	r2, [r3, #0]
	// Enable x, y, z and turn off power down:
	HAL_I2C_Mem_Write(i2c, accel_wr, ADXL345_POWER_CTL, 1, &areg_1, 1, 10);
 800247e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002482:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8002486:	230a      	movs	r3, #10
 8002488:	9302      	str	r3, [sp, #8]
 800248a:	2301      	movs	r3, #1
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	f107 0312 	add.w	r3, r7, #18
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2301      	movs	r3, #1
 8002496:	222d      	movs	r2, #45	; 0x2d
 8002498:	21a6      	movs	r1, #166	; 0xa6
 800249a:	6800      	ldr	r0, [r0, #0]
 800249c:	f001 f886 	bl	80035ac <HAL_I2C_Mem_Write>

	// set the data register to full resolution i.e read every 4mg/LSB?
	uint8_t areg_2 = 0b00001000;
 80024a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80024a4:	f2a3 132f 	subw	r3, r3, #303	; 0x12f
 80024a8:	2208      	movs	r2, #8
 80024aa:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(i2c, accel_wr, ADXL345_DATA_FORMAT, 1, &areg_2, 1, 10);
 80024ac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80024b0:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 80024b4:	230a      	movs	r3, #10
 80024b6:	9302      	str	r3, [sp, #8]
 80024b8:	2301      	movs	r3, #1
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	f107 0311 	add.w	r3, r7, #17
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2301      	movs	r3, #1
 80024c4:	2231      	movs	r2, #49	; 0x31
 80024c6:	21a6      	movs	r1, #166	; 0xa6
 80024c8:	6800      	ldr	r0, [r0, #0]
 80024ca:	f001 f86f 	bl	80035ac <HAL_I2C_Mem_Write>

	// accleration calibration
	// offset found to be 250 -8 18 note: the use of 2 compliment to send a -ve 8
	//
	uint8_t acc_offset_calibration[3] = {0x3, 0x01, 0xFE};
 80024ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80024d2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80024d6:	4a26      	ldr	r2, [pc, #152]	; (8002570 <initialise_ptu_i2c+0x2a4>)
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	4611      	mov	r1, r2
 80024dc:	8019      	strh	r1, [r3, #0]
 80024de:	3302      	adds	r3, #2
 80024e0:	0c12      	lsrs	r2, r2, #16
 80024e2:	701a      	strb	r2, [r3, #0]

	// Left here in case I want to start setting the data offset registers
	HAL_I2C_Mem_Write(i2c, accel_wr, ADXL345_OFSX, 1, acc_offset_calibration, 3, 10);
 80024e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80024e8:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 80024ec:	230a      	movs	r3, #10
 80024ee:	9302      	str	r3, [sp, #8]
 80024f0:	2303      	movs	r3, #3
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2301      	movs	r3, #1
 80024fc:	221e      	movs	r2, #30
 80024fe:	21a6      	movs	r1, #166	; 0xa6
 8002500:	6800      	ldr	r0, [r0, #0]
 8002502:	f001 f853 	bl	80035ac <HAL_I2C_Mem_Write>
	//HAL_I2C_Mem_Write(i2c, accel_wr, ADXL345_OFSY, 1, acc_offset_calibration[1], 1, 10);
	//HAL_I2C_Mem_Write(i2c, accel_wr, ADXL345_OFSZ, 1, acc_offset_calibration[2], 1, 10);

	// control register A values
	uint8_t register_setting_a = 0x78;
 8002506:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800250a:	f2a3 1335 	subw	r3, r3, #309	; 0x135
 800250e:	2278      	movs	r2, #120	; 0x78
 8002510:	701a      	strb	r2, [r3, #0]
	// control register B values
	uint8_t register_setting_b = 0xA0;
 8002512:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002516:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800251a:	22a0      	movs	r2, #160	; 0xa0
 800251c:	701a      	strb	r2, [r3, #0]


	HAL_I2C_Mem_Write(i2c, magnet_wr, 0x00, 1, &register_setting_a, 1, 100);
 800251e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002522:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8002526:	2364      	movs	r3, #100	; 0x64
 8002528:	9302      	str	r3, [sp, #8]
 800252a:	2301      	movs	r3, #1
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	f107 030b 	add.w	r3, r7, #11
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2301      	movs	r3, #1
 8002536:	2200      	movs	r2, #0
 8002538:	213c      	movs	r1, #60	; 0x3c
 800253a:	6800      	ldr	r0, [r0, #0]
 800253c:	f001 f836 	bl	80035ac <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(i2c, magnet_wr, 0x01, 1, &register_setting_b, 1, 100);
 8002540:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002544:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8002548:	2364      	movs	r3, #100	; 0x64
 800254a:	9302      	str	r3, [sp, #8]
 800254c:	2301      	movs	r3, #1
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	f107 030a 	add.w	r3, r7, #10
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2301      	movs	r3, #1
 8002558:	2201      	movs	r2, #1
 800255a:	213c      	movs	r1, #60	; 0x3c
 800255c:	6800      	ldr	r0, [r0, #0]
 800255e:	f001 f825 	bl	80035ac <HAL_I2C_Mem_Write>

}
 8002562:	bf00      	nop
 8002564:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	0800bcd8 	.word	0x0800bcd8
 8002570:	0800bce0 	.word	0x0800bce0

08002574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	db0b      	blt.n	800259e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4907      	ldr	r1, [pc, #28]	; (80025ac <__NVIC_EnableIRQ+0x38>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	2001      	movs	r0, #1
 8002596:	fa00 f202 	lsl.w	r2, r0, r2
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000e100 	.word	0xe000e100

080025b0 <SerialInitialise>:
};

void (*callback_function2)() = 0x00;

// Initialise the serial port using baudRate from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function; // Assign function pointer to run when interrupt is called.
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	63da      	str	r2, [r3, #60]	; 0x3c


	// Enable clock power, system configuration clock, and GPIOC.
	// Common to all UARTs.
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80025c2:	4b36      	ldr	r3, [pc, #216]	; (800269c <SerialInitialise+0xec>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a35      	ldr	r2, [pc, #212]	; (800269c <SerialInitialise+0xec>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80025ce:	4b33      	ldr	r3, [pc, #204]	; (800269c <SerialInitialise+0xec>)
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	4a32      	ldr	r2, [pc, #200]	; (800269c <SerialInitialise+0xec>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6193      	str	r3, [r2, #24]

	// Select & assign correct GPIO port.
	switch(serial_port->SerialPortGPIO) {
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d106      	bne.n	80025f0 <SerialInitialise+0x40>
		case SERIAL_GPIO_C:
			RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80025e2:	4b2e      	ldr	r3, [pc, #184]	; (800269c <SerialInitialise+0xec>)
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	4a2d      	ldr	r2, [pc, #180]	; (800269c <SerialInitialise+0xec>)
 80025e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025ec:	6153      	str	r3, [r2, #20]
			break;
 80025ee:	e000      	b.n	80025f2 <SerialInitialise+0x42>
		default:
			break;
 80025f0:	bf00      	nop
	}

	// Set pin mode for GPIO port.
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80025fa:	601a      	str	r2, [r3, #0]

	// Enable high speed clock for GPIOC.
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002604:	601a      	str	r2, [r3, #0]

	// Set alternate function to enable USART to an external pin.
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]

	// Enable output regulation timer to control baud rate.
	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	69d9      	ldr	r1, [r3, #28]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	430a      	orrs	r2, r1
 8002624:	601a      	str	r2, [r3, #0]

	// Set bead Rate. Only 16 bits used.
	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	617b      	str	r3, [r7, #20]


	// Baud rate calculation:
	switch(baudRate) {
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b04      	cmp	r3, #4
 8002630:	d823      	bhi.n	800267a <SerialInitialise+0xca>
 8002632:	a201      	add	r2, pc, #4	; (adr r2, 8002638 <SerialInitialise+0x88>)
 8002634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002638:	0800264d 	.word	0x0800264d
 800263c:	08002657 	.word	0x08002657
 8002640:	08002661 	.word	0x08002661
 8002644:	08002669 	.word	0x08002669
 8002648:	08002671 	.word	0x08002671
		case BAUD_9600:
			*baud_rate_config = 840;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f44f 7252 	mov.w	r2, #840	; 0x348
 8002652:	801a      	strh	r2, [r3, #0]
			break;
 8002654:	e011      	b.n	800267a <SerialInitialise+0xca>
		case BAUD_19200:
			*baud_rate_config = 420;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800265c:	801a      	strh	r2, [r3, #0]
			break;
 800265e:	e00c      	b.n	800267a <SerialInitialise+0xca>
		case BAUD_38400:
			*baud_rate_config = 210;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	22d2      	movs	r2, #210	; 0xd2
 8002664:	801a      	strh	r2, [r3, #0]
			break;
 8002666:	e008      	b.n	800267a <SerialInitialise+0xca>
		case BAUD_57600:
			*baud_rate_config = 140;  // 57600 at 8MHz
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	228c      	movs	r2, #140	; 0x8c
 800266c:	801a      	strh	r2, [r3, #0]
			break;
 800266e:	e004      	b.n	800267a <SerialInitialise+0xca>
		case BAUD_115200:
			*baud_rate_config = 0x46*0x06;  // 115200 at 8MHz
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8002676:	801a      	strh	r2, [r3, #0]
			break;
 8002678:	bf00      	nop
	}


	// Enable serial port for tx and rx functionality.
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 8002688:	601a      	str	r2, [r3, #0]

	callback_function2 = completion_function;
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <SerialInitialise+0xf0>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6013      	str	r3, [r2, #0]

	 EnableInterrupt(); // Enable interrupts for serial port.
 8002690:	f000 f86c 	bl	800276c <EnableInterrupt>
}
 8002694:	bf00      	nop
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	200008c8 	.word	0x200008c8

080026a4 <setup_transmission>:

volatile static uint8_t *buffer;
static uint8_t *start;
static SerialPort *Saved_UART;

void setup_transmission(volatile uint8_t* string, SerialPort *serial_port){
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
	Saved_UART = serial_port;
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <setup_transmission+0x54>)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6013      	str	r3, [r2, #0]
	buffer = string;
 80026b4:	4a11      	ldr	r2, [pc, #68]	; (80026fc <setup_transmission+0x58>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6013      	str	r3, [r2, #0]
	*(Saved_UART->ControlRegister1) |= USART_CR1_TXEIE;
 80026ba:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <setup_transmission+0x54>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <setup_transmission+0x54>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026cc:	601a      	str	r2, [r3, #0]
	*(Saved_UART->DataOutputRegister) = *buffer;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <setup_transmission+0x58>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <setup_transmission+0x54>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	b292      	uxth	r2, r2
 80026de:	801a      	strh	r2, [r3, #0]
	buffer++;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <setup_transmission+0x58>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <setup_transmission+0x58>)
 80026e8:	6013      	str	r3, [r2, #0]
	return;
 80026ea:	bf00      	nop
}
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	200008d0 	.word	0x200008d0
 80026fc:	200008cc 	.word	0x200008cc

08002700 <USART1_IRQHandler>:
	*(serial_port->DataOutputRegister) = *buffer;
	buffer++;
	return;
}

void USART1_IRQHandler(){
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
	*(Saved_UART->StatusRegister) ^= USART_ISR_TC;
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <USART1_IRQHandler+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b15      	ldr	r3, [pc, #84]	; (8002764 <USART1_IRQHandler+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 8002716:	601a      	str	r2, [r3, #0]
	if(*buffer){
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <USART1_IRQHandler+0x68>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00e      	beq.n	8002742 <USART1_IRQHandler+0x42>
		*(Saved_UART->DataOutputRegister) = *buffer;
 8002724:	4b10      	ldr	r3, [pc, #64]	; (8002768 <USART1_IRQHandler+0x68>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <USART1_IRQHandler+0x64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	b292      	uxth	r2, r2
 8002734:	801a      	strh	r2, [r3, #0]
		buffer++;
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <USART1_IRQHandler+0x68>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3301      	adds	r3, #1
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <USART1_IRQHandler+0x68>)
 800273e:	6013      	str	r3, [r2, #0]
		return;
 8002740:	e00c      	b.n	800275c <USART1_IRQHandler+0x5c>
	}
	*(Saved_UART->ControlRegister1) ^= USART_CR1_TXEIE;
 8002742:	4b08      	ldr	r3, [pc, #32]	; (8002764 <USART1_IRQHandler+0x64>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <USART1_IRQHandler+0x64>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8002754:	601a      	str	r2, [r3, #0]
	buffer = 0x00;
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <USART1_IRQHandler+0x68>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
}
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	200008d0 	.word	0x200008d0
 8002768:	200008cc 	.word	0x200008cc

0800276c <EnableInterrupt>:
//	}



// Enable interrupts for USART1 rx functionality.
void EnableInterrupt() {
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002770:	b672      	cpsid	i
}
 8002772:	bf00      	nop

	__disable_irq(); // Disable the interrupts while editing settings.

	// Enable the system configuration controller (SYSCFG in RCC).
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <EnableInterrupt+0x44>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <EnableInterrupt+0x44>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6193      	str	r3, [r2, #24]

	//////USART1->CR1 |= USART_CR1_RXNEIE; // Enable RXNE (Receive Data Register Not Empty) interrupt.

    // Configure EXTI line for USART1.
    SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR2_EXTI5_Msk; // Clear EXTI5, remove previous settings.
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <EnableInterrupt+0x48>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a0b      	ldr	r2, [pc, #44]	; (80027b4 <EnableInterrupt+0x48>)
 8002786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800278a:	60d3      	str	r3, [r2, #12]
    SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PA; // Set EXTI5 bits to PA for  (USART1)
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <EnableInterrupt+0x48>)
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <EnableInterrupt+0x48>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	60d3      	str	r3, [r2, #12]

    // Enable EXTI5 interrupt (corresponding to USART1).
    EXTI->IMR |= EXTI_IMR_MR5; // Enable interrupt on EXTI line 5 (corresponding to PA5/USART1).
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <EnableInterrupt+0x4c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <EnableInterrupt+0x4c>)
 800279a:	f043 0320 	orr.w	r3, r3, #32
 800279e:	6013      	str	r3, [r2, #0]

	// Tell the NVIC module that EXTI0 interrupts should be handled.
	// NVIC_SetPriority(USART1_IRQn, 3); // Set priority to 5, fairly low.
	NVIC_EnableIRQ(USART1_IRQn);
 80027a0:	2025      	movs	r0, #37	; 0x25
 80027a2:	f7ff fee7 	bl	8002574 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80027a6:	b662      	cpsie	i
}
 80027a8:	bf00      	nop

	__enable_irq(); // Re-enable all interrupts now that we are finished editing settings.
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40010400 	.word	0x40010400

080027bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_MspInit+0x44>)
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <HAL_MspInit+0x44>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6193      	str	r3, [r2, #24]
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_MspInit+0x44>)
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_MspInit+0x44>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_MspInit+0x44>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	61d3      	str	r3, [r2, #28]
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_MspInit+0x44>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027f2:	2007      	movs	r0, #7
 80027f4:	f000 fc5e 	bl	80030b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000

08002804 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	; 0x30
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 031c 	add.w	r3, r7, #28
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a2f      	ldr	r2, [pc, #188]	; (80028e0 <HAL_I2C_MspInit+0xdc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d128      	bne.n	8002878 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <HAL_I2C_MspInit+0xe0>)
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	4a2e      	ldr	r2, [pc, #184]	; (80028e4 <HAL_I2C_MspInit+0xe0>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6153      	str	r3, [r2, #20]
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <HAL_I2C_MspInit+0xe0>)
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800283e:	23c0      	movs	r3, #192	; 0xc0
 8002840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002842:	2312      	movs	r3, #18
 8002844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002846:	2301      	movs	r3, #1
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800284a:	2303      	movs	r3, #3
 800284c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800284e:	2304      	movs	r3, #4
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002852:	f107 031c 	add.w	r3, r7, #28
 8002856:	4619      	mov	r1, r3
 8002858:	4823      	ldr	r0, [pc, #140]	; (80028e8 <HAL_I2C_MspInit+0xe4>)
 800285a:	f000 fc6d 	bl	8003138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800285e:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <HAL_I2C_MspInit+0xe0>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4a20      	ldr	r2, [pc, #128]	; (80028e4 <HAL_I2C_MspInit+0xe0>)
 8002864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002868:	61d3      	str	r3, [r2, #28]
 800286a:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <HAL_I2C_MspInit+0xe0>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002876:	e02e      	b.n	80028d6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <HAL_I2C_MspInit+0xe8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d129      	bne.n	80028d6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <HAL_I2C_MspInit+0xe0>)
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_I2C_MspInit+0xe0>)
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	6153      	str	r3, [r2, #20]
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_I2C_MspInit+0xe0>)
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800289a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800289e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a0:	2312      	movs	r3, #18
 80028a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028ac:	2304      	movs	r3, #4
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	4619      	mov	r1, r3
 80028b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ba:	f000 fc3d 	bl	8003138 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_I2C_MspInit+0xe0>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4a08      	ldr	r2, [pc, #32]	; (80028e4 <HAL_I2C_MspInit+0xe0>)
 80028c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028c8:	61d3      	str	r3, [r2, #28]
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_I2C_MspInit+0xe0>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
}
 80028d6:	bf00      	nop
 80028d8:	3730      	adds	r7, #48	; 0x30
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40005400 	.word	0x40005400
 80028e4:	40021000 	.word	0x40021000
 80028e8:	48000400 	.word	0x48000400
 80028ec:	40005800 	.word	0x40005800

080028f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	; 0x28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a17      	ldr	r2, [pc, #92]	; (800296c <HAL_SPI_MspInit+0x7c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d128      	bne.n	8002964 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002912:	4b17      	ldr	r3, [pc, #92]	; (8002970 <HAL_SPI_MspInit+0x80>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	4a16      	ldr	r2, [pc, #88]	; (8002970 <HAL_SPI_MspInit+0x80>)
 8002918:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800291c:	6193      	str	r3, [r2, #24]
 800291e:	4b14      	ldr	r3, [pc, #80]	; (8002970 <HAL_SPI_MspInit+0x80>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_SPI_MspInit+0x80>)
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	4a10      	ldr	r2, [pc, #64]	; (8002970 <HAL_SPI_MspInit+0x80>)
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	6153      	str	r3, [r2, #20]
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <HAL_SPI_MspInit+0x80>)
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002942:	23e0      	movs	r3, #224	; 0xe0
 8002944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002946:	2302      	movs	r3, #2
 8002948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800294e:	2303      	movs	r3, #3
 8002950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002952:	2305      	movs	r3, #5
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002956:	f107 0314 	add.w	r3, r7, #20
 800295a:	4619      	mov	r1, r3
 800295c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002960:	f000 fbea 	bl	8003138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002964:	bf00      	nop
 8002966:	3728      	adds	r7, #40	; 0x28
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40013000 	.word	0x40013000
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <HAL_TIM_Base_MspInit+0x90>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d131      	bne.n	80029fa <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002996:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <HAL_TIM_Base_MspInit+0x94>)
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <HAL_TIM_Base_MspInit+0x94>)
 800299c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029a0:	6193      	str	r3, [r2, #24]
 80029a2:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <HAL_TIM_Base_MspInit+0x94>)
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ae:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <HAL_TIM_Base_MspInit+0x94>)
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <HAL_TIM_Base_MspInit+0x94>)
 80029b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b8:	6153      	str	r3, [r2, #20]
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_TIM_Base_MspInit+0x94>)
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80029d8:	2306      	movs	r3, #6
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4619      	mov	r1, r3
 80029e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e6:	f000 fba7 	bl	8003138 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	201b      	movs	r0, #27
 80029f0:	f000 fb6b 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80029f4:	201b      	movs	r0, #27
 80029f6:	f000 fb84 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	; 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40021000 	.word	0x40021000

08002a0c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08a      	sub	sp, #40	; 0x28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <HAL_PCD_MspInit+0x80>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d129      	bne.n	8002a82 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <HAL_PCD_MspInit+0x84>)
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <HAL_PCD_MspInit+0x84>)
 8002a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a38:	6153      	str	r3, [r2, #20]
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_PCD_MspInit+0x84>)
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002a46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002a58:	230e      	movs	r3, #14
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4619      	mov	r1, r3
 8002a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a66:	f000 fb67 	bl	8003138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_PCD_MspInit+0x84>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <HAL_PCD_MspInit+0x84>)
 8002a70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a74:	61d3      	str	r3, [r2, #28]
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_PCD_MspInit+0x84>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002a82:	bf00      	nop
 8002a84:	3728      	adds	r7, #40	; 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40005c00 	.word	0x40005c00
 8002a90:	40021000 	.word	0x40021000

08002a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a98:	e7fe      	b.n	8002a98 <NMI_Handler+0x4>

08002a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9e:	e7fe      	b.n	8002a9e <HardFault_Handler+0x4>

08002aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa4:	e7fe      	b.n	8002aa4 <MemManage_Handler+0x4>

08002aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aaa:	e7fe      	b.n	8002aaa <BusFault_Handler+0x4>

08002aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <UsageFault_Handler+0x4>

08002ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae0:	f000 f9d4 	bl	8002e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002aec:	4802      	ldr	r0, [pc, #8]	; (8002af8 <TIM1_CC_IRQHandler+0x10>)
 8002aee:	f003 fb27 	bl	8006140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000538 	.word	0x20000538

08002afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b00:	4802      	ldr	r0, [pc, #8]	; (8002b0c <TIM2_IRQHandler+0x10>)
 8002b02:	f003 fb1d 	bl	8006140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000584 	.word	0x20000584

08002b10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
	return 1;
 8002b14:	2301      	movs	r3, #1
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <_kill>:

int _kill(int pid, int sig)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b2a:	f004 f941 	bl	8006db0 <__errno>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2216      	movs	r2, #22
 8002b32:	601a      	str	r2, [r3, #0]
	return -1;
 8002b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_exit>:

void _exit (int status)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b48:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff ffe7 	bl	8002b20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b52:	e7fe      	b.n	8002b52 <_exit+0x12>

08002b54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	e00a      	b.n	8002b7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b66:	f3af 8000 	nop.w
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	60ba      	str	r2, [r7, #8]
 8002b72:	b2ca      	uxtb	r2, r1
 8002b74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	dbf0      	blt.n	8002b66 <_read+0x12>
	}

return len;
 8002b84:	687b      	ldr	r3, [r7, #4]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	e009      	b.n	8002bb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	60ba      	str	r2, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	dbf1      	blt.n	8002ba0 <_write+0x12>
	}
	return len;
 8002bbc:	687b      	ldr	r3, [r7, #4]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <_close>:

int _close(int file)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
	return -1;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bee:	605a      	str	r2, [r3, #4]
	return 0;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <_isatty>:

int _isatty(int file)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
	return 1;
 8002c06:	2301      	movs	r3, #1
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
	return 0;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c38:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <_sbrk+0x5c>)
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <_sbrk+0x60>)
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c44:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <_sbrk+0x64>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <_sbrk+0x64>)
 8002c4e:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <_sbrk+0x68>)
 8002c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <_sbrk+0x64>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d207      	bcs.n	8002c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c60:	f004 f8a6 	bl	8006db0 <__errno>
 8002c64:	4603      	mov	r3, r0
 8002c66:	220c      	movs	r2, #12
 8002c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6e:	e009      	b.n	8002c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <_sbrk+0x64>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c76:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <_sbrk+0x64>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <_sbrk+0x64>)
 8002c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c82:	68fb      	ldr	r3, [r7, #12]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	2000a000 	.word	0x2000a000
 8002c90:	00000400 	.word	0x00000400
 8002c94:	200008d4 	.word	0x200008d4
 8002c98:	200008f0 	.word	0x200008f0

08002c9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <SystemInit+0x20>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	4a05      	ldr	r2, [pc, #20]	; (8002cbc <SystemInit+0x20>)
 8002ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_EnableIRQ>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db0b      	blt.n	8002cea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	4907      	ldr	r1, [pc, #28]	; (8002cf8 <__NVIC_EnableIRQ+0x38>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000e100 	.word	0xe000e100

08002cfc <up_count_TIM3>:
// Function pointer set up
void (*function_pointer)() = 0x00;
void (*oneshot_function_pointer)() = 0x00;
void (*interrupt_pointer)() = 0x00;

void up_count_TIM3(uint32_t time, void (*desired_function)()){
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
	// Set function pointer to given function
	interrupt_pointer = desired_function;
 8002d06:	4a07      	ldr	r2, [pc, #28]	; (8002d24 <up_count_TIM3+0x28>)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	6013      	str	r3, [r2, #0]

	uint32_t prescaler = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]

	// Enable timer 2 in PWM mode
	config_TIM3(time, prescaler, PWM_MODE);
 8002d10:	2201      	movs	r2, #1
 8002d12:	68f9      	ldr	r1, [r7, #12]
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f807 	bl	8002d28 <config_TIM3>

}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200008d8 	.word	0x200008d8

08002d28 <config_TIM3>:

void config_TIM3(uint32_t time, uint32_t prescaler, uint32_t mode){
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d34:	b672      	cpsid	i
}
 8002d36:	bf00      	nop
	__disable_irq();
	// enable the TIM3 Peripherial through the RCC registers
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <config_TIM3+0x58>)
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	4a10      	ldr	r2, [pc, #64]	; (8002d80 <config_TIM3+0x58>)
 8002d3e:	f043 0304 	orr.w	r3, r3, #4
 8002d42:	61d3      	str	r3, [r2, #28]

	// set the prescaler so that 1 count is 1 milisecond
	// 8MHz = 0.000000125, 1 microsecond is 0.000001,
	// prescaler 0.000001/0.000000125 = 8
	TIM4->PSC = 47999;  // timer at 48MHz/1KHz sysclock/desiredfreq
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <config_TIM3+0x5c>)
 8002d46:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = time-1; // 1 second before reset
 8002d4c:	4a0d      	ldr	r2, [pc, #52]	; (8002d84 <config_TIM3+0x5c>)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Make the TIM3 trigger an interrupt when there is an overflow
	TIM4->DIER |= TIM_DIER_UIE;// | TIM_DIER_CC1IE;
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <config_TIM3+0x5c>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <config_TIM3+0x5c>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	60d3      	str	r3, [r2, #12]

	// NVIC_SetPriority(TIM3_IRQn, 20);
	// Tell the NVIC module that timer2 interrupts should be handled
	NVIC_EnableIRQ(TIM4_IRQn); //TIM_CR1_CMS
 8002d60:	201e      	movs	r0, #30
 8002d62:	f7ff ffad 	bl	8002cc0 <__NVIC_EnableIRQ>

	// Finally, enable the timer 3
	TIM4->CR1 |= TIM_CR1_CEN;
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <config_TIM3+0x5c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a06      	ldr	r2, [pc, #24]	; (8002d84 <config_TIM3+0x5c>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d72:	b662      	cpsie	i
}
 8002d74:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40000800 	.word	0x40000800

08002d88 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
	// enable interrupts on USART 1?
	interrupt_pointer();
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <TIM4_IRQHandler+0x1c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4798      	blx	r3
	//TIM3->SR &= ~TIM_SR_UIF
	TIM4->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF  | TIM_SR_CC2IF | TIM_SR_CC3IF );
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <TIM4_IRQHandler+0x20>)
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <TIM4_IRQHandler+0x20>)
 8002d98:	f023 030f 	bic.w	r3, r3, #15
 8002d9c:	6113      	str	r3, [r2, #16]
	//TIM4->SR ^= TIM4->SR;
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	200008d8 	.word	0x200008d8
 8002da8:	40000800 	.word	0x40000800

08002dac <Reset_Handler>:
 8002dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de4 <LoopForever+0x2>
 8002db0:	f7ff ff74 	bl	8002c9c <SystemInit>
 8002db4:	480c      	ldr	r0, [pc, #48]	; (8002de8 <LoopForever+0x6>)
 8002db6:	490d      	ldr	r1, [pc, #52]	; (8002dec <LoopForever+0xa>)
 8002db8:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <LoopForever+0xe>)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e002      	b.n	8002dc4 <LoopCopyDataInit>

08002dbe <CopyDataInit>:
 8002dbe:	58d4      	ldr	r4, [r2, r3]
 8002dc0:	50c4      	str	r4, [r0, r3]
 8002dc2:	3304      	adds	r3, #4

08002dc4 <LoopCopyDataInit>:
 8002dc4:	18c4      	adds	r4, r0, r3
 8002dc6:	428c      	cmp	r4, r1
 8002dc8:	d3f9      	bcc.n	8002dbe <CopyDataInit>
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <LoopForever+0x12>)
 8002dcc:	4c0a      	ldr	r4, [pc, #40]	; (8002df8 <LoopForever+0x16>)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e001      	b.n	8002dd6 <LoopFillZerobss>

08002dd2 <FillZerobss>:
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	3204      	adds	r2, #4

08002dd6 <LoopFillZerobss>:
 8002dd6:	42a2      	cmp	r2, r4
 8002dd8:	d3fb      	bcc.n	8002dd2 <FillZerobss>
 8002dda:	f003 ffef 	bl	8006dbc <__libc_init_array>
 8002dde:	f7fd ffb7 	bl	8000d50 <main>

08002de2 <LoopForever>:
 8002de2:	e7fe      	b.n	8002de2 <LoopForever>
 8002de4:	2000a000 	.word	0x2000a000
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000410 	.word	0x20000410
 8002df0:	0800c558 	.word	0x0800c558
 8002df4:	20000410 	.word	0x20000410
 8002df8:	200008f0 	.word	0x200008f0

08002dfc <ADC1_2_IRQHandler>:
 8002dfc:	e7fe      	b.n	8002dfc <ADC1_2_IRQHandler>
	...

08002e00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_Init+0x28>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <HAL_Init+0x28>)
 8002e0a:	f043 0310 	orr.w	r3, r3, #16
 8002e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e10:	2003      	movs	r0, #3
 8002e12:	f000 f94f 	bl	80030b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f000 f808 	bl	8002e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e1c:	f7ff fcce 	bl	80027bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40022000 	.word	0x40022000

08002e2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_InitTick+0x54>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_InitTick+0x58>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f967 	bl	800311e <HAL_SYSTICK_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00e      	b.n	8002e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d80a      	bhi.n	8002e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e60:	2200      	movs	r2, #0
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295
 8002e68:	f000 f92f 	bl	80030ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e6c:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <HAL_InitTick+0x5c>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000234 	.word	0x20000234
 8002e84:	2000023c 	.word	0x2000023c
 8002e88:	20000238 	.word	0x20000238

08002e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_IncTick+0x20>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_IncTick+0x24>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <HAL_IncTick+0x24>)
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	2000023c 	.word	0x2000023c
 8002eb0:	200008dc 	.word	0x200008dc

08002eb4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return uwTick;  
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_GetTick+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	200008dc 	.word	0x200008dc

08002ecc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7ff ffee 	bl	8002eb4 <HAL_GetTick>
 8002ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d005      	beq.n	8002ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_Delay+0x44>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ef2:	bf00      	nop
 8002ef4:	f7ff ffde 	bl	8002eb4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d8f7      	bhi.n	8002ef4 <HAL_Delay+0x28>
  {
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	2000023c 	.word	0x2000023c

08002f14 <__NVIC_SetPriorityGrouping>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f30:	4013      	ands	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f46:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	60d3      	str	r3, [r2, #12]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_GetPriorityGrouping>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <__NVIC_GetPriorityGrouping+0x18>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f003 0307 	and.w	r3, r3, #7
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_EnableIRQ>:
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	db0b      	blt.n	8002fa2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	f003 021f 	and.w	r2, r3, #31
 8002f90:	4907      	ldr	r1, [pc, #28]	; (8002fb0 <__NVIC_EnableIRQ+0x38>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2001      	movs	r0, #1
 8002f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000e100 	.word	0xe000e100

08002fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	6039      	str	r1, [r7, #0]
 8002fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	db0a      	blt.n	8002fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	490c      	ldr	r1, [pc, #48]	; (8003000 <__NVIC_SetPriority+0x4c>)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fdc:	e00a      	b.n	8002ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	4908      	ldr	r1, [pc, #32]	; (8003004 <__NVIC_SetPriority+0x50>)
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	3b04      	subs	r3, #4
 8002fec:	0112      	lsls	r2, r2, #4
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	761a      	strb	r2, [r3, #24]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000e100 	.word	0xe000e100
 8003004:	e000ed00 	.word	0xe000ed00

08003008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f1c3 0307 	rsb	r3, r3, #7
 8003022:	2b04      	cmp	r3, #4
 8003024:	bf28      	it	cs
 8003026:	2304      	movcs	r3, #4
 8003028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3304      	adds	r3, #4
 800302e:	2b06      	cmp	r3, #6
 8003030:	d902      	bls.n	8003038 <NVIC_EncodePriority+0x30>
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3b03      	subs	r3, #3
 8003036:	e000      	b.n	800303a <NVIC_EncodePriority+0x32>
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800303c:	f04f 32ff 	mov.w	r2, #4294967295
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	401a      	ands	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003050:	f04f 31ff 	mov.w	r1, #4294967295
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	fa01 f303 	lsl.w	r3, r1, r3
 800305a:	43d9      	mvns	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003060:	4313      	orrs	r3, r2
         );
}
 8003062:	4618      	mov	r0, r3
 8003064:	3724      	adds	r7, #36	; 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3b01      	subs	r3, #1
 800307c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003080:	d301      	bcc.n	8003086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003082:	2301      	movs	r3, #1
 8003084:	e00f      	b.n	80030a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003086:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <SysTick_Config+0x40>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800308e:	210f      	movs	r1, #15
 8003090:	f04f 30ff 	mov.w	r0, #4294967295
 8003094:	f7ff ff8e 	bl	8002fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <SysTick_Config+0x40>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <SysTick_Config+0x40>)
 80030a0:	2207      	movs	r2, #7
 80030a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	e000e010 	.word	0xe000e010

080030b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ff29 	bl	8002f14 <__NVIC_SetPriorityGrouping>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030dc:	f7ff ff3e 	bl	8002f5c <__NVIC_GetPriorityGrouping>
 80030e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	6978      	ldr	r0, [r7, #20]
 80030e8:	f7ff ff8e 	bl	8003008 <NVIC_EncodePriority>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff5d 	bl	8002fb4 <__NVIC_SetPriority>
}
 80030fa:	bf00      	nop
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800310c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff31 	bl	8002f78 <__NVIC_EnableIRQ>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff ffa2 	bl	8003070 <SysTick_Config>
 800312c:	4603      	mov	r3, r0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003146:	e154      	b.n	80033f2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	2101      	movs	r1, #1
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	4013      	ands	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8146 	beq.w	80033ec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d005      	beq.n	8003178 <HAL_GPIO_Init+0x40>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d130      	bne.n	80031da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	2203      	movs	r2, #3
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031ae:	2201      	movs	r2, #1
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43db      	mvns	r3, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4013      	ands	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	f003 0201 	and.w	r2, r3, #1
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d017      	beq.n	8003216 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	2203      	movs	r2, #3
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4013      	ands	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0303 	and.w	r3, r3, #3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d123      	bne.n	800326a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	08da      	lsrs	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3208      	adds	r2, #8
 800322a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800322e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	220f      	movs	r2, #15
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	08da      	lsrs	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3208      	adds	r2, #8
 8003264:	6939      	ldr	r1, [r7, #16]
 8003266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2203      	movs	r2, #3
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 0203 	and.w	r2, r3, #3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80a0 	beq.w	80033ec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ac:	4b58      	ldr	r3, [pc, #352]	; (8003410 <HAL_GPIO_Init+0x2d8>)
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	4a57      	ldr	r2, [pc, #348]	; (8003410 <HAL_GPIO_Init+0x2d8>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6193      	str	r3, [r2, #24]
 80032b8:	4b55      	ldr	r3, [pc, #340]	; (8003410 <HAL_GPIO_Init+0x2d8>)
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032c4:	4a53      	ldr	r2, [pc, #332]	; (8003414 <HAL_GPIO_Init+0x2dc>)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	3302      	adds	r3, #2
 80032cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	220f      	movs	r2, #15
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032ee:	d019      	beq.n	8003324 <HAL_GPIO_Init+0x1ec>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a49      	ldr	r2, [pc, #292]	; (8003418 <HAL_GPIO_Init+0x2e0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <HAL_GPIO_Init+0x1e8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a48      	ldr	r2, [pc, #288]	; (800341c <HAL_GPIO_Init+0x2e4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00d      	beq.n	800331c <HAL_GPIO_Init+0x1e4>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a47      	ldr	r2, [pc, #284]	; (8003420 <HAL_GPIO_Init+0x2e8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d007      	beq.n	8003318 <HAL_GPIO_Init+0x1e0>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a46      	ldr	r2, [pc, #280]	; (8003424 <HAL_GPIO_Init+0x2ec>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d101      	bne.n	8003314 <HAL_GPIO_Init+0x1dc>
 8003310:	2304      	movs	r3, #4
 8003312:	e008      	b.n	8003326 <HAL_GPIO_Init+0x1ee>
 8003314:	2305      	movs	r3, #5
 8003316:	e006      	b.n	8003326 <HAL_GPIO_Init+0x1ee>
 8003318:	2303      	movs	r3, #3
 800331a:	e004      	b.n	8003326 <HAL_GPIO_Init+0x1ee>
 800331c:	2302      	movs	r3, #2
 800331e:	e002      	b.n	8003326 <HAL_GPIO_Init+0x1ee>
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <HAL_GPIO_Init+0x1ee>
 8003324:	2300      	movs	r3, #0
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	f002 0203 	and.w	r2, r2, #3
 800332c:	0092      	lsls	r2, r2, #2
 800332e:	4093      	lsls	r3, r2
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003336:	4937      	ldr	r1, [pc, #220]	; (8003414 <HAL_GPIO_Init+0x2dc>)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	3302      	adds	r3, #2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003344:	4b38      	ldr	r3, [pc, #224]	; (8003428 <HAL_GPIO_Init+0x2f0>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	43db      	mvns	r3, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003368:	4a2f      	ldr	r2, [pc, #188]	; (8003428 <HAL_GPIO_Init+0x2f0>)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800336e:	4b2e      	ldr	r3, [pc, #184]	; (8003428 <HAL_GPIO_Init+0x2f0>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	43db      	mvns	r3, r3
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003392:	4a25      	ldr	r2, [pc, #148]	; (8003428 <HAL_GPIO_Init+0x2f0>)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003398:	4b23      	ldr	r3, [pc, #140]	; (8003428 <HAL_GPIO_Init+0x2f0>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033bc:	4a1a      	ldr	r2, [pc, #104]	; (8003428 <HAL_GPIO_Init+0x2f0>)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c2:	4b19      	ldr	r3, [pc, #100]	; (8003428 <HAL_GPIO_Init+0x2f0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033e6:	4a10      	ldr	r2, [pc, #64]	; (8003428 <HAL_GPIO_Init+0x2f0>)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	3301      	adds	r3, #1
 80033f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f47f aea3 	bne.w	8003148 <HAL_GPIO_Init+0x10>
  }
}
 8003402:	bf00      	nop
 8003404:	bf00      	nop
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40021000 	.word	0x40021000
 8003414:	40010000 	.word	0x40010000
 8003418:	48000400 	.word	0x48000400
 800341c:	48000800 	.word	0x48000800
 8003420:	48000c00 	.word	0x48000c00
 8003424:	48001000 	.word	0x48001000
 8003428:	40010400 	.word	0x40010400

0800342c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	887b      	ldrh	r3, [r7, #2]
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
 8003448:	e001      	b.n	800344e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	807b      	strh	r3, [r7, #2]
 8003468:	4613      	mov	r3, r2
 800346a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800346c:	787b      	ldrb	r3, [r7, #1]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003472:	887a      	ldrh	r2, [r7, #2]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003478:	e002      	b.n	8003480 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800347a:	887a      	ldrh	r2, [r7, #2]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e081      	b.n	80035a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff f9a6 	bl	8002804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	; 0x24
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d107      	bne.n	8003506 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	e006      	b.n	8003514 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003512:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d104      	bne.n	8003526 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003524:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003538:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003548:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69d9      	ldr	r1, [r3, #28]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1a      	ldr	r2, [r3, #32]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	4608      	mov	r0, r1
 80035b6:	4611      	mov	r1, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	817b      	strh	r3, [r7, #10]
 80035be:	460b      	mov	r3, r1
 80035c0:	813b      	strh	r3, [r7, #8]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	f040 80f9 	bne.w	80037c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_I2C_Mem_Write+0x34>
 80035da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d105      	bne.n	80035ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0ed      	b.n	80037c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_I2C_Mem_Write+0x4e>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e0e6      	b.n	80037c8 <HAL_I2C_Mem_Write+0x21c>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003602:	f7ff fc57 	bl	8002eb4 <HAL_GetTick>
 8003606:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2319      	movs	r3, #25
 800360e:	2201      	movs	r2, #1
 8003610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fac3 	bl	8003ba0 <I2C_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0d1      	b.n	80037c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2221      	movs	r2, #33	; 0x21
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2240      	movs	r2, #64	; 0x40
 8003630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a3a      	ldr	r2, [r7, #32]
 800363e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800364c:	88f8      	ldrh	r0, [r7, #6]
 800364e:	893a      	ldrh	r2, [r7, #8]
 8003650:	8979      	ldrh	r1, [r7, #10]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	4603      	mov	r3, r0
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f9d3 	bl	8003a08 <I2C_RequestMemoryWrite>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0a9      	b.n	80037c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	2bff      	cmp	r3, #255	; 0xff
 800367c:	d90e      	bls.n	800369c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	22ff      	movs	r2, #255	; 0xff
 8003682:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003688:	b2da      	uxtb	r2, r3
 800368a:	8979      	ldrh	r1, [r7, #10]
 800368c:	2300      	movs	r3, #0
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fc3d 	bl	8003f14 <I2C_TransferConfig>
 800369a:	e00f      	b.n	80036bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	8979      	ldrh	r1, [r7, #10]
 80036ae:	2300      	movs	r3, #0
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 fc2c 	bl	8003f14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fabc 	bl	8003c3e <I2C_WaitOnTXISFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e07b      	b.n	80037c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d034      	beq.n	8003774 <HAL_I2C_Mem_Write+0x1c8>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370e:	2b00      	cmp	r3, #0
 8003710:	d130      	bne.n	8003774 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	2200      	movs	r2, #0
 800371a:	2180      	movs	r1, #128	; 0x80
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 fa3f 	bl	8003ba0 <I2C_WaitOnFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e04d      	b.n	80037c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2bff      	cmp	r3, #255	; 0xff
 8003734:	d90e      	bls.n	8003754 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	22ff      	movs	r2, #255	; 0xff
 800373a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	b2da      	uxtb	r2, r3
 8003742:	8979      	ldrh	r1, [r7, #10]
 8003744:	2300      	movs	r3, #0
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fbe1 	bl	8003f14 <I2C_TransferConfig>
 8003752:	e00f      	b.n	8003774 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	b2da      	uxtb	r2, r3
 8003764:	8979      	ldrh	r1, [r7, #10]
 8003766:	2300      	movs	r3, #0
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fbd0 	bl	8003f14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d19e      	bne.n	80036bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 faa2 	bl	8003ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e01a      	b.n	80037c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2220      	movs	r2, #32
 8003798:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <HAL_I2C_Mem_Write+0x224>)
 80037a6:	400b      	ands	r3, r1
 80037a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e000      	b.n	80037c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
  }
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	fe00e800 	.word	0xfe00e800

080037d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	4608      	mov	r0, r1
 80037de:	4611      	mov	r1, r2
 80037e0:	461a      	mov	r2, r3
 80037e2:	4603      	mov	r3, r0
 80037e4:	817b      	strh	r3, [r7, #10]
 80037e6:	460b      	mov	r3, r1
 80037e8:	813b      	strh	r3, [r7, #8]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	f040 80fd 	bne.w	80039f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_I2C_Mem_Read+0x34>
 8003802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003804:	2b00      	cmp	r3, #0
 8003806:	d105      	bne.n	8003814 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800380e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0f1      	b.n	80039f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_I2C_Mem_Read+0x4e>
 800381e:	2302      	movs	r3, #2
 8003820:	e0ea      	b.n	80039f8 <HAL_I2C_Mem_Read+0x224>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800382a:	f7ff fb43 	bl	8002eb4 <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	2319      	movs	r3, #25
 8003836:	2201      	movs	r2, #1
 8003838:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f9af 	bl	8003ba0 <I2C_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0d5      	b.n	80039f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2222      	movs	r2, #34	; 0x22
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2240      	movs	r2, #64	; 0x40
 8003858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a3a      	ldr	r2, [r7, #32]
 8003866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800386c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003874:	88f8      	ldrh	r0, [r7, #6]
 8003876:	893a      	ldrh	r2, [r7, #8]
 8003878:	8979      	ldrh	r1, [r7, #10]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	4603      	mov	r3, r0
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f913 	bl	8003ab0 <I2C_RequestMemoryRead>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0ad      	b.n	80039f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2bff      	cmp	r3, #255	; 0xff
 80038a4:	d90e      	bls.n	80038c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	22ff      	movs	r2, #255	; 0xff
 80038aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	8979      	ldrh	r1, [r7, #10]
 80038b4:	4b52      	ldr	r3, [pc, #328]	; (8003a00 <HAL_I2C_Mem_Read+0x22c>)
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fb29 	bl	8003f14 <I2C_TransferConfig>
 80038c2:	e00f      	b.n	80038e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	8979      	ldrh	r1, [r7, #10]
 80038d6:	4b4a      	ldr	r3, [pc, #296]	; (8003a00 <HAL_I2C_Mem_Read+0x22c>)
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fb18 	bl	8003f14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	2200      	movs	r2, #0
 80038ec:	2104      	movs	r1, #4
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 f956 	bl	8003ba0 <I2C_WaitOnFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e07c      	b.n	80039f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d034      	beq.n	80039a4 <HAL_I2C_Mem_Read+0x1d0>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	2b00      	cmp	r3, #0
 8003940:	d130      	bne.n	80039a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003948:	2200      	movs	r2, #0
 800394a:	2180      	movs	r1, #128	; 0x80
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f927 	bl	8003ba0 <I2C_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e04d      	b.n	80039f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	2bff      	cmp	r3, #255	; 0xff
 8003964:	d90e      	bls.n	8003984 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	22ff      	movs	r2, #255	; 0xff
 800396a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	b2da      	uxtb	r2, r3
 8003972:	8979      	ldrh	r1, [r7, #10]
 8003974:	2300      	movs	r3, #0
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fac9 	bl	8003f14 <I2C_TransferConfig>
 8003982:	e00f      	b.n	80039a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	b2da      	uxtb	r2, r3
 8003994:	8979      	ldrh	r1, [r7, #10]
 8003996:	2300      	movs	r3, #0
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f000 fab8 	bl	8003f14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d19a      	bne.n	80038e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f98a 	bl	8003ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e01a      	b.n	80039f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2220      	movs	r2, #32
 80039c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <HAL_I2C_Mem_Read+0x230>)
 80039d6:	400b      	ands	r3, r1
 80039d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e000      	b.n	80039f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
  }
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	80002400 	.word	0x80002400
 8003a04:	fe00e800 	.word	0xfe00e800

08003a08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	4608      	mov	r0, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	461a      	mov	r2, r3
 8003a16:	4603      	mov	r3, r0
 8003a18:	817b      	strh	r3, [r7, #10]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	813b      	strh	r3, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	8979      	ldrh	r1, [r7, #10]
 8003a28:	4b20      	ldr	r3, [pc, #128]	; (8003aac <I2C_RequestMemoryWrite+0xa4>)
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 fa6f 	bl	8003f14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	69b9      	ldr	r1, [r7, #24]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f8ff 	bl	8003c3e <I2C_WaitOnTXISFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e02c      	b.n	8003aa4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d105      	bne.n	8003a5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a50:	893b      	ldrh	r3, [r7, #8]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	629a      	str	r2, [r3, #40]	; 0x28
 8003a5a:	e015      	b.n	8003a88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a5c:	893b      	ldrh	r3, [r7, #8]
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	69b9      	ldr	r1, [r7, #24]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f8e5 	bl	8003c3e <I2C_WaitOnTXISFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e012      	b.n	8003aa4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a7e:	893b      	ldrh	r3, [r7, #8]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f884 	bl	8003ba0 <I2C_WaitOnFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	80002000 	.word	0x80002000

08003ab0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	4608      	mov	r0, r1
 8003aba:	4611      	mov	r1, r2
 8003abc:	461a      	mov	r2, r3
 8003abe:	4603      	mov	r3, r0
 8003ac0:	817b      	strh	r3, [r7, #10]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	813b      	strh	r3, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	8979      	ldrh	r1, [r7, #10]
 8003ad0:	4b20      	ldr	r3, [pc, #128]	; (8003b54 <I2C_RequestMemoryRead+0xa4>)
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fa1c 	bl	8003f14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	69b9      	ldr	r1, [r7, #24]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f8ac 	bl	8003c3e <I2C_WaitOnTXISFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e02c      	b.n	8003b4a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d105      	bne.n	8003b02 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003af6:	893b      	ldrh	r3, [r7, #8]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	629a      	str	r2, [r3, #40]	; 0x28
 8003b00:	e015      	b.n	8003b2e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b02:	893b      	ldrh	r3, [r7, #8]
 8003b04:	0a1b      	lsrs	r3, r3, #8
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	69b9      	ldr	r1, [r7, #24]
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f892 	bl	8003c3e <I2C_WaitOnTXISFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e012      	b.n	8003b4a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b24:	893b      	ldrh	r3, [r7, #8]
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2200      	movs	r2, #0
 8003b36:	2140      	movs	r1, #64	; 0x40
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f831 	bl	8003ba0 <I2C_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	80002000 	.word	0x80002000

08003b58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d103      	bne.n	8003b76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d007      	beq.n	8003b94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	619a      	str	r2, [r3, #24]
  }
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb0:	e031      	b.n	8003c16 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d02d      	beq.n	8003c16 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bba:	f7ff f97b 	bl	8002eb4 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d302      	bcc.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d122      	bne.n	8003c16 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	bf0c      	ite	eq
 8003be0:	2301      	moveq	r3, #1
 8003be2:	2300      	movne	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d113      	bne.n	8003c16 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	f043 0220 	orr.w	r2, r3, #32
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e00f      	b.n	8003c36 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699a      	ldr	r2, [r3, #24]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	bf0c      	ite	eq
 8003c26:	2301      	moveq	r3, #1
 8003c28:	2300      	movne	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d0be      	beq.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c4a:	e033      	b.n	8003cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f87f 	bl	8003d54 <I2C_IsErrorOccurred>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e031      	b.n	8003cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d025      	beq.n	8003cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c68:	f7ff f924 	bl	8002eb4 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d302      	bcc.n	8003c7e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d11a      	bne.n	8003cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d013      	beq.n	8003cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	f043 0220 	orr.w	r2, r3, #32
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e007      	b.n	8003cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d1c4      	bne.n	8003c4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cd8:	e02f      	b.n	8003d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f838 	bl	8003d54 <I2C_IsErrorOccurred>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e02d      	b.n	8003d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cee:	f7ff f8e1 	bl	8002eb4 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d302      	bcc.n	8003d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d11a      	bne.n	8003d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d013      	beq.n	8003d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f043 0220 	orr.w	r2, r3, #32
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e007      	b.n	8003d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d1c8      	bne.n	8003cda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d068      	beq.n	8003e52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2210      	movs	r2, #16
 8003d86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d88:	e049      	b.n	8003e1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d045      	beq.n	8003e1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d92:	f7ff f88f 	bl	8002eb4 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d302      	bcc.n	8003da8 <I2C_IsErrorOccurred+0x54>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d13a      	bne.n	8003e1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dca:	d121      	bne.n	8003e10 <I2C_IsErrorOccurred+0xbc>
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd2:	d01d      	beq.n	8003e10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d01a      	beq.n	8003e10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003dea:	f7ff f863 	bl	8002eb4 <HAL_GetTick>
 8003dee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df0:	e00e      	b.n	8003e10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003df2:	f7ff f85f 	bl	8002eb4 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b19      	cmp	r3, #25
 8003dfe:	d907      	bls.n	8003e10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	f043 0320 	orr.w	r3, r3, #32
 8003e06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003e0e:	e006      	b.n	8003e1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	d1e9      	bne.n	8003df2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d003      	beq.n	8003e34 <I2C_IsErrorOccurred+0xe0>
 8003e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0aa      	beq.n	8003d8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d103      	bne.n	8003e44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2220      	movs	r2, #32
 8003e42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	f043 0304 	orr.w	r3, r3, #4
 8003e4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00b      	beq.n	8003e7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	f043 0308 	orr.w	r3, r3, #8
 8003e8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00b      	beq.n	8003ec0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	f043 0302 	orr.w	r3, r3, #2
 8003eae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01c      	beq.n	8003f02 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7ff fe45 	bl	8003b58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6859      	ldr	r1, [r3, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4b0d      	ldr	r3, [pc, #52]	; (8003f10 <I2C_IsErrorOccurred+0x1bc>)
 8003eda:	400b      	ands	r3, r1
 8003edc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3728      	adds	r7, #40	; 0x28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	fe00e800 	.word	0xfe00e800

08003f14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	607b      	str	r3, [r7, #4]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	817b      	strh	r3, [r7, #10]
 8003f22:	4613      	mov	r3, r2
 8003f24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f26:	897b      	ldrh	r3, [r7, #10]
 8003f28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f2c:	7a7b      	ldrb	r3, [r7, #9]
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	0d5b      	lsrs	r3, r3, #21
 8003f4e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f52:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <I2C_TransferConfig+0x60>)
 8003f54:	430b      	orrs	r3, r1
 8003f56:	43db      	mvns	r3, r3
 8003f58:	ea02 0103 	and.w	r1, r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	03ff63ff 	.word	0x03ff63ff

08003f78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d138      	bne.n	8004000 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e032      	b.n	8004002 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2224      	movs	r2, #36	; 0x24
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6819      	ldr	r1, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b20      	cmp	r3, #32
 8004022:	d139      	bne.n	8004098 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800402e:	2302      	movs	r3, #2
 8004030:	e033      	b.n	800409a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2224      	movs	r2, #36	; 0x24
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004060:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	e000      	b.n	800409a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004098:	2302      	movs	r3, #2
  }
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a8:	b08b      	sub	sp, #44	; 0x2c
 80040aa:	af06      	add	r7, sp, #24
 80040ac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0c4      	b.n	8004242 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7fe fc9d 	bl	8002a0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2203      	movs	r2, #3
 80040d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f002 fe2a 	bl	8006d38 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e4:	2300      	movs	r3, #0
 80040e6:	73fb      	strb	r3, [r7, #15]
 80040e8:	e040      	b.n	800416c <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	440b      	add	r3, r1
 80040fa:	3301      	adds	r3, #1
 80040fc:	2201      	movs	r2, #1
 80040fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	440b      	add	r3, r1
 8004110:	7bfa      	ldrb	r2, [r7, #15]
 8004112:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	440b      	add	r3, r1
 8004124:	3303      	adds	r3, #3
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	440b      	add	r3, r1
 8004138:	3338      	adds	r3, #56	; 0x38
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800413e:	7bfa      	ldrb	r2, [r7, #15]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	440b      	add	r3, r1
 800414c:	333c      	adds	r3, #60	; 0x3c
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	3340      	adds	r3, #64	; 0x40
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	3301      	adds	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
 800416c:	7bfa      	ldrb	r2, [r7, #15]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	429a      	cmp	r2, r3
 8004174:	d3b9      	bcc.n	80040ea <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	e044      	b.n	8004206 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004192:	7bfa      	ldrb	r2, [r7, #15]
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	440b      	add	r3, r1
 80041a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041a4:	7bfa      	ldrb	r2, [r7, #15]
 80041a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	440b      	add	r3, r1
 80041b6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	440b      	add	r3, r1
 80041cc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	440b      	add	r3, r1
 80041e2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	440b      	add	r3, r1
 80041f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	3301      	adds	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	7bfa      	ldrb	r2, [r7, #15]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	d3b5      	bcc.n	800417c <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	687e      	ldr	r6, [r7, #4]
 8004218:	466d      	mov	r5, sp
 800421a:	f106 0410 	add.w	r4, r6, #16
 800421e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	1d33      	adds	r3, r6, #4
 8004228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800422a:	6838      	ldr	r0, [r7, #0]
 800422c:	f002 fd9f 	bl	8006d6e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800424c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004252:	af00      	add	r7, sp, #0
 8004254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004258:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800425c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800425e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f001 b823 	b.w	80052b8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 817d 	beq.w	8004582 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004288:	4bbc      	ldr	r3, [pc, #752]	; (800457c <HAL_RCC_OscConfig+0x330>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b04      	cmp	r3, #4
 8004292:	d00c      	beq.n	80042ae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004294:	4bb9      	ldr	r3, [pc, #740]	; (800457c <HAL_RCC_OscConfig+0x330>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 030c 	and.w	r3, r3, #12
 800429c:	2b08      	cmp	r3, #8
 800429e:	d15c      	bne.n	800435a <HAL_RCC_OscConfig+0x10e>
 80042a0:	4bb6      	ldr	r3, [pc, #728]	; (800457c <HAL_RCC_OscConfig+0x330>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ac:	d155      	bne.n	800435a <HAL_RCC_OscConfig+0x10e>
 80042ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042b2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d102      	bne.n	80042e0 <HAL_RCC_OscConfig+0x94>
 80042da:	4ba8      	ldr	r3, [pc, #672]	; (800457c <HAL_RCC_OscConfig+0x330>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	e015      	b.n	800430c <HAL_RCC_OscConfig+0xc0>
 80042e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042e4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80042ec:	fa93 f3a3 	rbit	r3, r3
 80042f0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80042f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042f8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80042fc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004300:	fa93 f3a3 	rbit	r3, r3
 8004304:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004308:	4b9c      	ldr	r3, [pc, #624]	; (800457c <HAL_RCC_OscConfig+0x330>)
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004310:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004314:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004318:	fa92 f2a2 	rbit	r2, r2
 800431c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004320:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004324:	fab2 f282 	clz	r2, r2
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	f042 0220 	orr.w	r2, r2, #32
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	f002 021f 	and.w	r2, r2, #31
 8004334:	2101      	movs	r1, #1
 8004336:	fa01 f202 	lsl.w	r2, r1, r2
 800433a:	4013      	ands	r3, r2
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 811f 	beq.w	8004580 <HAL_RCC_OscConfig+0x334>
 8004342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004346:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 8116 	bne.w	8004580 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	f000 bfaf 	b.w	80052b8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800435e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436a:	d106      	bne.n	800437a <HAL_RCC_OscConfig+0x12e>
 800436c:	4b83      	ldr	r3, [pc, #524]	; (800457c <HAL_RCC_OscConfig+0x330>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a82      	ldr	r2, [pc, #520]	; (800457c <HAL_RCC_OscConfig+0x330>)
 8004372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	e036      	b.n	80043e8 <HAL_RCC_OscConfig+0x19c>
 800437a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10c      	bne.n	80043a4 <HAL_RCC_OscConfig+0x158>
 800438a:	4b7c      	ldr	r3, [pc, #496]	; (800457c <HAL_RCC_OscConfig+0x330>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a7b      	ldr	r2, [pc, #492]	; (800457c <HAL_RCC_OscConfig+0x330>)
 8004390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	4b79      	ldr	r3, [pc, #484]	; (800457c <HAL_RCC_OscConfig+0x330>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a78      	ldr	r2, [pc, #480]	; (800457c <HAL_RCC_OscConfig+0x330>)
 800439c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	e021      	b.n	80043e8 <HAL_RCC_OscConfig+0x19c>
 80043a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x184>
 80043b6:	4b71      	ldr	r3, [pc, #452]	; (800457c <HAL_RCC_OscConfig+0x330>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a70      	ldr	r2, [pc, #448]	; (800457c <HAL_RCC_OscConfig+0x330>)
 80043bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b6e      	ldr	r3, [pc, #440]	; (800457c <HAL_RCC_OscConfig+0x330>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a6d      	ldr	r2, [pc, #436]	; (800457c <HAL_RCC_OscConfig+0x330>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e00b      	b.n	80043e8 <HAL_RCC_OscConfig+0x19c>
 80043d0:	4b6a      	ldr	r3, [pc, #424]	; (800457c <HAL_RCC_OscConfig+0x330>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a69      	ldr	r2, [pc, #420]	; (800457c <HAL_RCC_OscConfig+0x330>)
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4b67      	ldr	r3, [pc, #412]	; (800457c <HAL_RCC_OscConfig+0x330>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a66      	ldr	r2, [pc, #408]	; (800457c <HAL_RCC_OscConfig+0x330>)
 80043e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043e8:	4b64      	ldr	r3, [pc, #400]	; (800457c <HAL_RCC_OscConfig+0x330>)
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	f023 020f 	bic.w	r2, r3, #15
 80043f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	495f      	ldr	r1, [pc, #380]	; (800457c <HAL_RCC_OscConfig+0x330>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004406:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d059      	beq.n	80044c6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004412:	f7fe fd4f 	bl	8002eb4 <HAL_GetTick>
 8004416:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441a:	e00a      	b.n	8004432 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800441c:	f7fe fd4a 	bl	8002eb4 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b64      	cmp	r3, #100	; 0x64
 800442a:	d902      	bls.n	8004432 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	f000 bf43 	b.w	80052b8 <HAL_RCC_OscConfig+0x106c>
 8004432:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004436:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800443e:	fa93 f3a3 	rbit	r3, r3
 8004442:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004446:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444a:	fab3 f383 	clz	r3, r3
 800444e:	b2db      	uxtb	r3, r3
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f043 0301 	orr.w	r3, r3, #1
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	d102      	bne.n	8004464 <HAL_RCC_OscConfig+0x218>
 800445e:	4b47      	ldr	r3, [pc, #284]	; (800457c <HAL_RCC_OscConfig+0x330>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	e015      	b.n	8004490 <HAL_RCC_OscConfig+0x244>
 8004464:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004468:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004470:	fa93 f3a3 	rbit	r3, r3
 8004474:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004478:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800447c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004480:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800448c:	4b3b      	ldr	r3, [pc, #236]	; (800457c <HAL_RCC_OscConfig+0x330>)
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004494:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004498:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800449c:	fa92 f2a2 	rbit	r2, r2
 80044a0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80044a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80044a8:	fab2 f282 	clz	r2, r2
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	f042 0220 	orr.w	r2, r2, #32
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	f002 021f 	and.w	r2, r2, #31
 80044b8:	2101      	movs	r1, #1
 80044ba:	fa01 f202 	lsl.w	r2, r1, r2
 80044be:	4013      	ands	r3, r2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0ab      	beq.n	800441c <HAL_RCC_OscConfig+0x1d0>
 80044c4:	e05d      	b.n	8004582 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c6:	f7fe fcf5 	bl	8002eb4 <HAL_GetTick>
 80044ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ce:	e00a      	b.n	80044e6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d0:	f7fe fcf0 	bl	8002eb4 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b64      	cmp	r3, #100	; 0x64
 80044de:	d902      	bls.n	80044e6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	f000 bee9 	b.w	80052b8 <HAL_RCC_OscConfig+0x106c>
 80044e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044ea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80044f2:	fa93 f3a3 	rbit	r3, r3
 80044f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80044fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fe:	fab3 f383 	clz	r3, r3
 8004502:	b2db      	uxtb	r3, r3
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	b2db      	uxtb	r3, r3
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b01      	cmp	r3, #1
 8004510:	d102      	bne.n	8004518 <HAL_RCC_OscConfig+0x2cc>
 8004512:	4b1a      	ldr	r3, [pc, #104]	; (800457c <HAL_RCC_OscConfig+0x330>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	e015      	b.n	8004544 <HAL_RCC_OscConfig+0x2f8>
 8004518:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800451c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004520:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004524:	fa93 f3a3 	rbit	r3, r3
 8004528:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800452c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004530:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004534:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004538:	fa93 f3a3 	rbit	r3, r3
 800453c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004540:	4b0e      	ldr	r3, [pc, #56]	; (800457c <HAL_RCC_OscConfig+0x330>)
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004548:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800454c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004550:	fa92 f2a2 	rbit	r2, r2
 8004554:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004558:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800455c:	fab2 f282 	clz	r2, r2
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	f042 0220 	orr.w	r2, r2, #32
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	f002 021f 	and.w	r2, r2, #31
 800456c:	2101      	movs	r1, #1
 800456e:	fa01 f202 	lsl.w	r2, r1, r2
 8004572:	4013      	ands	r3, r2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ab      	bne.n	80044d0 <HAL_RCC_OscConfig+0x284>
 8004578:	e003      	b.n	8004582 <HAL_RCC_OscConfig+0x336>
 800457a:	bf00      	nop
 800457c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004586:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 817d 	beq.w	8004892 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004598:	4ba6      	ldr	r3, [pc, #664]	; (8004834 <HAL_RCC_OscConfig+0x5e8>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f003 030c 	and.w	r3, r3, #12
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00b      	beq.n	80045bc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80045a4:	4ba3      	ldr	r3, [pc, #652]	; (8004834 <HAL_RCC_OscConfig+0x5e8>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 030c 	and.w	r3, r3, #12
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d172      	bne.n	8004696 <HAL_RCC_OscConfig+0x44a>
 80045b0:	4ba0      	ldr	r3, [pc, #640]	; (8004834 <HAL_RCC_OscConfig+0x5e8>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d16c      	bne.n	8004696 <HAL_RCC_OscConfig+0x44a>
 80045bc:	2302      	movs	r3, #2
 80045be:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80045ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d102      	bne.n	80045ec <HAL_RCC_OscConfig+0x3a0>
 80045e6:	4b93      	ldr	r3, [pc, #588]	; (8004834 <HAL_RCC_OscConfig+0x5e8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	e013      	b.n	8004614 <HAL_RCC_OscConfig+0x3c8>
 80045ec:	2302      	movs	r3, #2
 80045ee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80045f6:	fa93 f3a3 	rbit	r3, r3
 80045fa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80045fe:	2302      	movs	r3, #2
 8004600:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004604:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004608:	fa93 f3a3 	rbit	r3, r3
 800460c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004610:	4b88      	ldr	r3, [pc, #544]	; (8004834 <HAL_RCC_OscConfig+0x5e8>)
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	2202      	movs	r2, #2
 8004616:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800461a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800461e:	fa92 f2a2 	rbit	r2, r2
 8004622:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004626:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800462a:	fab2 f282 	clz	r2, r2
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	f042 0220 	orr.w	r2, r2, #32
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	f002 021f 	and.w	r2, r2, #31
 800463a:	2101      	movs	r1, #1
 800463c:	fa01 f202 	lsl.w	r2, r1, r2
 8004640:	4013      	ands	r3, r2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCC_OscConfig+0x410>
 8004646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d002      	beq.n	800465c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f000 be2e 	b.w	80052b8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465c:	4b75      	ldr	r3, [pc, #468]	; (8004834 <HAL_RCC_OscConfig+0x5e8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004668:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	21f8      	movs	r1, #248	; 0xf8
 8004672:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004676:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800467a:	fa91 f1a1 	rbit	r1, r1
 800467e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004682:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004686:	fab1 f181 	clz	r1, r1
 800468a:	b2c9      	uxtb	r1, r1
 800468c:	408b      	lsls	r3, r1
 800468e:	4969      	ldr	r1, [pc, #420]	; (8004834 <HAL_RCC_OscConfig+0x5e8>)
 8004690:	4313      	orrs	r3, r2
 8004692:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004694:	e0fd      	b.n	8004892 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 8088 	beq.w	80047b8 <HAL_RCC_OscConfig+0x56c>
 80046a8:	2301      	movs	r3, #1
 80046aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80046b2:	fa93 f3a3 	rbit	r3, r3
 80046b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80046ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	461a      	mov	r2, r3
 80046d0:	2301      	movs	r3, #1
 80046d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d4:	f7fe fbee 	bl	8002eb4 <HAL_GetTick>
 80046d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046dc:	e00a      	b.n	80046f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046de:	f7fe fbe9 	bl	8002eb4 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d902      	bls.n	80046f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	f000 bde2 	b.w	80052b8 <HAL_RCC_OscConfig+0x106c>
 80046f4:	2302      	movs	r3, #2
 80046f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80046fe:	fa93 f3a3 	rbit	r3, r3
 8004702:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004706:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470a:	fab3 f383 	clz	r3, r3
 800470e:	b2db      	uxtb	r3, r3
 8004710:	095b      	lsrs	r3, r3, #5
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d102      	bne.n	8004724 <HAL_RCC_OscConfig+0x4d8>
 800471e:	4b45      	ldr	r3, [pc, #276]	; (8004834 <HAL_RCC_OscConfig+0x5e8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	e013      	b.n	800474c <HAL_RCC_OscConfig+0x500>
 8004724:	2302      	movs	r3, #2
 8004726:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004736:	2302      	movs	r3, #2
 8004738:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800473c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004740:	fa93 f3a3 	rbit	r3, r3
 8004744:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004748:	4b3a      	ldr	r3, [pc, #232]	; (8004834 <HAL_RCC_OscConfig+0x5e8>)
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	2202      	movs	r2, #2
 800474e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004752:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004756:	fa92 f2a2 	rbit	r2, r2
 800475a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800475e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004762:	fab2 f282 	clz	r2, r2
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	f042 0220 	orr.w	r2, r2, #32
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	f002 021f 	and.w	r2, r2, #31
 8004772:	2101      	movs	r1, #1
 8004774:	fa01 f202 	lsl.w	r2, r1, r2
 8004778:	4013      	ands	r3, r2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0af      	beq.n	80046de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477e:	4b2d      	ldr	r3, [pc, #180]	; (8004834 <HAL_RCC_OscConfig+0x5e8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800478a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	21f8      	movs	r1, #248	; 0xf8
 8004794:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004798:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800479c:	fa91 f1a1 	rbit	r1, r1
 80047a0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80047a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80047a8:	fab1 f181 	clz	r1, r1
 80047ac:	b2c9      	uxtb	r1, r1
 80047ae:	408b      	lsls	r3, r1
 80047b0:	4920      	ldr	r1, [pc, #128]	; (8004834 <HAL_RCC_OscConfig+0x5e8>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]
 80047b6:	e06c      	b.n	8004892 <HAL_RCC_OscConfig+0x646>
 80047b8:	2301      	movs	r3, #1
 80047ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80047c2:	fa93 f3a3 	rbit	r3, r3
 80047c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80047ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ce:	fab3 f383 	clz	r3, r3
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	461a      	mov	r2, r3
 80047e0:	2300      	movs	r3, #0
 80047e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fe fb66 	bl	8002eb4 <HAL_GetTick>
 80047e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ec:	e00a      	b.n	8004804 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ee:	f7fe fb61 	bl	8002eb4 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d902      	bls.n	8004804 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	f000 bd5a 	b.w	80052b8 <HAL_RCC_OscConfig+0x106c>
 8004804:	2302      	movs	r3, #2
 8004806:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800480e:	fa93 f3a3 	rbit	r3, r3
 8004812:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	d104      	bne.n	8004838 <HAL_RCC_OscConfig+0x5ec>
 800482e:	4b01      	ldr	r3, [pc, #4]	; (8004834 <HAL_RCC_OscConfig+0x5e8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	e015      	b.n	8004860 <HAL_RCC_OscConfig+0x614>
 8004834:	40021000 	.word	0x40021000
 8004838:	2302      	movs	r3, #2
 800483a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800484a:	2302      	movs	r3, #2
 800484c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004850:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004854:	fa93 f3a3 	rbit	r3, r3
 8004858:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800485c:	4bc8      	ldr	r3, [pc, #800]	; (8004b80 <HAL_RCC_OscConfig+0x934>)
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	2202      	movs	r2, #2
 8004862:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004866:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800486a:	fa92 f2a2 	rbit	r2, r2
 800486e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004872:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004876:	fab2 f282 	clz	r2, r2
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	f042 0220 	orr.w	r2, r2, #32
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	f002 021f 	and.w	r2, r2, #31
 8004886:	2101      	movs	r1, #1
 8004888:	fa01 f202 	lsl.w	r2, r1, r2
 800488c:	4013      	ands	r3, r2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1ad      	bne.n	80047ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004896:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8110 	beq.w	8004ac8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d079      	beq.n	80049ac <HAL_RCC_OscConfig+0x760>
 80048b8:	2301      	movs	r3, #1
 80048ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80048c2:	fa93 f3a3 	rbit	r3, r3
 80048c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80048ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ce:	fab3 f383 	clz	r3, r3
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	4bab      	ldr	r3, [pc, #684]	; (8004b84 <HAL_RCC_OscConfig+0x938>)
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	461a      	mov	r2, r3
 80048de:	2301      	movs	r3, #1
 80048e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e2:	f7fe fae7 	bl	8002eb4 <HAL_GetTick>
 80048e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ec:	f7fe fae2 	bl	8002eb4 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d902      	bls.n	8004902 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	f000 bcdb 	b.w	80052b8 <HAL_RCC_OscConfig+0x106c>
 8004902:	2302      	movs	r3, #2
 8004904:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004908:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800490c:	fa93 f3a3 	rbit	r3, r3
 8004910:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004918:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800491c:	2202      	movs	r2, #2
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004924:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	fa93 f2a3 	rbit	r2, r3
 800492e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004932:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004940:	2202      	movs	r2, #2
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	fa93 f2a3 	rbit	r2, r3
 8004952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004956:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800495a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495c:	4b88      	ldr	r3, [pc, #544]	; (8004b80 <HAL_RCC_OscConfig+0x934>)
 800495e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004964:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004968:	2102      	movs	r1, #2
 800496a:	6019      	str	r1, [r3, #0]
 800496c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004970:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	fa93 f1a3 	rbit	r1, r3
 800497a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800497e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004982:	6019      	str	r1, [r3, #0]
  return result;
 8004984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004988:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	fab3 f383 	clz	r3, r3
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004998:	b2db      	uxtb	r3, r3
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	2101      	movs	r1, #1
 80049a0:	fa01 f303 	lsl.w	r3, r1, r3
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0a0      	beq.n	80048ec <HAL_RCC_OscConfig+0x6a0>
 80049aa:	e08d      	b.n	8004ac8 <HAL_RCC_OscConfig+0x87c>
 80049ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049b4:	2201      	movs	r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	fa93 f2a3 	rbit	r2, r3
 80049c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049ce:	601a      	str	r2, [r3, #0]
  return result;
 80049d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049d8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049da:	fab3 f383 	clz	r3, r3
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	461a      	mov	r2, r3
 80049e2:	4b68      	ldr	r3, [pc, #416]	; (8004b84 <HAL_RCC_OscConfig+0x938>)
 80049e4:	4413      	add	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	461a      	mov	r2, r3
 80049ea:	2300      	movs	r3, #0
 80049ec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ee:	f7fe fa61 	bl	8002eb4 <HAL_GetTick>
 80049f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f8:	f7fe fa5c 	bl	8002eb4 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d902      	bls.n	8004a0e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	f000 bc55 	b.w	80052b8 <HAL_RCC_OscConfig+0x106c>
 8004a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a12:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a16:	2202      	movs	r2, #2
 8004a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a1e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	fa93 f2a3 	rbit	r2, r3
 8004a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a36:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a42:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	fa93 f2a3 	rbit	r2, r3
 8004a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a5e:	2202      	movs	r2, #2
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	fa93 f2a3 	rbit	r2, r3
 8004a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a74:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004a78:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a7a:	4b41      	ldr	r3, [pc, #260]	; (8004b80 <HAL_RCC_OscConfig+0x934>)
 8004a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a82:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004a86:	2102      	movs	r1, #2
 8004a88:	6019      	str	r1, [r3, #0]
 8004a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	fa93 f1a3 	rbit	r1, r3
 8004a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004aa0:	6019      	str	r1, [r3, #0]
  return result;
 8004aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	fab3 f383 	clz	r3, r3
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	2101      	movs	r1, #1
 8004abe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d197      	bne.n	80049f8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004acc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 81a1 	beq.w	8004e20 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae4:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <HAL_RCC_OscConfig+0x934>)
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d116      	bne.n	8004b1e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af0:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <HAL_RCC_OscConfig+0x934>)
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	4a22      	ldr	r2, [pc, #136]	; (8004b80 <HAL_RCC_OscConfig+0x934>)
 8004af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afa:	61d3      	str	r3, [r2, #28]
 8004afc:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <HAL_RCC_OscConfig+0x934>)
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b08:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b12:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004b16:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1e:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <HAL_RCC_OscConfig+0x93c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d11a      	bne.n	8004b60 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b2a:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <HAL_RCC_OscConfig+0x93c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a16      	ldr	r2, [pc, #88]	; (8004b88 <HAL_RCC_OscConfig+0x93c>)
 8004b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b36:	f7fe f9bd 	bl	8002eb4 <HAL_GetTick>
 8004b3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3e:	e009      	b.n	8004b54 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b40:	f7fe f9b8 	bl	8002eb4 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b64      	cmp	r3, #100	; 0x64
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e3b1      	b.n	80052b8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <HAL_RCC_OscConfig+0x93c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0ef      	beq.n	8004b40 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d10d      	bne.n	8004b8c <HAL_RCC_OscConfig+0x940>
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <HAL_RCC_OscConfig+0x934>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	4a02      	ldr	r2, [pc, #8]	; (8004b80 <HAL_RCC_OscConfig+0x934>)
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	6213      	str	r3, [r2, #32]
 8004b7c:	e03c      	b.n	8004bf8 <HAL_RCC_OscConfig+0x9ac>
 8004b7e:	bf00      	nop
 8004b80:	40021000 	.word	0x40021000
 8004b84:	10908120 	.word	0x10908120
 8004b88:	40007000 	.word	0x40007000
 8004b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10c      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x96a>
 8004b9c:	4bc1      	ldr	r3, [pc, #772]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	4ac0      	ldr	r2, [pc, #768]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004ba2:	f023 0301 	bic.w	r3, r3, #1
 8004ba6:	6213      	str	r3, [r2, #32]
 8004ba8:	4bbe      	ldr	r3, [pc, #760]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	4abd      	ldr	r2, [pc, #756]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004bae:	f023 0304 	bic.w	r3, r3, #4
 8004bb2:	6213      	str	r3, [r2, #32]
 8004bb4:	e020      	b.n	8004bf8 <HAL_RCC_OscConfig+0x9ac>
 8004bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b05      	cmp	r3, #5
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x994>
 8004bc6:	4bb7      	ldr	r3, [pc, #732]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	4ab6      	ldr	r2, [pc, #728]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004bcc:	f043 0304 	orr.w	r3, r3, #4
 8004bd0:	6213      	str	r3, [r2, #32]
 8004bd2:	4bb4      	ldr	r3, [pc, #720]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	4ab3      	ldr	r2, [pc, #716]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004bd8:	f043 0301 	orr.w	r3, r3, #1
 8004bdc:	6213      	str	r3, [r2, #32]
 8004bde:	e00b      	b.n	8004bf8 <HAL_RCC_OscConfig+0x9ac>
 8004be0:	4bb0      	ldr	r3, [pc, #704]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	4aaf      	ldr	r2, [pc, #700]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	6213      	str	r3, [r2, #32]
 8004bec:	4bad      	ldr	r3, [pc, #692]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	4aac      	ldr	r2, [pc, #688]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004bf2:	f023 0304 	bic.w	r3, r3, #4
 8004bf6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 8081 	beq.w	8004d0c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0a:	f7fe f953 	bl	8002eb4 <HAL_GetTick>
 8004c0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c12:	e00b      	b.n	8004c2c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c14:	f7fe f94e 	bl	8002eb4 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e345      	b.n	80052b8 <HAL_RCC_OscConfig+0x106c>
 8004c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c30:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004c34:	2202      	movs	r2, #2
 8004c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	fa93 f2a3 	rbit	r2, r3
 8004c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004c58:	2202      	movs	r2, #2
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c60:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	fa93 f2a3 	rbit	r2, r3
 8004c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c6e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c72:	601a      	str	r2, [r3, #0]
  return result;
 8004c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c78:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004c7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7e:	fab3 f383 	clz	r3, r3
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f043 0302 	orr.w	r3, r3, #2
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d102      	bne.n	8004c98 <HAL_RCC_OscConfig+0xa4c>
 8004c92:	4b84      	ldr	r3, [pc, #528]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	e013      	b.n	8004cc0 <HAL_RCC_OscConfig+0xa74>
 8004c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	fa93 f2a3 	rbit	r2, r3
 8004cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cb6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	4b79      	ldr	r3, [pc, #484]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cc4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004cc8:	2102      	movs	r1, #2
 8004cca:	6011      	str	r1, [r2, #0]
 8004ccc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cd0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	fa92 f1a2 	rbit	r1, r2
 8004cda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cde:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004ce2:	6011      	str	r1, [r2, #0]
  return result;
 8004ce4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ce8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	fab2 f282 	clz	r2, r2
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	f002 021f 	and.w	r2, r2, #31
 8004cfe:	2101      	movs	r1, #1
 8004d00:	fa01 f202 	lsl.w	r2, r1, r2
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d084      	beq.n	8004c14 <HAL_RCC_OscConfig+0x9c8>
 8004d0a:	e07f      	b.n	8004e0c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0c:	f7fe f8d2 	bl	8002eb4 <HAL_GetTick>
 8004d10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d14:	e00b      	b.n	8004d2e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d16:	f7fe f8cd 	bl	8002eb4 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e2c4      	b.n	80052b8 <HAL_RCC_OscConfig+0x106c>
 8004d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d32:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004d36:	2202      	movs	r2, #2
 8004d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d3e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	fa93 f2a3 	rbit	r2, r3
 8004d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d62:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	fa93 f2a3 	rbit	r2, r3
 8004d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d70:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d74:	601a      	str	r2, [r3, #0]
  return result;
 8004d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004d7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d80:	fab3 f383 	clz	r3, r3
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f043 0302 	orr.w	r3, r3, #2
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d102      	bne.n	8004d9a <HAL_RCC_OscConfig+0xb4e>
 8004d94:	4b43      	ldr	r3, [pc, #268]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	e013      	b.n	8004dc2 <HAL_RCC_OscConfig+0xb76>
 8004d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004da2:	2202      	movs	r2, #2
 8004da4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004daa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	fa93 f2a3 	rbit	r2, r3
 8004db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	4b39      	ldr	r3, [pc, #228]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dc6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004dca:	2102      	movs	r1, #2
 8004dcc:	6011      	str	r1, [r2, #0]
 8004dce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dd2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	fa92 f1a2 	rbit	r1, r2
 8004ddc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004de0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004de4:	6011      	str	r1, [r2, #0]
  return result;
 8004de6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dea:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	fab2 f282 	clz	r2, r2
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	f002 021f 	and.w	r2, r2, #31
 8004e00:	2101      	movs	r1, #1
 8004e02:	fa01 f202 	lsl.w	r2, r1, r2
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d184      	bne.n	8004d16 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e0c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d105      	bne.n	8004e20 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e14:	4b23      	ldr	r3, [pc, #140]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	4a22      	ldr	r2, [pc, #136]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8242 	beq.w	80052b6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e32:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <HAL_RCC_OscConfig+0xc58>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	f000 8213 	beq.w	8005266 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	f040 8162 	bne.w	8005116 <HAL_RCC_OscConfig+0xeca>
 8004e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e56:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004e5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e64:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	fa93 f2a3 	rbit	r2, r3
 8004e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e72:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e76:	601a      	str	r2, [r3, #0]
  return result;
 8004e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004e80:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e82:	fab3 f383 	clz	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	461a      	mov	r2, r3
 8004e94:	2300      	movs	r3, #0
 8004e96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e98:	f7fe f80c 	bl	8002eb4 <HAL_GetTick>
 8004e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ea0:	e00c      	b.n	8004ebc <HAL_RCC_OscConfig+0xc70>
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea8:	f7fe f804 	bl	8002eb4 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e1fd      	b.n	80052b8 <HAL_RCC_OscConfig+0x106c>
 8004ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ece:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	fa93 f2a3 	rbit	r2, r3
 8004ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004edc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ee0:	601a      	str	r2, [r3, #0]
  return result;
 8004ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004eea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eec:	fab3 f383 	clz	r3, r3
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d102      	bne.n	8004f06 <HAL_RCC_OscConfig+0xcba>
 8004f00:	4bb0      	ldr	r3, [pc, #704]	; (80051c4 <HAL_RCC_OscConfig+0xf78>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	e027      	b.n	8004f56 <HAL_RCC_OscConfig+0xd0a>
 8004f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004f0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f18:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	fa93 f2a3 	rbit	r2, r3
 8004f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f26:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f30:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004f34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f3e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	fa93 f2a3 	rbit	r2, r3
 8004f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f4c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	4b9c      	ldr	r3, [pc, #624]	; (80051c4 <HAL_RCC_OscConfig+0xf78>)
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f5a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004f5e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f62:	6011      	str	r1, [r2, #0]
 8004f64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f68:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	fa92 f1a2 	rbit	r1, r2
 8004f72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f76:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f7a:	6011      	str	r1, [r2, #0]
  return result;
 8004f7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f80:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004f84:	6812      	ldr	r2, [r2, #0]
 8004f86:	fab2 f282 	clz	r2, r2
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	f042 0220 	orr.w	r2, r2, #32
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	f002 021f 	and.w	r2, r2, #31
 8004f96:	2101      	movs	r1, #1
 8004f98:	fa01 f202 	lsl.w	r2, r1, r2
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d182      	bne.n	8004ea8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fa2:	4b88      	ldr	r3, [pc, #544]	; (80051c4 <HAL_RCC_OscConfig+0xf78>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	430b      	orrs	r3, r1
 8004fc4:	497f      	ldr	r1, [pc, #508]	; (80051c4 <HAL_RCC_OscConfig+0xf78>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	604b      	str	r3, [r1, #4]
 8004fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fce:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004fd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fdc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	fa93 f2a3 	rbit	r2, r3
 8004fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004fee:	601a      	str	r2, [r3, #0]
  return result;
 8004ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004ff8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ffa:	fab3 f383 	clz	r3, r3
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005004:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	461a      	mov	r2, r3
 800500c:	2301      	movs	r3, #1
 800500e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005010:	f7fd ff50 	bl	8002eb4 <HAL_GetTick>
 8005014:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005018:	e009      	b.n	800502e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501a:	f7fd ff4b 	bl	8002eb4 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e144      	b.n	80052b8 <HAL_RCC_OscConfig+0x106c>
 800502e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005032:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005036:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800503a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005040:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	fa93 f2a3 	rbit	r2, r3
 800504a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005052:	601a      	str	r2, [r3, #0]
  return result;
 8005054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005058:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800505c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800505e:	fab3 f383 	clz	r3, r3
 8005062:	b2db      	uxtb	r3, r3
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b01      	cmp	r3, #1
 8005070:	d102      	bne.n	8005078 <HAL_RCC_OscConfig+0xe2c>
 8005072:	4b54      	ldr	r3, [pc, #336]	; (80051c4 <HAL_RCC_OscConfig+0xf78>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	e027      	b.n	80050c8 <HAL_RCC_OscConfig+0xe7c>
 8005078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	fa93 f2a3 	rbit	r2, r3
 8005094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005098:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80050a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	fa93 f2a3 	rbit	r2, r3
 80050ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050be:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	4b3f      	ldr	r3, [pc, #252]	; (80051c4 <HAL_RCC_OscConfig+0xf78>)
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050cc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80050d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050d4:	6011      	str	r1, [r2, #0]
 80050d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050da:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	fa92 f1a2 	rbit	r1, r2
 80050e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050e8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80050ec:	6011      	str	r1, [r2, #0]
  return result;
 80050ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050f2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	fab2 f282 	clz	r2, r2
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	f042 0220 	orr.w	r2, r2, #32
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	f002 021f 	and.w	r2, r2, #31
 8005108:	2101      	movs	r1, #1
 800510a:	fa01 f202 	lsl.w	r2, r1, r2
 800510e:	4013      	ands	r3, r2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d082      	beq.n	800501a <HAL_RCC_OscConfig+0xdce>
 8005114:	e0cf      	b.n	80052b6 <HAL_RCC_OscConfig+0x106a>
 8005116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800511e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005128:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	fa93 f2a3 	rbit	r2, r3
 8005132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005136:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800513a:	601a      	str	r2, [r3, #0]
  return result;
 800513c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005140:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005144:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005146:	fab3 f383 	clz	r3, r3
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005150:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	461a      	mov	r2, r3
 8005158:	2300      	movs	r3, #0
 800515a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515c:	f7fd feaa 	bl	8002eb4 <HAL_GetTick>
 8005160:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005164:	e009      	b.n	800517a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005166:	f7fd fea5 	bl	8002eb4 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e09e      	b.n	80052b8 <HAL_RCC_OscConfig+0x106c>
 800517a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800518c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	fa93 f2a3 	rbit	r2, r3
 8005196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800519a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800519e:	601a      	str	r2, [r3, #0]
  return result;
 80051a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80051a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051aa:	fab3 f383 	clz	r3, r3
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f043 0301 	orr.w	r3, r3, #1
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d104      	bne.n	80051c8 <HAL_RCC_OscConfig+0xf7c>
 80051be:	4b01      	ldr	r3, [pc, #4]	; (80051c4 <HAL_RCC_OscConfig+0xf78>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	e029      	b.n	8005218 <HAL_RCC_OscConfig+0xfcc>
 80051c4:	40021000 	.word	0x40021000
 80051c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051cc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80051d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051da:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	fa93 f2a3 	rbit	r2, r3
 80051e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80051f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005200:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	fa93 f2a3 	rbit	r2, r3
 800520a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	4b2b      	ldr	r3, [pc, #172]	; (80052c4 <HAL_RCC_OscConfig+0x1078>)
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800521c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005220:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005224:	6011      	str	r1, [r2, #0]
 8005226:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800522a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	fa92 f1a2 	rbit	r1, r2
 8005234:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005238:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800523c:	6011      	str	r1, [r2, #0]
  return result;
 800523e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005242:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	fab2 f282 	clz	r2, r2
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	f042 0220 	orr.w	r2, r2, #32
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	f002 021f 	and.w	r2, r2, #31
 8005258:	2101      	movs	r1, #1
 800525a:	fa01 f202 	lsl.w	r2, r1, r2
 800525e:	4013      	ands	r3, r2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d180      	bne.n	8005166 <HAL_RCC_OscConfig+0xf1a>
 8005264:	e027      	b.n	80052b6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005266:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800526a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e01e      	b.n	80052b8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800527a:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <HAL_RCC_OscConfig+0x1078>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005282:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005286:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800528a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800528e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	429a      	cmp	r2, r3
 8005298:	d10b      	bne.n	80052b2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800529a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800529e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d001      	beq.n	80052b6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40021000 	.word	0x40021000

080052c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b09e      	sub	sp, #120	; 0x78
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e162      	b.n	80055a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052e0:	4b90      	ldr	r3, [pc, #576]	; (8005524 <HAL_RCC_ClockConfig+0x25c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d910      	bls.n	8005310 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b8d      	ldr	r3, [pc, #564]	; (8005524 <HAL_RCC_ClockConfig+0x25c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 0207 	bic.w	r2, r3, #7
 80052f6:	498b      	ldr	r1, [pc, #556]	; (8005524 <HAL_RCC_ClockConfig+0x25c>)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	4b89      	ldr	r3, [pc, #548]	; (8005524 <HAL_RCC_ClockConfig+0x25c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d001      	beq.n	8005310 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e14a      	b.n	80055a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800531c:	4b82      	ldr	r3, [pc, #520]	; (8005528 <HAL_RCC_ClockConfig+0x260>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	497f      	ldr	r1, [pc, #508]	; (8005528 <HAL_RCC_ClockConfig+0x260>)
 800532a:	4313      	orrs	r3, r2
 800532c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 80dc 	beq.w	80054f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d13c      	bne.n	80053be <HAL_RCC_ClockConfig+0xf6>
 8005344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005348:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800534a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800534c:	fa93 f3a3 	rbit	r3, r3
 8005350:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005354:	fab3 f383 	clz	r3, r3
 8005358:	b2db      	uxtb	r3, r3
 800535a:	095b      	lsrs	r3, r3, #5
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d102      	bne.n	800536e <HAL_RCC_ClockConfig+0xa6>
 8005368:	4b6f      	ldr	r3, [pc, #444]	; (8005528 <HAL_RCC_ClockConfig+0x260>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	e00f      	b.n	800538e <HAL_RCC_ClockConfig+0xc6>
 800536e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005372:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005374:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	667b      	str	r3, [r7, #100]	; 0x64
 800537c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005380:	663b      	str	r3, [r7, #96]	; 0x60
 8005382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005384:	fa93 f3a3 	rbit	r3, r3
 8005388:	65fb      	str	r3, [r7, #92]	; 0x5c
 800538a:	4b67      	ldr	r3, [pc, #412]	; (8005528 <HAL_RCC_ClockConfig+0x260>)
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005392:	65ba      	str	r2, [r7, #88]	; 0x58
 8005394:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005396:	fa92 f2a2 	rbit	r2, r2
 800539a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800539c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800539e:	fab2 f282 	clz	r2, r2
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	f042 0220 	orr.w	r2, r2, #32
 80053a8:	b2d2      	uxtb	r2, r2
 80053aa:	f002 021f 	and.w	r2, r2, #31
 80053ae:	2101      	movs	r1, #1
 80053b0:	fa01 f202 	lsl.w	r2, r1, r2
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d17b      	bne.n	80054b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e0f3      	b.n	80055a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d13c      	bne.n	8005440 <HAL_RCC_ClockConfig+0x178>
 80053c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ce:	fa93 f3a3 	rbit	r3, r3
 80053d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80053d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d6:	fab3 f383 	clz	r3, r3
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d102      	bne.n	80053f0 <HAL_RCC_ClockConfig+0x128>
 80053ea:	4b4f      	ldr	r3, [pc, #316]	; (8005528 <HAL_RCC_ClockConfig+0x260>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	e00f      	b.n	8005410 <HAL_RCC_ClockConfig+0x148>
 80053f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053f8:	fa93 f3a3 	rbit	r3, r3
 80053fc:	647b      	str	r3, [r7, #68]	; 0x44
 80053fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005402:	643b      	str	r3, [r7, #64]	; 0x40
 8005404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005406:	fa93 f3a3 	rbit	r3, r3
 800540a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800540c:	4b46      	ldr	r3, [pc, #280]	; (8005528 <HAL_RCC_ClockConfig+0x260>)
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005414:	63ba      	str	r2, [r7, #56]	; 0x38
 8005416:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005418:	fa92 f2a2 	rbit	r2, r2
 800541c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800541e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005420:	fab2 f282 	clz	r2, r2
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	f042 0220 	orr.w	r2, r2, #32
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	f002 021f 	and.w	r2, r2, #31
 8005430:	2101      	movs	r1, #1
 8005432:	fa01 f202 	lsl.w	r2, r1, r2
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d13a      	bne.n	80054b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e0b2      	b.n	80055a6 <HAL_RCC_ClockConfig+0x2de>
 8005440:	2302      	movs	r3, #2
 8005442:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	fa93 f3a3 	rbit	r3, r3
 800544a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544e:	fab3 f383 	clz	r3, r3
 8005452:	b2db      	uxtb	r3, r3
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b01      	cmp	r3, #1
 8005460:	d102      	bne.n	8005468 <HAL_RCC_ClockConfig+0x1a0>
 8005462:	4b31      	ldr	r3, [pc, #196]	; (8005528 <HAL_RCC_ClockConfig+0x260>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	e00d      	b.n	8005484 <HAL_RCC_ClockConfig+0x1bc>
 8005468:	2302      	movs	r3, #2
 800546a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	fa93 f3a3 	rbit	r3, r3
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
 8005474:	2302      	movs	r3, #2
 8005476:	623b      	str	r3, [r7, #32]
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	fa93 f3a3 	rbit	r3, r3
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	4b29      	ldr	r3, [pc, #164]	; (8005528 <HAL_RCC_ClockConfig+0x260>)
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	2202      	movs	r2, #2
 8005486:	61ba      	str	r2, [r7, #24]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	fa92 f2a2 	rbit	r2, r2
 800548e:	617a      	str	r2, [r7, #20]
  return result;
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	fab2 f282 	clz	r2, r2
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	f042 0220 	orr.w	r2, r2, #32
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	f002 021f 	and.w	r2, r2, #31
 80054a2:	2101      	movs	r1, #1
 80054a4:	fa01 f202 	lsl.w	r2, r1, r2
 80054a8:	4013      	ands	r3, r2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e079      	b.n	80055a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054b2:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <HAL_RCC_ClockConfig+0x260>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f023 0203 	bic.w	r2, r3, #3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	491a      	ldr	r1, [pc, #104]	; (8005528 <HAL_RCC_ClockConfig+0x260>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054c4:	f7fd fcf6 	bl	8002eb4 <HAL_GetTick>
 80054c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ca:	e00a      	b.n	80054e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054cc:	f7fd fcf2 	bl	8002eb4 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054da:	4293      	cmp	r3, r2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e061      	b.n	80055a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e2:	4b11      	ldr	r3, [pc, #68]	; (8005528 <HAL_RCC_ClockConfig+0x260>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f003 020c 	and.w	r2, r3, #12
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d1eb      	bne.n	80054cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054f4:	4b0b      	ldr	r3, [pc, #44]	; (8005524 <HAL_RCC_ClockConfig+0x25c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d214      	bcs.n	800552c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005502:	4b08      	ldr	r3, [pc, #32]	; (8005524 <HAL_RCC_ClockConfig+0x25c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f023 0207 	bic.w	r2, r3, #7
 800550a:	4906      	ldr	r1, [pc, #24]	; (8005524 <HAL_RCC_ClockConfig+0x25c>)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	4313      	orrs	r3, r2
 8005510:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005512:	4b04      	ldr	r3, [pc, #16]	; (8005524 <HAL_RCC_ClockConfig+0x25c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	429a      	cmp	r2, r3
 800551e:	d005      	beq.n	800552c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e040      	b.n	80055a6 <HAL_RCC_ClockConfig+0x2de>
 8005524:	40022000 	.word	0x40022000
 8005528:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005538:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <HAL_RCC_ClockConfig+0x2e8>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	491a      	ldr	r1, [pc, #104]	; (80055b0 <HAL_RCC_ClockConfig+0x2e8>)
 8005546:	4313      	orrs	r3, r2
 8005548:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	2b00      	cmp	r3, #0
 8005554:	d009      	beq.n	800556a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005556:	4b16      	ldr	r3, [pc, #88]	; (80055b0 <HAL_RCC_ClockConfig+0x2e8>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4912      	ldr	r1, [pc, #72]	; (80055b0 <HAL_RCC_ClockConfig+0x2e8>)
 8005566:	4313      	orrs	r3, r2
 8005568:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800556a:	f000 f829 	bl	80055c0 <HAL_RCC_GetSysClockFreq>
 800556e:	4601      	mov	r1, r0
 8005570:	4b0f      	ldr	r3, [pc, #60]	; (80055b0 <HAL_RCC_ClockConfig+0x2e8>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005578:	22f0      	movs	r2, #240	; 0xf0
 800557a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	fa92 f2a2 	rbit	r2, r2
 8005582:	60fa      	str	r2, [r7, #12]
  return result;
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	fab2 f282 	clz	r2, r2
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	40d3      	lsrs	r3, r2
 800558e:	4a09      	ldr	r2, [pc, #36]	; (80055b4 <HAL_RCC_ClockConfig+0x2ec>)
 8005590:	5cd3      	ldrb	r3, [r2, r3]
 8005592:	fa21 f303 	lsr.w	r3, r1, r3
 8005596:	4a08      	ldr	r2, [pc, #32]	; (80055b8 <HAL_RCC_ClockConfig+0x2f0>)
 8005598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800559a:	4b08      	ldr	r3, [pc, #32]	; (80055bc <HAL_RCC_ClockConfig+0x2f4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fd fc44 	bl	8002e2c <HAL_InitTick>
  
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3778      	adds	r7, #120	; 0x78
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40021000 	.word	0x40021000
 80055b4:	0800bce4 	.word	0x0800bce4
 80055b8:	20000234 	.word	0x20000234
 80055bc:	20000238 	.word	0x20000238

080055c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b08b      	sub	sp, #44	; 0x2c
 80055c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	2300      	movs	r3, #0
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	2300      	movs	r3, #0
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80055da:	4b29      	ldr	r3, [pc, #164]	; (8005680 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f003 030c 	and.w	r3, r3, #12
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d002      	beq.n	80055f0 <HAL_RCC_GetSysClockFreq+0x30>
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d003      	beq.n	80055f6 <HAL_RCC_GetSysClockFreq+0x36>
 80055ee:	e03c      	b.n	800566a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055f0:	4b24      	ldr	r3, [pc, #144]	; (8005684 <HAL_RCC_GetSysClockFreq+0xc4>)
 80055f2:	623b      	str	r3, [r7, #32]
      break;
 80055f4:	e03c      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80055fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005600:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	fa92 f2a2 	rbit	r2, r2
 8005608:	607a      	str	r2, [r7, #4]
  return result;
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	fab2 f282 	clz	r2, r2
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	40d3      	lsrs	r3, r2
 8005614:	4a1c      	ldr	r2, [pc, #112]	; (8005688 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005616:	5cd3      	ldrb	r3, [r2, r3]
 8005618:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800561a:	4b19      	ldr	r3, [pc, #100]	; (8005680 <HAL_RCC_GetSysClockFreq+0xc0>)
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	220f      	movs	r2, #15
 8005624:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	fa92 f2a2 	rbit	r2, r2
 800562c:	60fa      	str	r2, [r7, #12]
  return result;
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	fab2 f282 	clz	r2, r2
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	40d3      	lsrs	r3, r2
 8005638:	4a14      	ldr	r2, [pc, #80]	; (800568c <HAL_RCC_GetSysClockFreq+0xcc>)
 800563a:	5cd3      	ldrb	r3, [r2, r3]
 800563c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005648:	4a0e      	ldr	r2, [pc, #56]	; (8005684 <HAL_RCC_GetSysClockFreq+0xc4>)
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	fb02 f303 	mul.w	r3, r2, r3
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
 8005658:	e004      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	4a0c      	ldr	r2, [pc, #48]	; (8005690 <HAL_RCC_GetSysClockFreq+0xd0>)
 800565e:	fb02 f303 	mul.w	r3, r2, r3
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	623b      	str	r3, [r7, #32]
      break;
 8005668:	e002      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800566a:	4b06      	ldr	r3, [pc, #24]	; (8005684 <HAL_RCC_GetSysClockFreq+0xc4>)
 800566c:	623b      	str	r3, [r7, #32]
      break;
 800566e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005670:	6a3b      	ldr	r3, [r7, #32]
}
 8005672:	4618      	mov	r0, r3
 8005674:	372c      	adds	r7, #44	; 0x2c
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40021000 	.word	0x40021000
 8005684:	007a1200 	.word	0x007a1200
 8005688:	0800bcf4 	.word	0x0800bcf4
 800568c:	0800bd04 	.word	0x0800bd04
 8005690:	003d0900 	.word	0x003d0900

08005694 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b092      	sub	sp, #72	; 0x48
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80056a4:	2300      	movs	r3, #0
 80056a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 80d4 	beq.w	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056b8:	4b4e      	ldr	r3, [pc, #312]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10e      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c4:	4b4b      	ldr	r3, [pc, #300]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	4a4a      	ldr	r2, [pc, #296]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ce:	61d3      	str	r3, [r2, #28]
 80056d0:	4b48      	ldr	r3, [pc, #288]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e2:	4b45      	ldr	r3, [pc, #276]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d118      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ee:	4b42      	ldr	r3, [pc, #264]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a41      	ldr	r2, [pc, #260]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056fa:	f7fd fbdb 	bl	8002eb4 <HAL_GetTick>
 80056fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005700:	e008      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005702:	f7fd fbd7 	bl	8002eb4 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b64      	cmp	r3, #100	; 0x64
 800570e:	d901      	bls.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e169      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005714:	4b38      	ldr	r3, [pc, #224]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f0      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005720:	4b34      	ldr	r3, [pc, #208]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005728:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800572a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8084 	beq.w	800583a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800573a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800573c:	429a      	cmp	r2, r3
 800573e:	d07c      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005740:	4b2c      	ldr	r3, [pc, #176]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800574a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800574e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	fa93 f3a3 	rbit	r3, r3
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800575a:	fab3 f383 	clz	r3, r3
 800575e:	b2db      	uxtb	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	4b26      	ldr	r3, [pc, #152]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	461a      	mov	r2, r3
 800576a:	2301      	movs	r3, #1
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005772:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005776:	fa93 f3a3 	rbit	r3, r3
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800577c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800577e:	fab3 f383 	clz	r3, r3
 8005782:	b2db      	uxtb	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	461a      	mov	r2, r3
 800578e:	2300      	movs	r3, #0
 8005790:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005792:	4a18      	ldr	r2, [pc, #96]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005796:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d04b      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a2:	f7fd fb87 	bl	8002eb4 <HAL_GetTick>
 80057a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a8:	e00a      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057aa:	f7fd fb83 	bl	8002eb4 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e113      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80057c0:	2302      	movs	r3, #2
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	fa93 f3a3 	rbit	r3, r3
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
 80057cc:	2302      	movs	r3, #2
 80057ce:	623b      	str	r3, [r7, #32]
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	fa93 f3a3 	rbit	r3, r3
 80057d6:	61fb      	str	r3, [r7, #28]
  return result;
 80057d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057da:	fab3 f383 	clz	r3, r3
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f043 0302 	orr.w	r3, r3, #2
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d108      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80057ee:	4b01      	ldr	r3, [pc, #4]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	e00d      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80057f4:	40021000 	.word	0x40021000
 80057f8:	40007000 	.word	0x40007000
 80057fc:	10908100 	.word	0x10908100
 8005800:	2302      	movs	r3, #2
 8005802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	fa93 f3a3 	rbit	r3, r3
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	4b78      	ldr	r3, [pc, #480]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	2202      	movs	r2, #2
 8005812:	613a      	str	r2, [r7, #16]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	fa92 f2a2 	rbit	r2, r2
 800581a:	60fa      	str	r2, [r7, #12]
  return result;
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	fab2 f282 	clz	r2, r2
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005828:	b2d2      	uxtb	r2, r2
 800582a:	f002 021f 	and.w	r2, r2, #31
 800582e:	2101      	movs	r1, #1
 8005830:	fa01 f202 	lsl.w	r2, r1, r2
 8005834:	4013      	ands	r3, r2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0b7      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800583a:	4b6d      	ldr	r3, [pc, #436]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	496a      	ldr	r1, [pc, #424]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005848:	4313      	orrs	r3, r2
 800584a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800584c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005850:	2b01      	cmp	r3, #1
 8005852:	d105      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005854:	4b66      	ldr	r3, [pc, #408]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	4a65      	ldr	r2, [pc, #404]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800585a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800585e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d008      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800586c:	4b60      	ldr	r3, [pc, #384]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800586e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005870:	f023 0203 	bic.w	r2, r3, #3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	495d      	ldr	r1, [pc, #372]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800587a:	4313      	orrs	r3, r2
 800587c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800588a:	4b59      	ldr	r3, [pc, #356]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	4956      	ldr	r1, [pc, #344]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005898:	4313      	orrs	r3, r2
 800589a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058a8:	4b51      	ldr	r3, [pc, #324]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	494e      	ldr	r1, [pc, #312]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d008      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058c6:	4b4a      	ldr	r3, [pc, #296]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ca:	f023 0210 	bic.w	r2, r3, #16
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	4947      	ldr	r1, [pc, #284]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80058e4:	4b42      	ldr	r3, [pc, #264]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	493f      	ldr	r1, [pc, #252]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005902:	4b3b      	ldr	r3, [pc, #236]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	f023 0220 	bic.w	r2, r3, #32
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	4938      	ldr	r1, [pc, #224]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005910:	4313      	orrs	r3, r2
 8005912:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d008      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005920:	4b33      	ldr	r3, [pc, #204]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	4930      	ldr	r1, [pc, #192]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800592e:	4313      	orrs	r3, r2
 8005930:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	2b00      	cmp	r3, #0
 800593c:	d008      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800593e:	4b2c      	ldr	r3, [pc, #176]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	4929      	ldr	r1, [pc, #164]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800594c:	4313      	orrs	r3, r2
 800594e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800595c:	4b24      	ldr	r3, [pc, #144]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	4921      	ldr	r1, [pc, #132]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800596a:	4313      	orrs	r3, r2
 800596c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005976:	2b00      	cmp	r3, #0
 8005978:	d008      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800597a:	4b1d      	ldr	r3, [pc, #116]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	491a      	ldr	r1, [pc, #104]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005988:	4313      	orrs	r3, r2
 800598a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005998:	4b15      	ldr	r3, [pc, #84]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	4912      	ldr	r1, [pc, #72]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80059b6:	4b0e      	ldr	r3, [pc, #56]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c2:	490b      	ldr	r1, [pc, #44]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80059d4:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e0:	4903      	ldr	r1, [pc, #12]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3748      	adds	r7, #72	; 0x48
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	40021000 	.word	0x40021000

080059f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e09d      	b.n	8005b42 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d108      	bne.n	8005a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a16:	d009      	beq.n	8005a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	61da      	str	r2, [r3, #28]
 8005a1e:	e005      	b.n	8005a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fc ff52 	bl	80028f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a6c:	d902      	bls.n	8005a74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	e002      	b.n	8005a7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a82:	d007      	beq.n	8005a94 <HAL_SPI_Init+0xa0>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a8c:	d002      	beq.n	8005a94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005acc:	431a      	orrs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad6:	ea42 0103 	orr.w	r1, r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ade:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	0c1b      	lsrs	r3, r3, #16
 8005af0:	f003 0204 	and.w	r2, r3, #4
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	431a      	orrs	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b10:	ea42 0103 	orr.w	r1, r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69da      	ldr	r2, [r3, #28]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e049      	b.n	8005bf0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d106      	bne.n	8005b76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7fc feff 	bl	8002974 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f000 fdc9 	bl	8006720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d109      	bne.n	8005c1c <HAL_TIM_PWM_Start+0x24>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	bf14      	ite	ne
 8005c14:	2301      	movne	r3, #1
 8005c16:	2300      	moveq	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	e03c      	b.n	8005c96 <HAL_TIM_PWM_Start+0x9e>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d109      	bne.n	8005c36 <HAL_TIM_PWM_Start+0x3e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	bf14      	ite	ne
 8005c2e:	2301      	movne	r3, #1
 8005c30:	2300      	moveq	r3, #0
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	e02f      	b.n	8005c96 <HAL_TIM_PWM_Start+0x9e>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d109      	bne.n	8005c50 <HAL_TIM_PWM_Start+0x58>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	bf14      	ite	ne
 8005c48:	2301      	movne	r3, #1
 8005c4a:	2300      	moveq	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	e022      	b.n	8005c96 <HAL_TIM_PWM_Start+0x9e>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2b0c      	cmp	r3, #12
 8005c54:	d109      	bne.n	8005c6a <HAL_TIM_PWM_Start+0x72>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	bf14      	ite	ne
 8005c62:	2301      	movne	r3, #1
 8005c64:	2300      	moveq	r3, #0
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	e015      	b.n	8005c96 <HAL_TIM_PWM_Start+0x9e>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d109      	bne.n	8005c84 <HAL_TIM_PWM_Start+0x8c>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	bf14      	ite	ne
 8005c7c:	2301      	movne	r3, #1
 8005c7e:	2300      	moveq	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	e008      	b.n	8005c96 <HAL_TIM_PWM_Start+0x9e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	bf14      	ite	ne
 8005c90:	2301      	movne	r3, #1
 8005c92:	2300      	moveq	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e097      	b.n	8005dce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d104      	bne.n	8005cae <HAL_TIM_PWM_Start+0xb6>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cac:	e023      	b.n	8005cf6 <HAL_TIM_PWM_Start+0xfe>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d104      	bne.n	8005cbe <HAL_TIM_PWM_Start+0xc6>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cbc:	e01b      	b.n	8005cf6 <HAL_TIM_PWM_Start+0xfe>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d104      	bne.n	8005cce <HAL_TIM_PWM_Start+0xd6>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ccc:	e013      	b.n	8005cf6 <HAL_TIM_PWM_Start+0xfe>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b0c      	cmp	r3, #12
 8005cd2:	d104      	bne.n	8005cde <HAL_TIM_PWM_Start+0xe6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cdc:	e00b      	b.n	8005cf6 <HAL_TIM_PWM_Start+0xfe>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b10      	cmp	r3, #16
 8005ce2:	d104      	bne.n	8005cee <HAL_TIM_PWM_Start+0xf6>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cec:	e003      	b.n	8005cf6 <HAL_TIM_PWM_Start+0xfe>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 ff56 	bl	8006bb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a33      	ldr	r2, [pc, #204]	; (8005dd8 <HAL_TIM_PWM_Start+0x1e0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x13e>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a32      	ldr	r2, [pc, #200]	; (8005ddc <HAL_TIM_PWM_Start+0x1e4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00e      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x13e>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a30      	ldr	r2, [pc, #192]	; (8005de0 <HAL_TIM_PWM_Start+0x1e8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d009      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x13e>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a2f      	ldr	r2, [pc, #188]	; (8005de4 <HAL_TIM_PWM_Start+0x1ec>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d004      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x13e>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a2d      	ldr	r2, [pc, #180]	; (8005de8 <HAL_TIM_PWM_Start+0x1f0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_PWM_Start+0x142>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <HAL_TIM_PWM_Start+0x144>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a20      	ldr	r2, [pc, #128]	; (8005dd8 <HAL_TIM_PWM_Start+0x1e0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d018      	beq.n	8005d8c <HAL_TIM_PWM_Start+0x194>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d62:	d013      	beq.n	8005d8c <HAL_TIM_PWM_Start+0x194>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a20      	ldr	r2, [pc, #128]	; (8005dec <HAL_TIM_PWM_Start+0x1f4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00e      	beq.n	8005d8c <HAL_TIM_PWM_Start+0x194>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1f      	ldr	r2, [pc, #124]	; (8005df0 <HAL_TIM_PWM_Start+0x1f8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d009      	beq.n	8005d8c <HAL_TIM_PWM_Start+0x194>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a17      	ldr	r2, [pc, #92]	; (8005ddc <HAL_TIM_PWM_Start+0x1e4>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d004      	beq.n	8005d8c <HAL_TIM_PWM_Start+0x194>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a16      	ldr	r2, [pc, #88]	; (8005de0 <HAL_TIM_PWM_Start+0x1e8>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d115      	bne.n	8005db8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	4b18      	ldr	r3, [pc, #96]	; (8005df4 <HAL_TIM_PWM_Start+0x1fc>)
 8005d94:	4013      	ands	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b06      	cmp	r3, #6
 8005d9c:	d015      	beq.n	8005dca <HAL_TIM_PWM_Start+0x1d2>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da4:	d011      	beq.n	8005dca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0201 	orr.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db6:	e008      	b.n	8005dca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	e000      	b.n	8005dcc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	40012c00 	.word	0x40012c00
 8005ddc:	40013400 	.word	0x40013400
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40014400 	.word	0x40014400
 8005de8:	40014800 	.word	0x40014800
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800
 8005df4:	00010007 	.word	0x00010007

08005df8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e049      	b.n	8005e9e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f841 	bl	8005ea6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3304      	adds	r3, #4
 8005e34:	4619      	mov	r1, r3
 8005e36:	4610      	mov	r0, r2
 8005e38:	f000 fc72 	bl	8006720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_IC_Start_IT+0x1e>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	e023      	b.n	8005f22 <HAL_TIM_IC_Start_IT+0x66>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d104      	bne.n	8005eea <HAL_TIM_IC_Start_IT+0x2e>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	e01b      	b.n	8005f22 <HAL_TIM_IC_Start_IT+0x66>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_IC_Start_IT+0x3e>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	e013      	b.n	8005f22 <HAL_TIM_IC_Start_IT+0x66>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b0c      	cmp	r3, #12
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_IC_Start_IT+0x4e>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	e00b      	b.n	8005f22 <HAL_TIM_IC_Start_IT+0x66>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b10      	cmp	r3, #16
 8005f0e:	d104      	bne.n	8005f1a <HAL_TIM_IC_Start_IT+0x5e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	e003      	b.n	8005f22 <HAL_TIM_IC_Start_IT+0x66>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d104      	bne.n	8005f34 <HAL_TIM_IC_Start_IT+0x78>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	e013      	b.n	8005f5c <HAL_TIM_IC_Start_IT+0xa0>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d104      	bne.n	8005f44 <HAL_TIM_IC_Start_IT+0x88>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	e00b      	b.n	8005f5c <HAL_TIM_IC_Start_IT+0xa0>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2b08      	cmp	r3, #8
 8005f48:	d104      	bne.n	8005f54 <HAL_TIM_IC_Start_IT+0x98>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	e003      	b.n	8005f5c <HAL_TIM_IC_Start_IT+0xa0>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f5e:	7bbb      	ldrb	r3, [r7, #14]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d102      	bne.n	8005f6a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f64:	7b7b      	ldrb	r3, [r7, #13]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d001      	beq.n	8005f6e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e0d8      	b.n	8006120 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d104      	bne.n	8005f7e <HAL_TIM_IC_Start_IT+0xc2>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f7c:	e023      	b.n	8005fc6 <HAL_TIM_IC_Start_IT+0x10a>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d104      	bne.n	8005f8e <HAL_TIM_IC_Start_IT+0xd2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f8c:	e01b      	b.n	8005fc6 <HAL_TIM_IC_Start_IT+0x10a>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d104      	bne.n	8005f9e <HAL_TIM_IC_Start_IT+0xe2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f9c:	e013      	b.n	8005fc6 <HAL_TIM_IC_Start_IT+0x10a>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b0c      	cmp	r3, #12
 8005fa2:	d104      	bne.n	8005fae <HAL_TIM_IC_Start_IT+0xf2>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fac:	e00b      	b.n	8005fc6 <HAL_TIM_IC_Start_IT+0x10a>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b10      	cmp	r3, #16
 8005fb2:	d104      	bne.n	8005fbe <HAL_TIM_IC_Start_IT+0x102>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fbc:	e003      	b.n	8005fc6 <HAL_TIM_IC_Start_IT+0x10a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <HAL_TIM_IC_Start_IT+0x11a>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fd4:	e013      	b.n	8005ffe <HAL_TIM_IC_Start_IT+0x142>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d104      	bne.n	8005fe6 <HAL_TIM_IC_Start_IT+0x12a>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fe4:	e00b      	b.n	8005ffe <HAL_TIM_IC_Start_IT+0x142>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d104      	bne.n	8005ff6 <HAL_TIM_IC_Start_IT+0x13a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ff4:	e003      	b.n	8005ffe <HAL_TIM_IC_Start_IT+0x142>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b0c      	cmp	r3, #12
 8006002:	d841      	bhi.n	8006088 <HAL_TIM_IC_Start_IT+0x1cc>
 8006004:	a201      	add	r2, pc, #4	; (adr r2, 800600c <HAL_TIM_IC_Start_IT+0x150>)
 8006006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600a:	bf00      	nop
 800600c:	08006041 	.word	0x08006041
 8006010:	08006089 	.word	0x08006089
 8006014:	08006089 	.word	0x08006089
 8006018:	08006089 	.word	0x08006089
 800601c:	08006053 	.word	0x08006053
 8006020:	08006089 	.word	0x08006089
 8006024:	08006089 	.word	0x08006089
 8006028:	08006089 	.word	0x08006089
 800602c:	08006065 	.word	0x08006065
 8006030:	08006089 	.word	0x08006089
 8006034:	08006089 	.word	0x08006089
 8006038:	08006089 	.word	0x08006089
 800603c:	08006077 	.word	0x08006077
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0202 	orr.w	r2, r2, #2
 800604e:	60da      	str	r2, [r3, #12]
      break;
 8006050:	e01d      	b.n	800608e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0204 	orr.w	r2, r2, #4
 8006060:	60da      	str	r2, [r3, #12]
      break;
 8006062:	e014      	b.n	800608e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0208 	orr.w	r2, r2, #8
 8006072:	60da      	str	r2, [r3, #12]
      break;
 8006074:	e00b      	b.n	800608e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f042 0210 	orr.w	r2, r2, #16
 8006084:	60da      	str	r2, [r3, #12]
      break;
 8006086:	e002      	b.n	800608e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	73fb      	strb	r3, [r7, #15]
      break;
 800608c:	bf00      	nop
  }

  if (status == HAL_OK)
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d144      	bne.n	800611e <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2201      	movs	r2, #1
 800609a:	6839      	ldr	r1, [r7, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fd87 	bl	8006bb0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a20      	ldr	r2, [pc, #128]	; (8006128 <HAL_TIM_IC_Start_IT+0x26c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d018      	beq.n	80060de <HAL_TIM_IC_Start_IT+0x222>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b4:	d013      	beq.n	80060de <HAL_TIM_IC_Start_IT+0x222>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1c      	ldr	r2, [pc, #112]	; (800612c <HAL_TIM_IC_Start_IT+0x270>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00e      	beq.n	80060de <HAL_TIM_IC_Start_IT+0x222>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1a      	ldr	r2, [pc, #104]	; (8006130 <HAL_TIM_IC_Start_IT+0x274>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d009      	beq.n	80060de <HAL_TIM_IC_Start_IT+0x222>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a19      	ldr	r2, [pc, #100]	; (8006134 <HAL_TIM_IC_Start_IT+0x278>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d004      	beq.n	80060de <HAL_TIM_IC_Start_IT+0x222>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a17      	ldr	r2, [pc, #92]	; (8006138 <HAL_TIM_IC_Start_IT+0x27c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d115      	bne.n	800610a <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	4b15      	ldr	r3, [pc, #84]	; (800613c <HAL_TIM_IC_Start_IT+0x280>)
 80060e6:	4013      	ands	r3, r2
 80060e8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b06      	cmp	r3, #6
 80060ee:	d015      	beq.n	800611c <HAL_TIM_IC_Start_IT+0x260>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f6:	d011      	beq.n	800611c <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006108:	e008      	b.n	800611c <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f042 0201 	orr.w	r2, r2, #1
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	e000      	b.n	800611e <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800611e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40000400 	.word	0x40000400
 8006130:	40000800 	.word	0x40000800
 8006134:	40013400 	.word	0x40013400
 8006138:	40014000 	.word	0x40014000
 800613c:	00010007 	.word	0x00010007

08006140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b02      	cmp	r3, #2
 8006154:	d122      	bne.n	800619c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b02      	cmp	r3, #2
 8006162:	d11b      	bne.n	800619c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f06f 0202 	mvn.w	r2, #2
 800616c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d003      	beq.n	800618a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fa fda2 	bl	8000ccc <HAL_TIM_IC_CaptureCallback>
 8006188:	e005      	b.n	8006196 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 faaa 	bl	80066e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fab1 	bl	80066f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d122      	bne.n	80061f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d11b      	bne.n	80061f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0204 	mvn.w	r2, #4
 80061c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2202      	movs	r2, #2
 80061c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7fa fd78 	bl	8000ccc <HAL_TIM_IC_CaptureCallback>
 80061dc:	e005      	b.n	80061ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fa80 	bl	80066e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fa87 	bl	80066f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b08      	cmp	r3, #8
 80061fc:	d122      	bne.n	8006244 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b08      	cmp	r3, #8
 800620a:	d11b      	bne.n	8006244 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0208 	mvn.w	r2, #8
 8006214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2204      	movs	r2, #4
 800621a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fa fd4e 	bl	8000ccc <HAL_TIM_IC_CaptureCallback>
 8006230:	e005      	b.n	800623e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa56 	bl	80066e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fa5d 	bl	80066f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0310 	and.w	r3, r3, #16
 800624e:	2b10      	cmp	r3, #16
 8006250:	d122      	bne.n	8006298 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f003 0310 	and.w	r3, r3, #16
 800625c:	2b10      	cmp	r3, #16
 800625e:	d11b      	bne.n	8006298 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0210 	mvn.w	r2, #16
 8006268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2208      	movs	r2, #8
 800626e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fa fd24 	bl	8000ccc <HAL_TIM_IC_CaptureCallback>
 8006284:	e005      	b.n	8006292 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa2c 	bl	80066e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fa33 	bl	80066f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d10e      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d107      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0201 	mvn.w	r2, #1
 80062bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 fa06 	bl	80066d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ce:	2b80      	cmp	r3, #128	; 0x80
 80062d0:	d10e      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062dc:	2b80      	cmp	r3, #128	; 0x80
 80062de:	d107      	bne.n	80062f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fd10 	bl	8006d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062fe:	d10e      	bne.n	800631e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630a:	2b80      	cmp	r3, #128	; 0x80
 800630c:	d107      	bne.n	800631e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fd03 	bl	8006d24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006328:	2b40      	cmp	r3, #64	; 0x40
 800632a:	d10e      	bne.n	800634a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006336:	2b40      	cmp	r3, #64	; 0x40
 8006338:	d107      	bne.n	800634a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f9e1 	bl	800670c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f003 0320 	and.w	r3, r3, #32
 8006354:	2b20      	cmp	r3, #32
 8006356:	d10e      	bne.n	8006376 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b20      	cmp	r3, #32
 8006364:	d107      	bne.n	8006376 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f06f 0220 	mvn.w	r2, #32
 800636e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fcc3 	bl	8006cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006376:	bf00      	nop
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b086      	sub	sp, #24
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_TIM_IC_ConfigChannel+0x1e>
 8006398:	2302      	movs	r3, #2
 800639a:	e088      	b.n	80064ae <HAL_TIM_IC_ConfigChannel+0x130>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d11b      	bne.n	80063e2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	6819      	ldr	r1, [r3, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f000 fa41 	bl	8006840 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	699a      	ldr	r2, [r3, #24]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 020c 	bic.w	r2, r2, #12
 80063cc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6999      	ldr	r1, [r3, #24]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	619a      	str	r2, [r3, #24]
 80063e0:	e060      	b.n	80064a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d11c      	bne.n	8006422 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	6819      	ldr	r1, [r3, #0]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f000 fab9 	bl	800696e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800640a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6999      	ldr	r1, [r3, #24]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	021a      	lsls	r2, r3, #8
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	430a      	orrs	r2, r1
 800641e:	619a      	str	r2, [r3, #24]
 8006420:	e040      	b.n	80064a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b08      	cmp	r3, #8
 8006426:	d11b      	bne.n	8006460 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	6819      	ldr	r1, [r3, #0]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f000 fb06 	bl	8006a48 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69da      	ldr	r2, [r3, #28]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 020c 	bic.w	r2, r2, #12
 800644a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69d9      	ldr	r1, [r3, #28]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	61da      	str	r2, [r3, #28]
 800645e:	e021      	b.n	80064a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b0c      	cmp	r3, #12
 8006464:	d11c      	bne.n	80064a0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	6819      	ldr	r1, [r3, #0]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f000 fb23 	bl	8006ac0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006488:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69d9      	ldr	r1, [r3, #28]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	021a      	lsls	r2, r3, #8
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	61da      	str	r2, [r3, #28]
 800649e:	e001      	b.n	80064a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_TIM_ConfigClockSource+0x1c>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e0b6      	b.n	8006640 <HAL_TIM_ConfigClockSource+0x18a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064fc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650e:	d03e      	beq.n	800658e <HAL_TIM_ConfigClockSource+0xd8>
 8006510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006514:	f200 8087 	bhi.w	8006626 <HAL_TIM_ConfigClockSource+0x170>
 8006518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800651c:	f000 8086 	beq.w	800662c <HAL_TIM_ConfigClockSource+0x176>
 8006520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006524:	d87f      	bhi.n	8006626 <HAL_TIM_ConfigClockSource+0x170>
 8006526:	2b70      	cmp	r3, #112	; 0x70
 8006528:	d01a      	beq.n	8006560 <HAL_TIM_ConfigClockSource+0xaa>
 800652a:	2b70      	cmp	r3, #112	; 0x70
 800652c:	d87b      	bhi.n	8006626 <HAL_TIM_ConfigClockSource+0x170>
 800652e:	2b60      	cmp	r3, #96	; 0x60
 8006530:	d050      	beq.n	80065d4 <HAL_TIM_ConfigClockSource+0x11e>
 8006532:	2b60      	cmp	r3, #96	; 0x60
 8006534:	d877      	bhi.n	8006626 <HAL_TIM_ConfigClockSource+0x170>
 8006536:	2b50      	cmp	r3, #80	; 0x50
 8006538:	d03c      	beq.n	80065b4 <HAL_TIM_ConfigClockSource+0xfe>
 800653a:	2b50      	cmp	r3, #80	; 0x50
 800653c:	d873      	bhi.n	8006626 <HAL_TIM_ConfigClockSource+0x170>
 800653e:	2b40      	cmp	r3, #64	; 0x40
 8006540:	d058      	beq.n	80065f4 <HAL_TIM_ConfigClockSource+0x13e>
 8006542:	2b40      	cmp	r3, #64	; 0x40
 8006544:	d86f      	bhi.n	8006626 <HAL_TIM_ConfigClockSource+0x170>
 8006546:	2b30      	cmp	r3, #48	; 0x30
 8006548:	d064      	beq.n	8006614 <HAL_TIM_ConfigClockSource+0x15e>
 800654a:	2b30      	cmp	r3, #48	; 0x30
 800654c:	d86b      	bhi.n	8006626 <HAL_TIM_ConfigClockSource+0x170>
 800654e:	2b20      	cmp	r3, #32
 8006550:	d060      	beq.n	8006614 <HAL_TIM_ConfigClockSource+0x15e>
 8006552:	2b20      	cmp	r3, #32
 8006554:	d867      	bhi.n	8006626 <HAL_TIM_ConfigClockSource+0x170>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d05c      	beq.n	8006614 <HAL_TIM_ConfigClockSource+0x15e>
 800655a:	2b10      	cmp	r3, #16
 800655c:	d05a      	beq.n	8006614 <HAL_TIM_ConfigClockSource+0x15e>
 800655e:	e062      	b.n	8006626 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	6899      	ldr	r1, [r3, #8]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f000 fafe 	bl	8006b70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006582:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	609a      	str	r2, [r3, #8]
      break;
 800658c:	e04f      	b.n	800662e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6899      	ldr	r1, [r3, #8]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f000 fae7 	bl	8006b70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065b0:	609a      	str	r2, [r3, #8]
      break;
 80065b2:	e03c      	b.n	800662e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6818      	ldr	r0, [r3, #0]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	6859      	ldr	r1, [r3, #4]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	461a      	mov	r2, r3
 80065c2:	f000 f9a5 	bl	8006910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2150      	movs	r1, #80	; 0x50
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fab4 	bl	8006b3a <TIM_ITRx_SetConfig>
      break;
 80065d2:	e02c      	b.n	800662e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	6859      	ldr	r1, [r3, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	461a      	mov	r2, r3
 80065e2:	f000 fa01 	bl	80069e8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2160      	movs	r1, #96	; 0x60
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 faa4 	bl	8006b3a <TIM_ITRx_SetConfig>
      break;
 80065f2:	e01c      	b.n	800662e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	6859      	ldr	r1, [r3, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	461a      	mov	r2, r3
 8006602:	f000 f985 	bl	8006910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2140      	movs	r1, #64	; 0x40
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fa94 	bl	8006b3a <TIM_ITRx_SetConfig>
      break;
 8006612:	e00c      	b.n	800662e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4619      	mov	r1, r3
 800661e:	4610      	mov	r0, r2
 8006620:	f000 fa8b 	bl	8006b3a <TIM_ITRx_SetConfig>
      break;
 8006624:	e003      	b.n	800662e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	73fb      	strb	r3, [r7, #15]
      break;
 800662a:	e000      	b.n	800662e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800662c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b0c      	cmp	r3, #12
 800665a:	d831      	bhi.n	80066c0 <HAL_TIM_ReadCapturedValue+0x78>
 800665c:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <HAL_TIM_ReadCapturedValue+0x1c>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	08006699 	.word	0x08006699
 8006668:	080066c1 	.word	0x080066c1
 800666c:	080066c1 	.word	0x080066c1
 8006670:	080066c1 	.word	0x080066c1
 8006674:	080066a3 	.word	0x080066a3
 8006678:	080066c1 	.word	0x080066c1
 800667c:	080066c1 	.word	0x080066c1
 8006680:	080066c1 	.word	0x080066c1
 8006684:	080066ad 	.word	0x080066ad
 8006688:	080066c1 	.word	0x080066c1
 800668c:	080066c1 	.word	0x080066c1
 8006690:	080066c1 	.word	0x080066c1
 8006694:	080066b7 	.word	0x080066b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669e:	60fb      	str	r3, [r7, #12]

      break;
 80066a0:	e00f      	b.n	80066c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a8:	60fb      	str	r3, [r7, #12]

      break;
 80066aa:	e00a      	b.n	80066c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b2:	60fb      	str	r3, [r7, #12]

      break;
 80066b4:	e005      	b.n	80066c2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	60fb      	str	r3, [r7, #12]

      break;
 80066be:	e000      	b.n	80066c2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80066c0:	bf00      	nop
  }

  return tmpreg;
 80066c2:	68fb      	ldr	r3, [r7, #12]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a3c      	ldr	r2, [pc, #240]	; (8006824 <TIM_Base_SetConfig+0x104>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00f      	beq.n	8006758 <TIM_Base_SetConfig+0x38>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673e:	d00b      	beq.n	8006758 <TIM_Base_SetConfig+0x38>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a39      	ldr	r2, [pc, #228]	; (8006828 <TIM_Base_SetConfig+0x108>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d007      	beq.n	8006758 <TIM_Base_SetConfig+0x38>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a38      	ldr	r2, [pc, #224]	; (800682c <TIM_Base_SetConfig+0x10c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_Base_SetConfig+0x38>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a37      	ldr	r2, [pc, #220]	; (8006830 <TIM_Base_SetConfig+0x110>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d108      	bne.n	800676a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2d      	ldr	r2, [pc, #180]	; (8006824 <TIM_Base_SetConfig+0x104>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d01b      	beq.n	80067aa <TIM_Base_SetConfig+0x8a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006778:	d017      	beq.n	80067aa <TIM_Base_SetConfig+0x8a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2a      	ldr	r2, [pc, #168]	; (8006828 <TIM_Base_SetConfig+0x108>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <TIM_Base_SetConfig+0x8a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a29      	ldr	r2, [pc, #164]	; (800682c <TIM_Base_SetConfig+0x10c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00f      	beq.n	80067aa <TIM_Base_SetConfig+0x8a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a28      	ldr	r2, [pc, #160]	; (8006830 <TIM_Base_SetConfig+0x110>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00b      	beq.n	80067aa <TIM_Base_SetConfig+0x8a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a27      	ldr	r2, [pc, #156]	; (8006834 <TIM_Base_SetConfig+0x114>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d007      	beq.n	80067aa <TIM_Base_SetConfig+0x8a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a26      	ldr	r2, [pc, #152]	; (8006838 <TIM_Base_SetConfig+0x118>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_Base_SetConfig+0x8a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a25      	ldr	r2, [pc, #148]	; (800683c <TIM_Base_SetConfig+0x11c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d108      	bne.n	80067bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a10      	ldr	r2, [pc, #64]	; (8006824 <TIM_Base_SetConfig+0x104>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00f      	beq.n	8006808 <TIM_Base_SetConfig+0xe8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a11      	ldr	r2, [pc, #68]	; (8006830 <TIM_Base_SetConfig+0x110>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00b      	beq.n	8006808 <TIM_Base_SetConfig+0xe8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a10      	ldr	r2, [pc, #64]	; (8006834 <TIM_Base_SetConfig+0x114>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d007      	beq.n	8006808 <TIM_Base_SetConfig+0xe8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <TIM_Base_SetConfig+0x118>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_Base_SetConfig+0xe8>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a0e      	ldr	r2, [pc, #56]	; (800683c <TIM_Base_SetConfig+0x11c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d103      	bne.n	8006810 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	615a      	str	r2, [r3, #20]
}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40013400 	.word	0x40013400
 8006834:	40014000 	.word	0x40014000
 8006838:	40014400 	.word	0x40014400
 800683c:	40014800 	.word	0x40014800

08006840 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	f023 0201 	bic.w	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4a24      	ldr	r2, [pc, #144]	; (80068fc <TIM_TI1_SetConfig+0xbc>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d013      	beq.n	8006896 <TIM_TI1_SetConfig+0x56>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006874:	d00f      	beq.n	8006896 <TIM_TI1_SetConfig+0x56>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4a21      	ldr	r2, [pc, #132]	; (8006900 <TIM_TI1_SetConfig+0xc0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00b      	beq.n	8006896 <TIM_TI1_SetConfig+0x56>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4a20      	ldr	r2, [pc, #128]	; (8006904 <TIM_TI1_SetConfig+0xc4>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d007      	beq.n	8006896 <TIM_TI1_SetConfig+0x56>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4a1f      	ldr	r2, [pc, #124]	; (8006908 <TIM_TI1_SetConfig+0xc8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_TI1_SetConfig+0x56>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4a1e      	ldr	r2, [pc, #120]	; (800690c <TIM_TI1_SetConfig+0xcc>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d101      	bne.n	800689a <TIM_TI1_SetConfig+0x5a>
 8006896:	2301      	movs	r3, #1
 8006898:	e000      	b.n	800689c <TIM_TI1_SetConfig+0x5c>
 800689a:	2300      	movs	r3, #0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d008      	beq.n	80068b2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	e003      	b.n	80068ba <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f023 030a 	bic.w	r3, r3, #10
 80068d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f003 030a 	and.w	r3, r3, #10
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	621a      	str	r2, [r3, #32]
}
 80068ee:	bf00      	nop
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	40012c00 	.word	0x40012c00
 8006900:	40000400 	.word	0x40000400
 8006904:	40000800 	.word	0x40000800
 8006908:	40013400 	.word	0x40013400
 800690c:	40014000 	.word	0x40014000

08006910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f023 0201 	bic.w	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800693a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f023 030a 	bic.w	r3, r3, #10
 800694c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800696e:	b480      	push	{r7}
 8006970:	b087      	sub	sp, #28
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
 800697a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	f023 0210 	bic.w	r2, r3, #16
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	021b      	lsls	r3, r3, #8
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	031b      	lsls	r3, r3, #12
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	011b      	lsls	r3, r3, #4
 80069c6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	621a      	str	r2, [r3, #32]
}
 80069dc:	bf00      	nop
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	f023 0210 	bic.w	r2, r3, #16
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	031b      	lsls	r3, r3, #12
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	621a      	str	r2, [r3, #32]
}
 8006a3c:	bf00      	nop
 8006a3e:	371c      	adds	r7, #28
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f023 0303 	bic.w	r3, r3, #3
 8006a74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	011b      	lsls	r3, r3, #4
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006a98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	021b      	lsls	r3, r3, #8
 8006a9e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	621a      	str	r2, [r3, #32]
}
 8006ab4:	bf00      	nop
 8006ab6:	371c      	adds	r7, #28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	021b      	lsls	r3, r3, #8
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006afe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	031b      	lsls	r3, r3, #12
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006b12:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	031b      	lsls	r3, r3, #12
 8006b18:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	621a      	str	r2, [r3, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f043 0307 	orr.w	r3, r3, #7
 8006b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	609a      	str	r2, [r3, #8]
}
 8006b64:	bf00      	nop
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	021a      	lsls	r2, r3, #8
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	609a      	str	r2, [r3, #8]
}
 8006ba4:	bf00      	nop
 8006ba6:	371c      	adds	r7, #28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f003 031f 	and.w	r3, r3, #31
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a1a      	ldr	r2, [r3, #32]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	43db      	mvns	r3, r3
 8006bd2:	401a      	ands	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a1a      	ldr	r2, [r3, #32]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f003 031f 	and.w	r3, r3, #31
 8006be2:	6879      	ldr	r1, [r7, #4]
 8006be4:	fa01 f303 	lsl.w	r3, r1, r3
 8006be8:	431a      	orrs	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	621a      	str	r2, [r3, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
	...

08006bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d101      	bne.n	8006c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c10:	2302      	movs	r3, #2
 8006c12:	e063      	b.n	8006cdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a2b      	ldr	r2, [pc, #172]	; (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d004      	beq.n	8006c48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a2a      	ldr	r2, [pc, #168]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d108      	bne.n	8006c5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1b      	ldr	r2, [pc, #108]	; (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d018      	beq.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c86:	d013      	beq.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a18      	ldr	r2, [pc, #96]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00e      	beq.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a17      	ldr	r2, [pc, #92]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d009      	beq.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a12      	ldr	r2, [pc, #72]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d004      	beq.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a13      	ldr	r2, [pc, #76]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d10c      	bne.n	8006cca <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	40012c00 	.word	0x40012c00
 8006cec:	40013400 	.word	0x40013400
 8006cf0:	40000400 	.word	0x40000400
 8006cf4:	40000800 	.word	0x40000800
 8006cf8:	40014000 	.word	0x40014000

08006cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006d40:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006d44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	43db      	mvns	r3, r3
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	4013      	ands	r3, r2
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006d6e:	b084      	sub	sp, #16
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	f107 0014 	add.w	r0, r7, #20
 8006d7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	b004      	add	sp, #16
 8006dae:	4770      	bx	lr

08006db0 <__errno>:
 8006db0:	4b01      	ldr	r3, [pc, #4]	; (8006db8 <__errno+0x8>)
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	20000240 	.word	0x20000240

08006dbc <__libc_init_array>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	4d0d      	ldr	r5, [pc, #52]	; (8006df4 <__libc_init_array+0x38>)
 8006dc0:	4c0d      	ldr	r4, [pc, #52]	; (8006df8 <__libc_init_array+0x3c>)
 8006dc2:	1b64      	subs	r4, r4, r5
 8006dc4:	10a4      	asrs	r4, r4, #2
 8006dc6:	2600      	movs	r6, #0
 8006dc8:	42a6      	cmp	r6, r4
 8006dca:	d109      	bne.n	8006de0 <__libc_init_array+0x24>
 8006dcc:	4d0b      	ldr	r5, [pc, #44]	; (8006dfc <__libc_init_array+0x40>)
 8006dce:	4c0c      	ldr	r4, [pc, #48]	; (8006e00 <__libc_init_array+0x44>)
 8006dd0:	f004 ff6c 	bl	800bcac <_init>
 8006dd4:	1b64      	subs	r4, r4, r5
 8006dd6:	10a4      	asrs	r4, r4, #2
 8006dd8:	2600      	movs	r6, #0
 8006dda:	42a6      	cmp	r6, r4
 8006ddc:	d105      	bne.n	8006dea <__libc_init_array+0x2e>
 8006dde:	bd70      	pop	{r4, r5, r6, pc}
 8006de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de4:	4798      	blx	r3
 8006de6:	3601      	adds	r6, #1
 8006de8:	e7ee      	b.n	8006dc8 <__libc_init_array+0xc>
 8006dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dee:	4798      	blx	r3
 8006df0:	3601      	adds	r6, #1
 8006df2:	e7f2      	b.n	8006dda <__libc_init_array+0x1e>
 8006df4:	0800c550 	.word	0x0800c550
 8006df8:	0800c550 	.word	0x0800c550
 8006dfc:	0800c550 	.word	0x0800c550
 8006e00:	0800c554 	.word	0x0800c554

08006e04 <memset>:
 8006e04:	4402      	add	r2, r0
 8006e06:	4603      	mov	r3, r0
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d100      	bne.n	8006e0e <memset+0xa>
 8006e0c:	4770      	bx	lr
 8006e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e12:	e7f9      	b.n	8006e08 <memset+0x4>

08006e14 <__cvt>:
 8006e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e18:	ec55 4b10 	vmov	r4, r5, d0
 8006e1c:	2d00      	cmp	r5, #0
 8006e1e:	460e      	mov	r6, r1
 8006e20:	4619      	mov	r1, r3
 8006e22:	462b      	mov	r3, r5
 8006e24:	bfbb      	ittet	lt
 8006e26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e2a:	461d      	movlt	r5, r3
 8006e2c:	2300      	movge	r3, #0
 8006e2e:	232d      	movlt	r3, #45	; 0x2d
 8006e30:	700b      	strb	r3, [r1, #0]
 8006e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e38:	4691      	mov	r9, r2
 8006e3a:	f023 0820 	bic.w	r8, r3, #32
 8006e3e:	bfbc      	itt	lt
 8006e40:	4622      	movlt	r2, r4
 8006e42:	4614      	movlt	r4, r2
 8006e44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e48:	d005      	beq.n	8006e56 <__cvt+0x42>
 8006e4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e4e:	d100      	bne.n	8006e52 <__cvt+0x3e>
 8006e50:	3601      	adds	r6, #1
 8006e52:	2102      	movs	r1, #2
 8006e54:	e000      	b.n	8006e58 <__cvt+0x44>
 8006e56:	2103      	movs	r1, #3
 8006e58:	ab03      	add	r3, sp, #12
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	ab02      	add	r3, sp, #8
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	ec45 4b10 	vmov	d0, r4, r5
 8006e64:	4653      	mov	r3, sl
 8006e66:	4632      	mov	r2, r6
 8006e68:	f000 fcea 	bl	8007840 <_dtoa_r>
 8006e6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e70:	4607      	mov	r7, r0
 8006e72:	d102      	bne.n	8006e7a <__cvt+0x66>
 8006e74:	f019 0f01 	tst.w	r9, #1
 8006e78:	d022      	beq.n	8006ec0 <__cvt+0xac>
 8006e7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e7e:	eb07 0906 	add.w	r9, r7, r6
 8006e82:	d110      	bne.n	8006ea6 <__cvt+0x92>
 8006e84:	783b      	ldrb	r3, [r7, #0]
 8006e86:	2b30      	cmp	r3, #48	; 0x30
 8006e88:	d10a      	bne.n	8006ea0 <__cvt+0x8c>
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	4620      	mov	r0, r4
 8006e90:	4629      	mov	r1, r5
 8006e92:	f7f9 fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e96:	b918      	cbnz	r0, 8006ea0 <__cvt+0x8c>
 8006e98:	f1c6 0601 	rsb	r6, r6, #1
 8006e9c:	f8ca 6000 	str.w	r6, [sl]
 8006ea0:	f8da 3000 	ldr.w	r3, [sl]
 8006ea4:	4499      	add	r9, r3
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4620      	mov	r0, r4
 8006eac:	4629      	mov	r1, r5
 8006eae:	f7f9 fe0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006eb2:	b108      	cbz	r0, 8006eb8 <__cvt+0xa4>
 8006eb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006eb8:	2230      	movs	r2, #48	; 0x30
 8006eba:	9b03      	ldr	r3, [sp, #12]
 8006ebc:	454b      	cmp	r3, r9
 8006ebe:	d307      	bcc.n	8006ed0 <__cvt+0xbc>
 8006ec0:	9b03      	ldr	r3, [sp, #12]
 8006ec2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ec4:	1bdb      	subs	r3, r3, r7
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	b004      	add	sp, #16
 8006ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed0:	1c59      	adds	r1, r3, #1
 8006ed2:	9103      	str	r1, [sp, #12]
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	e7f0      	b.n	8006eba <__cvt+0xa6>

08006ed8 <__exponent>:
 8006ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eda:	4603      	mov	r3, r0
 8006edc:	2900      	cmp	r1, #0
 8006ede:	bfb8      	it	lt
 8006ee0:	4249      	neglt	r1, r1
 8006ee2:	f803 2b02 	strb.w	r2, [r3], #2
 8006ee6:	bfb4      	ite	lt
 8006ee8:	222d      	movlt	r2, #45	; 0x2d
 8006eea:	222b      	movge	r2, #43	; 0x2b
 8006eec:	2909      	cmp	r1, #9
 8006eee:	7042      	strb	r2, [r0, #1]
 8006ef0:	dd2a      	ble.n	8006f48 <__exponent+0x70>
 8006ef2:	f10d 0407 	add.w	r4, sp, #7
 8006ef6:	46a4      	mov	ip, r4
 8006ef8:	270a      	movs	r7, #10
 8006efa:	46a6      	mov	lr, r4
 8006efc:	460a      	mov	r2, r1
 8006efe:	fb91 f6f7 	sdiv	r6, r1, r7
 8006f02:	fb07 1516 	mls	r5, r7, r6, r1
 8006f06:	3530      	adds	r5, #48	; 0x30
 8006f08:	2a63      	cmp	r2, #99	; 0x63
 8006f0a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f12:	4631      	mov	r1, r6
 8006f14:	dcf1      	bgt.n	8006efa <__exponent+0x22>
 8006f16:	3130      	adds	r1, #48	; 0x30
 8006f18:	f1ae 0502 	sub.w	r5, lr, #2
 8006f1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006f20:	1c44      	adds	r4, r0, #1
 8006f22:	4629      	mov	r1, r5
 8006f24:	4561      	cmp	r1, ip
 8006f26:	d30a      	bcc.n	8006f3e <__exponent+0x66>
 8006f28:	f10d 0209 	add.w	r2, sp, #9
 8006f2c:	eba2 020e 	sub.w	r2, r2, lr
 8006f30:	4565      	cmp	r5, ip
 8006f32:	bf88      	it	hi
 8006f34:	2200      	movhi	r2, #0
 8006f36:	4413      	add	r3, r2
 8006f38:	1a18      	subs	r0, r3, r0
 8006f3a:	b003      	add	sp, #12
 8006f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f42:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006f46:	e7ed      	b.n	8006f24 <__exponent+0x4c>
 8006f48:	2330      	movs	r3, #48	; 0x30
 8006f4a:	3130      	adds	r1, #48	; 0x30
 8006f4c:	7083      	strb	r3, [r0, #2]
 8006f4e:	70c1      	strb	r1, [r0, #3]
 8006f50:	1d03      	adds	r3, r0, #4
 8006f52:	e7f1      	b.n	8006f38 <__exponent+0x60>

08006f54 <_printf_float>:
 8006f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f58:	ed2d 8b02 	vpush	{d8}
 8006f5c:	b08d      	sub	sp, #52	; 0x34
 8006f5e:	460c      	mov	r4, r1
 8006f60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006f64:	4616      	mov	r6, r2
 8006f66:	461f      	mov	r7, r3
 8006f68:	4605      	mov	r5, r0
 8006f6a:	f001 fa57 	bl	800841c <_localeconv_r>
 8006f6e:	f8d0 a000 	ldr.w	sl, [r0]
 8006f72:	4650      	mov	r0, sl
 8006f74:	f7f9 f92c 	bl	80001d0 <strlen>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	9305      	str	r3, [sp, #20]
 8006f80:	f8d8 3000 	ldr.w	r3, [r8]
 8006f84:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f88:	3307      	adds	r3, #7
 8006f8a:	f023 0307 	bic.w	r3, r3, #7
 8006f8e:	f103 0208 	add.w	r2, r3, #8
 8006f92:	f8c8 2000 	str.w	r2, [r8]
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f9e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006fa2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006fa6:	9307      	str	r3, [sp, #28]
 8006fa8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006fac:	ee08 0a10 	vmov	s16, r0
 8006fb0:	4b9f      	ldr	r3, [pc, #636]	; (8007230 <_printf_float+0x2dc>)
 8006fb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fba:	f7f9 fdb7 	bl	8000b2c <__aeabi_dcmpun>
 8006fbe:	bb88      	cbnz	r0, 8007024 <_printf_float+0xd0>
 8006fc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fc4:	4b9a      	ldr	r3, [pc, #616]	; (8007230 <_printf_float+0x2dc>)
 8006fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fca:	f7f9 fd91 	bl	8000af0 <__aeabi_dcmple>
 8006fce:	bb48      	cbnz	r0, 8007024 <_printf_float+0xd0>
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	f7f9 fd80 	bl	8000adc <__aeabi_dcmplt>
 8006fdc:	b110      	cbz	r0, 8006fe4 <_printf_float+0x90>
 8006fde:	232d      	movs	r3, #45	; 0x2d
 8006fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe4:	4b93      	ldr	r3, [pc, #588]	; (8007234 <_printf_float+0x2e0>)
 8006fe6:	4894      	ldr	r0, [pc, #592]	; (8007238 <_printf_float+0x2e4>)
 8006fe8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006fec:	bf94      	ite	ls
 8006fee:	4698      	movls	r8, r3
 8006ff0:	4680      	movhi	r8, r0
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	6123      	str	r3, [r4, #16]
 8006ff6:	9b05      	ldr	r3, [sp, #20]
 8006ff8:	f023 0204 	bic.w	r2, r3, #4
 8006ffc:	6022      	str	r2, [r4, #0]
 8006ffe:	f04f 0900 	mov.w	r9, #0
 8007002:	9700      	str	r7, [sp, #0]
 8007004:	4633      	mov	r3, r6
 8007006:	aa0b      	add	r2, sp, #44	; 0x2c
 8007008:	4621      	mov	r1, r4
 800700a:	4628      	mov	r0, r5
 800700c:	f000 f9d8 	bl	80073c0 <_printf_common>
 8007010:	3001      	adds	r0, #1
 8007012:	f040 8090 	bne.w	8007136 <_printf_float+0x1e2>
 8007016:	f04f 30ff 	mov.w	r0, #4294967295
 800701a:	b00d      	add	sp, #52	; 0x34
 800701c:	ecbd 8b02 	vpop	{d8}
 8007020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	4640      	mov	r0, r8
 800702a:	4649      	mov	r1, r9
 800702c:	f7f9 fd7e 	bl	8000b2c <__aeabi_dcmpun>
 8007030:	b140      	cbz	r0, 8007044 <_printf_float+0xf0>
 8007032:	464b      	mov	r3, r9
 8007034:	2b00      	cmp	r3, #0
 8007036:	bfbc      	itt	lt
 8007038:	232d      	movlt	r3, #45	; 0x2d
 800703a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800703e:	487f      	ldr	r0, [pc, #508]	; (800723c <_printf_float+0x2e8>)
 8007040:	4b7f      	ldr	r3, [pc, #508]	; (8007240 <_printf_float+0x2ec>)
 8007042:	e7d1      	b.n	8006fe8 <_printf_float+0x94>
 8007044:	6863      	ldr	r3, [r4, #4]
 8007046:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800704a:	9206      	str	r2, [sp, #24]
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	d13f      	bne.n	80070d0 <_printf_float+0x17c>
 8007050:	2306      	movs	r3, #6
 8007052:	6063      	str	r3, [r4, #4]
 8007054:	9b05      	ldr	r3, [sp, #20]
 8007056:	6861      	ldr	r1, [r4, #4]
 8007058:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800705c:	2300      	movs	r3, #0
 800705e:	9303      	str	r3, [sp, #12]
 8007060:	ab0a      	add	r3, sp, #40	; 0x28
 8007062:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007066:	ab09      	add	r3, sp, #36	; 0x24
 8007068:	ec49 8b10 	vmov	d0, r8, r9
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	6022      	str	r2, [r4, #0]
 8007070:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007074:	4628      	mov	r0, r5
 8007076:	f7ff fecd 	bl	8006e14 <__cvt>
 800707a:	9b06      	ldr	r3, [sp, #24]
 800707c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800707e:	2b47      	cmp	r3, #71	; 0x47
 8007080:	4680      	mov	r8, r0
 8007082:	d108      	bne.n	8007096 <_printf_float+0x142>
 8007084:	1cc8      	adds	r0, r1, #3
 8007086:	db02      	blt.n	800708e <_printf_float+0x13a>
 8007088:	6863      	ldr	r3, [r4, #4]
 800708a:	4299      	cmp	r1, r3
 800708c:	dd41      	ble.n	8007112 <_printf_float+0x1be>
 800708e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007092:	fa5f fb8b 	uxtb.w	fp, fp
 8007096:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800709a:	d820      	bhi.n	80070de <_printf_float+0x18a>
 800709c:	3901      	subs	r1, #1
 800709e:	465a      	mov	r2, fp
 80070a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070a4:	9109      	str	r1, [sp, #36]	; 0x24
 80070a6:	f7ff ff17 	bl	8006ed8 <__exponent>
 80070aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070ac:	1813      	adds	r3, r2, r0
 80070ae:	2a01      	cmp	r2, #1
 80070b0:	4681      	mov	r9, r0
 80070b2:	6123      	str	r3, [r4, #16]
 80070b4:	dc02      	bgt.n	80070bc <_printf_float+0x168>
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	07d2      	lsls	r2, r2, #31
 80070ba:	d501      	bpl.n	80070c0 <_printf_float+0x16c>
 80070bc:	3301      	adds	r3, #1
 80070be:	6123      	str	r3, [r4, #16]
 80070c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d09c      	beq.n	8007002 <_printf_float+0xae>
 80070c8:	232d      	movs	r3, #45	; 0x2d
 80070ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070ce:	e798      	b.n	8007002 <_printf_float+0xae>
 80070d0:	9a06      	ldr	r2, [sp, #24]
 80070d2:	2a47      	cmp	r2, #71	; 0x47
 80070d4:	d1be      	bne.n	8007054 <_printf_float+0x100>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1bc      	bne.n	8007054 <_printf_float+0x100>
 80070da:	2301      	movs	r3, #1
 80070dc:	e7b9      	b.n	8007052 <_printf_float+0xfe>
 80070de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80070e2:	d118      	bne.n	8007116 <_printf_float+0x1c2>
 80070e4:	2900      	cmp	r1, #0
 80070e6:	6863      	ldr	r3, [r4, #4]
 80070e8:	dd0b      	ble.n	8007102 <_printf_float+0x1ae>
 80070ea:	6121      	str	r1, [r4, #16]
 80070ec:	b913      	cbnz	r3, 80070f4 <_printf_float+0x1a0>
 80070ee:	6822      	ldr	r2, [r4, #0]
 80070f0:	07d0      	lsls	r0, r2, #31
 80070f2:	d502      	bpl.n	80070fa <_printf_float+0x1a6>
 80070f4:	3301      	adds	r3, #1
 80070f6:	440b      	add	r3, r1
 80070f8:	6123      	str	r3, [r4, #16]
 80070fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80070fc:	f04f 0900 	mov.w	r9, #0
 8007100:	e7de      	b.n	80070c0 <_printf_float+0x16c>
 8007102:	b913      	cbnz	r3, 800710a <_printf_float+0x1b6>
 8007104:	6822      	ldr	r2, [r4, #0]
 8007106:	07d2      	lsls	r2, r2, #31
 8007108:	d501      	bpl.n	800710e <_printf_float+0x1ba>
 800710a:	3302      	adds	r3, #2
 800710c:	e7f4      	b.n	80070f8 <_printf_float+0x1a4>
 800710e:	2301      	movs	r3, #1
 8007110:	e7f2      	b.n	80070f8 <_printf_float+0x1a4>
 8007112:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007118:	4299      	cmp	r1, r3
 800711a:	db05      	blt.n	8007128 <_printf_float+0x1d4>
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	6121      	str	r1, [r4, #16]
 8007120:	07d8      	lsls	r0, r3, #31
 8007122:	d5ea      	bpl.n	80070fa <_printf_float+0x1a6>
 8007124:	1c4b      	adds	r3, r1, #1
 8007126:	e7e7      	b.n	80070f8 <_printf_float+0x1a4>
 8007128:	2900      	cmp	r1, #0
 800712a:	bfd4      	ite	le
 800712c:	f1c1 0202 	rsble	r2, r1, #2
 8007130:	2201      	movgt	r2, #1
 8007132:	4413      	add	r3, r2
 8007134:	e7e0      	b.n	80070f8 <_printf_float+0x1a4>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	055a      	lsls	r2, r3, #21
 800713a:	d407      	bmi.n	800714c <_printf_float+0x1f8>
 800713c:	6923      	ldr	r3, [r4, #16]
 800713e:	4642      	mov	r2, r8
 8007140:	4631      	mov	r1, r6
 8007142:	4628      	mov	r0, r5
 8007144:	47b8      	blx	r7
 8007146:	3001      	adds	r0, #1
 8007148:	d12c      	bne.n	80071a4 <_printf_float+0x250>
 800714a:	e764      	b.n	8007016 <_printf_float+0xc2>
 800714c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007150:	f240 80e0 	bls.w	8007314 <_printf_float+0x3c0>
 8007154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007158:	2200      	movs	r2, #0
 800715a:	2300      	movs	r3, #0
 800715c:	f7f9 fcb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007160:	2800      	cmp	r0, #0
 8007162:	d034      	beq.n	80071ce <_printf_float+0x27a>
 8007164:	4a37      	ldr	r2, [pc, #220]	; (8007244 <_printf_float+0x2f0>)
 8007166:	2301      	movs	r3, #1
 8007168:	4631      	mov	r1, r6
 800716a:	4628      	mov	r0, r5
 800716c:	47b8      	blx	r7
 800716e:	3001      	adds	r0, #1
 8007170:	f43f af51 	beq.w	8007016 <_printf_float+0xc2>
 8007174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007178:	429a      	cmp	r2, r3
 800717a:	db02      	blt.n	8007182 <_printf_float+0x22e>
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	07d8      	lsls	r0, r3, #31
 8007180:	d510      	bpl.n	80071a4 <_printf_float+0x250>
 8007182:	ee18 3a10 	vmov	r3, s16
 8007186:	4652      	mov	r2, sl
 8007188:	4631      	mov	r1, r6
 800718a:	4628      	mov	r0, r5
 800718c:	47b8      	blx	r7
 800718e:	3001      	adds	r0, #1
 8007190:	f43f af41 	beq.w	8007016 <_printf_float+0xc2>
 8007194:	f04f 0800 	mov.w	r8, #0
 8007198:	f104 091a 	add.w	r9, r4, #26
 800719c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800719e:	3b01      	subs	r3, #1
 80071a0:	4543      	cmp	r3, r8
 80071a2:	dc09      	bgt.n	80071b8 <_printf_float+0x264>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	079b      	lsls	r3, r3, #30
 80071a8:	f100 8105 	bmi.w	80073b6 <_printf_float+0x462>
 80071ac:	68e0      	ldr	r0, [r4, #12]
 80071ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071b0:	4298      	cmp	r0, r3
 80071b2:	bfb8      	it	lt
 80071b4:	4618      	movlt	r0, r3
 80071b6:	e730      	b.n	800701a <_printf_float+0xc6>
 80071b8:	2301      	movs	r3, #1
 80071ba:	464a      	mov	r2, r9
 80071bc:	4631      	mov	r1, r6
 80071be:	4628      	mov	r0, r5
 80071c0:	47b8      	blx	r7
 80071c2:	3001      	adds	r0, #1
 80071c4:	f43f af27 	beq.w	8007016 <_printf_float+0xc2>
 80071c8:	f108 0801 	add.w	r8, r8, #1
 80071cc:	e7e6      	b.n	800719c <_printf_float+0x248>
 80071ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	dc39      	bgt.n	8007248 <_printf_float+0x2f4>
 80071d4:	4a1b      	ldr	r2, [pc, #108]	; (8007244 <_printf_float+0x2f0>)
 80071d6:	2301      	movs	r3, #1
 80071d8:	4631      	mov	r1, r6
 80071da:	4628      	mov	r0, r5
 80071dc:	47b8      	blx	r7
 80071de:	3001      	adds	r0, #1
 80071e0:	f43f af19 	beq.w	8007016 <_printf_float+0xc2>
 80071e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071e8:	4313      	orrs	r3, r2
 80071ea:	d102      	bne.n	80071f2 <_printf_float+0x29e>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	07d9      	lsls	r1, r3, #31
 80071f0:	d5d8      	bpl.n	80071a4 <_printf_float+0x250>
 80071f2:	ee18 3a10 	vmov	r3, s16
 80071f6:	4652      	mov	r2, sl
 80071f8:	4631      	mov	r1, r6
 80071fa:	4628      	mov	r0, r5
 80071fc:	47b8      	blx	r7
 80071fe:	3001      	adds	r0, #1
 8007200:	f43f af09 	beq.w	8007016 <_printf_float+0xc2>
 8007204:	f04f 0900 	mov.w	r9, #0
 8007208:	f104 0a1a 	add.w	sl, r4, #26
 800720c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720e:	425b      	negs	r3, r3
 8007210:	454b      	cmp	r3, r9
 8007212:	dc01      	bgt.n	8007218 <_printf_float+0x2c4>
 8007214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007216:	e792      	b.n	800713e <_printf_float+0x1ea>
 8007218:	2301      	movs	r3, #1
 800721a:	4652      	mov	r2, sl
 800721c:	4631      	mov	r1, r6
 800721e:	4628      	mov	r0, r5
 8007220:	47b8      	blx	r7
 8007222:	3001      	adds	r0, #1
 8007224:	f43f aef7 	beq.w	8007016 <_printf_float+0xc2>
 8007228:	f109 0901 	add.w	r9, r9, #1
 800722c:	e7ee      	b.n	800720c <_printf_float+0x2b8>
 800722e:	bf00      	nop
 8007230:	7fefffff 	.word	0x7fefffff
 8007234:	0800bd18 	.word	0x0800bd18
 8007238:	0800bd1c 	.word	0x0800bd1c
 800723c:	0800bd24 	.word	0x0800bd24
 8007240:	0800bd20 	.word	0x0800bd20
 8007244:	0800bd28 	.word	0x0800bd28
 8007248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800724a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800724c:	429a      	cmp	r2, r3
 800724e:	bfa8      	it	ge
 8007250:	461a      	movge	r2, r3
 8007252:	2a00      	cmp	r2, #0
 8007254:	4691      	mov	r9, r2
 8007256:	dc37      	bgt.n	80072c8 <_printf_float+0x374>
 8007258:	f04f 0b00 	mov.w	fp, #0
 800725c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007260:	f104 021a 	add.w	r2, r4, #26
 8007264:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007266:	9305      	str	r3, [sp, #20]
 8007268:	eba3 0309 	sub.w	r3, r3, r9
 800726c:	455b      	cmp	r3, fp
 800726e:	dc33      	bgt.n	80072d8 <_printf_float+0x384>
 8007270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007274:	429a      	cmp	r2, r3
 8007276:	db3b      	blt.n	80072f0 <_printf_float+0x39c>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	07da      	lsls	r2, r3, #31
 800727c:	d438      	bmi.n	80072f0 <_printf_float+0x39c>
 800727e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007280:	9a05      	ldr	r2, [sp, #20]
 8007282:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007284:	1a9a      	subs	r2, r3, r2
 8007286:	eba3 0901 	sub.w	r9, r3, r1
 800728a:	4591      	cmp	r9, r2
 800728c:	bfa8      	it	ge
 800728e:	4691      	movge	r9, r2
 8007290:	f1b9 0f00 	cmp.w	r9, #0
 8007294:	dc35      	bgt.n	8007302 <_printf_float+0x3ae>
 8007296:	f04f 0800 	mov.w	r8, #0
 800729a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800729e:	f104 0a1a 	add.w	sl, r4, #26
 80072a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072a6:	1a9b      	subs	r3, r3, r2
 80072a8:	eba3 0309 	sub.w	r3, r3, r9
 80072ac:	4543      	cmp	r3, r8
 80072ae:	f77f af79 	ble.w	80071a4 <_printf_float+0x250>
 80072b2:	2301      	movs	r3, #1
 80072b4:	4652      	mov	r2, sl
 80072b6:	4631      	mov	r1, r6
 80072b8:	4628      	mov	r0, r5
 80072ba:	47b8      	blx	r7
 80072bc:	3001      	adds	r0, #1
 80072be:	f43f aeaa 	beq.w	8007016 <_printf_float+0xc2>
 80072c2:	f108 0801 	add.w	r8, r8, #1
 80072c6:	e7ec      	b.n	80072a2 <_printf_float+0x34e>
 80072c8:	4613      	mov	r3, r2
 80072ca:	4631      	mov	r1, r6
 80072cc:	4642      	mov	r2, r8
 80072ce:	4628      	mov	r0, r5
 80072d0:	47b8      	blx	r7
 80072d2:	3001      	adds	r0, #1
 80072d4:	d1c0      	bne.n	8007258 <_printf_float+0x304>
 80072d6:	e69e      	b.n	8007016 <_printf_float+0xc2>
 80072d8:	2301      	movs	r3, #1
 80072da:	4631      	mov	r1, r6
 80072dc:	4628      	mov	r0, r5
 80072de:	9205      	str	r2, [sp, #20]
 80072e0:	47b8      	blx	r7
 80072e2:	3001      	adds	r0, #1
 80072e4:	f43f ae97 	beq.w	8007016 <_printf_float+0xc2>
 80072e8:	9a05      	ldr	r2, [sp, #20]
 80072ea:	f10b 0b01 	add.w	fp, fp, #1
 80072ee:	e7b9      	b.n	8007264 <_printf_float+0x310>
 80072f0:	ee18 3a10 	vmov	r3, s16
 80072f4:	4652      	mov	r2, sl
 80072f6:	4631      	mov	r1, r6
 80072f8:	4628      	mov	r0, r5
 80072fa:	47b8      	blx	r7
 80072fc:	3001      	adds	r0, #1
 80072fe:	d1be      	bne.n	800727e <_printf_float+0x32a>
 8007300:	e689      	b.n	8007016 <_printf_float+0xc2>
 8007302:	9a05      	ldr	r2, [sp, #20]
 8007304:	464b      	mov	r3, r9
 8007306:	4442      	add	r2, r8
 8007308:	4631      	mov	r1, r6
 800730a:	4628      	mov	r0, r5
 800730c:	47b8      	blx	r7
 800730e:	3001      	adds	r0, #1
 8007310:	d1c1      	bne.n	8007296 <_printf_float+0x342>
 8007312:	e680      	b.n	8007016 <_printf_float+0xc2>
 8007314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007316:	2a01      	cmp	r2, #1
 8007318:	dc01      	bgt.n	800731e <_printf_float+0x3ca>
 800731a:	07db      	lsls	r3, r3, #31
 800731c:	d538      	bpl.n	8007390 <_printf_float+0x43c>
 800731e:	2301      	movs	r3, #1
 8007320:	4642      	mov	r2, r8
 8007322:	4631      	mov	r1, r6
 8007324:	4628      	mov	r0, r5
 8007326:	47b8      	blx	r7
 8007328:	3001      	adds	r0, #1
 800732a:	f43f ae74 	beq.w	8007016 <_printf_float+0xc2>
 800732e:	ee18 3a10 	vmov	r3, s16
 8007332:	4652      	mov	r2, sl
 8007334:	4631      	mov	r1, r6
 8007336:	4628      	mov	r0, r5
 8007338:	47b8      	blx	r7
 800733a:	3001      	adds	r0, #1
 800733c:	f43f ae6b 	beq.w	8007016 <_printf_float+0xc2>
 8007340:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007344:	2200      	movs	r2, #0
 8007346:	2300      	movs	r3, #0
 8007348:	f7f9 fbbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800734c:	b9d8      	cbnz	r0, 8007386 <_printf_float+0x432>
 800734e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007350:	f108 0201 	add.w	r2, r8, #1
 8007354:	3b01      	subs	r3, #1
 8007356:	4631      	mov	r1, r6
 8007358:	4628      	mov	r0, r5
 800735a:	47b8      	blx	r7
 800735c:	3001      	adds	r0, #1
 800735e:	d10e      	bne.n	800737e <_printf_float+0x42a>
 8007360:	e659      	b.n	8007016 <_printf_float+0xc2>
 8007362:	2301      	movs	r3, #1
 8007364:	4652      	mov	r2, sl
 8007366:	4631      	mov	r1, r6
 8007368:	4628      	mov	r0, r5
 800736a:	47b8      	blx	r7
 800736c:	3001      	adds	r0, #1
 800736e:	f43f ae52 	beq.w	8007016 <_printf_float+0xc2>
 8007372:	f108 0801 	add.w	r8, r8, #1
 8007376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007378:	3b01      	subs	r3, #1
 800737a:	4543      	cmp	r3, r8
 800737c:	dcf1      	bgt.n	8007362 <_printf_float+0x40e>
 800737e:	464b      	mov	r3, r9
 8007380:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007384:	e6dc      	b.n	8007140 <_printf_float+0x1ec>
 8007386:	f04f 0800 	mov.w	r8, #0
 800738a:	f104 0a1a 	add.w	sl, r4, #26
 800738e:	e7f2      	b.n	8007376 <_printf_float+0x422>
 8007390:	2301      	movs	r3, #1
 8007392:	4642      	mov	r2, r8
 8007394:	e7df      	b.n	8007356 <_printf_float+0x402>
 8007396:	2301      	movs	r3, #1
 8007398:	464a      	mov	r2, r9
 800739a:	4631      	mov	r1, r6
 800739c:	4628      	mov	r0, r5
 800739e:	47b8      	blx	r7
 80073a0:	3001      	adds	r0, #1
 80073a2:	f43f ae38 	beq.w	8007016 <_printf_float+0xc2>
 80073a6:	f108 0801 	add.w	r8, r8, #1
 80073aa:	68e3      	ldr	r3, [r4, #12]
 80073ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073ae:	1a5b      	subs	r3, r3, r1
 80073b0:	4543      	cmp	r3, r8
 80073b2:	dcf0      	bgt.n	8007396 <_printf_float+0x442>
 80073b4:	e6fa      	b.n	80071ac <_printf_float+0x258>
 80073b6:	f04f 0800 	mov.w	r8, #0
 80073ba:	f104 0919 	add.w	r9, r4, #25
 80073be:	e7f4      	b.n	80073aa <_printf_float+0x456>

080073c0 <_printf_common>:
 80073c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c4:	4616      	mov	r6, r2
 80073c6:	4699      	mov	r9, r3
 80073c8:	688a      	ldr	r2, [r1, #8]
 80073ca:	690b      	ldr	r3, [r1, #16]
 80073cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073d0:	4293      	cmp	r3, r2
 80073d2:	bfb8      	it	lt
 80073d4:	4613      	movlt	r3, r2
 80073d6:	6033      	str	r3, [r6, #0]
 80073d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073dc:	4607      	mov	r7, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	b10a      	cbz	r2, 80073e6 <_printf_common+0x26>
 80073e2:	3301      	adds	r3, #1
 80073e4:	6033      	str	r3, [r6, #0]
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	0699      	lsls	r1, r3, #26
 80073ea:	bf42      	ittt	mi
 80073ec:	6833      	ldrmi	r3, [r6, #0]
 80073ee:	3302      	addmi	r3, #2
 80073f0:	6033      	strmi	r3, [r6, #0]
 80073f2:	6825      	ldr	r5, [r4, #0]
 80073f4:	f015 0506 	ands.w	r5, r5, #6
 80073f8:	d106      	bne.n	8007408 <_printf_common+0x48>
 80073fa:	f104 0a19 	add.w	sl, r4, #25
 80073fe:	68e3      	ldr	r3, [r4, #12]
 8007400:	6832      	ldr	r2, [r6, #0]
 8007402:	1a9b      	subs	r3, r3, r2
 8007404:	42ab      	cmp	r3, r5
 8007406:	dc26      	bgt.n	8007456 <_printf_common+0x96>
 8007408:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800740c:	1e13      	subs	r3, r2, #0
 800740e:	6822      	ldr	r2, [r4, #0]
 8007410:	bf18      	it	ne
 8007412:	2301      	movne	r3, #1
 8007414:	0692      	lsls	r2, r2, #26
 8007416:	d42b      	bmi.n	8007470 <_printf_common+0xb0>
 8007418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800741c:	4649      	mov	r1, r9
 800741e:	4638      	mov	r0, r7
 8007420:	47c0      	blx	r8
 8007422:	3001      	adds	r0, #1
 8007424:	d01e      	beq.n	8007464 <_printf_common+0xa4>
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	68e5      	ldr	r5, [r4, #12]
 800742a:	6832      	ldr	r2, [r6, #0]
 800742c:	f003 0306 	and.w	r3, r3, #6
 8007430:	2b04      	cmp	r3, #4
 8007432:	bf08      	it	eq
 8007434:	1aad      	subeq	r5, r5, r2
 8007436:	68a3      	ldr	r3, [r4, #8]
 8007438:	6922      	ldr	r2, [r4, #16]
 800743a:	bf0c      	ite	eq
 800743c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007440:	2500      	movne	r5, #0
 8007442:	4293      	cmp	r3, r2
 8007444:	bfc4      	itt	gt
 8007446:	1a9b      	subgt	r3, r3, r2
 8007448:	18ed      	addgt	r5, r5, r3
 800744a:	2600      	movs	r6, #0
 800744c:	341a      	adds	r4, #26
 800744e:	42b5      	cmp	r5, r6
 8007450:	d11a      	bne.n	8007488 <_printf_common+0xc8>
 8007452:	2000      	movs	r0, #0
 8007454:	e008      	b.n	8007468 <_printf_common+0xa8>
 8007456:	2301      	movs	r3, #1
 8007458:	4652      	mov	r2, sl
 800745a:	4649      	mov	r1, r9
 800745c:	4638      	mov	r0, r7
 800745e:	47c0      	blx	r8
 8007460:	3001      	adds	r0, #1
 8007462:	d103      	bne.n	800746c <_printf_common+0xac>
 8007464:	f04f 30ff 	mov.w	r0, #4294967295
 8007468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800746c:	3501      	adds	r5, #1
 800746e:	e7c6      	b.n	80073fe <_printf_common+0x3e>
 8007470:	18e1      	adds	r1, r4, r3
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	2030      	movs	r0, #48	; 0x30
 8007476:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800747a:	4422      	add	r2, r4
 800747c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007480:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007484:	3302      	adds	r3, #2
 8007486:	e7c7      	b.n	8007418 <_printf_common+0x58>
 8007488:	2301      	movs	r3, #1
 800748a:	4622      	mov	r2, r4
 800748c:	4649      	mov	r1, r9
 800748e:	4638      	mov	r0, r7
 8007490:	47c0      	blx	r8
 8007492:	3001      	adds	r0, #1
 8007494:	d0e6      	beq.n	8007464 <_printf_common+0xa4>
 8007496:	3601      	adds	r6, #1
 8007498:	e7d9      	b.n	800744e <_printf_common+0x8e>
	...

0800749c <_printf_i>:
 800749c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074a0:	7e0f      	ldrb	r7, [r1, #24]
 80074a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074a4:	2f78      	cmp	r7, #120	; 0x78
 80074a6:	4691      	mov	r9, r2
 80074a8:	4680      	mov	r8, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	469a      	mov	sl, r3
 80074ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074b2:	d807      	bhi.n	80074c4 <_printf_i+0x28>
 80074b4:	2f62      	cmp	r7, #98	; 0x62
 80074b6:	d80a      	bhi.n	80074ce <_printf_i+0x32>
 80074b8:	2f00      	cmp	r7, #0
 80074ba:	f000 80d8 	beq.w	800766e <_printf_i+0x1d2>
 80074be:	2f58      	cmp	r7, #88	; 0x58
 80074c0:	f000 80a3 	beq.w	800760a <_printf_i+0x16e>
 80074c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074cc:	e03a      	b.n	8007544 <_printf_i+0xa8>
 80074ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074d2:	2b15      	cmp	r3, #21
 80074d4:	d8f6      	bhi.n	80074c4 <_printf_i+0x28>
 80074d6:	a101      	add	r1, pc, #4	; (adr r1, 80074dc <_printf_i+0x40>)
 80074d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074dc:	08007535 	.word	0x08007535
 80074e0:	08007549 	.word	0x08007549
 80074e4:	080074c5 	.word	0x080074c5
 80074e8:	080074c5 	.word	0x080074c5
 80074ec:	080074c5 	.word	0x080074c5
 80074f0:	080074c5 	.word	0x080074c5
 80074f4:	08007549 	.word	0x08007549
 80074f8:	080074c5 	.word	0x080074c5
 80074fc:	080074c5 	.word	0x080074c5
 8007500:	080074c5 	.word	0x080074c5
 8007504:	080074c5 	.word	0x080074c5
 8007508:	08007655 	.word	0x08007655
 800750c:	08007579 	.word	0x08007579
 8007510:	08007637 	.word	0x08007637
 8007514:	080074c5 	.word	0x080074c5
 8007518:	080074c5 	.word	0x080074c5
 800751c:	08007677 	.word	0x08007677
 8007520:	080074c5 	.word	0x080074c5
 8007524:	08007579 	.word	0x08007579
 8007528:	080074c5 	.word	0x080074c5
 800752c:	080074c5 	.word	0x080074c5
 8007530:	0800763f 	.word	0x0800763f
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	1d1a      	adds	r2, r3, #4
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	602a      	str	r2, [r5, #0]
 800753c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007544:	2301      	movs	r3, #1
 8007546:	e0a3      	b.n	8007690 <_printf_i+0x1f4>
 8007548:	6820      	ldr	r0, [r4, #0]
 800754a:	6829      	ldr	r1, [r5, #0]
 800754c:	0606      	lsls	r6, r0, #24
 800754e:	f101 0304 	add.w	r3, r1, #4
 8007552:	d50a      	bpl.n	800756a <_printf_i+0xce>
 8007554:	680e      	ldr	r6, [r1, #0]
 8007556:	602b      	str	r3, [r5, #0]
 8007558:	2e00      	cmp	r6, #0
 800755a:	da03      	bge.n	8007564 <_printf_i+0xc8>
 800755c:	232d      	movs	r3, #45	; 0x2d
 800755e:	4276      	negs	r6, r6
 8007560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007564:	485e      	ldr	r0, [pc, #376]	; (80076e0 <_printf_i+0x244>)
 8007566:	230a      	movs	r3, #10
 8007568:	e019      	b.n	800759e <_printf_i+0x102>
 800756a:	680e      	ldr	r6, [r1, #0]
 800756c:	602b      	str	r3, [r5, #0]
 800756e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007572:	bf18      	it	ne
 8007574:	b236      	sxthne	r6, r6
 8007576:	e7ef      	b.n	8007558 <_printf_i+0xbc>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	6820      	ldr	r0, [r4, #0]
 800757c:	1d19      	adds	r1, r3, #4
 800757e:	6029      	str	r1, [r5, #0]
 8007580:	0601      	lsls	r1, r0, #24
 8007582:	d501      	bpl.n	8007588 <_printf_i+0xec>
 8007584:	681e      	ldr	r6, [r3, #0]
 8007586:	e002      	b.n	800758e <_printf_i+0xf2>
 8007588:	0646      	lsls	r6, r0, #25
 800758a:	d5fb      	bpl.n	8007584 <_printf_i+0xe8>
 800758c:	881e      	ldrh	r6, [r3, #0]
 800758e:	4854      	ldr	r0, [pc, #336]	; (80076e0 <_printf_i+0x244>)
 8007590:	2f6f      	cmp	r7, #111	; 0x6f
 8007592:	bf0c      	ite	eq
 8007594:	2308      	moveq	r3, #8
 8007596:	230a      	movne	r3, #10
 8007598:	2100      	movs	r1, #0
 800759a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800759e:	6865      	ldr	r5, [r4, #4]
 80075a0:	60a5      	str	r5, [r4, #8]
 80075a2:	2d00      	cmp	r5, #0
 80075a4:	bfa2      	ittt	ge
 80075a6:	6821      	ldrge	r1, [r4, #0]
 80075a8:	f021 0104 	bicge.w	r1, r1, #4
 80075ac:	6021      	strge	r1, [r4, #0]
 80075ae:	b90e      	cbnz	r6, 80075b4 <_printf_i+0x118>
 80075b0:	2d00      	cmp	r5, #0
 80075b2:	d04d      	beq.n	8007650 <_printf_i+0x1b4>
 80075b4:	4615      	mov	r5, r2
 80075b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80075ba:	fb03 6711 	mls	r7, r3, r1, r6
 80075be:	5dc7      	ldrb	r7, [r0, r7]
 80075c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075c4:	4637      	mov	r7, r6
 80075c6:	42bb      	cmp	r3, r7
 80075c8:	460e      	mov	r6, r1
 80075ca:	d9f4      	bls.n	80075b6 <_printf_i+0x11a>
 80075cc:	2b08      	cmp	r3, #8
 80075ce:	d10b      	bne.n	80075e8 <_printf_i+0x14c>
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	07de      	lsls	r6, r3, #31
 80075d4:	d508      	bpl.n	80075e8 <_printf_i+0x14c>
 80075d6:	6923      	ldr	r3, [r4, #16]
 80075d8:	6861      	ldr	r1, [r4, #4]
 80075da:	4299      	cmp	r1, r3
 80075dc:	bfde      	ittt	le
 80075de:	2330      	movle	r3, #48	; 0x30
 80075e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075e8:	1b52      	subs	r2, r2, r5
 80075ea:	6122      	str	r2, [r4, #16]
 80075ec:	f8cd a000 	str.w	sl, [sp]
 80075f0:	464b      	mov	r3, r9
 80075f2:	aa03      	add	r2, sp, #12
 80075f4:	4621      	mov	r1, r4
 80075f6:	4640      	mov	r0, r8
 80075f8:	f7ff fee2 	bl	80073c0 <_printf_common>
 80075fc:	3001      	adds	r0, #1
 80075fe:	d14c      	bne.n	800769a <_printf_i+0x1fe>
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	b004      	add	sp, #16
 8007606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760a:	4835      	ldr	r0, [pc, #212]	; (80076e0 <_printf_i+0x244>)
 800760c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007610:	6829      	ldr	r1, [r5, #0]
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	f851 6b04 	ldr.w	r6, [r1], #4
 8007618:	6029      	str	r1, [r5, #0]
 800761a:	061d      	lsls	r5, r3, #24
 800761c:	d514      	bpl.n	8007648 <_printf_i+0x1ac>
 800761e:	07df      	lsls	r7, r3, #31
 8007620:	bf44      	itt	mi
 8007622:	f043 0320 	orrmi.w	r3, r3, #32
 8007626:	6023      	strmi	r3, [r4, #0]
 8007628:	b91e      	cbnz	r6, 8007632 <_printf_i+0x196>
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	f023 0320 	bic.w	r3, r3, #32
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	2310      	movs	r3, #16
 8007634:	e7b0      	b.n	8007598 <_printf_i+0xfc>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	f043 0320 	orr.w	r3, r3, #32
 800763c:	6023      	str	r3, [r4, #0]
 800763e:	2378      	movs	r3, #120	; 0x78
 8007640:	4828      	ldr	r0, [pc, #160]	; (80076e4 <_printf_i+0x248>)
 8007642:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007646:	e7e3      	b.n	8007610 <_printf_i+0x174>
 8007648:	0659      	lsls	r1, r3, #25
 800764a:	bf48      	it	mi
 800764c:	b2b6      	uxthmi	r6, r6
 800764e:	e7e6      	b.n	800761e <_printf_i+0x182>
 8007650:	4615      	mov	r5, r2
 8007652:	e7bb      	b.n	80075cc <_printf_i+0x130>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	6826      	ldr	r6, [r4, #0]
 8007658:	6961      	ldr	r1, [r4, #20]
 800765a:	1d18      	adds	r0, r3, #4
 800765c:	6028      	str	r0, [r5, #0]
 800765e:	0635      	lsls	r5, r6, #24
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	d501      	bpl.n	8007668 <_printf_i+0x1cc>
 8007664:	6019      	str	r1, [r3, #0]
 8007666:	e002      	b.n	800766e <_printf_i+0x1d2>
 8007668:	0670      	lsls	r0, r6, #25
 800766a:	d5fb      	bpl.n	8007664 <_printf_i+0x1c8>
 800766c:	8019      	strh	r1, [r3, #0]
 800766e:	2300      	movs	r3, #0
 8007670:	6123      	str	r3, [r4, #16]
 8007672:	4615      	mov	r5, r2
 8007674:	e7ba      	b.n	80075ec <_printf_i+0x150>
 8007676:	682b      	ldr	r3, [r5, #0]
 8007678:	1d1a      	adds	r2, r3, #4
 800767a:	602a      	str	r2, [r5, #0]
 800767c:	681d      	ldr	r5, [r3, #0]
 800767e:	6862      	ldr	r2, [r4, #4]
 8007680:	2100      	movs	r1, #0
 8007682:	4628      	mov	r0, r5
 8007684:	f7f8 fdac 	bl	80001e0 <memchr>
 8007688:	b108      	cbz	r0, 800768e <_printf_i+0x1f2>
 800768a:	1b40      	subs	r0, r0, r5
 800768c:	6060      	str	r0, [r4, #4]
 800768e:	6863      	ldr	r3, [r4, #4]
 8007690:	6123      	str	r3, [r4, #16]
 8007692:	2300      	movs	r3, #0
 8007694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007698:	e7a8      	b.n	80075ec <_printf_i+0x150>
 800769a:	6923      	ldr	r3, [r4, #16]
 800769c:	462a      	mov	r2, r5
 800769e:	4649      	mov	r1, r9
 80076a0:	4640      	mov	r0, r8
 80076a2:	47d0      	blx	sl
 80076a4:	3001      	adds	r0, #1
 80076a6:	d0ab      	beq.n	8007600 <_printf_i+0x164>
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	079b      	lsls	r3, r3, #30
 80076ac:	d413      	bmi.n	80076d6 <_printf_i+0x23a>
 80076ae:	68e0      	ldr	r0, [r4, #12]
 80076b0:	9b03      	ldr	r3, [sp, #12]
 80076b2:	4298      	cmp	r0, r3
 80076b4:	bfb8      	it	lt
 80076b6:	4618      	movlt	r0, r3
 80076b8:	e7a4      	b.n	8007604 <_printf_i+0x168>
 80076ba:	2301      	movs	r3, #1
 80076bc:	4632      	mov	r2, r6
 80076be:	4649      	mov	r1, r9
 80076c0:	4640      	mov	r0, r8
 80076c2:	47d0      	blx	sl
 80076c4:	3001      	adds	r0, #1
 80076c6:	d09b      	beq.n	8007600 <_printf_i+0x164>
 80076c8:	3501      	adds	r5, #1
 80076ca:	68e3      	ldr	r3, [r4, #12]
 80076cc:	9903      	ldr	r1, [sp, #12]
 80076ce:	1a5b      	subs	r3, r3, r1
 80076d0:	42ab      	cmp	r3, r5
 80076d2:	dcf2      	bgt.n	80076ba <_printf_i+0x21e>
 80076d4:	e7eb      	b.n	80076ae <_printf_i+0x212>
 80076d6:	2500      	movs	r5, #0
 80076d8:	f104 0619 	add.w	r6, r4, #25
 80076dc:	e7f5      	b.n	80076ca <_printf_i+0x22e>
 80076de:	bf00      	nop
 80076e0:	0800bd2a 	.word	0x0800bd2a
 80076e4:	0800bd3b 	.word	0x0800bd3b

080076e8 <siprintf>:
 80076e8:	b40e      	push	{r1, r2, r3}
 80076ea:	b500      	push	{lr}
 80076ec:	b09c      	sub	sp, #112	; 0x70
 80076ee:	ab1d      	add	r3, sp, #116	; 0x74
 80076f0:	9002      	str	r0, [sp, #8]
 80076f2:	9006      	str	r0, [sp, #24]
 80076f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076f8:	4809      	ldr	r0, [pc, #36]	; (8007720 <siprintf+0x38>)
 80076fa:	9107      	str	r1, [sp, #28]
 80076fc:	9104      	str	r1, [sp, #16]
 80076fe:	4909      	ldr	r1, [pc, #36]	; (8007724 <siprintf+0x3c>)
 8007700:	f853 2b04 	ldr.w	r2, [r3], #4
 8007704:	9105      	str	r1, [sp, #20]
 8007706:	6800      	ldr	r0, [r0, #0]
 8007708:	9301      	str	r3, [sp, #4]
 800770a:	a902      	add	r1, sp, #8
 800770c:	f001 fb76 	bl	8008dfc <_svfiprintf_r>
 8007710:	9b02      	ldr	r3, [sp, #8]
 8007712:	2200      	movs	r2, #0
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	b01c      	add	sp, #112	; 0x70
 8007718:	f85d eb04 	ldr.w	lr, [sp], #4
 800771c:	b003      	add	sp, #12
 800771e:	4770      	bx	lr
 8007720:	20000240 	.word	0x20000240
 8007724:	ffff0208 	.word	0xffff0208

08007728 <quorem>:
 8007728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	6903      	ldr	r3, [r0, #16]
 800772e:	690c      	ldr	r4, [r1, #16]
 8007730:	42a3      	cmp	r3, r4
 8007732:	4607      	mov	r7, r0
 8007734:	f2c0 8081 	blt.w	800783a <quorem+0x112>
 8007738:	3c01      	subs	r4, #1
 800773a:	f101 0814 	add.w	r8, r1, #20
 800773e:	f100 0514 	add.w	r5, r0, #20
 8007742:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800774c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007750:	3301      	adds	r3, #1
 8007752:	429a      	cmp	r2, r3
 8007754:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007758:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800775c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007760:	d331      	bcc.n	80077c6 <quorem+0x9e>
 8007762:	f04f 0e00 	mov.w	lr, #0
 8007766:	4640      	mov	r0, r8
 8007768:	46ac      	mov	ip, r5
 800776a:	46f2      	mov	sl, lr
 800776c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007770:	b293      	uxth	r3, r2
 8007772:	fb06 e303 	mla	r3, r6, r3, lr
 8007776:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800777a:	b29b      	uxth	r3, r3
 800777c:	ebaa 0303 	sub.w	r3, sl, r3
 8007780:	f8dc a000 	ldr.w	sl, [ip]
 8007784:	0c12      	lsrs	r2, r2, #16
 8007786:	fa13 f38a 	uxtah	r3, r3, sl
 800778a:	fb06 e202 	mla	r2, r6, r2, lr
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	9b00      	ldr	r3, [sp, #0]
 8007792:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007796:	b292      	uxth	r2, r2
 8007798:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800779c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80077a4:	4581      	cmp	r9, r0
 80077a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077aa:	f84c 3b04 	str.w	r3, [ip], #4
 80077ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077b2:	d2db      	bcs.n	800776c <quorem+0x44>
 80077b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80077b8:	b92b      	cbnz	r3, 80077c6 <quorem+0x9e>
 80077ba:	9b01      	ldr	r3, [sp, #4]
 80077bc:	3b04      	subs	r3, #4
 80077be:	429d      	cmp	r5, r3
 80077c0:	461a      	mov	r2, r3
 80077c2:	d32e      	bcc.n	8007822 <quorem+0xfa>
 80077c4:	613c      	str	r4, [r7, #16]
 80077c6:	4638      	mov	r0, r7
 80077c8:	f001 f8c4 	bl	8008954 <__mcmp>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	db24      	blt.n	800781a <quorem+0xf2>
 80077d0:	3601      	adds	r6, #1
 80077d2:	4628      	mov	r0, r5
 80077d4:	f04f 0c00 	mov.w	ip, #0
 80077d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80077dc:	f8d0 e000 	ldr.w	lr, [r0]
 80077e0:	b293      	uxth	r3, r2
 80077e2:	ebac 0303 	sub.w	r3, ip, r3
 80077e6:	0c12      	lsrs	r2, r2, #16
 80077e8:	fa13 f38e 	uxtah	r3, r3, lr
 80077ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077fa:	45c1      	cmp	r9, r8
 80077fc:	f840 3b04 	str.w	r3, [r0], #4
 8007800:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007804:	d2e8      	bcs.n	80077d8 <quorem+0xb0>
 8007806:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800780a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800780e:	b922      	cbnz	r2, 800781a <quorem+0xf2>
 8007810:	3b04      	subs	r3, #4
 8007812:	429d      	cmp	r5, r3
 8007814:	461a      	mov	r2, r3
 8007816:	d30a      	bcc.n	800782e <quorem+0x106>
 8007818:	613c      	str	r4, [r7, #16]
 800781a:	4630      	mov	r0, r6
 800781c:	b003      	add	sp, #12
 800781e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007822:	6812      	ldr	r2, [r2, #0]
 8007824:	3b04      	subs	r3, #4
 8007826:	2a00      	cmp	r2, #0
 8007828:	d1cc      	bne.n	80077c4 <quorem+0x9c>
 800782a:	3c01      	subs	r4, #1
 800782c:	e7c7      	b.n	80077be <quorem+0x96>
 800782e:	6812      	ldr	r2, [r2, #0]
 8007830:	3b04      	subs	r3, #4
 8007832:	2a00      	cmp	r2, #0
 8007834:	d1f0      	bne.n	8007818 <quorem+0xf0>
 8007836:	3c01      	subs	r4, #1
 8007838:	e7eb      	b.n	8007812 <quorem+0xea>
 800783a:	2000      	movs	r0, #0
 800783c:	e7ee      	b.n	800781c <quorem+0xf4>
	...

08007840 <_dtoa_r>:
 8007840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	ed2d 8b04 	vpush	{d8-d9}
 8007848:	ec57 6b10 	vmov	r6, r7, d0
 800784c:	b093      	sub	sp, #76	; 0x4c
 800784e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007850:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007854:	9106      	str	r1, [sp, #24]
 8007856:	ee10 aa10 	vmov	sl, s0
 800785a:	4604      	mov	r4, r0
 800785c:	9209      	str	r2, [sp, #36]	; 0x24
 800785e:	930c      	str	r3, [sp, #48]	; 0x30
 8007860:	46bb      	mov	fp, r7
 8007862:	b975      	cbnz	r5, 8007882 <_dtoa_r+0x42>
 8007864:	2010      	movs	r0, #16
 8007866:	f000 fddd 	bl	8008424 <malloc>
 800786a:	4602      	mov	r2, r0
 800786c:	6260      	str	r0, [r4, #36]	; 0x24
 800786e:	b920      	cbnz	r0, 800787a <_dtoa_r+0x3a>
 8007870:	4ba7      	ldr	r3, [pc, #668]	; (8007b10 <_dtoa_r+0x2d0>)
 8007872:	21ea      	movs	r1, #234	; 0xea
 8007874:	48a7      	ldr	r0, [pc, #668]	; (8007b14 <_dtoa_r+0x2d4>)
 8007876:	f001 fbd1 	bl	800901c <__assert_func>
 800787a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800787e:	6005      	str	r5, [r0, #0]
 8007880:	60c5      	str	r5, [r0, #12]
 8007882:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007884:	6819      	ldr	r1, [r3, #0]
 8007886:	b151      	cbz	r1, 800789e <_dtoa_r+0x5e>
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	604a      	str	r2, [r1, #4]
 800788c:	2301      	movs	r3, #1
 800788e:	4093      	lsls	r3, r2
 8007890:	608b      	str	r3, [r1, #8]
 8007892:	4620      	mov	r0, r4
 8007894:	f000 fe1c 	bl	80084d0 <_Bfree>
 8007898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	1e3b      	subs	r3, r7, #0
 80078a0:	bfaa      	itet	ge
 80078a2:	2300      	movge	r3, #0
 80078a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80078a8:	f8c8 3000 	strge.w	r3, [r8]
 80078ac:	4b9a      	ldr	r3, [pc, #616]	; (8007b18 <_dtoa_r+0x2d8>)
 80078ae:	bfbc      	itt	lt
 80078b0:	2201      	movlt	r2, #1
 80078b2:	f8c8 2000 	strlt.w	r2, [r8]
 80078b6:	ea33 030b 	bics.w	r3, r3, fp
 80078ba:	d11b      	bne.n	80078f4 <_dtoa_r+0xb4>
 80078bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078be:	f242 730f 	movw	r3, #9999	; 0x270f
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078c8:	4333      	orrs	r3, r6
 80078ca:	f000 8592 	beq.w	80083f2 <_dtoa_r+0xbb2>
 80078ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078d0:	b963      	cbnz	r3, 80078ec <_dtoa_r+0xac>
 80078d2:	4b92      	ldr	r3, [pc, #584]	; (8007b1c <_dtoa_r+0x2dc>)
 80078d4:	e022      	b.n	800791c <_dtoa_r+0xdc>
 80078d6:	4b92      	ldr	r3, [pc, #584]	; (8007b20 <_dtoa_r+0x2e0>)
 80078d8:	9301      	str	r3, [sp, #4]
 80078da:	3308      	adds	r3, #8
 80078dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	9801      	ldr	r0, [sp, #4]
 80078e2:	b013      	add	sp, #76	; 0x4c
 80078e4:	ecbd 8b04 	vpop	{d8-d9}
 80078e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ec:	4b8b      	ldr	r3, [pc, #556]	; (8007b1c <_dtoa_r+0x2dc>)
 80078ee:	9301      	str	r3, [sp, #4]
 80078f0:	3303      	adds	r3, #3
 80078f2:	e7f3      	b.n	80078dc <_dtoa_r+0x9c>
 80078f4:	2200      	movs	r2, #0
 80078f6:	2300      	movs	r3, #0
 80078f8:	4650      	mov	r0, sl
 80078fa:	4659      	mov	r1, fp
 80078fc:	f7f9 f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007900:	ec4b ab19 	vmov	d9, sl, fp
 8007904:	4680      	mov	r8, r0
 8007906:	b158      	cbz	r0, 8007920 <_dtoa_r+0xe0>
 8007908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800790a:	2301      	movs	r3, #1
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 856b 	beq.w	80083ec <_dtoa_r+0xbac>
 8007916:	4883      	ldr	r0, [pc, #524]	; (8007b24 <_dtoa_r+0x2e4>)
 8007918:	6018      	str	r0, [r3, #0]
 800791a:	1e43      	subs	r3, r0, #1
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	e7df      	b.n	80078e0 <_dtoa_r+0xa0>
 8007920:	ec4b ab10 	vmov	d0, sl, fp
 8007924:	aa10      	add	r2, sp, #64	; 0x40
 8007926:	a911      	add	r1, sp, #68	; 0x44
 8007928:	4620      	mov	r0, r4
 800792a:	f001 f8b9 	bl	8008aa0 <__d2b>
 800792e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007932:	ee08 0a10 	vmov	s16, r0
 8007936:	2d00      	cmp	r5, #0
 8007938:	f000 8084 	beq.w	8007a44 <_dtoa_r+0x204>
 800793c:	ee19 3a90 	vmov	r3, s19
 8007940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007944:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007948:	4656      	mov	r6, sl
 800794a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800794e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007952:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007956:	4b74      	ldr	r3, [pc, #464]	; (8007b28 <_dtoa_r+0x2e8>)
 8007958:	2200      	movs	r2, #0
 800795a:	4630      	mov	r0, r6
 800795c:	4639      	mov	r1, r7
 800795e:	f7f8 fc93 	bl	8000288 <__aeabi_dsub>
 8007962:	a365      	add	r3, pc, #404	; (adr r3, 8007af8 <_dtoa_r+0x2b8>)
 8007964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007968:	f7f8 fe46 	bl	80005f8 <__aeabi_dmul>
 800796c:	a364      	add	r3, pc, #400	; (adr r3, 8007b00 <_dtoa_r+0x2c0>)
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f7f8 fc8b 	bl	800028c <__adddf3>
 8007976:	4606      	mov	r6, r0
 8007978:	4628      	mov	r0, r5
 800797a:	460f      	mov	r7, r1
 800797c:	f7f8 fdd2 	bl	8000524 <__aeabi_i2d>
 8007980:	a361      	add	r3, pc, #388	; (adr r3, 8007b08 <_dtoa_r+0x2c8>)
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f7f8 fe37 	bl	80005f8 <__aeabi_dmul>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4630      	mov	r0, r6
 8007990:	4639      	mov	r1, r7
 8007992:	f7f8 fc7b 	bl	800028c <__adddf3>
 8007996:	4606      	mov	r6, r0
 8007998:	460f      	mov	r7, r1
 800799a:	f7f9 f8dd 	bl	8000b58 <__aeabi_d2iz>
 800799e:	2200      	movs	r2, #0
 80079a0:	9000      	str	r0, [sp, #0]
 80079a2:	2300      	movs	r3, #0
 80079a4:	4630      	mov	r0, r6
 80079a6:	4639      	mov	r1, r7
 80079a8:	f7f9 f898 	bl	8000adc <__aeabi_dcmplt>
 80079ac:	b150      	cbz	r0, 80079c4 <_dtoa_r+0x184>
 80079ae:	9800      	ldr	r0, [sp, #0]
 80079b0:	f7f8 fdb8 	bl	8000524 <__aeabi_i2d>
 80079b4:	4632      	mov	r2, r6
 80079b6:	463b      	mov	r3, r7
 80079b8:	f7f9 f886 	bl	8000ac8 <__aeabi_dcmpeq>
 80079bc:	b910      	cbnz	r0, 80079c4 <_dtoa_r+0x184>
 80079be:	9b00      	ldr	r3, [sp, #0]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	9b00      	ldr	r3, [sp, #0]
 80079c6:	2b16      	cmp	r3, #22
 80079c8:	d85a      	bhi.n	8007a80 <_dtoa_r+0x240>
 80079ca:	9a00      	ldr	r2, [sp, #0]
 80079cc:	4b57      	ldr	r3, [pc, #348]	; (8007b2c <_dtoa_r+0x2ec>)
 80079ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d6:	ec51 0b19 	vmov	r0, r1, d9
 80079da:	f7f9 f87f 	bl	8000adc <__aeabi_dcmplt>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d050      	beq.n	8007a84 <_dtoa_r+0x244>
 80079e2:	9b00      	ldr	r3, [sp, #0]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	2300      	movs	r3, #0
 80079ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80079ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079ee:	1b5d      	subs	r5, r3, r5
 80079f0:	1e6b      	subs	r3, r5, #1
 80079f2:	9305      	str	r3, [sp, #20]
 80079f4:	bf45      	ittet	mi
 80079f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80079fa:	9304      	strmi	r3, [sp, #16]
 80079fc:	2300      	movpl	r3, #0
 80079fe:	2300      	movmi	r3, #0
 8007a00:	bf4c      	ite	mi
 8007a02:	9305      	strmi	r3, [sp, #20]
 8007a04:	9304      	strpl	r3, [sp, #16]
 8007a06:	9b00      	ldr	r3, [sp, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	db3d      	blt.n	8007a88 <_dtoa_r+0x248>
 8007a0c:	9b05      	ldr	r3, [sp, #20]
 8007a0e:	9a00      	ldr	r2, [sp, #0]
 8007a10:	920a      	str	r2, [sp, #40]	; 0x28
 8007a12:	4413      	add	r3, r2
 8007a14:	9305      	str	r3, [sp, #20]
 8007a16:	2300      	movs	r3, #0
 8007a18:	9307      	str	r3, [sp, #28]
 8007a1a:	9b06      	ldr	r3, [sp, #24]
 8007a1c:	2b09      	cmp	r3, #9
 8007a1e:	f200 8089 	bhi.w	8007b34 <_dtoa_r+0x2f4>
 8007a22:	2b05      	cmp	r3, #5
 8007a24:	bfc4      	itt	gt
 8007a26:	3b04      	subgt	r3, #4
 8007a28:	9306      	strgt	r3, [sp, #24]
 8007a2a:	9b06      	ldr	r3, [sp, #24]
 8007a2c:	f1a3 0302 	sub.w	r3, r3, #2
 8007a30:	bfcc      	ite	gt
 8007a32:	2500      	movgt	r5, #0
 8007a34:	2501      	movle	r5, #1
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	f200 8087 	bhi.w	8007b4a <_dtoa_r+0x30a>
 8007a3c:	e8df f003 	tbb	[pc, r3]
 8007a40:	59383a2d 	.word	0x59383a2d
 8007a44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007a48:	441d      	add	r5, r3
 8007a4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a4e:	2b20      	cmp	r3, #32
 8007a50:	bfc1      	itttt	gt
 8007a52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007a5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a62:	bfda      	itte	le
 8007a64:	f1c3 0320 	rsble	r3, r3, #32
 8007a68:	fa06 f003 	lslle.w	r0, r6, r3
 8007a6c:	4318      	orrgt	r0, r3
 8007a6e:	f7f8 fd49 	bl	8000504 <__aeabi_ui2d>
 8007a72:	2301      	movs	r3, #1
 8007a74:	4606      	mov	r6, r0
 8007a76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a7a:	3d01      	subs	r5, #1
 8007a7c:	930e      	str	r3, [sp, #56]	; 0x38
 8007a7e:	e76a      	b.n	8007956 <_dtoa_r+0x116>
 8007a80:	2301      	movs	r3, #1
 8007a82:	e7b2      	b.n	80079ea <_dtoa_r+0x1aa>
 8007a84:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a86:	e7b1      	b.n	80079ec <_dtoa_r+0x1ac>
 8007a88:	9b04      	ldr	r3, [sp, #16]
 8007a8a:	9a00      	ldr	r2, [sp, #0]
 8007a8c:	1a9b      	subs	r3, r3, r2
 8007a8e:	9304      	str	r3, [sp, #16]
 8007a90:	4253      	negs	r3, r2
 8007a92:	9307      	str	r3, [sp, #28]
 8007a94:	2300      	movs	r3, #0
 8007a96:	930a      	str	r3, [sp, #40]	; 0x28
 8007a98:	e7bf      	b.n	8007a1a <_dtoa_r+0x1da>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	9308      	str	r3, [sp, #32]
 8007a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dc55      	bgt.n	8007b50 <_dtoa_r+0x310>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	9209      	str	r2, [sp, #36]	; 0x24
 8007aae:	e00c      	b.n	8007aca <_dtoa_r+0x28a>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e7f3      	b.n	8007a9c <_dtoa_r+0x25c>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab8:	9308      	str	r3, [sp, #32]
 8007aba:	9b00      	ldr	r3, [sp, #0]
 8007abc:	4413      	add	r3, r2
 8007abe:	9302      	str	r3, [sp, #8]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	9303      	str	r3, [sp, #12]
 8007ac6:	bfb8      	it	lt
 8007ac8:	2301      	movlt	r3, #1
 8007aca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007acc:	2200      	movs	r2, #0
 8007ace:	6042      	str	r2, [r0, #4]
 8007ad0:	2204      	movs	r2, #4
 8007ad2:	f102 0614 	add.w	r6, r2, #20
 8007ad6:	429e      	cmp	r6, r3
 8007ad8:	6841      	ldr	r1, [r0, #4]
 8007ada:	d93d      	bls.n	8007b58 <_dtoa_r+0x318>
 8007adc:	4620      	mov	r0, r4
 8007ade:	f000 fcb7 	bl	8008450 <_Balloc>
 8007ae2:	9001      	str	r0, [sp, #4]
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d13b      	bne.n	8007b60 <_dtoa_r+0x320>
 8007ae8:	4b11      	ldr	r3, [pc, #68]	; (8007b30 <_dtoa_r+0x2f0>)
 8007aea:	4602      	mov	r2, r0
 8007aec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007af0:	e6c0      	b.n	8007874 <_dtoa_r+0x34>
 8007af2:	2301      	movs	r3, #1
 8007af4:	e7df      	b.n	8007ab6 <_dtoa_r+0x276>
 8007af6:	bf00      	nop
 8007af8:	636f4361 	.word	0x636f4361
 8007afc:	3fd287a7 	.word	0x3fd287a7
 8007b00:	8b60c8b3 	.word	0x8b60c8b3
 8007b04:	3fc68a28 	.word	0x3fc68a28
 8007b08:	509f79fb 	.word	0x509f79fb
 8007b0c:	3fd34413 	.word	0x3fd34413
 8007b10:	0800bd59 	.word	0x0800bd59
 8007b14:	0800bd70 	.word	0x0800bd70
 8007b18:	7ff00000 	.word	0x7ff00000
 8007b1c:	0800bd55 	.word	0x0800bd55
 8007b20:	0800bd4c 	.word	0x0800bd4c
 8007b24:	0800bd29 	.word	0x0800bd29
 8007b28:	3ff80000 	.word	0x3ff80000
 8007b2c:	0800be60 	.word	0x0800be60
 8007b30:	0800bdcb 	.word	0x0800bdcb
 8007b34:	2501      	movs	r5, #1
 8007b36:	2300      	movs	r3, #0
 8007b38:	9306      	str	r3, [sp, #24]
 8007b3a:	9508      	str	r5, [sp, #32]
 8007b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b44:	2200      	movs	r2, #0
 8007b46:	2312      	movs	r3, #18
 8007b48:	e7b0      	b.n	8007aac <_dtoa_r+0x26c>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	9308      	str	r3, [sp, #32]
 8007b4e:	e7f5      	b.n	8007b3c <_dtoa_r+0x2fc>
 8007b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b56:	e7b8      	b.n	8007aca <_dtoa_r+0x28a>
 8007b58:	3101      	adds	r1, #1
 8007b5a:	6041      	str	r1, [r0, #4]
 8007b5c:	0052      	lsls	r2, r2, #1
 8007b5e:	e7b8      	b.n	8007ad2 <_dtoa_r+0x292>
 8007b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b62:	9a01      	ldr	r2, [sp, #4]
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	9b03      	ldr	r3, [sp, #12]
 8007b68:	2b0e      	cmp	r3, #14
 8007b6a:	f200 809d 	bhi.w	8007ca8 <_dtoa_r+0x468>
 8007b6e:	2d00      	cmp	r5, #0
 8007b70:	f000 809a 	beq.w	8007ca8 <_dtoa_r+0x468>
 8007b74:	9b00      	ldr	r3, [sp, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	dd32      	ble.n	8007be0 <_dtoa_r+0x3a0>
 8007b7a:	4ab7      	ldr	r2, [pc, #732]	; (8007e58 <_dtoa_r+0x618>)
 8007b7c:	f003 030f 	and.w	r3, r3, #15
 8007b80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b88:	9b00      	ldr	r3, [sp, #0]
 8007b8a:	05d8      	lsls	r0, r3, #23
 8007b8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007b90:	d516      	bpl.n	8007bc0 <_dtoa_r+0x380>
 8007b92:	4bb2      	ldr	r3, [pc, #712]	; (8007e5c <_dtoa_r+0x61c>)
 8007b94:	ec51 0b19 	vmov	r0, r1, d9
 8007b98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b9c:	f7f8 fe56 	bl	800084c <__aeabi_ddiv>
 8007ba0:	f007 070f 	and.w	r7, r7, #15
 8007ba4:	4682      	mov	sl, r0
 8007ba6:	468b      	mov	fp, r1
 8007ba8:	2503      	movs	r5, #3
 8007baa:	4eac      	ldr	r6, [pc, #688]	; (8007e5c <_dtoa_r+0x61c>)
 8007bac:	b957      	cbnz	r7, 8007bc4 <_dtoa_r+0x384>
 8007bae:	4642      	mov	r2, r8
 8007bb0:	464b      	mov	r3, r9
 8007bb2:	4650      	mov	r0, sl
 8007bb4:	4659      	mov	r1, fp
 8007bb6:	f7f8 fe49 	bl	800084c <__aeabi_ddiv>
 8007bba:	4682      	mov	sl, r0
 8007bbc:	468b      	mov	fp, r1
 8007bbe:	e028      	b.n	8007c12 <_dtoa_r+0x3d2>
 8007bc0:	2502      	movs	r5, #2
 8007bc2:	e7f2      	b.n	8007baa <_dtoa_r+0x36a>
 8007bc4:	07f9      	lsls	r1, r7, #31
 8007bc6:	d508      	bpl.n	8007bda <_dtoa_r+0x39a>
 8007bc8:	4640      	mov	r0, r8
 8007bca:	4649      	mov	r1, r9
 8007bcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bd0:	f7f8 fd12 	bl	80005f8 <__aeabi_dmul>
 8007bd4:	3501      	adds	r5, #1
 8007bd6:	4680      	mov	r8, r0
 8007bd8:	4689      	mov	r9, r1
 8007bda:	107f      	asrs	r7, r7, #1
 8007bdc:	3608      	adds	r6, #8
 8007bde:	e7e5      	b.n	8007bac <_dtoa_r+0x36c>
 8007be0:	f000 809b 	beq.w	8007d1a <_dtoa_r+0x4da>
 8007be4:	9b00      	ldr	r3, [sp, #0]
 8007be6:	4f9d      	ldr	r7, [pc, #628]	; (8007e5c <_dtoa_r+0x61c>)
 8007be8:	425e      	negs	r6, r3
 8007bea:	4b9b      	ldr	r3, [pc, #620]	; (8007e58 <_dtoa_r+0x618>)
 8007bec:	f006 020f 	and.w	r2, r6, #15
 8007bf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	ec51 0b19 	vmov	r0, r1, d9
 8007bfc:	f7f8 fcfc 	bl	80005f8 <__aeabi_dmul>
 8007c00:	1136      	asrs	r6, r6, #4
 8007c02:	4682      	mov	sl, r0
 8007c04:	468b      	mov	fp, r1
 8007c06:	2300      	movs	r3, #0
 8007c08:	2502      	movs	r5, #2
 8007c0a:	2e00      	cmp	r6, #0
 8007c0c:	d17a      	bne.n	8007d04 <_dtoa_r+0x4c4>
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1d3      	bne.n	8007bba <_dtoa_r+0x37a>
 8007c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 8082 	beq.w	8007d1e <_dtoa_r+0x4de>
 8007c1a:	4b91      	ldr	r3, [pc, #580]	; (8007e60 <_dtoa_r+0x620>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	4650      	mov	r0, sl
 8007c20:	4659      	mov	r1, fp
 8007c22:	f7f8 ff5b 	bl	8000adc <__aeabi_dcmplt>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d079      	beq.n	8007d1e <_dtoa_r+0x4de>
 8007c2a:	9b03      	ldr	r3, [sp, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d076      	beq.n	8007d1e <_dtoa_r+0x4de>
 8007c30:	9b02      	ldr	r3, [sp, #8]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	dd36      	ble.n	8007ca4 <_dtoa_r+0x464>
 8007c36:	9b00      	ldr	r3, [sp, #0]
 8007c38:	4650      	mov	r0, sl
 8007c3a:	4659      	mov	r1, fp
 8007c3c:	1e5f      	subs	r7, r3, #1
 8007c3e:	2200      	movs	r2, #0
 8007c40:	4b88      	ldr	r3, [pc, #544]	; (8007e64 <_dtoa_r+0x624>)
 8007c42:	f7f8 fcd9 	bl	80005f8 <__aeabi_dmul>
 8007c46:	9e02      	ldr	r6, [sp, #8]
 8007c48:	4682      	mov	sl, r0
 8007c4a:	468b      	mov	fp, r1
 8007c4c:	3501      	adds	r5, #1
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f7f8 fc68 	bl	8000524 <__aeabi_i2d>
 8007c54:	4652      	mov	r2, sl
 8007c56:	465b      	mov	r3, fp
 8007c58:	f7f8 fcce 	bl	80005f8 <__aeabi_dmul>
 8007c5c:	4b82      	ldr	r3, [pc, #520]	; (8007e68 <_dtoa_r+0x628>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f7f8 fb14 	bl	800028c <__adddf3>
 8007c64:	46d0      	mov	r8, sl
 8007c66:	46d9      	mov	r9, fp
 8007c68:	4682      	mov	sl, r0
 8007c6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007c6e:	2e00      	cmp	r6, #0
 8007c70:	d158      	bne.n	8007d24 <_dtoa_r+0x4e4>
 8007c72:	4b7e      	ldr	r3, [pc, #504]	; (8007e6c <_dtoa_r+0x62c>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	4640      	mov	r0, r8
 8007c78:	4649      	mov	r1, r9
 8007c7a:	f7f8 fb05 	bl	8000288 <__aeabi_dsub>
 8007c7e:	4652      	mov	r2, sl
 8007c80:	465b      	mov	r3, fp
 8007c82:	4680      	mov	r8, r0
 8007c84:	4689      	mov	r9, r1
 8007c86:	f7f8 ff47 	bl	8000b18 <__aeabi_dcmpgt>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	f040 8295 	bne.w	80081ba <_dtoa_r+0x97a>
 8007c90:	4652      	mov	r2, sl
 8007c92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007c96:	4640      	mov	r0, r8
 8007c98:	4649      	mov	r1, r9
 8007c9a:	f7f8 ff1f 	bl	8000adc <__aeabi_dcmplt>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f040 8289 	bne.w	80081b6 <_dtoa_r+0x976>
 8007ca4:	ec5b ab19 	vmov	sl, fp, d9
 8007ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f2c0 8148 	blt.w	8007f40 <_dtoa_r+0x700>
 8007cb0:	9a00      	ldr	r2, [sp, #0]
 8007cb2:	2a0e      	cmp	r2, #14
 8007cb4:	f300 8144 	bgt.w	8007f40 <_dtoa_r+0x700>
 8007cb8:	4b67      	ldr	r3, [pc, #412]	; (8007e58 <_dtoa_r+0x618>)
 8007cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f280 80d5 	bge.w	8007e74 <_dtoa_r+0x634>
 8007cca:	9b03      	ldr	r3, [sp, #12]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f300 80d1 	bgt.w	8007e74 <_dtoa_r+0x634>
 8007cd2:	f040 826f 	bne.w	80081b4 <_dtoa_r+0x974>
 8007cd6:	4b65      	ldr	r3, [pc, #404]	; (8007e6c <_dtoa_r+0x62c>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	4640      	mov	r0, r8
 8007cdc:	4649      	mov	r1, r9
 8007cde:	f7f8 fc8b 	bl	80005f8 <__aeabi_dmul>
 8007ce2:	4652      	mov	r2, sl
 8007ce4:	465b      	mov	r3, fp
 8007ce6:	f7f8 ff0d 	bl	8000b04 <__aeabi_dcmpge>
 8007cea:	9e03      	ldr	r6, [sp, #12]
 8007cec:	4637      	mov	r7, r6
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	f040 8245 	bne.w	800817e <_dtoa_r+0x93e>
 8007cf4:	9d01      	ldr	r5, [sp, #4]
 8007cf6:	2331      	movs	r3, #49	; 0x31
 8007cf8:	f805 3b01 	strb.w	r3, [r5], #1
 8007cfc:	9b00      	ldr	r3, [sp, #0]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	e240      	b.n	8008186 <_dtoa_r+0x946>
 8007d04:	07f2      	lsls	r2, r6, #31
 8007d06:	d505      	bpl.n	8007d14 <_dtoa_r+0x4d4>
 8007d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d0c:	f7f8 fc74 	bl	80005f8 <__aeabi_dmul>
 8007d10:	3501      	adds	r5, #1
 8007d12:	2301      	movs	r3, #1
 8007d14:	1076      	asrs	r6, r6, #1
 8007d16:	3708      	adds	r7, #8
 8007d18:	e777      	b.n	8007c0a <_dtoa_r+0x3ca>
 8007d1a:	2502      	movs	r5, #2
 8007d1c:	e779      	b.n	8007c12 <_dtoa_r+0x3d2>
 8007d1e:	9f00      	ldr	r7, [sp, #0]
 8007d20:	9e03      	ldr	r6, [sp, #12]
 8007d22:	e794      	b.n	8007c4e <_dtoa_r+0x40e>
 8007d24:	9901      	ldr	r1, [sp, #4]
 8007d26:	4b4c      	ldr	r3, [pc, #304]	; (8007e58 <_dtoa_r+0x618>)
 8007d28:	4431      	add	r1, r6
 8007d2a:	910d      	str	r1, [sp, #52]	; 0x34
 8007d2c:	9908      	ldr	r1, [sp, #32]
 8007d2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d36:	2900      	cmp	r1, #0
 8007d38:	d043      	beq.n	8007dc2 <_dtoa_r+0x582>
 8007d3a:	494d      	ldr	r1, [pc, #308]	; (8007e70 <_dtoa_r+0x630>)
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	f7f8 fd85 	bl	800084c <__aeabi_ddiv>
 8007d42:	4652      	mov	r2, sl
 8007d44:	465b      	mov	r3, fp
 8007d46:	f7f8 fa9f 	bl	8000288 <__aeabi_dsub>
 8007d4a:	9d01      	ldr	r5, [sp, #4]
 8007d4c:	4682      	mov	sl, r0
 8007d4e:	468b      	mov	fp, r1
 8007d50:	4649      	mov	r1, r9
 8007d52:	4640      	mov	r0, r8
 8007d54:	f7f8 ff00 	bl	8000b58 <__aeabi_d2iz>
 8007d58:	4606      	mov	r6, r0
 8007d5a:	f7f8 fbe3 	bl	8000524 <__aeabi_i2d>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4640      	mov	r0, r8
 8007d64:	4649      	mov	r1, r9
 8007d66:	f7f8 fa8f 	bl	8000288 <__aeabi_dsub>
 8007d6a:	3630      	adds	r6, #48	; 0x30
 8007d6c:	f805 6b01 	strb.w	r6, [r5], #1
 8007d70:	4652      	mov	r2, sl
 8007d72:	465b      	mov	r3, fp
 8007d74:	4680      	mov	r8, r0
 8007d76:	4689      	mov	r9, r1
 8007d78:	f7f8 feb0 	bl	8000adc <__aeabi_dcmplt>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d163      	bne.n	8007e48 <_dtoa_r+0x608>
 8007d80:	4642      	mov	r2, r8
 8007d82:	464b      	mov	r3, r9
 8007d84:	4936      	ldr	r1, [pc, #216]	; (8007e60 <_dtoa_r+0x620>)
 8007d86:	2000      	movs	r0, #0
 8007d88:	f7f8 fa7e 	bl	8000288 <__aeabi_dsub>
 8007d8c:	4652      	mov	r2, sl
 8007d8e:	465b      	mov	r3, fp
 8007d90:	f7f8 fea4 	bl	8000adc <__aeabi_dcmplt>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	f040 80b5 	bne.w	8007f04 <_dtoa_r+0x6c4>
 8007d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d9c:	429d      	cmp	r5, r3
 8007d9e:	d081      	beq.n	8007ca4 <_dtoa_r+0x464>
 8007da0:	4b30      	ldr	r3, [pc, #192]	; (8007e64 <_dtoa_r+0x624>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	4650      	mov	r0, sl
 8007da6:	4659      	mov	r1, fp
 8007da8:	f7f8 fc26 	bl	80005f8 <__aeabi_dmul>
 8007dac:	4b2d      	ldr	r3, [pc, #180]	; (8007e64 <_dtoa_r+0x624>)
 8007dae:	4682      	mov	sl, r0
 8007db0:	468b      	mov	fp, r1
 8007db2:	4640      	mov	r0, r8
 8007db4:	4649      	mov	r1, r9
 8007db6:	2200      	movs	r2, #0
 8007db8:	f7f8 fc1e 	bl	80005f8 <__aeabi_dmul>
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	4689      	mov	r9, r1
 8007dc0:	e7c6      	b.n	8007d50 <_dtoa_r+0x510>
 8007dc2:	4650      	mov	r0, sl
 8007dc4:	4659      	mov	r1, fp
 8007dc6:	f7f8 fc17 	bl	80005f8 <__aeabi_dmul>
 8007dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dcc:	9d01      	ldr	r5, [sp, #4]
 8007dce:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dd0:	4682      	mov	sl, r0
 8007dd2:	468b      	mov	fp, r1
 8007dd4:	4649      	mov	r1, r9
 8007dd6:	4640      	mov	r0, r8
 8007dd8:	f7f8 febe 	bl	8000b58 <__aeabi_d2iz>
 8007ddc:	4606      	mov	r6, r0
 8007dde:	f7f8 fba1 	bl	8000524 <__aeabi_i2d>
 8007de2:	3630      	adds	r6, #48	; 0x30
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4640      	mov	r0, r8
 8007dea:	4649      	mov	r1, r9
 8007dec:	f7f8 fa4c 	bl	8000288 <__aeabi_dsub>
 8007df0:	f805 6b01 	strb.w	r6, [r5], #1
 8007df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007df6:	429d      	cmp	r5, r3
 8007df8:	4680      	mov	r8, r0
 8007dfa:	4689      	mov	r9, r1
 8007dfc:	f04f 0200 	mov.w	r2, #0
 8007e00:	d124      	bne.n	8007e4c <_dtoa_r+0x60c>
 8007e02:	4b1b      	ldr	r3, [pc, #108]	; (8007e70 <_dtoa_r+0x630>)
 8007e04:	4650      	mov	r0, sl
 8007e06:	4659      	mov	r1, fp
 8007e08:	f7f8 fa40 	bl	800028c <__adddf3>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	4640      	mov	r0, r8
 8007e12:	4649      	mov	r1, r9
 8007e14:	f7f8 fe80 	bl	8000b18 <__aeabi_dcmpgt>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d173      	bne.n	8007f04 <_dtoa_r+0x6c4>
 8007e1c:	4652      	mov	r2, sl
 8007e1e:	465b      	mov	r3, fp
 8007e20:	4913      	ldr	r1, [pc, #76]	; (8007e70 <_dtoa_r+0x630>)
 8007e22:	2000      	movs	r0, #0
 8007e24:	f7f8 fa30 	bl	8000288 <__aeabi_dsub>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	4649      	mov	r1, r9
 8007e30:	f7f8 fe54 	bl	8000adc <__aeabi_dcmplt>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	f43f af35 	beq.w	8007ca4 <_dtoa_r+0x464>
 8007e3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007e3c:	1e6b      	subs	r3, r5, #1
 8007e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e44:	2b30      	cmp	r3, #48	; 0x30
 8007e46:	d0f8      	beq.n	8007e3a <_dtoa_r+0x5fa>
 8007e48:	9700      	str	r7, [sp, #0]
 8007e4a:	e049      	b.n	8007ee0 <_dtoa_r+0x6a0>
 8007e4c:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <_dtoa_r+0x624>)
 8007e4e:	f7f8 fbd3 	bl	80005f8 <__aeabi_dmul>
 8007e52:	4680      	mov	r8, r0
 8007e54:	4689      	mov	r9, r1
 8007e56:	e7bd      	b.n	8007dd4 <_dtoa_r+0x594>
 8007e58:	0800be60 	.word	0x0800be60
 8007e5c:	0800be38 	.word	0x0800be38
 8007e60:	3ff00000 	.word	0x3ff00000
 8007e64:	40240000 	.word	0x40240000
 8007e68:	401c0000 	.word	0x401c0000
 8007e6c:	40140000 	.word	0x40140000
 8007e70:	3fe00000 	.word	0x3fe00000
 8007e74:	9d01      	ldr	r5, [sp, #4]
 8007e76:	4656      	mov	r6, sl
 8007e78:	465f      	mov	r7, fp
 8007e7a:	4642      	mov	r2, r8
 8007e7c:	464b      	mov	r3, r9
 8007e7e:	4630      	mov	r0, r6
 8007e80:	4639      	mov	r1, r7
 8007e82:	f7f8 fce3 	bl	800084c <__aeabi_ddiv>
 8007e86:	f7f8 fe67 	bl	8000b58 <__aeabi_d2iz>
 8007e8a:	4682      	mov	sl, r0
 8007e8c:	f7f8 fb4a 	bl	8000524 <__aeabi_i2d>
 8007e90:	4642      	mov	r2, r8
 8007e92:	464b      	mov	r3, r9
 8007e94:	f7f8 fbb0 	bl	80005f8 <__aeabi_dmul>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	4639      	mov	r1, r7
 8007ea0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007ea4:	f7f8 f9f0 	bl	8000288 <__aeabi_dsub>
 8007ea8:	f805 6b01 	strb.w	r6, [r5], #1
 8007eac:	9e01      	ldr	r6, [sp, #4]
 8007eae:	9f03      	ldr	r7, [sp, #12]
 8007eb0:	1bae      	subs	r6, r5, r6
 8007eb2:	42b7      	cmp	r7, r6
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	d135      	bne.n	8007f26 <_dtoa_r+0x6e6>
 8007eba:	f7f8 f9e7 	bl	800028c <__adddf3>
 8007ebe:	4642      	mov	r2, r8
 8007ec0:	464b      	mov	r3, r9
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	460f      	mov	r7, r1
 8007ec6:	f7f8 fe27 	bl	8000b18 <__aeabi_dcmpgt>
 8007eca:	b9d0      	cbnz	r0, 8007f02 <_dtoa_r+0x6c2>
 8007ecc:	4642      	mov	r2, r8
 8007ece:	464b      	mov	r3, r9
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	f7f8 fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ed8:	b110      	cbz	r0, 8007ee0 <_dtoa_r+0x6a0>
 8007eda:	f01a 0f01 	tst.w	sl, #1
 8007ede:	d110      	bne.n	8007f02 <_dtoa_r+0x6c2>
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	ee18 1a10 	vmov	r1, s16
 8007ee6:	f000 faf3 	bl	80084d0 <_Bfree>
 8007eea:	2300      	movs	r3, #0
 8007eec:	9800      	ldr	r0, [sp, #0]
 8007eee:	702b      	strb	r3, [r5, #0]
 8007ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	6018      	str	r0, [r3, #0]
 8007ef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f43f acf1 	beq.w	80078e0 <_dtoa_r+0xa0>
 8007efe:	601d      	str	r5, [r3, #0]
 8007f00:	e4ee      	b.n	80078e0 <_dtoa_r+0xa0>
 8007f02:	9f00      	ldr	r7, [sp, #0]
 8007f04:	462b      	mov	r3, r5
 8007f06:	461d      	mov	r5, r3
 8007f08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f0c:	2a39      	cmp	r2, #57	; 0x39
 8007f0e:	d106      	bne.n	8007f1e <_dtoa_r+0x6de>
 8007f10:	9a01      	ldr	r2, [sp, #4]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d1f7      	bne.n	8007f06 <_dtoa_r+0x6c6>
 8007f16:	9901      	ldr	r1, [sp, #4]
 8007f18:	2230      	movs	r2, #48	; 0x30
 8007f1a:	3701      	adds	r7, #1
 8007f1c:	700a      	strb	r2, [r1, #0]
 8007f1e:	781a      	ldrb	r2, [r3, #0]
 8007f20:	3201      	adds	r2, #1
 8007f22:	701a      	strb	r2, [r3, #0]
 8007f24:	e790      	b.n	8007e48 <_dtoa_r+0x608>
 8007f26:	4ba6      	ldr	r3, [pc, #664]	; (80081c0 <_dtoa_r+0x980>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f7f8 fb65 	bl	80005f8 <__aeabi_dmul>
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2300      	movs	r3, #0
 8007f32:	4606      	mov	r6, r0
 8007f34:	460f      	mov	r7, r1
 8007f36:	f7f8 fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d09d      	beq.n	8007e7a <_dtoa_r+0x63a>
 8007f3e:	e7cf      	b.n	8007ee0 <_dtoa_r+0x6a0>
 8007f40:	9a08      	ldr	r2, [sp, #32]
 8007f42:	2a00      	cmp	r2, #0
 8007f44:	f000 80d7 	beq.w	80080f6 <_dtoa_r+0x8b6>
 8007f48:	9a06      	ldr	r2, [sp, #24]
 8007f4a:	2a01      	cmp	r2, #1
 8007f4c:	f300 80ba 	bgt.w	80080c4 <_dtoa_r+0x884>
 8007f50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f52:	2a00      	cmp	r2, #0
 8007f54:	f000 80b2 	beq.w	80080bc <_dtoa_r+0x87c>
 8007f58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f5c:	9e07      	ldr	r6, [sp, #28]
 8007f5e:	9d04      	ldr	r5, [sp, #16]
 8007f60:	9a04      	ldr	r2, [sp, #16]
 8007f62:	441a      	add	r2, r3
 8007f64:	9204      	str	r2, [sp, #16]
 8007f66:	9a05      	ldr	r2, [sp, #20]
 8007f68:	2101      	movs	r1, #1
 8007f6a:	441a      	add	r2, r3
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	9205      	str	r2, [sp, #20]
 8007f70:	f000 fb66 	bl	8008640 <__i2b>
 8007f74:	4607      	mov	r7, r0
 8007f76:	2d00      	cmp	r5, #0
 8007f78:	dd0c      	ble.n	8007f94 <_dtoa_r+0x754>
 8007f7a:	9b05      	ldr	r3, [sp, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	dd09      	ble.n	8007f94 <_dtoa_r+0x754>
 8007f80:	42ab      	cmp	r3, r5
 8007f82:	9a04      	ldr	r2, [sp, #16]
 8007f84:	bfa8      	it	ge
 8007f86:	462b      	movge	r3, r5
 8007f88:	1ad2      	subs	r2, r2, r3
 8007f8a:	9204      	str	r2, [sp, #16]
 8007f8c:	9a05      	ldr	r2, [sp, #20]
 8007f8e:	1aed      	subs	r5, r5, r3
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	9305      	str	r3, [sp, #20]
 8007f94:	9b07      	ldr	r3, [sp, #28]
 8007f96:	b31b      	cbz	r3, 8007fe0 <_dtoa_r+0x7a0>
 8007f98:	9b08      	ldr	r3, [sp, #32]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 80af 	beq.w	80080fe <_dtoa_r+0x8be>
 8007fa0:	2e00      	cmp	r6, #0
 8007fa2:	dd13      	ble.n	8007fcc <_dtoa_r+0x78c>
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	4632      	mov	r2, r6
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f000 fc09 	bl	80087c0 <__pow5mult>
 8007fae:	ee18 2a10 	vmov	r2, s16
 8007fb2:	4601      	mov	r1, r0
 8007fb4:	4607      	mov	r7, r0
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f000 fb58 	bl	800866c <__multiply>
 8007fbc:	ee18 1a10 	vmov	r1, s16
 8007fc0:	4680      	mov	r8, r0
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f000 fa84 	bl	80084d0 <_Bfree>
 8007fc8:	ee08 8a10 	vmov	s16, r8
 8007fcc:	9b07      	ldr	r3, [sp, #28]
 8007fce:	1b9a      	subs	r2, r3, r6
 8007fd0:	d006      	beq.n	8007fe0 <_dtoa_r+0x7a0>
 8007fd2:	ee18 1a10 	vmov	r1, s16
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 fbf2 	bl	80087c0 <__pow5mult>
 8007fdc:	ee08 0a10 	vmov	s16, r0
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f000 fb2c 	bl	8008640 <__i2b>
 8007fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	4606      	mov	r6, r0
 8007fee:	f340 8088 	ble.w	8008102 <_dtoa_r+0x8c2>
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	4601      	mov	r1, r0
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 fbe2 	bl	80087c0 <__pow5mult>
 8007ffc:	9b06      	ldr	r3, [sp, #24]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	4606      	mov	r6, r0
 8008002:	f340 8081 	ble.w	8008108 <_dtoa_r+0x8c8>
 8008006:	f04f 0800 	mov.w	r8, #0
 800800a:	6933      	ldr	r3, [r6, #16]
 800800c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008010:	6918      	ldr	r0, [r3, #16]
 8008012:	f000 fac5 	bl	80085a0 <__hi0bits>
 8008016:	f1c0 0020 	rsb	r0, r0, #32
 800801a:	9b05      	ldr	r3, [sp, #20]
 800801c:	4418      	add	r0, r3
 800801e:	f010 001f 	ands.w	r0, r0, #31
 8008022:	f000 8092 	beq.w	800814a <_dtoa_r+0x90a>
 8008026:	f1c0 0320 	rsb	r3, r0, #32
 800802a:	2b04      	cmp	r3, #4
 800802c:	f340 808a 	ble.w	8008144 <_dtoa_r+0x904>
 8008030:	f1c0 001c 	rsb	r0, r0, #28
 8008034:	9b04      	ldr	r3, [sp, #16]
 8008036:	4403      	add	r3, r0
 8008038:	9304      	str	r3, [sp, #16]
 800803a:	9b05      	ldr	r3, [sp, #20]
 800803c:	4403      	add	r3, r0
 800803e:	4405      	add	r5, r0
 8008040:	9305      	str	r3, [sp, #20]
 8008042:	9b04      	ldr	r3, [sp, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	dd07      	ble.n	8008058 <_dtoa_r+0x818>
 8008048:	ee18 1a10 	vmov	r1, s16
 800804c:	461a      	mov	r2, r3
 800804e:	4620      	mov	r0, r4
 8008050:	f000 fc10 	bl	8008874 <__lshift>
 8008054:	ee08 0a10 	vmov	s16, r0
 8008058:	9b05      	ldr	r3, [sp, #20]
 800805a:	2b00      	cmp	r3, #0
 800805c:	dd05      	ble.n	800806a <_dtoa_r+0x82a>
 800805e:	4631      	mov	r1, r6
 8008060:	461a      	mov	r2, r3
 8008062:	4620      	mov	r0, r4
 8008064:	f000 fc06 	bl	8008874 <__lshift>
 8008068:	4606      	mov	r6, r0
 800806a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800806c:	2b00      	cmp	r3, #0
 800806e:	d06e      	beq.n	800814e <_dtoa_r+0x90e>
 8008070:	ee18 0a10 	vmov	r0, s16
 8008074:	4631      	mov	r1, r6
 8008076:	f000 fc6d 	bl	8008954 <__mcmp>
 800807a:	2800      	cmp	r0, #0
 800807c:	da67      	bge.n	800814e <_dtoa_r+0x90e>
 800807e:	9b00      	ldr	r3, [sp, #0]
 8008080:	3b01      	subs	r3, #1
 8008082:	ee18 1a10 	vmov	r1, s16
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	220a      	movs	r2, #10
 800808a:	2300      	movs	r3, #0
 800808c:	4620      	mov	r0, r4
 800808e:	f000 fa41 	bl	8008514 <__multadd>
 8008092:	9b08      	ldr	r3, [sp, #32]
 8008094:	ee08 0a10 	vmov	s16, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 81b1 	beq.w	8008400 <_dtoa_r+0xbc0>
 800809e:	2300      	movs	r3, #0
 80080a0:	4639      	mov	r1, r7
 80080a2:	220a      	movs	r2, #10
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 fa35 	bl	8008514 <__multadd>
 80080aa:	9b02      	ldr	r3, [sp, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	4607      	mov	r7, r0
 80080b0:	f300 808e 	bgt.w	80081d0 <_dtoa_r+0x990>
 80080b4:	9b06      	ldr	r3, [sp, #24]
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	dc51      	bgt.n	800815e <_dtoa_r+0x91e>
 80080ba:	e089      	b.n	80081d0 <_dtoa_r+0x990>
 80080bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080c2:	e74b      	b.n	8007f5c <_dtoa_r+0x71c>
 80080c4:	9b03      	ldr	r3, [sp, #12]
 80080c6:	1e5e      	subs	r6, r3, #1
 80080c8:	9b07      	ldr	r3, [sp, #28]
 80080ca:	42b3      	cmp	r3, r6
 80080cc:	bfbf      	itttt	lt
 80080ce:	9b07      	ldrlt	r3, [sp, #28]
 80080d0:	9607      	strlt	r6, [sp, #28]
 80080d2:	1af2      	sublt	r2, r6, r3
 80080d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80080d6:	bfb6      	itet	lt
 80080d8:	189b      	addlt	r3, r3, r2
 80080da:	1b9e      	subge	r6, r3, r6
 80080dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80080de:	9b03      	ldr	r3, [sp, #12]
 80080e0:	bfb8      	it	lt
 80080e2:	2600      	movlt	r6, #0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bfb7      	itett	lt
 80080e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80080ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80080f0:	1a9d      	sublt	r5, r3, r2
 80080f2:	2300      	movlt	r3, #0
 80080f4:	e734      	b.n	8007f60 <_dtoa_r+0x720>
 80080f6:	9e07      	ldr	r6, [sp, #28]
 80080f8:	9d04      	ldr	r5, [sp, #16]
 80080fa:	9f08      	ldr	r7, [sp, #32]
 80080fc:	e73b      	b.n	8007f76 <_dtoa_r+0x736>
 80080fe:	9a07      	ldr	r2, [sp, #28]
 8008100:	e767      	b.n	8007fd2 <_dtoa_r+0x792>
 8008102:	9b06      	ldr	r3, [sp, #24]
 8008104:	2b01      	cmp	r3, #1
 8008106:	dc18      	bgt.n	800813a <_dtoa_r+0x8fa>
 8008108:	f1ba 0f00 	cmp.w	sl, #0
 800810c:	d115      	bne.n	800813a <_dtoa_r+0x8fa>
 800810e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008112:	b993      	cbnz	r3, 800813a <_dtoa_r+0x8fa>
 8008114:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008118:	0d1b      	lsrs	r3, r3, #20
 800811a:	051b      	lsls	r3, r3, #20
 800811c:	b183      	cbz	r3, 8008140 <_dtoa_r+0x900>
 800811e:	9b04      	ldr	r3, [sp, #16]
 8008120:	3301      	adds	r3, #1
 8008122:	9304      	str	r3, [sp, #16]
 8008124:	9b05      	ldr	r3, [sp, #20]
 8008126:	3301      	adds	r3, #1
 8008128:	9305      	str	r3, [sp, #20]
 800812a:	f04f 0801 	mov.w	r8, #1
 800812e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008130:	2b00      	cmp	r3, #0
 8008132:	f47f af6a 	bne.w	800800a <_dtoa_r+0x7ca>
 8008136:	2001      	movs	r0, #1
 8008138:	e76f      	b.n	800801a <_dtoa_r+0x7da>
 800813a:	f04f 0800 	mov.w	r8, #0
 800813e:	e7f6      	b.n	800812e <_dtoa_r+0x8ee>
 8008140:	4698      	mov	r8, r3
 8008142:	e7f4      	b.n	800812e <_dtoa_r+0x8ee>
 8008144:	f43f af7d 	beq.w	8008042 <_dtoa_r+0x802>
 8008148:	4618      	mov	r0, r3
 800814a:	301c      	adds	r0, #28
 800814c:	e772      	b.n	8008034 <_dtoa_r+0x7f4>
 800814e:	9b03      	ldr	r3, [sp, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	dc37      	bgt.n	80081c4 <_dtoa_r+0x984>
 8008154:	9b06      	ldr	r3, [sp, #24]
 8008156:	2b02      	cmp	r3, #2
 8008158:	dd34      	ble.n	80081c4 <_dtoa_r+0x984>
 800815a:	9b03      	ldr	r3, [sp, #12]
 800815c:	9302      	str	r3, [sp, #8]
 800815e:	9b02      	ldr	r3, [sp, #8]
 8008160:	b96b      	cbnz	r3, 800817e <_dtoa_r+0x93e>
 8008162:	4631      	mov	r1, r6
 8008164:	2205      	movs	r2, #5
 8008166:	4620      	mov	r0, r4
 8008168:	f000 f9d4 	bl	8008514 <__multadd>
 800816c:	4601      	mov	r1, r0
 800816e:	4606      	mov	r6, r0
 8008170:	ee18 0a10 	vmov	r0, s16
 8008174:	f000 fbee 	bl	8008954 <__mcmp>
 8008178:	2800      	cmp	r0, #0
 800817a:	f73f adbb 	bgt.w	8007cf4 <_dtoa_r+0x4b4>
 800817e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008180:	9d01      	ldr	r5, [sp, #4]
 8008182:	43db      	mvns	r3, r3
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	f04f 0800 	mov.w	r8, #0
 800818a:	4631      	mov	r1, r6
 800818c:	4620      	mov	r0, r4
 800818e:	f000 f99f 	bl	80084d0 <_Bfree>
 8008192:	2f00      	cmp	r7, #0
 8008194:	f43f aea4 	beq.w	8007ee0 <_dtoa_r+0x6a0>
 8008198:	f1b8 0f00 	cmp.w	r8, #0
 800819c:	d005      	beq.n	80081aa <_dtoa_r+0x96a>
 800819e:	45b8      	cmp	r8, r7
 80081a0:	d003      	beq.n	80081aa <_dtoa_r+0x96a>
 80081a2:	4641      	mov	r1, r8
 80081a4:	4620      	mov	r0, r4
 80081a6:	f000 f993 	bl	80084d0 <_Bfree>
 80081aa:	4639      	mov	r1, r7
 80081ac:	4620      	mov	r0, r4
 80081ae:	f000 f98f 	bl	80084d0 <_Bfree>
 80081b2:	e695      	b.n	8007ee0 <_dtoa_r+0x6a0>
 80081b4:	2600      	movs	r6, #0
 80081b6:	4637      	mov	r7, r6
 80081b8:	e7e1      	b.n	800817e <_dtoa_r+0x93e>
 80081ba:	9700      	str	r7, [sp, #0]
 80081bc:	4637      	mov	r7, r6
 80081be:	e599      	b.n	8007cf4 <_dtoa_r+0x4b4>
 80081c0:	40240000 	.word	0x40240000
 80081c4:	9b08      	ldr	r3, [sp, #32]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 80ca 	beq.w	8008360 <_dtoa_r+0xb20>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	9302      	str	r3, [sp, #8]
 80081d0:	2d00      	cmp	r5, #0
 80081d2:	dd05      	ble.n	80081e0 <_dtoa_r+0x9a0>
 80081d4:	4639      	mov	r1, r7
 80081d6:	462a      	mov	r2, r5
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 fb4b 	bl	8008874 <__lshift>
 80081de:	4607      	mov	r7, r0
 80081e0:	f1b8 0f00 	cmp.w	r8, #0
 80081e4:	d05b      	beq.n	800829e <_dtoa_r+0xa5e>
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4620      	mov	r0, r4
 80081ea:	f000 f931 	bl	8008450 <_Balloc>
 80081ee:	4605      	mov	r5, r0
 80081f0:	b928      	cbnz	r0, 80081fe <_dtoa_r+0x9be>
 80081f2:	4b87      	ldr	r3, [pc, #540]	; (8008410 <_dtoa_r+0xbd0>)
 80081f4:	4602      	mov	r2, r0
 80081f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081fa:	f7ff bb3b 	b.w	8007874 <_dtoa_r+0x34>
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	3202      	adds	r2, #2
 8008202:	0092      	lsls	r2, r2, #2
 8008204:	f107 010c 	add.w	r1, r7, #12
 8008208:	300c      	adds	r0, #12
 800820a:	f000 f913 	bl	8008434 <memcpy>
 800820e:	2201      	movs	r2, #1
 8008210:	4629      	mov	r1, r5
 8008212:	4620      	mov	r0, r4
 8008214:	f000 fb2e 	bl	8008874 <__lshift>
 8008218:	9b01      	ldr	r3, [sp, #4]
 800821a:	f103 0901 	add.w	r9, r3, #1
 800821e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008222:	4413      	add	r3, r2
 8008224:	9305      	str	r3, [sp, #20]
 8008226:	f00a 0301 	and.w	r3, sl, #1
 800822a:	46b8      	mov	r8, r7
 800822c:	9304      	str	r3, [sp, #16]
 800822e:	4607      	mov	r7, r0
 8008230:	4631      	mov	r1, r6
 8008232:	ee18 0a10 	vmov	r0, s16
 8008236:	f7ff fa77 	bl	8007728 <quorem>
 800823a:	4641      	mov	r1, r8
 800823c:	9002      	str	r0, [sp, #8]
 800823e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008242:	ee18 0a10 	vmov	r0, s16
 8008246:	f000 fb85 	bl	8008954 <__mcmp>
 800824a:	463a      	mov	r2, r7
 800824c:	9003      	str	r0, [sp, #12]
 800824e:	4631      	mov	r1, r6
 8008250:	4620      	mov	r0, r4
 8008252:	f000 fb9b 	bl	800898c <__mdiff>
 8008256:	68c2      	ldr	r2, [r0, #12]
 8008258:	f109 3bff 	add.w	fp, r9, #4294967295
 800825c:	4605      	mov	r5, r0
 800825e:	bb02      	cbnz	r2, 80082a2 <_dtoa_r+0xa62>
 8008260:	4601      	mov	r1, r0
 8008262:	ee18 0a10 	vmov	r0, s16
 8008266:	f000 fb75 	bl	8008954 <__mcmp>
 800826a:	4602      	mov	r2, r0
 800826c:	4629      	mov	r1, r5
 800826e:	4620      	mov	r0, r4
 8008270:	9207      	str	r2, [sp, #28]
 8008272:	f000 f92d 	bl	80084d0 <_Bfree>
 8008276:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800827a:	ea43 0102 	orr.w	r1, r3, r2
 800827e:	9b04      	ldr	r3, [sp, #16]
 8008280:	430b      	orrs	r3, r1
 8008282:	464d      	mov	r5, r9
 8008284:	d10f      	bne.n	80082a6 <_dtoa_r+0xa66>
 8008286:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800828a:	d02a      	beq.n	80082e2 <_dtoa_r+0xaa2>
 800828c:	9b03      	ldr	r3, [sp, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	dd02      	ble.n	8008298 <_dtoa_r+0xa58>
 8008292:	9b02      	ldr	r3, [sp, #8]
 8008294:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008298:	f88b a000 	strb.w	sl, [fp]
 800829c:	e775      	b.n	800818a <_dtoa_r+0x94a>
 800829e:	4638      	mov	r0, r7
 80082a0:	e7ba      	b.n	8008218 <_dtoa_r+0x9d8>
 80082a2:	2201      	movs	r2, #1
 80082a4:	e7e2      	b.n	800826c <_dtoa_r+0xa2c>
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	db04      	blt.n	80082b6 <_dtoa_r+0xa76>
 80082ac:	9906      	ldr	r1, [sp, #24]
 80082ae:	430b      	orrs	r3, r1
 80082b0:	9904      	ldr	r1, [sp, #16]
 80082b2:	430b      	orrs	r3, r1
 80082b4:	d122      	bne.n	80082fc <_dtoa_r+0xabc>
 80082b6:	2a00      	cmp	r2, #0
 80082b8:	ddee      	ble.n	8008298 <_dtoa_r+0xa58>
 80082ba:	ee18 1a10 	vmov	r1, s16
 80082be:	2201      	movs	r2, #1
 80082c0:	4620      	mov	r0, r4
 80082c2:	f000 fad7 	bl	8008874 <__lshift>
 80082c6:	4631      	mov	r1, r6
 80082c8:	ee08 0a10 	vmov	s16, r0
 80082cc:	f000 fb42 	bl	8008954 <__mcmp>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	dc03      	bgt.n	80082dc <_dtoa_r+0xa9c>
 80082d4:	d1e0      	bne.n	8008298 <_dtoa_r+0xa58>
 80082d6:	f01a 0f01 	tst.w	sl, #1
 80082da:	d0dd      	beq.n	8008298 <_dtoa_r+0xa58>
 80082dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082e0:	d1d7      	bne.n	8008292 <_dtoa_r+0xa52>
 80082e2:	2339      	movs	r3, #57	; 0x39
 80082e4:	f88b 3000 	strb.w	r3, [fp]
 80082e8:	462b      	mov	r3, r5
 80082ea:	461d      	mov	r5, r3
 80082ec:	3b01      	subs	r3, #1
 80082ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80082f2:	2a39      	cmp	r2, #57	; 0x39
 80082f4:	d071      	beq.n	80083da <_dtoa_r+0xb9a>
 80082f6:	3201      	adds	r2, #1
 80082f8:	701a      	strb	r2, [r3, #0]
 80082fa:	e746      	b.n	800818a <_dtoa_r+0x94a>
 80082fc:	2a00      	cmp	r2, #0
 80082fe:	dd07      	ble.n	8008310 <_dtoa_r+0xad0>
 8008300:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008304:	d0ed      	beq.n	80082e2 <_dtoa_r+0xaa2>
 8008306:	f10a 0301 	add.w	r3, sl, #1
 800830a:	f88b 3000 	strb.w	r3, [fp]
 800830e:	e73c      	b.n	800818a <_dtoa_r+0x94a>
 8008310:	9b05      	ldr	r3, [sp, #20]
 8008312:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008316:	4599      	cmp	r9, r3
 8008318:	d047      	beq.n	80083aa <_dtoa_r+0xb6a>
 800831a:	ee18 1a10 	vmov	r1, s16
 800831e:	2300      	movs	r3, #0
 8008320:	220a      	movs	r2, #10
 8008322:	4620      	mov	r0, r4
 8008324:	f000 f8f6 	bl	8008514 <__multadd>
 8008328:	45b8      	cmp	r8, r7
 800832a:	ee08 0a10 	vmov	s16, r0
 800832e:	f04f 0300 	mov.w	r3, #0
 8008332:	f04f 020a 	mov.w	r2, #10
 8008336:	4641      	mov	r1, r8
 8008338:	4620      	mov	r0, r4
 800833a:	d106      	bne.n	800834a <_dtoa_r+0xb0a>
 800833c:	f000 f8ea 	bl	8008514 <__multadd>
 8008340:	4680      	mov	r8, r0
 8008342:	4607      	mov	r7, r0
 8008344:	f109 0901 	add.w	r9, r9, #1
 8008348:	e772      	b.n	8008230 <_dtoa_r+0x9f0>
 800834a:	f000 f8e3 	bl	8008514 <__multadd>
 800834e:	4639      	mov	r1, r7
 8008350:	4680      	mov	r8, r0
 8008352:	2300      	movs	r3, #0
 8008354:	220a      	movs	r2, #10
 8008356:	4620      	mov	r0, r4
 8008358:	f000 f8dc 	bl	8008514 <__multadd>
 800835c:	4607      	mov	r7, r0
 800835e:	e7f1      	b.n	8008344 <_dtoa_r+0xb04>
 8008360:	9b03      	ldr	r3, [sp, #12]
 8008362:	9302      	str	r3, [sp, #8]
 8008364:	9d01      	ldr	r5, [sp, #4]
 8008366:	ee18 0a10 	vmov	r0, s16
 800836a:	4631      	mov	r1, r6
 800836c:	f7ff f9dc 	bl	8007728 <quorem>
 8008370:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008374:	9b01      	ldr	r3, [sp, #4]
 8008376:	f805 ab01 	strb.w	sl, [r5], #1
 800837a:	1aea      	subs	r2, r5, r3
 800837c:	9b02      	ldr	r3, [sp, #8]
 800837e:	4293      	cmp	r3, r2
 8008380:	dd09      	ble.n	8008396 <_dtoa_r+0xb56>
 8008382:	ee18 1a10 	vmov	r1, s16
 8008386:	2300      	movs	r3, #0
 8008388:	220a      	movs	r2, #10
 800838a:	4620      	mov	r0, r4
 800838c:	f000 f8c2 	bl	8008514 <__multadd>
 8008390:	ee08 0a10 	vmov	s16, r0
 8008394:	e7e7      	b.n	8008366 <_dtoa_r+0xb26>
 8008396:	9b02      	ldr	r3, [sp, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	bfc8      	it	gt
 800839c:	461d      	movgt	r5, r3
 800839e:	9b01      	ldr	r3, [sp, #4]
 80083a0:	bfd8      	it	le
 80083a2:	2501      	movle	r5, #1
 80083a4:	441d      	add	r5, r3
 80083a6:	f04f 0800 	mov.w	r8, #0
 80083aa:	ee18 1a10 	vmov	r1, s16
 80083ae:	2201      	movs	r2, #1
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 fa5f 	bl	8008874 <__lshift>
 80083b6:	4631      	mov	r1, r6
 80083b8:	ee08 0a10 	vmov	s16, r0
 80083bc:	f000 faca 	bl	8008954 <__mcmp>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	dc91      	bgt.n	80082e8 <_dtoa_r+0xaa8>
 80083c4:	d102      	bne.n	80083cc <_dtoa_r+0xb8c>
 80083c6:	f01a 0f01 	tst.w	sl, #1
 80083ca:	d18d      	bne.n	80082e8 <_dtoa_r+0xaa8>
 80083cc:	462b      	mov	r3, r5
 80083ce:	461d      	mov	r5, r3
 80083d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083d4:	2a30      	cmp	r2, #48	; 0x30
 80083d6:	d0fa      	beq.n	80083ce <_dtoa_r+0xb8e>
 80083d8:	e6d7      	b.n	800818a <_dtoa_r+0x94a>
 80083da:	9a01      	ldr	r2, [sp, #4]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d184      	bne.n	80082ea <_dtoa_r+0xaaa>
 80083e0:	9b00      	ldr	r3, [sp, #0]
 80083e2:	3301      	adds	r3, #1
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	2331      	movs	r3, #49	; 0x31
 80083e8:	7013      	strb	r3, [r2, #0]
 80083ea:	e6ce      	b.n	800818a <_dtoa_r+0x94a>
 80083ec:	4b09      	ldr	r3, [pc, #36]	; (8008414 <_dtoa_r+0xbd4>)
 80083ee:	f7ff ba95 	b.w	800791c <_dtoa_r+0xdc>
 80083f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f47f aa6e 	bne.w	80078d6 <_dtoa_r+0x96>
 80083fa:	4b07      	ldr	r3, [pc, #28]	; (8008418 <_dtoa_r+0xbd8>)
 80083fc:	f7ff ba8e 	b.w	800791c <_dtoa_r+0xdc>
 8008400:	9b02      	ldr	r3, [sp, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	dcae      	bgt.n	8008364 <_dtoa_r+0xb24>
 8008406:	9b06      	ldr	r3, [sp, #24]
 8008408:	2b02      	cmp	r3, #2
 800840a:	f73f aea8 	bgt.w	800815e <_dtoa_r+0x91e>
 800840e:	e7a9      	b.n	8008364 <_dtoa_r+0xb24>
 8008410:	0800bdcb 	.word	0x0800bdcb
 8008414:	0800bd28 	.word	0x0800bd28
 8008418:	0800bd4c 	.word	0x0800bd4c

0800841c <_localeconv_r>:
 800841c:	4800      	ldr	r0, [pc, #0]	; (8008420 <_localeconv_r+0x4>)
 800841e:	4770      	bx	lr
 8008420:	20000394 	.word	0x20000394

08008424 <malloc>:
 8008424:	4b02      	ldr	r3, [pc, #8]	; (8008430 <malloc+0xc>)
 8008426:	4601      	mov	r1, r0
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	f000 bc17 	b.w	8008c5c <_malloc_r>
 800842e:	bf00      	nop
 8008430:	20000240 	.word	0x20000240

08008434 <memcpy>:
 8008434:	440a      	add	r2, r1
 8008436:	4291      	cmp	r1, r2
 8008438:	f100 33ff 	add.w	r3, r0, #4294967295
 800843c:	d100      	bne.n	8008440 <memcpy+0xc>
 800843e:	4770      	bx	lr
 8008440:	b510      	push	{r4, lr}
 8008442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800844a:	4291      	cmp	r1, r2
 800844c:	d1f9      	bne.n	8008442 <memcpy+0xe>
 800844e:	bd10      	pop	{r4, pc}

08008450 <_Balloc>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008454:	4604      	mov	r4, r0
 8008456:	460d      	mov	r5, r1
 8008458:	b976      	cbnz	r6, 8008478 <_Balloc+0x28>
 800845a:	2010      	movs	r0, #16
 800845c:	f7ff ffe2 	bl	8008424 <malloc>
 8008460:	4602      	mov	r2, r0
 8008462:	6260      	str	r0, [r4, #36]	; 0x24
 8008464:	b920      	cbnz	r0, 8008470 <_Balloc+0x20>
 8008466:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <_Balloc+0x78>)
 8008468:	4818      	ldr	r0, [pc, #96]	; (80084cc <_Balloc+0x7c>)
 800846a:	2166      	movs	r1, #102	; 0x66
 800846c:	f000 fdd6 	bl	800901c <__assert_func>
 8008470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008474:	6006      	str	r6, [r0, #0]
 8008476:	60c6      	str	r6, [r0, #12]
 8008478:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800847a:	68f3      	ldr	r3, [r6, #12]
 800847c:	b183      	cbz	r3, 80084a0 <_Balloc+0x50>
 800847e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008486:	b9b8      	cbnz	r0, 80084b8 <_Balloc+0x68>
 8008488:	2101      	movs	r1, #1
 800848a:	fa01 f605 	lsl.w	r6, r1, r5
 800848e:	1d72      	adds	r2, r6, #5
 8008490:	0092      	lsls	r2, r2, #2
 8008492:	4620      	mov	r0, r4
 8008494:	f000 fb60 	bl	8008b58 <_calloc_r>
 8008498:	b160      	cbz	r0, 80084b4 <_Balloc+0x64>
 800849a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800849e:	e00e      	b.n	80084be <_Balloc+0x6e>
 80084a0:	2221      	movs	r2, #33	; 0x21
 80084a2:	2104      	movs	r1, #4
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 fb57 	bl	8008b58 <_calloc_r>
 80084aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084ac:	60f0      	str	r0, [r6, #12]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e4      	bne.n	800847e <_Balloc+0x2e>
 80084b4:	2000      	movs	r0, #0
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	6802      	ldr	r2, [r0, #0]
 80084ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084be:	2300      	movs	r3, #0
 80084c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084c4:	e7f7      	b.n	80084b6 <_Balloc+0x66>
 80084c6:	bf00      	nop
 80084c8:	0800bd59 	.word	0x0800bd59
 80084cc:	0800bddc 	.word	0x0800bddc

080084d0 <_Bfree>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084d4:	4605      	mov	r5, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	b976      	cbnz	r6, 80084f8 <_Bfree+0x28>
 80084da:	2010      	movs	r0, #16
 80084dc:	f7ff ffa2 	bl	8008424 <malloc>
 80084e0:	4602      	mov	r2, r0
 80084e2:	6268      	str	r0, [r5, #36]	; 0x24
 80084e4:	b920      	cbnz	r0, 80084f0 <_Bfree+0x20>
 80084e6:	4b09      	ldr	r3, [pc, #36]	; (800850c <_Bfree+0x3c>)
 80084e8:	4809      	ldr	r0, [pc, #36]	; (8008510 <_Bfree+0x40>)
 80084ea:	218a      	movs	r1, #138	; 0x8a
 80084ec:	f000 fd96 	bl	800901c <__assert_func>
 80084f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084f4:	6006      	str	r6, [r0, #0]
 80084f6:	60c6      	str	r6, [r0, #12]
 80084f8:	b13c      	cbz	r4, 800850a <_Bfree+0x3a>
 80084fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084fc:	6862      	ldr	r2, [r4, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008504:	6021      	str	r1, [r4, #0]
 8008506:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	0800bd59 	.word	0x0800bd59
 8008510:	0800bddc 	.word	0x0800bddc

08008514 <__multadd>:
 8008514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008518:	690d      	ldr	r5, [r1, #16]
 800851a:	4607      	mov	r7, r0
 800851c:	460c      	mov	r4, r1
 800851e:	461e      	mov	r6, r3
 8008520:	f101 0c14 	add.w	ip, r1, #20
 8008524:	2000      	movs	r0, #0
 8008526:	f8dc 3000 	ldr.w	r3, [ip]
 800852a:	b299      	uxth	r1, r3
 800852c:	fb02 6101 	mla	r1, r2, r1, r6
 8008530:	0c1e      	lsrs	r6, r3, #16
 8008532:	0c0b      	lsrs	r3, r1, #16
 8008534:	fb02 3306 	mla	r3, r2, r6, r3
 8008538:	b289      	uxth	r1, r1
 800853a:	3001      	adds	r0, #1
 800853c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008540:	4285      	cmp	r5, r0
 8008542:	f84c 1b04 	str.w	r1, [ip], #4
 8008546:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800854a:	dcec      	bgt.n	8008526 <__multadd+0x12>
 800854c:	b30e      	cbz	r6, 8008592 <__multadd+0x7e>
 800854e:	68a3      	ldr	r3, [r4, #8]
 8008550:	42ab      	cmp	r3, r5
 8008552:	dc19      	bgt.n	8008588 <__multadd+0x74>
 8008554:	6861      	ldr	r1, [r4, #4]
 8008556:	4638      	mov	r0, r7
 8008558:	3101      	adds	r1, #1
 800855a:	f7ff ff79 	bl	8008450 <_Balloc>
 800855e:	4680      	mov	r8, r0
 8008560:	b928      	cbnz	r0, 800856e <__multadd+0x5a>
 8008562:	4602      	mov	r2, r0
 8008564:	4b0c      	ldr	r3, [pc, #48]	; (8008598 <__multadd+0x84>)
 8008566:	480d      	ldr	r0, [pc, #52]	; (800859c <__multadd+0x88>)
 8008568:	21b5      	movs	r1, #181	; 0xb5
 800856a:	f000 fd57 	bl	800901c <__assert_func>
 800856e:	6922      	ldr	r2, [r4, #16]
 8008570:	3202      	adds	r2, #2
 8008572:	f104 010c 	add.w	r1, r4, #12
 8008576:	0092      	lsls	r2, r2, #2
 8008578:	300c      	adds	r0, #12
 800857a:	f7ff ff5b 	bl	8008434 <memcpy>
 800857e:	4621      	mov	r1, r4
 8008580:	4638      	mov	r0, r7
 8008582:	f7ff ffa5 	bl	80084d0 <_Bfree>
 8008586:	4644      	mov	r4, r8
 8008588:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800858c:	3501      	adds	r5, #1
 800858e:	615e      	str	r6, [r3, #20]
 8008590:	6125      	str	r5, [r4, #16]
 8008592:	4620      	mov	r0, r4
 8008594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008598:	0800bdcb 	.word	0x0800bdcb
 800859c:	0800bddc 	.word	0x0800bddc

080085a0 <__hi0bits>:
 80085a0:	0c03      	lsrs	r3, r0, #16
 80085a2:	041b      	lsls	r3, r3, #16
 80085a4:	b9d3      	cbnz	r3, 80085dc <__hi0bits+0x3c>
 80085a6:	0400      	lsls	r0, r0, #16
 80085a8:	2310      	movs	r3, #16
 80085aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80085ae:	bf04      	itt	eq
 80085b0:	0200      	lsleq	r0, r0, #8
 80085b2:	3308      	addeq	r3, #8
 80085b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80085b8:	bf04      	itt	eq
 80085ba:	0100      	lsleq	r0, r0, #4
 80085bc:	3304      	addeq	r3, #4
 80085be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80085c2:	bf04      	itt	eq
 80085c4:	0080      	lsleq	r0, r0, #2
 80085c6:	3302      	addeq	r3, #2
 80085c8:	2800      	cmp	r0, #0
 80085ca:	db05      	blt.n	80085d8 <__hi0bits+0x38>
 80085cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80085d0:	f103 0301 	add.w	r3, r3, #1
 80085d4:	bf08      	it	eq
 80085d6:	2320      	moveq	r3, #32
 80085d8:	4618      	mov	r0, r3
 80085da:	4770      	bx	lr
 80085dc:	2300      	movs	r3, #0
 80085de:	e7e4      	b.n	80085aa <__hi0bits+0xa>

080085e0 <__lo0bits>:
 80085e0:	6803      	ldr	r3, [r0, #0]
 80085e2:	f013 0207 	ands.w	r2, r3, #7
 80085e6:	4601      	mov	r1, r0
 80085e8:	d00b      	beq.n	8008602 <__lo0bits+0x22>
 80085ea:	07da      	lsls	r2, r3, #31
 80085ec:	d423      	bmi.n	8008636 <__lo0bits+0x56>
 80085ee:	0798      	lsls	r0, r3, #30
 80085f0:	bf49      	itett	mi
 80085f2:	085b      	lsrmi	r3, r3, #1
 80085f4:	089b      	lsrpl	r3, r3, #2
 80085f6:	2001      	movmi	r0, #1
 80085f8:	600b      	strmi	r3, [r1, #0]
 80085fa:	bf5c      	itt	pl
 80085fc:	600b      	strpl	r3, [r1, #0]
 80085fe:	2002      	movpl	r0, #2
 8008600:	4770      	bx	lr
 8008602:	b298      	uxth	r0, r3
 8008604:	b9a8      	cbnz	r0, 8008632 <__lo0bits+0x52>
 8008606:	0c1b      	lsrs	r3, r3, #16
 8008608:	2010      	movs	r0, #16
 800860a:	b2da      	uxtb	r2, r3
 800860c:	b90a      	cbnz	r2, 8008612 <__lo0bits+0x32>
 800860e:	3008      	adds	r0, #8
 8008610:	0a1b      	lsrs	r3, r3, #8
 8008612:	071a      	lsls	r2, r3, #28
 8008614:	bf04      	itt	eq
 8008616:	091b      	lsreq	r3, r3, #4
 8008618:	3004      	addeq	r0, #4
 800861a:	079a      	lsls	r2, r3, #30
 800861c:	bf04      	itt	eq
 800861e:	089b      	lsreq	r3, r3, #2
 8008620:	3002      	addeq	r0, #2
 8008622:	07da      	lsls	r2, r3, #31
 8008624:	d403      	bmi.n	800862e <__lo0bits+0x4e>
 8008626:	085b      	lsrs	r3, r3, #1
 8008628:	f100 0001 	add.w	r0, r0, #1
 800862c:	d005      	beq.n	800863a <__lo0bits+0x5a>
 800862e:	600b      	str	r3, [r1, #0]
 8008630:	4770      	bx	lr
 8008632:	4610      	mov	r0, r2
 8008634:	e7e9      	b.n	800860a <__lo0bits+0x2a>
 8008636:	2000      	movs	r0, #0
 8008638:	4770      	bx	lr
 800863a:	2020      	movs	r0, #32
 800863c:	4770      	bx	lr
	...

08008640 <__i2b>:
 8008640:	b510      	push	{r4, lr}
 8008642:	460c      	mov	r4, r1
 8008644:	2101      	movs	r1, #1
 8008646:	f7ff ff03 	bl	8008450 <_Balloc>
 800864a:	4602      	mov	r2, r0
 800864c:	b928      	cbnz	r0, 800865a <__i2b+0x1a>
 800864e:	4b05      	ldr	r3, [pc, #20]	; (8008664 <__i2b+0x24>)
 8008650:	4805      	ldr	r0, [pc, #20]	; (8008668 <__i2b+0x28>)
 8008652:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008656:	f000 fce1 	bl	800901c <__assert_func>
 800865a:	2301      	movs	r3, #1
 800865c:	6144      	str	r4, [r0, #20]
 800865e:	6103      	str	r3, [r0, #16]
 8008660:	bd10      	pop	{r4, pc}
 8008662:	bf00      	nop
 8008664:	0800bdcb 	.word	0x0800bdcb
 8008668:	0800bddc 	.word	0x0800bddc

0800866c <__multiply>:
 800866c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008670:	4691      	mov	r9, r2
 8008672:	690a      	ldr	r2, [r1, #16]
 8008674:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008678:	429a      	cmp	r2, r3
 800867a:	bfb8      	it	lt
 800867c:	460b      	movlt	r3, r1
 800867e:	460c      	mov	r4, r1
 8008680:	bfbc      	itt	lt
 8008682:	464c      	movlt	r4, r9
 8008684:	4699      	movlt	r9, r3
 8008686:	6927      	ldr	r7, [r4, #16]
 8008688:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800868c:	68a3      	ldr	r3, [r4, #8]
 800868e:	6861      	ldr	r1, [r4, #4]
 8008690:	eb07 060a 	add.w	r6, r7, sl
 8008694:	42b3      	cmp	r3, r6
 8008696:	b085      	sub	sp, #20
 8008698:	bfb8      	it	lt
 800869a:	3101      	addlt	r1, #1
 800869c:	f7ff fed8 	bl	8008450 <_Balloc>
 80086a0:	b930      	cbnz	r0, 80086b0 <__multiply+0x44>
 80086a2:	4602      	mov	r2, r0
 80086a4:	4b44      	ldr	r3, [pc, #272]	; (80087b8 <__multiply+0x14c>)
 80086a6:	4845      	ldr	r0, [pc, #276]	; (80087bc <__multiply+0x150>)
 80086a8:	f240 115d 	movw	r1, #349	; 0x15d
 80086ac:	f000 fcb6 	bl	800901c <__assert_func>
 80086b0:	f100 0514 	add.w	r5, r0, #20
 80086b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086b8:	462b      	mov	r3, r5
 80086ba:	2200      	movs	r2, #0
 80086bc:	4543      	cmp	r3, r8
 80086be:	d321      	bcc.n	8008704 <__multiply+0x98>
 80086c0:	f104 0314 	add.w	r3, r4, #20
 80086c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086c8:	f109 0314 	add.w	r3, r9, #20
 80086cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086d0:	9202      	str	r2, [sp, #8]
 80086d2:	1b3a      	subs	r2, r7, r4
 80086d4:	3a15      	subs	r2, #21
 80086d6:	f022 0203 	bic.w	r2, r2, #3
 80086da:	3204      	adds	r2, #4
 80086dc:	f104 0115 	add.w	r1, r4, #21
 80086e0:	428f      	cmp	r7, r1
 80086e2:	bf38      	it	cc
 80086e4:	2204      	movcc	r2, #4
 80086e6:	9201      	str	r2, [sp, #4]
 80086e8:	9a02      	ldr	r2, [sp, #8]
 80086ea:	9303      	str	r3, [sp, #12]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d80c      	bhi.n	800870a <__multiply+0x9e>
 80086f0:	2e00      	cmp	r6, #0
 80086f2:	dd03      	ble.n	80086fc <__multiply+0x90>
 80086f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d05a      	beq.n	80087b2 <__multiply+0x146>
 80086fc:	6106      	str	r6, [r0, #16]
 80086fe:	b005      	add	sp, #20
 8008700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008704:	f843 2b04 	str.w	r2, [r3], #4
 8008708:	e7d8      	b.n	80086bc <__multiply+0x50>
 800870a:	f8b3 a000 	ldrh.w	sl, [r3]
 800870e:	f1ba 0f00 	cmp.w	sl, #0
 8008712:	d024      	beq.n	800875e <__multiply+0xf2>
 8008714:	f104 0e14 	add.w	lr, r4, #20
 8008718:	46a9      	mov	r9, r5
 800871a:	f04f 0c00 	mov.w	ip, #0
 800871e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008722:	f8d9 1000 	ldr.w	r1, [r9]
 8008726:	fa1f fb82 	uxth.w	fp, r2
 800872a:	b289      	uxth	r1, r1
 800872c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008730:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008734:	f8d9 2000 	ldr.w	r2, [r9]
 8008738:	4461      	add	r1, ip
 800873a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800873e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008742:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008746:	b289      	uxth	r1, r1
 8008748:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800874c:	4577      	cmp	r7, lr
 800874e:	f849 1b04 	str.w	r1, [r9], #4
 8008752:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008756:	d8e2      	bhi.n	800871e <__multiply+0xb2>
 8008758:	9a01      	ldr	r2, [sp, #4]
 800875a:	f845 c002 	str.w	ip, [r5, r2]
 800875e:	9a03      	ldr	r2, [sp, #12]
 8008760:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008764:	3304      	adds	r3, #4
 8008766:	f1b9 0f00 	cmp.w	r9, #0
 800876a:	d020      	beq.n	80087ae <__multiply+0x142>
 800876c:	6829      	ldr	r1, [r5, #0]
 800876e:	f104 0c14 	add.w	ip, r4, #20
 8008772:	46ae      	mov	lr, r5
 8008774:	f04f 0a00 	mov.w	sl, #0
 8008778:	f8bc b000 	ldrh.w	fp, [ip]
 800877c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008780:	fb09 220b 	mla	r2, r9, fp, r2
 8008784:	4492      	add	sl, r2
 8008786:	b289      	uxth	r1, r1
 8008788:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800878c:	f84e 1b04 	str.w	r1, [lr], #4
 8008790:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008794:	f8be 1000 	ldrh.w	r1, [lr]
 8008798:	0c12      	lsrs	r2, r2, #16
 800879a:	fb09 1102 	mla	r1, r9, r2, r1
 800879e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80087a2:	4567      	cmp	r7, ip
 80087a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087a8:	d8e6      	bhi.n	8008778 <__multiply+0x10c>
 80087aa:	9a01      	ldr	r2, [sp, #4]
 80087ac:	50a9      	str	r1, [r5, r2]
 80087ae:	3504      	adds	r5, #4
 80087b0:	e79a      	b.n	80086e8 <__multiply+0x7c>
 80087b2:	3e01      	subs	r6, #1
 80087b4:	e79c      	b.n	80086f0 <__multiply+0x84>
 80087b6:	bf00      	nop
 80087b8:	0800bdcb 	.word	0x0800bdcb
 80087bc:	0800bddc 	.word	0x0800bddc

080087c0 <__pow5mult>:
 80087c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087c4:	4615      	mov	r5, r2
 80087c6:	f012 0203 	ands.w	r2, r2, #3
 80087ca:	4606      	mov	r6, r0
 80087cc:	460f      	mov	r7, r1
 80087ce:	d007      	beq.n	80087e0 <__pow5mult+0x20>
 80087d0:	4c25      	ldr	r4, [pc, #148]	; (8008868 <__pow5mult+0xa8>)
 80087d2:	3a01      	subs	r2, #1
 80087d4:	2300      	movs	r3, #0
 80087d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087da:	f7ff fe9b 	bl	8008514 <__multadd>
 80087de:	4607      	mov	r7, r0
 80087e0:	10ad      	asrs	r5, r5, #2
 80087e2:	d03d      	beq.n	8008860 <__pow5mult+0xa0>
 80087e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80087e6:	b97c      	cbnz	r4, 8008808 <__pow5mult+0x48>
 80087e8:	2010      	movs	r0, #16
 80087ea:	f7ff fe1b 	bl	8008424 <malloc>
 80087ee:	4602      	mov	r2, r0
 80087f0:	6270      	str	r0, [r6, #36]	; 0x24
 80087f2:	b928      	cbnz	r0, 8008800 <__pow5mult+0x40>
 80087f4:	4b1d      	ldr	r3, [pc, #116]	; (800886c <__pow5mult+0xac>)
 80087f6:	481e      	ldr	r0, [pc, #120]	; (8008870 <__pow5mult+0xb0>)
 80087f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80087fc:	f000 fc0e 	bl	800901c <__assert_func>
 8008800:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008804:	6004      	str	r4, [r0, #0]
 8008806:	60c4      	str	r4, [r0, #12]
 8008808:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800880c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008810:	b94c      	cbnz	r4, 8008826 <__pow5mult+0x66>
 8008812:	f240 2171 	movw	r1, #625	; 0x271
 8008816:	4630      	mov	r0, r6
 8008818:	f7ff ff12 	bl	8008640 <__i2b>
 800881c:	2300      	movs	r3, #0
 800881e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008822:	4604      	mov	r4, r0
 8008824:	6003      	str	r3, [r0, #0]
 8008826:	f04f 0900 	mov.w	r9, #0
 800882a:	07eb      	lsls	r3, r5, #31
 800882c:	d50a      	bpl.n	8008844 <__pow5mult+0x84>
 800882e:	4639      	mov	r1, r7
 8008830:	4622      	mov	r2, r4
 8008832:	4630      	mov	r0, r6
 8008834:	f7ff ff1a 	bl	800866c <__multiply>
 8008838:	4639      	mov	r1, r7
 800883a:	4680      	mov	r8, r0
 800883c:	4630      	mov	r0, r6
 800883e:	f7ff fe47 	bl	80084d0 <_Bfree>
 8008842:	4647      	mov	r7, r8
 8008844:	106d      	asrs	r5, r5, #1
 8008846:	d00b      	beq.n	8008860 <__pow5mult+0xa0>
 8008848:	6820      	ldr	r0, [r4, #0]
 800884a:	b938      	cbnz	r0, 800885c <__pow5mult+0x9c>
 800884c:	4622      	mov	r2, r4
 800884e:	4621      	mov	r1, r4
 8008850:	4630      	mov	r0, r6
 8008852:	f7ff ff0b 	bl	800866c <__multiply>
 8008856:	6020      	str	r0, [r4, #0]
 8008858:	f8c0 9000 	str.w	r9, [r0]
 800885c:	4604      	mov	r4, r0
 800885e:	e7e4      	b.n	800882a <__pow5mult+0x6a>
 8008860:	4638      	mov	r0, r7
 8008862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008866:	bf00      	nop
 8008868:	0800bf28 	.word	0x0800bf28
 800886c:	0800bd59 	.word	0x0800bd59
 8008870:	0800bddc 	.word	0x0800bddc

08008874 <__lshift>:
 8008874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008878:	460c      	mov	r4, r1
 800887a:	6849      	ldr	r1, [r1, #4]
 800887c:	6923      	ldr	r3, [r4, #16]
 800887e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008882:	68a3      	ldr	r3, [r4, #8]
 8008884:	4607      	mov	r7, r0
 8008886:	4691      	mov	r9, r2
 8008888:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800888c:	f108 0601 	add.w	r6, r8, #1
 8008890:	42b3      	cmp	r3, r6
 8008892:	db0b      	blt.n	80088ac <__lshift+0x38>
 8008894:	4638      	mov	r0, r7
 8008896:	f7ff fddb 	bl	8008450 <_Balloc>
 800889a:	4605      	mov	r5, r0
 800889c:	b948      	cbnz	r0, 80088b2 <__lshift+0x3e>
 800889e:	4602      	mov	r2, r0
 80088a0:	4b2a      	ldr	r3, [pc, #168]	; (800894c <__lshift+0xd8>)
 80088a2:	482b      	ldr	r0, [pc, #172]	; (8008950 <__lshift+0xdc>)
 80088a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80088a8:	f000 fbb8 	bl	800901c <__assert_func>
 80088ac:	3101      	adds	r1, #1
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	e7ee      	b.n	8008890 <__lshift+0x1c>
 80088b2:	2300      	movs	r3, #0
 80088b4:	f100 0114 	add.w	r1, r0, #20
 80088b8:	f100 0210 	add.w	r2, r0, #16
 80088bc:	4618      	mov	r0, r3
 80088be:	4553      	cmp	r3, sl
 80088c0:	db37      	blt.n	8008932 <__lshift+0xbe>
 80088c2:	6920      	ldr	r0, [r4, #16]
 80088c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088c8:	f104 0314 	add.w	r3, r4, #20
 80088cc:	f019 091f 	ands.w	r9, r9, #31
 80088d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80088d8:	d02f      	beq.n	800893a <__lshift+0xc6>
 80088da:	f1c9 0e20 	rsb	lr, r9, #32
 80088de:	468a      	mov	sl, r1
 80088e0:	f04f 0c00 	mov.w	ip, #0
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	fa02 f209 	lsl.w	r2, r2, r9
 80088ea:	ea42 020c 	orr.w	r2, r2, ip
 80088ee:	f84a 2b04 	str.w	r2, [sl], #4
 80088f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088f6:	4298      	cmp	r0, r3
 80088f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80088fc:	d8f2      	bhi.n	80088e4 <__lshift+0x70>
 80088fe:	1b03      	subs	r3, r0, r4
 8008900:	3b15      	subs	r3, #21
 8008902:	f023 0303 	bic.w	r3, r3, #3
 8008906:	3304      	adds	r3, #4
 8008908:	f104 0215 	add.w	r2, r4, #21
 800890c:	4290      	cmp	r0, r2
 800890e:	bf38      	it	cc
 8008910:	2304      	movcc	r3, #4
 8008912:	f841 c003 	str.w	ip, [r1, r3]
 8008916:	f1bc 0f00 	cmp.w	ip, #0
 800891a:	d001      	beq.n	8008920 <__lshift+0xac>
 800891c:	f108 0602 	add.w	r6, r8, #2
 8008920:	3e01      	subs	r6, #1
 8008922:	4638      	mov	r0, r7
 8008924:	612e      	str	r6, [r5, #16]
 8008926:	4621      	mov	r1, r4
 8008928:	f7ff fdd2 	bl	80084d0 <_Bfree>
 800892c:	4628      	mov	r0, r5
 800892e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008932:	f842 0f04 	str.w	r0, [r2, #4]!
 8008936:	3301      	adds	r3, #1
 8008938:	e7c1      	b.n	80088be <__lshift+0x4a>
 800893a:	3904      	subs	r1, #4
 800893c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008940:	f841 2f04 	str.w	r2, [r1, #4]!
 8008944:	4298      	cmp	r0, r3
 8008946:	d8f9      	bhi.n	800893c <__lshift+0xc8>
 8008948:	e7ea      	b.n	8008920 <__lshift+0xac>
 800894a:	bf00      	nop
 800894c:	0800bdcb 	.word	0x0800bdcb
 8008950:	0800bddc 	.word	0x0800bddc

08008954 <__mcmp>:
 8008954:	b530      	push	{r4, r5, lr}
 8008956:	6902      	ldr	r2, [r0, #16]
 8008958:	690c      	ldr	r4, [r1, #16]
 800895a:	1b12      	subs	r2, r2, r4
 800895c:	d10e      	bne.n	800897c <__mcmp+0x28>
 800895e:	f100 0314 	add.w	r3, r0, #20
 8008962:	3114      	adds	r1, #20
 8008964:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008968:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800896c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008970:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008974:	42a5      	cmp	r5, r4
 8008976:	d003      	beq.n	8008980 <__mcmp+0x2c>
 8008978:	d305      	bcc.n	8008986 <__mcmp+0x32>
 800897a:	2201      	movs	r2, #1
 800897c:	4610      	mov	r0, r2
 800897e:	bd30      	pop	{r4, r5, pc}
 8008980:	4283      	cmp	r3, r0
 8008982:	d3f3      	bcc.n	800896c <__mcmp+0x18>
 8008984:	e7fa      	b.n	800897c <__mcmp+0x28>
 8008986:	f04f 32ff 	mov.w	r2, #4294967295
 800898a:	e7f7      	b.n	800897c <__mcmp+0x28>

0800898c <__mdiff>:
 800898c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008990:	460c      	mov	r4, r1
 8008992:	4606      	mov	r6, r0
 8008994:	4611      	mov	r1, r2
 8008996:	4620      	mov	r0, r4
 8008998:	4690      	mov	r8, r2
 800899a:	f7ff ffdb 	bl	8008954 <__mcmp>
 800899e:	1e05      	subs	r5, r0, #0
 80089a0:	d110      	bne.n	80089c4 <__mdiff+0x38>
 80089a2:	4629      	mov	r1, r5
 80089a4:	4630      	mov	r0, r6
 80089a6:	f7ff fd53 	bl	8008450 <_Balloc>
 80089aa:	b930      	cbnz	r0, 80089ba <__mdiff+0x2e>
 80089ac:	4b3a      	ldr	r3, [pc, #232]	; (8008a98 <__mdiff+0x10c>)
 80089ae:	4602      	mov	r2, r0
 80089b0:	f240 2132 	movw	r1, #562	; 0x232
 80089b4:	4839      	ldr	r0, [pc, #228]	; (8008a9c <__mdiff+0x110>)
 80089b6:	f000 fb31 	bl	800901c <__assert_func>
 80089ba:	2301      	movs	r3, #1
 80089bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c4:	bfa4      	itt	ge
 80089c6:	4643      	movge	r3, r8
 80089c8:	46a0      	movge	r8, r4
 80089ca:	4630      	mov	r0, r6
 80089cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80089d0:	bfa6      	itte	ge
 80089d2:	461c      	movge	r4, r3
 80089d4:	2500      	movge	r5, #0
 80089d6:	2501      	movlt	r5, #1
 80089d8:	f7ff fd3a 	bl	8008450 <_Balloc>
 80089dc:	b920      	cbnz	r0, 80089e8 <__mdiff+0x5c>
 80089de:	4b2e      	ldr	r3, [pc, #184]	; (8008a98 <__mdiff+0x10c>)
 80089e0:	4602      	mov	r2, r0
 80089e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80089e6:	e7e5      	b.n	80089b4 <__mdiff+0x28>
 80089e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80089ec:	6926      	ldr	r6, [r4, #16]
 80089ee:	60c5      	str	r5, [r0, #12]
 80089f0:	f104 0914 	add.w	r9, r4, #20
 80089f4:	f108 0514 	add.w	r5, r8, #20
 80089f8:	f100 0e14 	add.w	lr, r0, #20
 80089fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a04:	f108 0210 	add.w	r2, r8, #16
 8008a08:	46f2      	mov	sl, lr
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a14:	fa1f f883 	uxth.w	r8, r3
 8008a18:	fa11 f18b 	uxtah	r1, r1, fp
 8008a1c:	0c1b      	lsrs	r3, r3, #16
 8008a1e:	eba1 0808 	sub.w	r8, r1, r8
 8008a22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a2a:	fa1f f888 	uxth.w	r8, r8
 8008a2e:	1419      	asrs	r1, r3, #16
 8008a30:	454e      	cmp	r6, r9
 8008a32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a36:	f84a 3b04 	str.w	r3, [sl], #4
 8008a3a:	d8e7      	bhi.n	8008a0c <__mdiff+0x80>
 8008a3c:	1b33      	subs	r3, r6, r4
 8008a3e:	3b15      	subs	r3, #21
 8008a40:	f023 0303 	bic.w	r3, r3, #3
 8008a44:	3304      	adds	r3, #4
 8008a46:	3415      	adds	r4, #21
 8008a48:	42a6      	cmp	r6, r4
 8008a4a:	bf38      	it	cc
 8008a4c:	2304      	movcc	r3, #4
 8008a4e:	441d      	add	r5, r3
 8008a50:	4473      	add	r3, lr
 8008a52:	469e      	mov	lr, r3
 8008a54:	462e      	mov	r6, r5
 8008a56:	4566      	cmp	r6, ip
 8008a58:	d30e      	bcc.n	8008a78 <__mdiff+0xec>
 8008a5a:	f10c 0203 	add.w	r2, ip, #3
 8008a5e:	1b52      	subs	r2, r2, r5
 8008a60:	f022 0203 	bic.w	r2, r2, #3
 8008a64:	3d03      	subs	r5, #3
 8008a66:	45ac      	cmp	ip, r5
 8008a68:	bf38      	it	cc
 8008a6a:	2200      	movcc	r2, #0
 8008a6c:	441a      	add	r2, r3
 8008a6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008a72:	b17b      	cbz	r3, 8008a94 <__mdiff+0x108>
 8008a74:	6107      	str	r7, [r0, #16]
 8008a76:	e7a3      	b.n	80089c0 <__mdiff+0x34>
 8008a78:	f856 8b04 	ldr.w	r8, [r6], #4
 8008a7c:	fa11 f288 	uxtah	r2, r1, r8
 8008a80:	1414      	asrs	r4, r2, #16
 8008a82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a86:	b292      	uxth	r2, r2
 8008a88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008a8c:	f84e 2b04 	str.w	r2, [lr], #4
 8008a90:	1421      	asrs	r1, r4, #16
 8008a92:	e7e0      	b.n	8008a56 <__mdiff+0xca>
 8008a94:	3f01      	subs	r7, #1
 8008a96:	e7ea      	b.n	8008a6e <__mdiff+0xe2>
 8008a98:	0800bdcb 	.word	0x0800bdcb
 8008a9c:	0800bddc 	.word	0x0800bddc

08008aa0 <__d2b>:
 8008aa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008aa4:	4689      	mov	r9, r1
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	ec57 6b10 	vmov	r6, r7, d0
 8008aac:	4690      	mov	r8, r2
 8008aae:	f7ff fccf 	bl	8008450 <_Balloc>
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	b930      	cbnz	r0, 8008ac4 <__d2b+0x24>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	4b25      	ldr	r3, [pc, #148]	; (8008b50 <__d2b+0xb0>)
 8008aba:	4826      	ldr	r0, [pc, #152]	; (8008b54 <__d2b+0xb4>)
 8008abc:	f240 310a 	movw	r1, #778	; 0x30a
 8008ac0:	f000 faac 	bl	800901c <__assert_func>
 8008ac4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ac8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008acc:	bb35      	cbnz	r5, 8008b1c <__d2b+0x7c>
 8008ace:	2e00      	cmp	r6, #0
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	d028      	beq.n	8008b26 <__d2b+0x86>
 8008ad4:	4668      	mov	r0, sp
 8008ad6:	9600      	str	r6, [sp, #0]
 8008ad8:	f7ff fd82 	bl	80085e0 <__lo0bits>
 8008adc:	9900      	ldr	r1, [sp, #0]
 8008ade:	b300      	cbz	r0, 8008b22 <__d2b+0x82>
 8008ae0:	9a01      	ldr	r2, [sp, #4]
 8008ae2:	f1c0 0320 	rsb	r3, r0, #32
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	430b      	orrs	r3, r1
 8008aec:	40c2      	lsrs	r2, r0
 8008aee:	6163      	str	r3, [r4, #20]
 8008af0:	9201      	str	r2, [sp, #4]
 8008af2:	9b01      	ldr	r3, [sp, #4]
 8008af4:	61a3      	str	r3, [r4, #24]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	bf14      	ite	ne
 8008afa:	2202      	movne	r2, #2
 8008afc:	2201      	moveq	r2, #1
 8008afe:	6122      	str	r2, [r4, #16]
 8008b00:	b1d5      	cbz	r5, 8008b38 <__d2b+0x98>
 8008b02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b06:	4405      	add	r5, r0
 8008b08:	f8c9 5000 	str.w	r5, [r9]
 8008b0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b10:	f8c8 0000 	str.w	r0, [r8]
 8008b14:	4620      	mov	r0, r4
 8008b16:	b003      	add	sp, #12
 8008b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b20:	e7d5      	b.n	8008ace <__d2b+0x2e>
 8008b22:	6161      	str	r1, [r4, #20]
 8008b24:	e7e5      	b.n	8008af2 <__d2b+0x52>
 8008b26:	a801      	add	r0, sp, #4
 8008b28:	f7ff fd5a 	bl	80085e0 <__lo0bits>
 8008b2c:	9b01      	ldr	r3, [sp, #4]
 8008b2e:	6163      	str	r3, [r4, #20]
 8008b30:	2201      	movs	r2, #1
 8008b32:	6122      	str	r2, [r4, #16]
 8008b34:	3020      	adds	r0, #32
 8008b36:	e7e3      	b.n	8008b00 <__d2b+0x60>
 8008b38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b40:	f8c9 0000 	str.w	r0, [r9]
 8008b44:	6918      	ldr	r0, [r3, #16]
 8008b46:	f7ff fd2b 	bl	80085a0 <__hi0bits>
 8008b4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b4e:	e7df      	b.n	8008b10 <__d2b+0x70>
 8008b50:	0800bdcb 	.word	0x0800bdcb
 8008b54:	0800bddc 	.word	0x0800bddc

08008b58 <_calloc_r>:
 8008b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b5a:	fba1 2402 	umull	r2, r4, r1, r2
 8008b5e:	b94c      	cbnz	r4, 8008b74 <_calloc_r+0x1c>
 8008b60:	4611      	mov	r1, r2
 8008b62:	9201      	str	r2, [sp, #4]
 8008b64:	f000 f87a 	bl	8008c5c <_malloc_r>
 8008b68:	9a01      	ldr	r2, [sp, #4]
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	b930      	cbnz	r0, 8008b7c <_calloc_r+0x24>
 8008b6e:	4628      	mov	r0, r5
 8008b70:	b003      	add	sp, #12
 8008b72:	bd30      	pop	{r4, r5, pc}
 8008b74:	220c      	movs	r2, #12
 8008b76:	6002      	str	r2, [r0, #0]
 8008b78:	2500      	movs	r5, #0
 8008b7a:	e7f8      	b.n	8008b6e <_calloc_r+0x16>
 8008b7c:	4621      	mov	r1, r4
 8008b7e:	f7fe f941 	bl	8006e04 <memset>
 8008b82:	e7f4      	b.n	8008b6e <_calloc_r+0x16>

08008b84 <_free_r>:
 8008b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b86:	2900      	cmp	r1, #0
 8008b88:	d044      	beq.n	8008c14 <_free_r+0x90>
 8008b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b8e:	9001      	str	r0, [sp, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f1a1 0404 	sub.w	r4, r1, #4
 8008b96:	bfb8      	it	lt
 8008b98:	18e4      	addlt	r4, r4, r3
 8008b9a:	f000 fa9b 	bl	80090d4 <__malloc_lock>
 8008b9e:	4a1e      	ldr	r2, [pc, #120]	; (8008c18 <_free_r+0x94>)
 8008ba0:	9801      	ldr	r0, [sp, #4]
 8008ba2:	6813      	ldr	r3, [r2, #0]
 8008ba4:	b933      	cbnz	r3, 8008bb4 <_free_r+0x30>
 8008ba6:	6063      	str	r3, [r4, #4]
 8008ba8:	6014      	str	r4, [r2, #0]
 8008baa:	b003      	add	sp, #12
 8008bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bb0:	f000 ba96 	b.w	80090e0 <__malloc_unlock>
 8008bb4:	42a3      	cmp	r3, r4
 8008bb6:	d908      	bls.n	8008bca <_free_r+0x46>
 8008bb8:	6825      	ldr	r5, [r4, #0]
 8008bba:	1961      	adds	r1, r4, r5
 8008bbc:	428b      	cmp	r3, r1
 8008bbe:	bf01      	itttt	eq
 8008bc0:	6819      	ldreq	r1, [r3, #0]
 8008bc2:	685b      	ldreq	r3, [r3, #4]
 8008bc4:	1949      	addeq	r1, r1, r5
 8008bc6:	6021      	streq	r1, [r4, #0]
 8008bc8:	e7ed      	b.n	8008ba6 <_free_r+0x22>
 8008bca:	461a      	mov	r2, r3
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	b10b      	cbz	r3, 8008bd4 <_free_r+0x50>
 8008bd0:	42a3      	cmp	r3, r4
 8008bd2:	d9fa      	bls.n	8008bca <_free_r+0x46>
 8008bd4:	6811      	ldr	r1, [r2, #0]
 8008bd6:	1855      	adds	r5, r2, r1
 8008bd8:	42a5      	cmp	r5, r4
 8008bda:	d10b      	bne.n	8008bf4 <_free_r+0x70>
 8008bdc:	6824      	ldr	r4, [r4, #0]
 8008bde:	4421      	add	r1, r4
 8008be0:	1854      	adds	r4, r2, r1
 8008be2:	42a3      	cmp	r3, r4
 8008be4:	6011      	str	r1, [r2, #0]
 8008be6:	d1e0      	bne.n	8008baa <_free_r+0x26>
 8008be8:	681c      	ldr	r4, [r3, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	6053      	str	r3, [r2, #4]
 8008bee:	4421      	add	r1, r4
 8008bf0:	6011      	str	r1, [r2, #0]
 8008bf2:	e7da      	b.n	8008baa <_free_r+0x26>
 8008bf4:	d902      	bls.n	8008bfc <_free_r+0x78>
 8008bf6:	230c      	movs	r3, #12
 8008bf8:	6003      	str	r3, [r0, #0]
 8008bfa:	e7d6      	b.n	8008baa <_free_r+0x26>
 8008bfc:	6825      	ldr	r5, [r4, #0]
 8008bfe:	1961      	adds	r1, r4, r5
 8008c00:	428b      	cmp	r3, r1
 8008c02:	bf04      	itt	eq
 8008c04:	6819      	ldreq	r1, [r3, #0]
 8008c06:	685b      	ldreq	r3, [r3, #4]
 8008c08:	6063      	str	r3, [r4, #4]
 8008c0a:	bf04      	itt	eq
 8008c0c:	1949      	addeq	r1, r1, r5
 8008c0e:	6021      	streq	r1, [r4, #0]
 8008c10:	6054      	str	r4, [r2, #4]
 8008c12:	e7ca      	b.n	8008baa <_free_r+0x26>
 8008c14:	b003      	add	sp, #12
 8008c16:	bd30      	pop	{r4, r5, pc}
 8008c18:	200008e0 	.word	0x200008e0

08008c1c <sbrk_aligned>:
 8008c1c:	b570      	push	{r4, r5, r6, lr}
 8008c1e:	4e0e      	ldr	r6, [pc, #56]	; (8008c58 <sbrk_aligned+0x3c>)
 8008c20:	460c      	mov	r4, r1
 8008c22:	6831      	ldr	r1, [r6, #0]
 8008c24:	4605      	mov	r5, r0
 8008c26:	b911      	cbnz	r1, 8008c2e <sbrk_aligned+0x12>
 8008c28:	f000 f9e8 	bl	8008ffc <_sbrk_r>
 8008c2c:	6030      	str	r0, [r6, #0]
 8008c2e:	4621      	mov	r1, r4
 8008c30:	4628      	mov	r0, r5
 8008c32:	f000 f9e3 	bl	8008ffc <_sbrk_r>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d00a      	beq.n	8008c50 <sbrk_aligned+0x34>
 8008c3a:	1cc4      	adds	r4, r0, #3
 8008c3c:	f024 0403 	bic.w	r4, r4, #3
 8008c40:	42a0      	cmp	r0, r4
 8008c42:	d007      	beq.n	8008c54 <sbrk_aligned+0x38>
 8008c44:	1a21      	subs	r1, r4, r0
 8008c46:	4628      	mov	r0, r5
 8008c48:	f000 f9d8 	bl	8008ffc <_sbrk_r>
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d101      	bne.n	8008c54 <sbrk_aligned+0x38>
 8008c50:	f04f 34ff 	mov.w	r4, #4294967295
 8008c54:	4620      	mov	r0, r4
 8008c56:	bd70      	pop	{r4, r5, r6, pc}
 8008c58:	200008e4 	.word	0x200008e4

08008c5c <_malloc_r>:
 8008c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c60:	1ccd      	adds	r5, r1, #3
 8008c62:	f025 0503 	bic.w	r5, r5, #3
 8008c66:	3508      	adds	r5, #8
 8008c68:	2d0c      	cmp	r5, #12
 8008c6a:	bf38      	it	cc
 8008c6c:	250c      	movcc	r5, #12
 8008c6e:	2d00      	cmp	r5, #0
 8008c70:	4607      	mov	r7, r0
 8008c72:	db01      	blt.n	8008c78 <_malloc_r+0x1c>
 8008c74:	42a9      	cmp	r1, r5
 8008c76:	d905      	bls.n	8008c84 <_malloc_r+0x28>
 8008c78:	230c      	movs	r3, #12
 8008c7a:	603b      	str	r3, [r7, #0]
 8008c7c:	2600      	movs	r6, #0
 8008c7e:	4630      	mov	r0, r6
 8008c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c84:	4e2e      	ldr	r6, [pc, #184]	; (8008d40 <_malloc_r+0xe4>)
 8008c86:	f000 fa25 	bl	80090d4 <__malloc_lock>
 8008c8a:	6833      	ldr	r3, [r6, #0]
 8008c8c:	461c      	mov	r4, r3
 8008c8e:	bb34      	cbnz	r4, 8008cde <_malloc_r+0x82>
 8008c90:	4629      	mov	r1, r5
 8008c92:	4638      	mov	r0, r7
 8008c94:	f7ff ffc2 	bl	8008c1c <sbrk_aligned>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	d14d      	bne.n	8008d3a <_malloc_r+0xde>
 8008c9e:	6834      	ldr	r4, [r6, #0]
 8008ca0:	4626      	mov	r6, r4
 8008ca2:	2e00      	cmp	r6, #0
 8008ca4:	d140      	bne.n	8008d28 <_malloc_r+0xcc>
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	4631      	mov	r1, r6
 8008caa:	4638      	mov	r0, r7
 8008cac:	eb04 0803 	add.w	r8, r4, r3
 8008cb0:	f000 f9a4 	bl	8008ffc <_sbrk_r>
 8008cb4:	4580      	cmp	r8, r0
 8008cb6:	d13a      	bne.n	8008d2e <_malloc_r+0xd2>
 8008cb8:	6821      	ldr	r1, [r4, #0]
 8008cba:	3503      	adds	r5, #3
 8008cbc:	1a6d      	subs	r5, r5, r1
 8008cbe:	f025 0503 	bic.w	r5, r5, #3
 8008cc2:	3508      	adds	r5, #8
 8008cc4:	2d0c      	cmp	r5, #12
 8008cc6:	bf38      	it	cc
 8008cc8:	250c      	movcc	r5, #12
 8008cca:	4629      	mov	r1, r5
 8008ccc:	4638      	mov	r0, r7
 8008cce:	f7ff ffa5 	bl	8008c1c <sbrk_aligned>
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	d02b      	beq.n	8008d2e <_malloc_r+0xd2>
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	442b      	add	r3, r5
 8008cda:	6023      	str	r3, [r4, #0]
 8008cdc:	e00e      	b.n	8008cfc <_malloc_r+0xa0>
 8008cde:	6822      	ldr	r2, [r4, #0]
 8008ce0:	1b52      	subs	r2, r2, r5
 8008ce2:	d41e      	bmi.n	8008d22 <_malloc_r+0xc6>
 8008ce4:	2a0b      	cmp	r2, #11
 8008ce6:	d916      	bls.n	8008d16 <_malloc_r+0xba>
 8008ce8:	1961      	adds	r1, r4, r5
 8008cea:	42a3      	cmp	r3, r4
 8008cec:	6025      	str	r5, [r4, #0]
 8008cee:	bf18      	it	ne
 8008cf0:	6059      	strne	r1, [r3, #4]
 8008cf2:	6863      	ldr	r3, [r4, #4]
 8008cf4:	bf08      	it	eq
 8008cf6:	6031      	streq	r1, [r6, #0]
 8008cf8:	5162      	str	r2, [r4, r5]
 8008cfa:	604b      	str	r3, [r1, #4]
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	f104 060b 	add.w	r6, r4, #11
 8008d02:	f000 f9ed 	bl	80090e0 <__malloc_unlock>
 8008d06:	f026 0607 	bic.w	r6, r6, #7
 8008d0a:	1d23      	adds	r3, r4, #4
 8008d0c:	1af2      	subs	r2, r6, r3
 8008d0e:	d0b6      	beq.n	8008c7e <_malloc_r+0x22>
 8008d10:	1b9b      	subs	r3, r3, r6
 8008d12:	50a3      	str	r3, [r4, r2]
 8008d14:	e7b3      	b.n	8008c7e <_malloc_r+0x22>
 8008d16:	6862      	ldr	r2, [r4, #4]
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	bf0c      	ite	eq
 8008d1c:	6032      	streq	r2, [r6, #0]
 8008d1e:	605a      	strne	r2, [r3, #4]
 8008d20:	e7ec      	b.n	8008cfc <_malloc_r+0xa0>
 8008d22:	4623      	mov	r3, r4
 8008d24:	6864      	ldr	r4, [r4, #4]
 8008d26:	e7b2      	b.n	8008c8e <_malloc_r+0x32>
 8008d28:	4634      	mov	r4, r6
 8008d2a:	6876      	ldr	r6, [r6, #4]
 8008d2c:	e7b9      	b.n	8008ca2 <_malloc_r+0x46>
 8008d2e:	230c      	movs	r3, #12
 8008d30:	603b      	str	r3, [r7, #0]
 8008d32:	4638      	mov	r0, r7
 8008d34:	f000 f9d4 	bl	80090e0 <__malloc_unlock>
 8008d38:	e7a1      	b.n	8008c7e <_malloc_r+0x22>
 8008d3a:	6025      	str	r5, [r4, #0]
 8008d3c:	e7de      	b.n	8008cfc <_malloc_r+0xa0>
 8008d3e:	bf00      	nop
 8008d40:	200008e0 	.word	0x200008e0

08008d44 <__ssputs_r>:
 8008d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d48:	688e      	ldr	r6, [r1, #8]
 8008d4a:	429e      	cmp	r6, r3
 8008d4c:	4682      	mov	sl, r0
 8008d4e:	460c      	mov	r4, r1
 8008d50:	4690      	mov	r8, r2
 8008d52:	461f      	mov	r7, r3
 8008d54:	d838      	bhi.n	8008dc8 <__ssputs_r+0x84>
 8008d56:	898a      	ldrh	r2, [r1, #12]
 8008d58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d5c:	d032      	beq.n	8008dc4 <__ssputs_r+0x80>
 8008d5e:	6825      	ldr	r5, [r4, #0]
 8008d60:	6909      	ldr	r1, [r1, #16]
 8008d62:	eba5 0901 	sub.w	r9, r5, r1
 8008d66:	6965      	ldr	r5, [r4, #20]
 8008d68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d70:	3301      	adds	r3, #1
 8008d72:	444b      	add	r3, r9
 8008d74:	106d      	asrs	r5, r5, #1
 8008d76:	429d      	cmp	r5, r3
 8008d78:	bf38      	it	cc
 8008d7a:	461d      	movcc	r5, r3
 8008d7c:	0553      	lsls	r3, r2, #21
 8008d7e:	d531      	bpl.n	8008de4 <__ssputs_r+0xa0>
 8008d80:	4629      	mov	r1, r5
 8008d82:	f7ff ff6b 	bl	8008c5c <_malloc_r>
 8008d86:	4606      	mov	r6, r0
 8008d88:	b950      	cbnz	r0, 8008da0 <__ssputs_r+0x5c>
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	f8ca 3000 	str.w	r3, [sl]
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d96:	81a3      	strh	r3, [r4, #12]
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da0:	6921      	ldr	r1, [r4, #16]
 8008da2:	464a      	mov	r2, r9
 8008da4:	f7ff fb46 	bl	8008434 <memcpy>
 8008da8:	89a3      	ldrh	r3, [r4, #12]
 8008daa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008db2:	81a3      	strh	r3, [r4, #12]
 8008db4:	6126      	str	r6, [r4, #16]
 8008db6:	6165      	str	r5, [r4, #20]
 8008db8:	444e      	add	r6, r9
 8008dba:	eba5 0509 	sub.w	r5, r5, r9
 8008dbe:	6026      	str	r6, [r4, #0]
 8008dc0:	60a5      	str	r5, [r4, #8]
 8008dc2:	463e      	mov	r6, r7
 8008dc4:	42be      	cmp	r6, r7
 8008dc6:	d900      	bls.n	8008dca <__ssputs_r+0x86>
 8008dc8:	463e      	mov	r6, r7
 8008dca:	6820      	ldr	r0, [r4, #0]
 8008dcc:	4632      	mov	r2, r6
 8008dce:	4641      	mov	r1, r8
 8008dd0:	f000 f966 	bl	80090a0 <memmove>
 8008dd4:	68a3      	ldr	r3, [r4, #8]
 8008dd6:	1b9b      	subs	r3, r3, r6
 8008dd8:	60a3      	str	r3, [r4, #8]
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	4433      	add	r3, r6
 8008dde:	6023      	str	r3, [r4, #0]
 8008de0:	2000      	movs	r0, #0
 8008de2:	e7db      	b.n	8008d9c <__ssputs_r+0x58>
 8008de4:	462a      	mov	r2, r5
 8008de6:	f000 f981 	bl	80090ec <_realloc_r>
 8008dea:	4606      	mov	r6, r0
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d1e1      	bne.n	8008db4 <__ssputs_r+0x70>
 8008df0:	6921      	ldr	r1, [r4, #16]
 8008df2:	4650      	mov	r0, sl
 8008df4:	f7ff fec6 	bl	8008b84 <_free_r>
 8008df8:	e7c7      	b.n	8008d8a <__ssputs_r+0x46>
	...

08008dfc <_svfiprintf_r>:
 8008dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e00:	4698      	mov	r8, r3
 8008e02:	898b      	ldrh	r3, [r1, #12]
 8008e04:	061b      	lsls	r3, r3, #24
 8008e06:	b09d      	sub	sp, #116	; 0x74
 8008e08:	4607      	mov	r7, r0
 8008e0a:	460d      	mov	r5, r1
 8008e0c:	4614      	mov	r4, r2
 8008e0e:	d50e      	bpl.n	8008e2e <_svfiprintf_r+0x32>
 8008e10:	690b      	ldr	r3, [r1, #16]
 8008e12:	b963      	cbnz	r3, 8008e2e <_svfiprintf_r+0x32>
 8008e14:	2140      	movs	r1, #64	; 0x40
 8008e16:	f7ff ff21 	bl	8008c5c <_malloc_r>
 8008e1a:	6028      	str	r0, [r5, #0]
 8008e1c:	6128      	str	r0, [r5, #16]
 8008e1e:	b920      	cbnz	r0, 8008e2a <_svfiprintf_r+0x2e>
 8008e20:	230c      	movs	r3, #12
 8008e22:	603b      	str	r3, [r7, #0]
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	e0d1      	b.n	8008fce <_svfiprintf_r+0x1d2>
 8008e2a:	2340      	movs	r3, #64	; 0x40
 8008e2c:	616b      	str	r3, [r5, #20]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9309      	str	r3, [sp, #36]	; 0x24
 8008e32:	2320      	movs	r3, #32
 8008e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e38:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e3c:	2330      	movs	r3, #48	; 0x30
 8008e3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008fe8 <_svfiprintf_r+0x1ec>
 8008e42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e46:	f04f 0901 	mov.w	r9, #1
 8008e4a:	4623      	mov	r3, r4
 8008e4c:	469a      	mov	sl, r3
 8008e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e52:	b10a      	cbz	r2, 8008e58 <_svfiprintf_r+0x5c>
 8008e54:	2a25      	cmp	r2, #37	; 0x25
 8008e56:	d1f9      	bne.n	8008e4c <_svfiprintf_r+0x50>
 8008e58:	ebba 0b04 	subs.w	fp, sl, r4
 8008e5c:	d00b      	beq.n	8008e76 <_svfiprintf_r+0x7a>
 8008e5e:	465b      	mov	r3, fp
 8008e60:	4622      	mov	r2, r4
 8008e62:	4629      	mov	r1, r5
 8008e64:	4638      	mov	r0, r7
 8008e66:	f7ff ff6d 	bl	8008d44 <__ssputs_r>
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	f000 80aa 	beq.w	8008fc4 <_svfiprintf_r+0x1c8>
 8008e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e72:	445a      	add	r2, fp
 8008e74:	9209      	str	r2, [sp, #36]	; 0x24
 8008e76:	f89a 3000 	ldrb.w	r3, [sl]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 80a2 	beq.w	8008fc4 <_svfiprintf_r+0x1c8>
 8008e80:	2300      	movs	r3, #0
 8008e82:	f04f 32ff 	mov.w	r2, #4294967295
 8008e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e8a:	f10a 0a01 	add.w	sl, sl, #1
 8008e8e:	9304      	str	r3, [sp, #16]
 8008e90:	9307      	str	r3, [sp, #28]
 8008e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e96:	931a      	str	r3, [sp, #104]	; 0x68
 8008e98:	4654      	mov	r4, sl
 8008e9a:	2205      	movs	r2, #5
 8008e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea0:	4851      	ldr	r0, [pc, #324]	; (8008fe8 <_svfiprintf_r+0x1ec>)
 8008ea2:	f7f7 f99d 	bl	80001e0 <memchr>
 8008ea6:	9a04      	ldr	r2, [sp, #16]
 8008ea8:	b9d8      	cbnz	r0, 8008ee2 <_svfiprintf_r+0xe6>
 8008eaa:	06d0      	lsls	r0, r2, #27
 8008eac:	bf44      	itt	mi
 8008eae:	2320      	movmi	r3, #32
 8008eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eb4:	0711      	lsls	r1, r2, #28
 8008eb6:	bf44      	itt	mi
 8008eb8:	232b      	movmi	r3, #43	; 0x2b
 8008eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ec4:	d015      	beq.n	8008ef2 <_svfiprintf_r+0xf6>
 8008ec6:	9a07      	ldr	r2, [sp, #28]
 8008ec8:	4654      	mov	r4, sl
 8008eca:	2000      	movs	r0, #0
 8008ecc:	f04f 0c0a 	mov.w	ip, #10
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ed6:	3b30      	subs	r3, #48	; 0x30
 8008ed8:	2b09      	cmp	r3, #9
 8008eda:	d94e      	bls.n	8008f7a <_svfiprintf_r+0x17e>
 8008edc:	b1b0      	cbz	r0, 8008f0c <_svfiprintf_r+0x110>
 8008ede:	9207      	str	r2, [sp, #28]
 8008ee0:	e014      	b.n	8008f0c <_svfiprintf_r+0x110>
 8008ee2:	eba0 0308 	sub.w	r3, r0, r8
 8008ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8008eea:	4313      	orrs	r3, r2
 8008eec:	9304      	str	r3, [sp, #16]
 8008eee:	46a2      	mov	sl, r4
 8008ef0:	e7d2      	b.n	8008e98 <_svfiprintf_r+0x9c>
 8008ef2:	9b03      	ldr	r3, [sp, #12]
 8008ef4:	1d19      	adds	r1, r3, #4
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	9103      	str	r1, [sp, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	bfbb      	ittet	lt
 8008efe:	425b      	neglt	r3, r3
 8008f00:	f042 0202 	orrlt.w	r2, r2, #2
 8008f04:	9307      	strge	r3, [sp, #28]
 8008f06:	9307      	strlt	r3, [sp, #28]
 8008f08:	bfb8      	it	lt
 8008f0a:	9204      	strlt	r2, [sp, #16]
 8008f0c:	7823      	ldrb	r3, [r4, #0]
 8008f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8008f10:	d10c      	bne.n	8008f2c <_svfiprintf_r+0x130>
 8008f12:	7863      	ldrb	r3, [r4, #1]
 8008f14:	2b2a      	cmp	r3, #42	; 0x2a
 8008f16:	d135      	bne.n	8008f84 <_svfiprintf_r+0x188>
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	1d1a      	adds	r2, r3, #4
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	9203      	str	r2, [sp, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	bfb8      	it	lt
 8008f24:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f28:	3402      	adds	r4, #2
 8008f2a:	9305      	str	r3, [sp, #20]
 8008f2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ff8 <_svfiprintf_r+0x1fc>
 8008f30:	7821      	ldrb	r1, [r4, #0]
 8008f32:	2203      	movs	r2, #3
 8008f34:	4650      	mov	r0, sl
 8008f36:	f7f7 f953 	bl	80001e0 <memchr>
 8008f3a:	b140      	cbz	r0, 8008f4e <_svfiprintf_r+0x152>
 8008f3c:	2340      	movs	r3, #64	; 0x40
 8008f3e:	eba0 000a 	sub.w	r0, r0, sl
 8008f42:	fa03 f000 	lsl.w	r0, r3, r0
 8008f46:	9b04      	ldr	r3, [sp, #16]
 8008f48:	4303      	orrs	r3, r0
 8008f4a:	3401      	adds	r4, #1
 8008f4c:	9304      	str	r3, [sp, #16]
 8008f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f52:	4826      	ldr	r0, [pc, #152]	; (8008fec <_svfiprintf_r+0x1f0>)
 8008f54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f58:	2206      	movs	r2, #6
 8008f5a:	f7f7 f941 	bl	80001e0 <memchr>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d038      	beq.n	8008fd4 <_svfiprintf_r+0x1d8>
 8008f62:	4b23      	ldr	r3, [pc, #140]	; (8008ff0 <_svfiprintf_r+0x1f4>)
 8008f64:	bb1b      	cbnz	r3, 8008fae <_svfiprintf_r+0x1b2>
 8008f66:	9b03      	ldr	r3, [sp, #12]
 8008f68:	3307      	adds	r3, #7
 8008f6a:	f023 0307 	bic.w	r3, r3, #7
 8008f6e:	3308      	adds	r3, #8
 8008f70:	9303      	str	r3, [sp, #12]
 8008f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f74:	4433      	add	r3, r6
 8008f76:	9309      	str	r3, [sp, #36]	; 0x24
 8008f78:	e767      	b.n	8008e4a <_svfiprintf_r+0x4e>
 8008f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f7e:	460c      	mov	r4, r1
 8008f80:	2001      	movs	r0, #1
 8008f82:	e7a5      	b.n	8008ed0 <_svfiprintf_r+0xd4>
 8008f84:	2300      	movs	r3, #0
 8008f86:	3401      	adds	r4, #1
 8008f88:	9305      	str	r3, [sp, #20]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	f04f 0c0a 	mov.w	ip, #10
 8008f90:	4620      	mov	r0, r4
 8008f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f96:	3a30      	subs	r2, #48	; 0x30
 8008f98:	2a09      	cmp	r2, #9
 8008f9a:	d903      	bls.n	8008fa4 <_svfiprintf_r+0x1a8>
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d0c5      	beq.n	8008f2c <_svfiprintf_r+0x130>
 8008fa0:	9105      	str	r1, [sp, #20]
 8008fa2:	e7c3      	b.n	8008f2c <_svfiprintf_r+0x130>
 8008fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fa8:	4604      	mov	r4, r0
 8008faa:	2301      	movs	r3, #1
 8008fac:	e7f0      	b.n	8008f90 <_svfiprintf_r+0x194>
 8008fae:	ab03      	add	r3, sp, #12
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	462a      	mov	r2, r5
 8008fb4:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <_svfiprintf_r+0x1f8>)
 8008fb6:	a904      	add	r1, sp, #16
 8008fb8:	4638      	mov	r0, r7
 8008fba:	f7fd ffcb 	bl	8006f54 <_printf_float>
 8008fbe:	1c42      	adds	r2, r0, #1
 8008fc0:	4606      	mov	r6, r0
 8008fc2:	d1d6      	bne.n	8008f72 <_svfiprintf_r+0x176>
 8008fc4:	89ab      	ldrh	r3, [r5, #12]
 8008fc6:	065b      	lsls	r3, r3, #25
 8008fc8:	f53f af2c 	bmi.w	8008e24 <_svfiprintf_r+0x28>
 8008fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fce:	b01d      	add	sp, #116	; 0x74
 8008fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd4:	ab03      	add	r3, sp, #12
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	462a      	mov	r2, r5
 8008fda:	4b06      	ldr	r3, [pc, #24]	; (8008ff4 <_svfiprintf_r+0x1f8>)
 8008fdc:	a904      	add	r1, sp, #16
 8008fde:	4638      	mov	r0, r7
 8008fe0:	f7fe fa5c 	bl	800749c <_printf_i>
 8008fe4:	e7eb      	b.n	8008fbe <_svfiprintf_r+0x1c2>
 8008fe6:	bf00      	nop
 8008fe8:	0800bf34 	.word	0x0800bf34
 8008fec:	0800bf3e 	.word	0x0800bf3e
 8008ff0:	08006f55 	.word	0x08006f55
 8008ff4:	08008d45 	.word	0x08008d45
 8008ff8:	0800bf3a 	.word	0x0800bf3a

08008ffc <_sbrk_r>:
 8008ffc:	b538      	push	{r3, r4, r5, lr}
 8008ffe:	4d06      	ldr	r5, [pc, #24]	; (8009018 <_sbrk_r+0x1c>)
 8009000:	2300      	movs	r3, #0
 8009002:	4604      	mov	r4, r0
 8009004:	4608      	mov	r0, r1
 8009006:	602b      	str	r3, [r5, #0]
 8009008:	f7f9 fe12 	bl	8002c30 <_sbrk>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	d102      	bne.n	8009016 <_sbrk_r+0x1a>
 8009010:	682b      	ldr	r3, [r5, #0]
 8009012:	b103      	cbz	r3, 8009016 <_sbrk_r+0x1a>
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	bd38      	pop	{r3, r4, r5, pc}
 8009018:	200008e8 	.word	0x200008e8

0800901c <__assert_func>:
 800901c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800901e:	4614      	mov	r4, r2
 8009020:	461a      	mov	r2, r3
 8009022:	4b09      	ldr	r3, [pc, #36]	; (8009048 <__assert_func+0x2c>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4605      	mov	r5, r0
 8009028:	68d8      	ldr	r0, [r3, #12]
 800902a:	b14c      	cbz	r4, 8009040 <__assert_func+0x24>
 800902c:	4b07      	ldr	r3, [pc, #28]	; (800904c <__assert_func+0x30>)
 800902e:	9100      	str	r1, [sp, #0]
 8009030:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009034:	4906      	ldr	r1, [pc, #24]	; (8009050 <__assert_func+0x34>)
 8009036:	462b      	mov	r3, r5
 8009038:	f000 f80e 	bl	8009058 <fiprintf>
 800903c:	f000 faac 	bl	8009598 <abort>
 8009040:	4b04      	ldr	r3, [pc, #16]	; (8009054 <__assert_func+0x38>)
 8009042:	461c      	mov	r4, r3
 8009044:	e7f3      	b.n	800902e <__assert_func+0x12>
 8009046:	bf00      	nop
 8009048:	20000240 	.word	0x20000240
 800904c:	0800bf45 	.word	0x0800bf45
 8009050:	0800bf52 	.word	0x0800bf52
 8009054:	0800bf80 	.word	0x0800bf80

08009058 <fiprintf>:
 8009058:	b40e      	push	{r1, r2, r3}
 800905a:	b503      	push	{r0, r1, lr}
 800905c:	4601      	mov	r1, r0
 800905e:	ab03      	add	r3, sp, #12
 8009060:	4805      	ldr	r0, [pc, #20]	; (8009078 <fiprintf+0x20>)
 8009062:	f853 2b04 	ldr.w	r2, [r3], #4
 8009066:	6800      	ldr	r0, [r0, #0]
 8009068:	9301      	str	r3, [sp, #4]
 800906a:	f000 f897 	bl	800919c <_vfiprintf_r>
 800906e:	b002      	add	sp, #8
 8009070:	f85d eb04 	ldr.w	lr, [sp], #4
 8009074:	b003      	add	sp, #12
 8009076:	4770      	bx	lr
 8009078:	20000240 	.word	0x20000240

0800907c <__ascii_mbtowc>:
 800907c:	b082      	sub	sp, #8
 800907e:	b901      	cbnz	r1, 8009082 <__ascii_mbtowc+0x6>
 8009080:	a901      	add	r1, sp, #4
 8009082:	b142      	cbz	r2, 8009096 <__ascii_mbtowc+0x1a>
 8009084:	b14b      	cbz	r3, 800909a <__ascii_mbtowc+0x1e>
 8009086:	7813      	ldrb	r3, [r2, #0]
 8009088:	600b      	str	r3, [r1, #0]
 800908a:	7812      	ldrb	r2, [r2, #0]
 800908c:	1e10      	subs	r0, r2, #0
 800908e:	bf18      	it	ne
 8009090:	2001      	movne	r0, #1
 8009092:	b002      	add	sp, #8
 8009094:	4770      	bx	lr
 8009096:	4610      	mov	r0, r2
 8009098:	e7fb      	b.n	8009092 <__ascii_mbtowc+0x16>
 800909a:	f06f 0001 	mvn.w	r0, #1
 800909e:	e7f8      	b.n	8009092 <__ascii_mbtowc+0x16>

080090a0 <memmove>:
 80090a0:	4288      	cmp	r0, r1
 80090a2:	b510      	push	{r4, lr}
 80090a4:	eb01 0402 	add.w	r4, r1, r2
 80090a8:	d902      	bls.n	80090b0 <memmove+0x10>
 80090aa:	4284      	cmp	r4, r0
 80090ac:	4623      	mov	r3, r4
 80090ae:	d807      	bhi.n	80090c0 <memmove+0x20>
 80090b0:	1e43      	subs	r3, r0, #1
 80090b2:	42a1      	cmp	r1, r4
 80090b4:	d008      	beq.n	80090c8 <memmove+0x28>
 80090b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090be:	e7f8      	b.n	80090b2 <memmove+0x12>
 80090c0:	4402      	add	r2, r0
 80090c2:	4601      	mov	r1, r0
 80090c4:	428a      	cmp	r2, r1
 80090c6:	d100      	bne.n	80090ca <memmove+0x2a>
 80090c8:	bd10      	pop	{r4, pc}
 80090ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090d2:	e7f7      	b.n	80090c4 <memmove+0x24>

080090d4 <__malloc_lock>:
 80090d4:	4801      	ldr	r0, [pc, #4]	; (80090dc <__malloc_lock+0x8>)
 80090d6:	f000 bc1f 	b.w	8009918 <__retarget_lock_acquire_recursive>
 80090da:	bf00      	nop
 80090dc:	200008ec 	.word	0x200008ec

080090e0 <__malloc_unlock>:
 80090e0:	4801      	ldr	r0, [pc, #4]	; (80090e8 <__malloc_unlock+0x8>)
 80090e2:	f000 bc1a 	b.w	800991a <__retarget_lock_release_recursive>
 80090e6:	bf00      	nop
 80090e8:	200008ec 	.word	0x200008ec

080090ec <_realloc_r>:
 80090ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f0:	4680      	mov	r8, r0
 80090f2:	4614      	mov	r4, r2
 80090f4:	460e      	mov	r6, r1
 80090f6:	b921      	cbnz	r1, 8009102 <_realloc_r+0x16>
 80090f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090fc:	4611      	mov	r1, r2
 80090fe:	f7ff bdad 	b.w	8008c5c <_malloc_r>
 8009102:	b92a      	cbnz	r2, 8009110 <_realloc_r+0x24>
 8009104:	f7ff fd3e 	bl	8008b84 <_free_r>
 8009108:	4625      	mov	r5, r4
 800910a:	4628      	mov	r0, r5
 800910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009110:	f000 fc6a 	bl	80099e8 <_malloc_usable_size_r>
 8009114:	4284      	cmp	r4, r0
 8009116:	4607      	mov	r7, r0
 8009118:	d802      	bhi.n	8009120 <_realloc_r+0x34>
 800911a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800911e:	d812      	bhi.n	8009146 <_realloc_r+0x5a>
 8009120:	4621      	mov	r1, r4
 8009122:	4640      	mov	r0, r8
 8009124:	f7ff fd9a 	bl	8008c5c <_malloc_r>
 8009128:	4605      	mov	r5, r0
 800912a:	2800      	cmp	r0, #0
 800912c:	d0ed      	beq.n	800910a <_realloc_r+0x1e>
 800912e:	42bc      	cmp	r4, r7
 8009130:	4622      	mov	r2, r4
 8009132:	4631      	mov	r1, r6
 8009134:	bf28      	it	cs
 8009136:	463a      	movcs	r2, r7
 8009138:	f7ff f97c 	bl	8008434 <memcpy>
 800913c:	4631      	mov	r1, r6
 800913e:	4640      	mov	r0, r8
 8009140:	f7ff fd20 	bl	8008b84 <_free_r>
 8009144:	e7e1      	b.n	800910a <_realloc_r+0x1e>
 8009146:	4635      	mov	r5, r6
 8009148:	e7df      	b.n	800910a <_realloc_r+0x1e>

0800914a <__sfputc_r>:
 800914a:	6893      	ldr	r3, [r2, #8]
 800914c:	3b01      	subs	r3, #1
 800914e:	2b00      	cmp	r3, #0
 8009150:	b410      	push	{r4}
 8009152:	6093      	str	r3, [r2, #8]
 8009154:	da08      	bge.n	8009168 <__sfputc_r+0x1e>
 8009156:	6994      	ldr	r4, [r2, #24]
 8009158:	42a3      	cmp	r3, r4
 800915a:	db01      	blt.n	8009160 <__sfputc_r+0x16>
 800915c:	290a      	cmp	r1, #10
 800915e:	d103      	bne.n	8009168 <__sfputc_r+0x1e>
 8009160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009164:	f000 b94a 	b.w	80093fc <__swbuf_r>
 8009168:	6813      	ldr	r3, [r2, #0]
 800916a:	1c58      	adds	r0, r3, #1
 800916c:	6010      	str	r0, [r2, #0]
 800916e:	7019      	strb	r1, [r3, #0]
 8009170:	4608      	mov	r0, r1
 8009172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009176:	4770      	bx	lr

08009178 <__sfputs_r>:
 8009178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917a:	4606      	mov	r6, r0
 800917c:	460f      	mov	r7, r1
 800917e:	4614      	mov	r4, r2
 8009180:	18d5      	adds	r5, r2, r3
 8009182:	42ac      	cmp	r4, r5
 8009184:	d101      	bne.n	800918a <__sfputs_r+0x12>
 8009186:	2000      	movs	r0, #0
 8009188:	e007      	b.n	800919a <__sfputs_r+0x22>
 800918a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800918e:	463a      	mov	r2, r7
 8009190:	4630      	mov	r0, r6
 8009192:	f7ff ffda 	bl	800914a <__sfputc_r>
 8009196:	1c43      	adds	r3, r0, #1
 8009198:	d1f3      	bne.n	8009182 <__sfputs_r+0xa>
 800919a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800919c <_vfiprintf_r>:
 800919c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a0:	460d      	mov	r5, r1
 80091a2:	b09d      	sub	sp, #116	; 0x74
 80091a4:	4614      	mov	r4, r2
 80091a6:	4698      	mov	r8, r3
 80091a8:	4606      	mov	r6, r0
 80091aa:	b118      	cbz	r0, 80091b4 <_vfiprintf_r+0x18>
 80091ac:	6983      	ldr	r3, [r0, #24]
 80091ae:	b90b      	cbnz	r3, 80091b4 <_vfiprintf_r+0x18>
 80091b0:	f000 fb14 	bl	80097dc <__sinit>
 80091b4:	4b89      	ldr	r3, [pc, #548]	; (80093dc <_vfiprintf_r+0x240>)
 80091b6:	429d      	cmp	r5, r3
 80091b8:	d11b      	bne.n	80091f2 <_vfiprintf_r+0x56>
 80091ba:	6875      	ldr	r5, [r6, #4]
 80091bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091be:	07d9      	lsls	r1, r3, #31
 80091c0:	d405      	bmi.n	80091ce <_vfiprintf_r+0x32>
 80091c2:	89ab      	ldrh	r3, [r5, #12]
 80091c4:	059a      	lsls	r2, r3, #22
 80091c6:	d402      	bmi.n	80091ce <_vfiprintf_r+0x32>
 80091c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091ca:	f000 fba5 	bl	8009918 <__retarget_lock_acquire_recursive>
 80091ce:	89ab      	ldrh	r3, [r5, #12]
 80091d0:	071b      	lsls	r3, r3, #28
 80091d2:	d501      	bpl.n	80091d8 <_vfiprintf_r+0x3c>
 80091d4:	692b      	ldr	r3, [r5, #16]
 80091d6:	b9eb      	cbnz	r3, 8009214 <_vfiprintf_r+0x78>
 80091d8:	4629      	mov	r1, r5
 80091da:	4630      	mov	r0, r6
 80091dc:	f000 f96e 	bl	80094bc <__swsetup_r>
 80091e0:	b1c0      	cbz	r0, 8009214 <_vfiprintf_r+0x78>
 80091e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091e4:	07dc      	lsls	r4, r3, #31
 80091e6:	d50e      	bpl.n	8009206 <_vfiprintf_r+0x6a>
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	b01d      	add	sp, #116	; 0x74
 80091ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f2:	4b7b      	ldr	r3, [pc, #492]	; (80093e0 <_vfiprintf_r+0x244>)
 80091f4:	429d      	cmp	r5, r3
 80091f6:	d101      	bne.n	80091fc <_vfiprintf_r+0x60>
 80091f8:	68b5      	ldr	r5, [r6, #8]
 80091fa:	e7df      	b.n	80091bc <_vfiprintf_r+0x20>
 80091fc:	4b79      	ldr	r3, [pc, #484]	; (80093e4 <_vfiprintf_r+0x248>)
 80091fe:	429d      	cmp	r5, r3
 8009200:	bf08      	it	eq
 8009202:	68f5      	ldreq	r5, [r6, #12]
 8009204:	e7da      	b.n	80091bc <_vfiprintf_r+0x20>
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	0598      	lsls	r0, r3, #22
 800920a:	d4ed      	bmi.n	80091e8 <_vfiprintf_r+0x4c>
 800920c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800920e:	f000 fb84 	bl	800991a <__retarget_lock_release_recursive>
 8009212:	e7e9      	b.n	80091e8 <_vfiprintf_r+0x4c>
 8009214:	2300      	movs	r3, #0
 8009216:	9309      	str	r3, [sp, #36]	; 0x24
 8009218:	2320      	movs	r3, #32
 800921a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800921e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009222:	2330      	movs	r3, #48	; 0x30
 8009224:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80093e8 <_vfiprintf_r+0x24c>
 8009228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800922c:	f04f 0901 	mov.w	r9, #1
 8009230:	4623      	mov	r3, r4
 8009232:	469a      	mov	sl, r3
 8009234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009238:	b10a      	cbz	r2, 800923e <_vfiprintf_r+0xa2>
 800923a:	2a25      	cmp	r2, #37	; 0x25
 800923c:	d1f9      	bne.n	8009232 <_vfiprintf_r+0x96>
 800923e:	ebba 0b04 	subs.w	fp, sl, r4
 8009242:	d00b      	beq.n	800925c <_vfiprintf_r+0xc0>
 8009244:	465b      	mov	r3, fp
 8009246:	4622      	mov	r2, r4
 8009248:	4629      	mov	r1, r5
 800924a:	4630      	mov	r0, r6
 800924c:	f7ff ff94 	bl	8009178 <__sfputs_r>
 8009250:	3001      	adds	r0, #1
 8009252:	f000 80aa 	beq.w	80093aa <_vfiprintf_r+0x20e>
 8009256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009258:	445a      	add	r2, fp
 800925a:	9209      	str	r2, [sp, #36]	; 0x24
 800925c:	f89a 3000 	ldrb.w	r3, [sl]
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 80a2 	beq.w	80093aa <_vfiprintf_r+0x20e>
 8009266:	2300      	movs	r3, #0
 8009268:	f04f 32ff 	mov.w	r2, #4294967295
 800926c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009270:	f10a 0a01 	add.w	sl, sl, #1
 8009274:	9304      	str	r3, [sp, #16]
 8009276:	9307      	str	r3, [sp, #28]
 8009278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800927c:	931a      	str	r3, [sp, #104]	; 0x68
 800927e:	4654      	mov	r4, sl
 8009280:	2205      	movs	r2, #5
 8009282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009286:	4858      	ldr	r0, [pc, #352]	; (80093e8 <_vfiprintf_r+0x24c>)
 8009288:	f7f6 ffaa 	bl	80001e0 <memchr>
 800928c:	9a04      	ldr	r2, [sp, #16]
 800928e:	b9d8      	cbnz	r0, 80092c8 <_vfiprintf_r+0x12c>
 8009290:	06d1      	lsls	r1, r2, #27
 8009292:	bf44      	itt	mi
 8009294:	2320      	movmi	r3, #32
 8009296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800929a:	0713      	lsls	r3, r2, #28
 800929c:	bf44      	itt	mi
 800929e:	232b      	movmi	r3, #43	; 0x2b
 80092a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092a4:	f89a 3000 	ldrb.w	r3, [sl]
 80092a8:	2b2a      	cmp	r3, #42	; 0x2a
 80092aa:	d015      	beq.n	80092d8 <_vfiprintf_r+0x13c>
 80092ac:	9a07      	ldr	r2, [sp, #28]
 80092ae:	4654      	mov	r4, sl
 80092b0:	2000      	movs	r0, #0
 80092b2:	f04f 0c0a 	mov.w	ip, #10
 80092b6:	4621      	mov	r1, r4
 80092b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092bc:	3b30      	subs	r3, #48	; 0x30
 80092be:	2b09      	cmp	r3, #9
 80092c0:	d94e      	bls.n	8009360 <_vfiprintf_r+0x1c4>
 80092c2:	b1b0      	cbz	r0, 80092f2 <_vfiprintf_r+0x156>
 80092c4:	9207      	str	r2, [sp, #28]
 80092c6:	e014      	b.n	80092f2 <_vfiprintf_r+0x156>
 80092c8:	eba0 0308 	sub.w	r3, r0, r8
 80092cc:	fa09 f303 	lsl.w	r3, r9, r3
 80092d0:	4313      	orrs	r3, r2
 80092d2:	9304      	str	r3, [sp, #16]
 80092d4:	46a2      	mov	sl, r4
 80092d6:	e7d2      	b.n	800927e <_vfiprintf_r+0xe2>
 80092d8:	9b03      	ldr	r3, [sp, #12]
 80092da:	1d19      	adds	r1, r3, #4
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	9103      	str	r1, [sp, #12]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	bfbb      	ittet	lt
 80092e4:	425b      	neglt	r3, r3
 80092e6:	f042 0202 	orrlt.w	r2, r2, #2
 80092ea:	9307      	strge	r3, [sp, #28]
 80092ec:	9307      	strlt	r3, [sp, #28]
 80092ee:	bfb8      	it	lt
 80092f0:	9204      	strlt	r2, [sp, #16]
 80092f2:	7823      	ldrb	r3, [r4, #0]
 80092f4:	2b2e      	cmp	r3, #46	; 0x2e
 80092f6:	d10c      	bne.n	8009312 <_vfiprintf_r+0x176>
 80092f8:	7863      	ldrb	r3, [r4, #1]
 80092fa:	2b2a      	cmp	r3, #42	; 0x2a
 80092fc:	d135      	bne.n	800936a <_vfiprintf_r+0x1ce>
 80092fe:	9b03      	ldr	r3, [sp, #12]
 8009300:	1d1a      	adds	r2, r3, #4
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	9203      	str	r2, [sp, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	bfb8      	it	lt
 800930a:	f04f 33ff 	movlt.w	r3, #4294967295
 800930e:	3402      	adds	r4, #2
 8009310:	9305      	str	r3, [sp, #20]
 8009312:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80093f8 <_vfiprintf_r+0x25c>
 8009316:	7821      	ldrb	r1, [r4, #0]
 8009318:	2203      	movs	r2, #3
 800931a:	4650      	mov	r0, sl
 800931c:	f7f6 ff60 	bl	80001e0 <memchr>
 8009320:	b140      	cbz	r0, 8009334 <_vfiprintf_r+0x198>
 8009322:	2340      	movs	r3, #64	; 0x40
 8009324:	eba0 000a 	sub.w	r0, r0, sl
 8009328:	fa03 f000 	lsl.w	r0, r3, r0
 800932c:	9b04      	ldr	r3, [sp, #16]
 800932e:	4303      	orrs	r3, r0
 8009330:	3401      	adds	r4, #1
 8009332:	9304      	str	r3, [sp, #16]
 8009334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009338:	482c      	ldr	r0, [pc, #176]	; (80093ec <_vfiprintf_r+0x250>)
 800933a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800933e:	2206      	movs	r2, #6
 8009340:	f7f6 ff4e 	bl	80001e0 <memchr>
 8009344:	2800      	cmp	r0, #0
 8009346:	d03f      	beq.n	80093c8 <_vfiprintf_r+0x22c>
 8009348:	4b29      	ldr	r3, [pc, #164]	; (80093f0 <_vfiprintf_r+0x254>)
 800934a:	bb1b      	cbnz	r3, 8009394 <_vfiprintf_r+0x1f8>
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	3307      	adds	r3, #7
 8009350:	f023 0307 	bic.w	r3, r3, #7
 8009354:	3308      	adds	r3, #8
 8009356:	9303      	str	r3, [sp, #12]
 8009358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800935a:	443b      	add	r3, r7
 800935c:	9309      	str	r3, [sp, #36]	; 0x24
 800935e:	e767      	b.n	8009230 <_vfiprintf_r+0x94>
 8009360:	fb0c 3202 	mla	r2, ip, r2, r3
 8009364:	460c      	mov	r4, r1
 8009366:	2001      	movs	r0, #1
 8009368:	e7a5      	b.n	80092b6 <_vfiprintf_r+0x11a>
 800936a:	2300      	movs	r3, #0
 800936c:	3401      	adds	r4, #1
 800936e:	9305      	str	r3, [sp, #20]
 8009370:	4619      	mov	r1, r3
 8009372:	f04f 0c0a 	mov.w	ip, #10
 8009376:	4620      	mov	r0, r4
 8009378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800937c:	3a30      	subs	r2, #48	; 0x30
 800937e:	2a09      	cmp	r2, #9
 8009380:	d903      	bls.n	800938a <_vfiprintf_r+0x1ee>
 8009382:	2b00      	cmp	r3, #0
 8009384:	d0c5      	beq.n	8009312 <_vfiprintf_r+0x176>
 8009386:	9105      	str	r1, [sp, #20]
 8009388:	e7c3      	b.n	8009312 <_vfiprintf_r+0x176>
 800938a:	fb0c 2101 	mla	r1, ip, r1, r2
 800938e:	4604      	mov	r4, r0
 8009390:	2301      	movs	r3, #1
 8009392:	e7f0      	b.n	8009376 <_vfiprintf_r+0x1da>
 8009394:	ab03      	add	r3, sp, #12
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	462a      	mov	r2, r5
 800939a:	4b16      	ldr	r3, [pc, #88]	; (80093f4 <_vfiprintf_r+0x258>)
 800939c:	a904      	add	r1, sp, #16
 800939e:	4630      	mov	r0, r6
 80093a0:	f7fd fdd8 	bl	8006f54 <_printf_float>
 80093a4:	4607      	mov	r7, r0
 80093a6:	1c78      	adds	r0, r7, #1
 80093a8:	d1d6      	bne.n	8009358 <_vfiprintf_r+0x1bc>
 80093aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093ac:	07d9      	lsls	r1, r3, #31
 80093ae:	d405      	bmi.n	80093bc <_vfiprintf_r+0x220>
 80093b0:	89ab      	ldrh	r3, [r5, #12]
 80093b2:	059a      	lsls	r2, r3, #22
 80093b4:	d402      	bmi.n	80093bc <_vfiprintf_r+0x220>
 80093b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093b8:	f000 faaf 	bl	800991a <__retarget_lock_release_recursive>
 80093bc:	89ab      	ldrh	r3, [r5, #12]
 80093be:	065b      	lsls	r3, r3, #25
 80093c0:	f53f af12 	bmi.w	80091e8 <_vfiprintf_r+0x4c>
 80093c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093c6:	e711      	b.n	80091ec <_vfiprintf_r+0x50>
 80093c8:	ab03      	add	r3, sp, #12
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	462a      	mov	r2, r5
 80093ce:	4b09      	ldr	r3, [pc, #36]	; (80093f4 <_vfiprintf_r+0x258>)
 80093d0:	a904      	add	r1, sp, #16
 80093d2:	4630      	mov	r0, r6
 80093d4:	f7fe f862 	bl	800749c <_printf_i>
 80093d8:	e7e4      	b.n	80093a4 <_vfiprintf_r+0x208>
 80093da:	bf00      	nop
 80093dc:	0800c0ac 	.word	0x0800c0ac
 80093e0:	0800c0cc 	.word	0x0800c0cc
 80093e4:	0800c08c 	.word	0x0800c08c
 80093e8:	0800bf34 	.word	0x0800bf34
 80093ec:	0800bf3e 	.word	0x0800bf3e
 80093f0:	08006f55 	.word	0x08006f55
 80093f4:	08009179 	.word	0x08009179
 80093f8:	0800bf3a 	.word	0x0800bf3a

080093fc <__swbuf_r>:
 80093fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fe:	460e      	mov	r6, r1
 8009400:	4614      	mov	r4, r2
 8009402:	4605      	mov	r5, r0
 8009404:	b118      	cbz	r0, 800940e <__swbuf_r+0x12>
 8009406:	6983      	ldr	r3, [r0, #24]
 8009408:	b90b      	cbnz	r3, 800940e <__swbuf_r+0x12>
 800940a:	f000 f9e7 	bl	80097dc <__sinit>
 800940e:	4b21      	ldr	r3, [pc, #132]	; (8009494 <__swbuf_r+0x98>)
 8009410:	429c      	cmp	r4, r3
 8009412:	d12b      	bne.n	800946c <__swbuf_r+0x70>
 8009414:	686c      	ldr	r4, [r5, #4]
 8009416:	69a3      	ldr	r3, [r4, #24]
 8009418:	60a3      	str	r3, [r4, #8]
 800941a:	89a3      	ldrh	r3, [r4, #12]
 800941c:	071a      	lsls	r2, r3, #28
 800941e:	d52f      	bpl.n	8009480 <__swbuf_r+0x84>
 8009420:	6923      	ldr	r3, [r4, #16]
 8009422:	b36b      	cbz	r3, 8009480 <__swbuf_r+0x84>
 8009424:	6923      	ldr	r3, [r4, #16]
 8009426:	6820      	ldr	r0, [r4, #0]
 8009428:	1ac0      	subs	r0, r0, r3
 800942a:	6963      	ldr	r3, [r4, #20]
 800942c:	b2f6      	uxtb	r6, r6
 800942e:	4283      	cmp	r3, r0
 8009430:	4637      	mov	r7, r6
 8009432:	dc04      	bgt.n	800943e <__swbuf_r+0x42>
 8009434:	4621      	mov	r1, r4
 8009436:	4628      	mov	r0, r5
 8009438:	f000 f93c 	bl	80096b4 <_fflush_r>
 800943c:	bb30      	cbnz	r0, 800948c <__swbuf_r+0x90>
 800943e:	68a3      	ldr	r3, [r4, #8]
 8009440:	3b01      	subs	r3, #1
 8009442:	60a3      	str	r3, [r4, #8]
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	6022      	str	r2, [r4, #0]
 800944a:	701e      	strb	r6, [r3, #0]
 800944c:	6963      	ldr	r3, [r4, #20]
 800944e:	3001      	adds	r0, #1
 8009450:	4283      	cmp	r3, r0
 8009452:	d004      	beq.n	800945e <__swbuf_r+0x62>
 8009454:	89a3      	ldrh	r3, [r4, #12]
 8009456:	07db      	lsls	r3, r3, #31
 8009458:	d506      	bpl.n	8009468 <__swbuf_r+0x6c>
 800945a:	2e0a      	cmp	r6, #10
 800945c:	d104      	bne.n	8009468 <__swbuf_r+0x6c>
 800945e:	4621      	mov	r1, r4
 8009460:	4628      	mov	r0, r5
 8009462:	f000 f927 	bl	80096b4 <_fflush_r>
 8009466:	b988      	cbnz	r0, 800948c <__swbuf_r+0x90>
 8009468:	4638      	mov	r0, r7
 800946a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800946c:	4b0a      	ldr	r3, [pc, #40]	; (8009498 <__swbuf_r+0x9c>)
 800946e:	429c      	cmp	r4, r3
 8009470:	d101      	bne.n	8009476 <__swbuf_r+0x7a>
 8009472:	68ac      	ldr	r4, [r5, #8]
 8009474:	e7cf      	b.n	8009416 <__swbuf_r+0x1a>
 8009476:	4b09      	ldr	r3, [pc, #36]	; (800949c <__swbuf_r+0xa0>)
 8009478:	429c      	cmp	r4, r3
 800947a:	bf08      	it	eq
 800947c:	68ec      	ldreq	r4, [r5, #12]
 800947e:	e7ca      	b.n	8009416 <__swbuf_r+0x1a>
 8009480:	4621      	mov	r1, r4
 8009482:	4628      	mov	r0, r5
 8009484:	f000 f81a 	bl	80094bc <__swsetup_r>
 8009488:	2800      	cmp	r0, #0
 800948a:	d0cb      	beq.n	8009424 <__swbuf_r+0x28>
 800948c:	f04f 37ff 	mov.w	r7, #4294967295
 8009490:	e7ea      	b.n	8009468 <__swbuf_r+0x6c>
 8009492:	bf00      	nop
 8009494:	0800c0ac 	.word	0x0800c0ac
 8009498:	0800c0cc 	.word	0x0800c0cc
 800949c:	0800c08c 	.word	0x0800c08c

080094a0 <__ascii_wctomb>:
 80094a0:	b149      	cbz	r1, 80094b6 <__ascii_wctomb+0x16>
 80094a2:	2aff      	cmp	r2, #255	; 0xff
 80094a4:	bf85      	ittet	hi
 80094a6:	238a      	movhi	r3, #138	; 0x8a
 80094a8:	6003      	strhi	r3, [r0, #0]
 80094aa:	700a      	strbls	r2, [r1, #0]
 80094ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80094b0:	bf98      	it	ls
 80094b2:	2001      	movls	r0, #1
 80094b4:	4770      	bx	lr
 80094b6:	4608      	mov	r0, r1
 80094b8:	4770      	bx	lr
	...

080094bc <__swsetup_r>:
 80094bc:	4b32      	ldr	r3, [pc, #200]	; (8009588 <__swsetup_r+0xcc>)
 80094be:	b570      	push	{r4, r5, r6, lr}
 80094c0:	681d      	ldr	r5, [r3, #0]
 80094c2:	4606      	mov	r6, r0
 80094c4:	460c      	mov	r4, r1
 80094c6:	b125      	cbz	r5, 80094d2 <__swsetup_r+0x16>
 80094c8:	69ab      	ldr	r3, [r5, #24]
 80094ca:	b913      	cbnz	r3, 80094d2 <__swsetup_r+0x16>
 80094cc:	4628      	mov	r0, r5
 80094ce:	f000 f985 	bl	80097dc <__sinit>
 80094d2:	4b2e      	ldr	r3, [pc, #184]	; (800958c <__swsetup_r+0xd0>)
 80094d4:	429c      	cmp	r4, r3
 80094d6:	d10f      	bne.n	80094f8 <__swsetup_r+0x3c>
 80094d8:	686c      	ldr	r4, [r5, #4]
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094e0:	0719      	lsls	r1, r3, #28
 80094e2:	d42c      	bmi.n	800953e <__swsetup_r+0x82>
 80094e4:	06dd      	lsls	r5, r3, #27
 80094e6:	d411      	bmi.n	800950c <__swsetup_r+0x50>
 80094e8:	2309      	movs	r3, #9
 80094ea:	6033      	str	r3, [r6, #0]
 80094ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094f0:	81a3      	strh	r3, [r4, #12]
 80094f2:	f04f 30ff 	mov.w	r0, #4294967295
 80094f6:	e03e      	b.n	8009576 <__swsetup_r+0xba>
 80094f8:	4b25      	ldr	r3, [pc, #148]	; (8009590 <__swsetup_r+0xd4>)
 80094fa:	429c      	cmp	r4, r3
 80094fc:	d101      	bne.n	8009502 <__swsetup_r+0x46>
 80094fe:	68ac      	ldr	r4, [r5, #8]
 8009500:	e7eb      	b.n	80094da <__swsetup_r+0x1e>
 8009502:	4b24      	ldr	r3, [pc, #144]	; (8009594 <__swsetup_r+0xd8>)
 8009504:	429c      	cmp	r4, r3
 8009506:	bf08      	it	eq
 8009508:	68ec      	ldreq	r4, [r5, #12]
 800950a:	e7e6      	b.n	80094da <__swsetup_r+0x1e>
 800950c:	0758      	lsls	r0, r3, #29
 800950e:	d512      	bpl.n	8009536 <__swsetup_r+0x7a>
 8009510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009512:	b141      	cbz	r1, 8009526 <__swsetup_r+0x6a>
 8009514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009518:	4299      	cmp	r1, r3
 800951a:	d002      	beq.n	8009522 <__swsetup_r+0x66>
 800951c:	4630      	mov	r0, r6
 800951e:	f7ff fb31 	bl	8008b84 <_free_r>
 8009522:	2300      	movs	r3, #0
 8009524:	6363      	str	r3, [r4, #52]	; 0x34
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800952c:	81a3      	strh	r3, [r4, #12]
 800952e:	2300      	movs	r3, #0
 8009530:	6063      	str	r3, [r4, #4]
 8009532:	6923      	ldr	r3, [r4, #16]
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	89a3      	ldrh	r3, [r4, #12]
 8009538:	f043 0308 	orr.w	r3, r3, #8
 800953c:	81a3      	strh	r3, [r4, #12]
 800953e:	6923      	ldr	r3, [r4, #16]
 8009540:	b94b      	cbnz	r3, 8009556 <__swsetup_r+0x9a>
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800954c:	d003      	beq.n	8009556 <__swsetup_r+0x9a>
 800954e:	4621      	mov	r1, r4
 8009550:	4630      	mov	r0, r6
 8009552:	f000 fa09 	bl	8009968 <__smakebuf_r>
 8009556:	89a0      	ldrh	r0, [r4, #12]
 8009558:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800955c:	f010 0301 	ands.w	r3, r0, #1
 8009560:	d00a      	beq.n	8009578 <__swsetup_r+0xbc>
 8009562:	2300      	movs	r3, #0
 8009564:	60a3      	str	r3, [r4, #8]
 8009566:	6963      	ldr	r3, [r4, #20]
 8009568:	425b      	negs	r3, r3
 800956a:	61a3      	str	r3, [r4, #24]
 800956c:	6923      	ldr	r3, [r4, #16]
 800956e:	b943      	cbnz	r3, 8009582 <__swsetup_r+0xc6>
 8009570:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009574:	d1ba      	bne.n	80094ec <__swsetup_r+0x30>
 8009576:	bd70      	pop	{r4, r5, r6, pc}
 8009578:	0781      	lsls	r1, r0, #30
 800957a:	bf58      	it	pl
 800957c:	6963      	ldrpl	r3, [r4, #20]
 800957e:	60a3      	str	r3, [r4, #8]
 8009580:	e7f4      	b.n	800956c <__swsetup_r+0xb0>
 8009582:	2000      	movs	r0, #0
 8009584:	e7f7      	b.n	8009576 <__swsetup_r+0xba>
 8009586:	bf00      	nop
 8009588:	20000240 	.word	0x20000240
 800958c:	0800c0ac 	.word	0x0800c0ac
 8009590:	0800c0cc 	.word	0x0800c0cc
 8009594:	0800c08c 	.word	0x0800c08c

08009598 <abort>:
 8009598:	b508      	push	{r3, lr}
 800959a:	2006      	movs	r0, #6
 800959c:	f000 fa54 	bl	8009a48 <raise>
 80095a0:	2001      	movs	r0, #1
 80095a2:	f7f9 facd 	bl	8002b40 <_exit>
	...

080095a8 <__sflush_r>:
 80095a8:	898a      	ldrh	r2, [r1, #12]
 80095aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ae:	4605      	mov	r5, r0
 80095b0:	0710      	lsls	r0, r2, #28
 80095b2:	460c      	mov	r4, r1
 80095b4:	d458      	bmi.n	8009668 <__sflush_r+0xc0>
 80095b6:	684b      	ldr	r3, [r1, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	dc05      	bgt.n	80095c8 <__sflush_r+0x20>
 80095bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095be:	2b00      	cmp	r3, #0
 80095c0:	dc02      	bgt.n	80095c8 <__sflush_r+0x20>
 80095c2:	2000      	movs	r0, #0
 80095c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095ca:	2e00      	cmp	r6, #0
 80095cc:	d0f9      	beq.n	80095c2 <__sflush_r+0x1a>
 80095ce:	2300      	movs	r3, #0
 80095d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095d4:	682f      	ldr	r7, [r5, #0]
 80095d6:	602b      	str	r3, [r5, #0]
 80095d8:	d032      	beq.n	8009640 <__sflush_r+0x98>
 80095da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095dc:	89a3      	ldrh	r3, [r4, #12]
 80095de:	075a      	lsls	r2, r3, #29
 80095e0:	d505      	bpl.n	80095ee <__sflush_r+0x46>
 80095e2:	6863      	ldr	r3, [r4, #4]
 80095e4:	1ac0      	subs	r0, r0, r3
 80095e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095e8:	b10b      	cbz	r3, 80095ee <__sflush_r+0x46>
 80095ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095ec:	1ac0      	subs	r0, r0, r3
 80095ee:	2300      	movs	r3, #0
 80095f0:	4602      	mov	r2, r0
 80095f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095f4:	6a21      	ldr	r1, [r4, #32]
 80095f6:	4628      	mov	r0, r5
 80095f8:	47b0      	blx	r6
 80095fa:	1c43      	adds	r3, r0, #1
 80095fc:	89a3      	ldrh	r3, [r4, #12]
 80095fe:	d106      	bne.n	800960e <__sflush_r+0x66>
 8009600:	6829      	ldr	r1, [r5, #0]
 8009602:	291d      	cmp	r1, #29
 8009604:	d82c      	bhi.n	8009660 <__sflush_r+0xb8>
 8009606:	4a2a      	ldr	r2, [pc, #168]	; (80096b0 <__sflush_r+0x108>)
 8009608:	40ca      	lsrs	r2, r1
 800960a:	07d6      	lsls	r6, r2, #31
 800960c:	d528      	bpl.n	8009660 <__sflush_r+0xb8>
 800960e:	2200      	movs	r2, #0
 8009610:	6062      	str	r2, [r4, #4]
 8009612:	04d9      	lsls	r1, r3, #19
 8009614:	6922      	ldr	r2, [r4, #16]
 8009616:	6022      	str	r2, [r4, #0]
 8009618:	d504      	bpl.n	8009624 <__sflush_r+0x7c>
 800961a:	1c42      	adds	r2, r0, #1
 800961c:	d101      	bne.n	8009622 <__sflush_r+0x7a>
 800961e:	682b      	ldr	r3, [r5, #0]
 8009620:	b903      	cbnz	r3, 8009624 <__sflush_r+0x7c>
 8009622:	6560      	str	r0, [r4, #84]	; 0x54
 8009624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009626:	602f      	str	r7, [r5, #0]
 8009628:	2900      	cmp	r1, #0
 800962a:	d0ca      	beq.n	80095c2 <__sflush_r+0x1a>
 800962c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009630:	4299      	cmp	r1, r3
 8009632:	d002      	beq.n	800963a <__sflush_r+0x92>
 8009634:	4628      	mov	r0, r5
 8009636:	f7ff faa5 	bl	8008b84 <_free_r>
 800963a:	2000      	movs	r0, #0
 800963c:	6360      	str	r0, [r4, #52]	; 0x34
 800963e:	e7c1      	b.n	80095c4 <__sflush_r+0x1c>
 8009640:	6a21      	ldr	r1, [r4, #32]
 8009642:	2301      	movs	r3, #1
 8009644:	4628      	mov	r0, r5
 8009646:	47b0      	blx	r6
 8009648:	1c41      	adds	r1, r0, #1
 800964a:	d1c7      	bne.n	80095dc <__sflush_r+0x34>
 800964c:	682b      	ldr	r3, [r5, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0c4      	beq.n	80095dc <__sflush_r+0x34>
 8009652:	2b1d      	cmp	r3, #29
 8009654:	d001      	beq.n	800965a <__sflush_r+0xb2>
 8009656:	2b16      	cmp	r3, #22
 8009658:	d101      	bne.n	800965e <__sflush_r+0xb6>
 800965a:	602f      	str	r7, [r5, #0]
 800965c:	e7b1      	b.n	80095c2 <__sflush_r+0x1a>
 800965e:	89a3      	ldrh	r3, [r4, #12]
 8009660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009664:	81a3      	strh	r3, [r4, #12]
 8009666:	e7ad      	b.n	80095c4 <__sflush_r+0x1c>
 8009668:	690f      	ldr	r7, [r1, #16]
 800966a:	2f00      	cmp	r7, #0
 800966c:	d0a9      	beq.n	80095c2 <__sflush_r+0x1a>
 800966e:	0793      	lsls	r3, r2, #30
 8009670:	680e      	ldr	r6, [r1, #0]
 8009672:	bf08      	it	eq
 8009674:	694b      	ldreq	r3, [r1, #20]
 8009676:	600f      	str	r7, [r1, #0]
 8009678:	bf18      	it	ne
 800967a:	2300      	movne	r3, #0
 800967c:	eba6 0807 	sub.w	r8, r6, r7
 8009680:	608b      	str	r3, [r1, #8]
 8009682:	f1b8 0f00 	cmp.w	r8, #0
 8009686:	dd9c      	ble.n	80095c2 <__sflush_r+0x1a>
 8009688:	6a21      	ldr	r1, [r4, #32]
 800968a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800968c:	4643      	mov	r3, r8
 800968e:	463a      	mov	r2, r7
 8009690:	4628      	mov	r0, r5
 8009692:	47b0      	blx	r6
 8009694:	2800      	cmp	r0, #0
 8009696:	dc06      	bgt.n	80096a6 <__sflush_r+0xfe>
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800969e:	81a3      	strh	r3, [r4, #12]
 80096a0:	f04f 30ff 	mov.w	r0, #4294967295
 80096a4:	e78e      	b.n	80095c4 <__sflush_r+0x1c>
 80096a6:	4407      	add	r7, r0
 80096a8:	eba8 0800 	sub.w	r8, r8, r0
 80096ac:	e7e9      	b.n	8009682 <__sflush_r+0xda>
 80096ae:	bf00      	nop
 80096b0:	20400001 	.word	0x20400001

080096b4 <_fflush_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	690b      	ldr	r3, [r1, #16]
 80096b8:	4605      	mov	r5, r0
 80096ba:	460c      	mov	r4, r1
 80096bc:	b913      	cbnz	r3, 80096c4 <_fflush_r+0x10>
 80096be:	2500      	movs	r5, #0
 80096c0:	4628      	mov	r0, r5
 80096c2:	bd38      	pop	{r3, r4, r5, pc}
 80096c4:	b118      	cbz	r0, 80096ce <_fflush_r+0x1a>
 80096c6:	6983      	ldr	r3, [r0, #24]
 80096c8:	b90b      	cbnz	r3, 80096ce <_fflush_r+0x1a>
 80096ca:	f000 f887 	bl	80097dc <__sinit>
 80096ce:	4b14      	ldr	r3, [pc, #80]	; (8009720 <_fflush_r+0x6c>)
 80096d0:	429c      	cmp	r4, r3
 80096d2:	d11b      	bne.n	800970c <_fflush_r+0x58>
 80096d4:	686c      	ldr	r4, [r5, #4]
 80096d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0ef      	beq.n	80096be <_fflush_r+0xa>
 80096de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096e0:	07d0      	lsls	r0, r2, #31
 80096e2:	d404      	bmi.n	80096ee <_fflush_r+0x3a>
 80096e4:	0599      	lsls	r1, r3, #22
 80096e6:	d402      	bmi.n	80096ee <_fflush_r+0x3a>
 80096e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096ea:	f000 f915 	bl	8009918 <__retarget_lock_acquire_recursive>
 80096ee:	4628      	mov	r0, r5
 80096f0:	4621      	mov	r1, r4
 80096f2:	f7ff ff59 	bl	80095a8 <__sflush_r>
 80096f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096f8:	07da      	lsls	r2, r3, #31
 80096fa:	4605      	mov	r5, r0
 80096fc:	d4e0      	bmi.n	80096c0 <_fflush_r+0xc>
 80096fe:	89a3      	ldrh	r3, [r4, #12]
 8009700:	059b      	lsls	r3, r3, #22
 8009702:	d4dd      	bmi.n	80096c0 <_fflush_r+0xc>
 8009704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009706:	f000 f908 	bl	800991a <__retarget_lock_release_recursive>
 800970a:	e7d9      	b.n	80096c0 <_fflush_r+0xc>
 800970c:	4b05      	ldr	r3, [pc, #20]	; (8009724 <_fflush_r+0x70>)
 800970e:	429c      	cmp	r4, r3
 8009710:	d101      	bne.n	8009716 <_fflush_r+0x62>
 8009712:	68ac      	ldr	r4, [r5, #8]
 8009714:	e7df      	b.n	80096d6 <_fflush_r+0x22>
 8009716:	4b04      	ldr	r3, [pc, #16]	; (8009728 <_fflush_r+0x74>)
 8009718:	429c      	cmp	r4, r3
 800971a:	bf08      	it	eq
 800971c:	68ec      	ldreq	r4, [r5, #12]
 800971e:	e7da      	b.n	80096d6 <_fflush_r+0x22>
 8009720:	0800c0ac 	.word	0x0800c0ac
 8009724:	0800c0cc 	.word	0x0800c0cc
 8009728:	0800c08c 	.word	0x0800c08c

0800972c <std>:
 800972c:	2300      	movs	r3, #0
 800972e:	b510      	push	{r4, lr}
 8009730:	4604      	mov	r4, r0
 8009732:	e9c0 3300 	strd	r3, r3, [r0]
 8009736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800973a:	6083      	str	r3, [r0, #8]
 800973c:	8181      	strh	r1, [r0, #12]
 800973e:	6643      	str	r3, [r0, #100]	; 0x64
 8009740:	81c2      	strh	r2, [r0, #14]
 8009742:	6183      	str	r3, [r0, #24]
 8009744:	4619      	mov	r1, r3
 8009746:	2208      	movs	r2, #8
 8009748:	305c      	adds	r0, #92	; 0x5c
 800974a:	f7fd fb5b 	bl	8006e04 <memset>
 800974e:	4b05      	ldr	r3, [pc, #20]	; (8009764 <std+0x38>)
 8009750:	6263      	str	r3, [r4, #36]	; 0x24
 8009752:	4b05      	ldr	r3, [pc, #20]	; (8009768 <std+0x3c>)
 8009754:	62a3      	str	r3, [r4, #40]	; 0x28
 8009756:	4b05      	ldr	r3, [pc, #20]	; (800976c <std+0x40>)
 8009758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800975a:	4b05      	ldr	r3, [pc, #20]	; (8009770 <std+0x44>)
 800975c:	6224      	str	r4, [r4, #32]
 800975e:	6323      	str	r3, [r4, #48]	; 0x30
 8009760:	bd10      	pop	{r4, pc}
 8009762:	bf00      	nop
 8009764:	08009a81 	.word	0x08009a81
 8009768:	08009aa3 	.word	0x08009aa3
 800976c:	08009adb 	.word	0x08009adb
 8009770:	08009aff 	.word	0x08009aff

08009774 <_cleanup_r>:
 8009774:	4901      	ldr	r1, [pc, #4]	; (800977c <_cleanup_r+0x8>)
 8009776:	f000 b8af 	b.w	80098d8 <_fwalk_reent>
 800977a:	bf00      	nop
 800977c:	080096b5 	.word	0x080096b5

08009780 <__sfmoreglue>:
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	2268      	movs	r2, #104	; 0x68
 8009784:	1e4d      	subs	r5, r1, #1
 8009786:	4355      	muls	r5, r2
 8009788:	460e      	mov	r6, r1
 800978a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800978e:	f7ff fa65 	bl	8008c5c <_malloc_r>
 8009792:	4604      	mov	r4, r0
 8009794:	b140      	cbz	r0, 80097a8 <__sfmoreglue+0x28>
 8009796:	2100      	movs	r1, #0
 8009798:	e9c0 1600 	strd	r1, r6, [r0]
 800979c:	300c      	adds	r0, #12
 800979e:	60a0      	str	r0, [r4, #8]
 80097a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097a4:	f7fd fb2e 	bl	8006e04 <memset>
 80097a8:	4620      	mov	r0, r4
 80097aa:	bd70      	pop	{r4, r5, r6, pc}

080097ac <__sfp_lock_acquire>:
 80097ac:	4801      	ldr	r0, [pc, #4]	; (80097b4 <__sfp_lock_acquire+0x8>)
 80097ae:	f000 b8b3 	b.w	8009918 <__retarget_lock_acquire_recursive>
 80097b2:	bf00      	nop
 80097b4:	200008ed 	.word	0x200008ed

080097b8 <__sfp_lock_release>:
 80097b8:	4801      	ldr	r0, [pc, #4]	; (80097c0 <__sfp_lock_release+0x8>)
 80097ba:	f000 b8ae 	b.w	800991a <__retarget_lock_release_recursive>
 80097be:	bf00      	nop
 80097c0:	200008ed 	.word	0x200008ed

080097c4 <__sinit_lock_acquire>:
 80097c4:	4801      	ldr	r0, [pc, #4]	; (80097cc <__sinit_lock_acquire+0x8>)
 80097c6:	f000 b8a7 	b.w	8009918 <__retarget_lock_acquire_recursive>
 80097ca:	bf00      	nop
 80097cc:	200008ee 	.word	0x200008ee

080097d0 <__sinit_lock_release>:
 80097d0:	4801      	ldr	r0, [pc, #4]	; (80097d8 <__sinit_lock_release+0x8>)
 80097d2:	f000 b8a2 	b.w	800991a <__retarget_lock_release_recursive>
 80097d6:	bf00      	nop
 80097d8:	200008ee 	.word	0x200008ee

080097dc <__sinit>:
 80097dc:	b510      	push	{r4, lr}
 80097de:	4604      	mov	r4, r0
 80097e0:	f7ff fff0 	bl	80097c4 <__sinit_lock_acquire>
 80097e4:	69a3      	ldr	r3, [r4, #24]
 80097e6:	b11b      	cbz	r3, 80097f0 <__sinit+0x14>
 80097e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097ec:	f7ff bff0 	b.w	80097d0 <__sinit_lock_release>
 80097f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80097f4:	6523      	str	r3, [r4, #80]	; 0x50
 80097f6:	4b13      	ldr	r3, [pc, #76]	; (8009844 <__sinit+0x68>)
 80097f8:	4a13      	ldr	r2, [pc, #76]	; (8009848 <__sinit+0x6c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80097fe:	42a3      	cmp	r3, r4
 8009800:	bf04      	itt	eq
 8009802:	2301      	moveq	r3, #1
 8009804:	61a3      	streq	r3, [r4, #24]
 8009806:	4620      	mov	r0, r4
 8009808:	f000 f820 	bl	800984c <__sfp>
 800980c:	6060      	str	r0, [r4, #4]
 800980e:	4620      	mov	r0, r4
 8009810:	f000 f81c 	bl	800984c <__sfp>
 8009814:	60a0      	str	r0, [r4, #8]
 8009816:	4620      	mov	r0, r4
 8009818:	f000 f818 	bl	800984c <__sfp>
 800981c:	2200      	movs	r2, #0
 800981e:	60e0      	str	r0, [r4, #12]
 8009820:	2104      	movs	r1, #4
 8009822:	6860      	ldr	r0, [r4, #4]
 8009824:	f7ff ff82 	bl	800972c <std>
 8009828:	68a0      	ldr	r0, [r4, #8]
 800982a:	2201      	movs	r2, #1
 800982c:	2109      	movs	r1, #9
 800982e:	f7ff ff7d 	bl	800972c <std>
 8009832:	68e0      	ldr	r0, [r4, #12]
 8009834:	2202      	movs	r2, #2
 8009836:	2112      	movs	r1, #18
 8009838:	f7ff ff78 	bl	800972c <std>
 800983c:	2301      	movs	r3, #1
 800983e:	61a3      	str	r3, [r4, #24]
 8009840:	e7d2      	b.n	80097e8 <__sinit+0xc>
 8009842:	bf00      	nop
 8009844:	0800bd14 	.word	0x0800bd14
 8009848:	08009775 	.word	0x08009775

0800984c <__sfp>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	4607      	mov	r7, r0
 8009850:	f7ff ffac 	bl	80097ac <__sfp_lock_acquire>
 8009854:	4b1e      	ldr	r3, [pc, #120]	; (80098d0 <__sfp+0x84>)
 8009856:	681e      	ldr	r6, [r3, #0]
 8009858:	69b3      	ldr	r3, [r6, #24]
 800985a:	b913      	cbnz	r3, 8009862 <__sfp+0x16>
 800985c:	4630      	mov	r0, r6
 800985e:	f7ff ffbd 	bl	80097dc <__sinit>
 8009862:	3648      	adds	r6, #72	; 0x48
 8009864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009868:	3b01      	subs	r3, #1
 800986a:	d503      	bpl.n	8009874 <__sfp+0x28>
 800986c:	6833      	ldr	r3, [r6, #0]
 800986e:	b30b      	cbz	r3, 80098b4 <__sfp+0x68>
 8009870:	6836      	ldr	r6, [r6, #0]
 8009872:	e7f7      	b.n	8009864 <__sfp+0x18>
 8009874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009878:	b9d5      	cbnz	r5, 80098b0 <__sfp+0x64>
 800987a:	4b16      	ldr	r3, [pc, #88]	; (80098d4 <__sfp+0x88>)
 800987c:	60e3      	str	r3, [r4, #12]
 800987e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009882:	6665      	str	r5, [r4, #100]	; 0x64
 8009884:	f000 f847 	bl	8009916 <__retarget_lock_init_recursive>
 8009888:	f7ff ff96 	bl	80097b8 <__sfp_lock_release>
 800988c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009890:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009894:	6025      	str	r5, [r4, #0]
 8009896:	61a5      	str	r5, [r4, #24]
 8009898:	2208      	movs	r2, #8
 800989a:	4629      	mov	r1, r5
 800989c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098a0:	f7fd fab0 	bl	8006e04 <memset>
 80098a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098ac:	4620      	mov	r0, r4
 80098ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098b0:	3468      	adds	r4, #104	; 0x68
 80098b2:	e7d9      	b.n	8009868 <__sfp+0x1c>
 80098b4:	2104      	movs	r1, #4
 80098b6:	4638      	mov	r0, r7
 80098b8:	f7ff ff62 	bl	8009780 <__sfmoreglue>
 80098bc:	4604      	mov	r4, r0
 80098be:	6030      	str	r0, [r6, #0]
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d1d5      	bne.n	8009870 <__sfp+0x24>
 80098c4:	f7ff ff78 	bl	80097b8 <__sfp_lock_release>
 80098c8:	230c      	movs	r3, #12
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	e7ee      	b.n	80098ac <__sfp+0x60>
 80098ce:	bf00      	nop
 80098d0:	0800bd14 	.word	0x0800bd14
 80098d4:	ffff0001 	.word	0xffff0001

080098d8 <_fwalk_reent>:
 80098d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098dc:	4606      	mov	r6, r0
 80098de:	4688      	mov	r8, r1
 80098e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098e4:	2700      	movs	r7, #0
 80098e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098ea:	f1b9 0901 	subs.w	r9, r9, #1
 80098ee:	d505      	bpl.n	80098fc <_fwalk_reent+0x24>
 80098f0:	6824      	ldr	r4, [r4, #0]
 80098f2:	2c00      	cmp	r4, #0
 80098f4:	d1f7      	bne.n	80098e6 <_fwalk_reent+0xe>
 80098f6:	4638      	mov	r0, r7
 80098f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098fc:	89ab      	ldrh	r3, [r5, #12]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d907      	bls.n	8009912 <_fwalk_reent+0x3a>
 8009902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009906:	3301      	adds	r3, #1
 8009908:	d003      	beq.n	8009912 <_fwalk_reent+0x3a>
 800990a:	4629      	mov	r1, r5
 800990c:	4630      	mov	r0, r6
 800990e:	47c0      	blx	r8
 8009910:	4307      	orrs	r7, r0
 8009912:	3568      	adds	r5, #104	; 0x68
 8009914:	e7e9      	b.n	80098ea <_fwalk_reent+0x12>

08009916 <__retarget_lock_init_recursive>:
 8009916:	4770      	bx	lr

08009918 <__retarget_lock_acquire_recursive>:
 8009918:	4770      	bx	lr

0800991a <__retarget_lock_release_recursive>:
 800991a:	4770      	bx	lr

0800991c <__swhatbuf_r>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	460e      	mov	r6, r1
 8009920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009924:	2900      	cmp	r1, #0
 8009926:	b096      	sub	sp, #88	; 0x58
 8009928:	4614      	mov	r4, r2
 800992a:	461d      	mov	r5, r3
 800992c:	da08      	bge.n	8009940 <__swhatbuf_r+0x24>
 800992e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	602a      	str	r2, [r5, #0]
 8009936:	061a      	lsls	r2, r3, #24
 8009938:	d410      	bmi.n	800995c <__swhatbuf_r+0x40>
 800993a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800993e:	e00e      	b.n	800995e <__swhatbuf_r+0x42>
 8009940:	466a      	mov	r2, sp
 8009942:	f000 f903 	bl	8009b4c <_fstat_r>
 8009946:	2800      	cmp	r0, #0
 8009948:	dbf1      	blt.n	800992e <__swhatbuf_r+0x12>
 800994a:	9a01      	ldr	r2, [sp, #4]
 800994c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009954:	425a      	negs	r2, r3
 8009956:	415a      	adcs	r2, r3
 8009958:	602a      	str	r2, [r5, #0]
 800995a:	e7ee      	b.n	800993a <__swhatbuf_r+0x1e>
 800995c:	2340      	movs	r3, #64	; 0x40
 800995e:	2000      	movs	r0, #0
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	b016      	add	sp, #88	; 0x58
 8009964:	bd70      	pop	{r4, r5, r6, pc}
	...

08009968 <__smakebuf_r>:
 8009968:	898b      	ldrh	r3, [r1, #12]
 800996a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800996c:	079d      	lsls	r5, r3, #30
 800996e:	4606      	mov	r6, r0
 8009970:	460c      	mov	r4, r1
 8009972:	d507      	bpl.n	8009984 <__smakebuf_r+0x1c>
 8009974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	6123      	str	r3, [r4, #16]
 800997c:	2301      	movs	r3, #1
 800997e:	6163      	str	r3, [r4, #20]
 8009980:	b002      	add	sp, #8
 8009982:	bd70      	pop	{r4, r5, r6, pc}
 8009984:	ab01      	add	r3, sp, #4
 8009986:	466a      	mov	r2, sp
 8009988:	f7ff ffc8 	bl	800991c <__swhatbuf_r>
 800998c:	9900      	ldr	r1, [sp, #0]
 800998e:	4605      	mov	r5, r0
 8009990:	4630      	mov	r0, r6
 8009992:	f7ff f963 	bl	8008c5c <_malloc_r>
 8009996:	b948      	cbnz	r0, 80099ac <__smakebuf_r+0x44>
 8009998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999c:	059a      	lsls	r2, r3, #22
 800999e:	d4ef      	bmi.n	8009980 <__smakebuf_r+0x18>
 80099a0:	f023 0303 	bic.w	r3, r3, #3
 80099a4:	f043 0302 	orr.w	r3, r3, #2
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	e7e3      	b.n	8009974 <__smakebuf_r+0xc>
 80099ac:	4b0d      	ldr	r3, [pc, #52]	; (80099e4 <__smakebuf_r+0x7c>)
 80099ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	6020      	str	r0, [r4, #0]
 80099b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099b8:	81a3      	strh	r3, [r4, #12]
 80099ba:	9b00      	ldr	r3, [sp, #0]
 80099bc:	6163      	str	r3, [r4, #20]
 80099be:	9b01      	ldr	r3, [sp, #4]
 80099c0:	6120      	str	r0, [r4, #16]
 80099c2:	b15b      	cbz	r3, 80099dc <__smakebuf_r+0x74>
 80099c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099c8:	4630      	mov	r0, r6
 80099ca:	f000 f8d1 	bl	8009b70 <_isatty_r>
 80099ce:	b128      	cbz	r0, 80099dc <__smakebuf_r+0x74>
 80099d0:	89a3      	ldrh	r3, [r4, #12]
 80099d2:	f023 0303 	bic.w	r3, r3, #3
 80099d6:	f043 0301 	orr.w	r3, r3, #1
 80099da:	81a3      	strh	r3, [r4, #12]
 80099dc:	89a0      	ldrh	r0, [r4, #12]
 80099de:	4305      	orrs	r5, r0
 80099e0:	81a5      	strh	r5, [r4, #12]
 80099e2:	e7cd      	b.n	8009980 <__smakebuf_r+0x18>
 80099e4:	08009775 	.word	0x08009775

080099e8 <_malloc_usable_size_r>:
 80099e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099ec:	1f18      	subs	r0, r3, #4
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	bfbc      	itt	lt
 80099f2:	580b      	ldrlt	r3, [r1, r0]
 80099f4:	18c0      	addlt	r0, r0, r3
 80099f6:	4770      	bx	lr

080099f8 <_raise_r>:
 80099f8:	291f      	cmp	r1, #31
 80099fa:	b538      	push	{r3, r4, r5, lr}
 80099fc:	4604      	mov	r4, r0
 80099fe:	460d      	mov	r5, r1
 8009a00:	d904      	bls.n	8009a0c <_raise_r+0x14>
 8009a02:	2316      	movs	r3, #22
 8009a04:	6003      	str	r3, [r0, #0]
 8009a06:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a0e:	b112      	cbz	r2, 8009a16 <_raise_r+0x1e>
 8009a10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a14:	b94b      	cbnz	r3, 8009a2a <_raise_r+0x32>
 8009a16:	4620      	mov	r0, r4
 8009a18:	f000 f830 	bl	8009a7c <_getpid_r>
 8009a1c:	462a      	mov	r2, r5
 8009a1e:	4601      	mov	r1, r0
 8009a20:	4620      	mov	r0, r4
 8009a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a26:	f000 b817 	b.w	8009a58 <_kill_r>
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d00a      	beq.n	8009a44 <_raise_r+0x4c>
 8009a2e:	1c59      	adds	r1, r3, #1
 8009a30:	d103      	bne.n	8009a3a <_raise_r+0x42>
 8009a32:	2316      	movs	r3, #22
 8009a34:	6003      	str	r3, [r0, #0]
 8009a36:	2001      	movs	r0, #1
 8009a38:	e7e7      	b.n	8009a0a <_raise_r+0x12>
 8009a3a:	2400      	movs	r4, #0
 8009a3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a40:	4628      	mov	r0, r5
 8009a42:	4798      	blx	r3
 8009a44:	2000      	movs	r0, #0
 8009a46:	e7e0      	b.n	8009a0a <_raise_r+0x12>

08009a48 <raise>:
 8009a48:	4b02      	ldr	r3, [pc, #8]	; (8009a54 <raise+0xc>)
 8009a4a:	4601      	mov	r1, r0
 8009a4c:	6818      	ldr	r0, [r3, #0]
 8009a4e:	f7ff bfd3 	b.w	80099f8 <_raise_r>
 8009a52:	bf00      	nop
 8009a54:	20000240 	.word	0x20000240

08009a58 <_kill_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d07      	ldr	r5, [pc, #28]	; (8009a78 <_kill_r+0x20>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	4611      	mov	r1, r2
 8009a64:	602b      	str	r3, [r5, #0]
 8009a66:	f7f9 f85b 	bl	8002b20 <_kill>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	d102      	bne.n	8009a74 <_kill_r+0x1c>
 8009a6e:	682b      	ldr	r3, [r5, #0]
 8009a70:	b103      	cbz	r3, 8009a74 <_kill_r+0x1c>
 8009a72:	6023      	str	r3, [r4, #0]
 8009a74:	bd38      	pop	{r3, r4, r5, pc}
 8009a76:	bf00      	nop
 8009a78:	200008e8 	.word	0x200008e8

08009a7c <_getpid_r>:
 8009a7c:	f7f9 b848 	b.w	8002b10 <_getpid>

08009a80 <__sread>:
 8009a80:	b510      	push	{r4, lr}
 8009a82:	460c      	mov	r4, r1
 8009a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a88:	f000 f894 	bl	8009bb4 <_read_r>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	bfab      	itete	ge
 8009a90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a92:	89a3      	ldrhlt	r3, [r4, #12]
 8009a94:	181b      	addge	r3, r3, r0
 8009a96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a9a:	bfac      	ite	ge
 8009a9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a9e:	81a3      	strhlt	r3, [r4, #12]
 8009aa0:	bd10      	pop	{r4, pc}

08009aa2 <__swrite>:
 8009aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa6:	461f      	mov	r7, r3
 8009aa8:	898b      	ldrh	r3, [r1, #12]
 8009aaa:	05db      	lsls	r3, r3, #23
 8009aac:	4605      	mov	r5, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	4616      	mov	r6, r2
 8009ab2:	d505      	bpl.n	8009ac0 <__swrite+0x1e>
 8009ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab8:	2302      	movs	r3, #2
 8009aba:	2200      	movs	r2, #0
 8009abc:	f000 f868 	bl	8009b90 <_lseek_r>
 8009ac0:	89a3      	ldrh	r3, [r4, #12]
 8009ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aca:	81a3      	strh	r3, [r4, #12]
 8009acc:	4632      	mov	r2, r6
 8009ace:	463b      	mov	r3, r7
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad6:	f000 b817 	b.w	8009b08 <_write_r>

08009ada <__sseek>:
 8009ada:	b510      	push	{r4, lr}
 8009adc:	460c      	mov	r4, r1
 8009ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ae2:	f000 f855 	bl	8009b90 <_lseek_r>
 8009ae6:	1c43      	adds	r3, r0, #1
 8009ae8:	89a3      	ldrh	r3, [r4, #12]
 8009aea:	bf15      	itete	ne
 8009aec:	6560      	strne	r0, [r4, #84]	; 0x54
 8009aee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009af2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009af6:	81a3      	strheq	r3, [r4, #12]
 8009af8:	bf18      	it	ne
 8009afa:	81a3      	strhne	r3, [r4, #12]
 8009afc:	bd10      	pop	{r4, pc}

08009afe <__sclose>:
 8009afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b02:	f000 b813 	b.w	8009b2c <_close_r>
	...

08009b08 <_write_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4d07      	ldr	r5, [pc, #28]	; (8009b28 <_write_r+0x20>)
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	4608      	mov	r0, r1
 8009b10:	4611      	mov	r1, r2
 8009b12:	2200      	movs	r2, #0
 8009b14:	602a      	str	r2, [r5, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	f7f9 f839 	bl	8002b8e <_write>
 8009b1c:	1c43      	adds	r3, r0, #1
 8009b1e:	d102      	bne.n	8009b26 <_write_r+0x1e>
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	b103      	cbz	r3, 8009b26 <_write_r+0x1e>
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	200008e8 	.word	0x200008e8

08009b2c <_close_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	4d06      	ldr	r5, [pc, #24]	; (8009b48 <_close_r+0x1c>)
 8009b30:	2300      	movs	r3, #0
 8009b32:	4604      	mov	r4, r0
 8009b34:	4608      	mov	r0, r1
 8009b36:	602b      	str	r3, [r5, #0]
 8009b38:	f7f9 f845 	bl	8002bc6 <_close>
 8009b3c:	1c43      	adds	r3, r0, #1
 8009b3e:	d102      	bne.n	8009b46 <_close_r+0x1a>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	b103      	cbz	r3, 8009b46 <_close_r+0x1a>
 8009b44:	6023      	str	r3, [r4, #0]
 8009b46:	bd38      	pop	{r3, r4, r5, pc}
 8009b48:	200008e8 	.word	0x200008e8

08009b4c <_fstat_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4d07      	ldr	r5, [pc, #28]	; (8009b6c <_fstat_r+0x20>)
 8009b50:	2300      	movs	r3, #0
 8009b52:	4604      	mov	r4, r0
 8009b54:	4608      	mov	r0, r1
 8009b56:	4611      	mov	r1, r2
 8009b58:	602b      	str	r3, [r5, #0]
 8009b5a:	f7f9 f840 	bl	8002bde <_fstat>
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	d102      	bne.n	8009b68 <_fstat_r+0x1c>
 8009b62:	682b      	ldr	r3, [r5, #0]
 8009b64:	b103      	cbz	r3, 8009b68 <_fstat_r+0x1c>
 8009b66:	6023      	str	r3, [r4, #0]
 8009b68:	bd38      	pop	{r3, r4, r5, pc}
 8009b6a:	bf00      	nop
 8009b6c:	200008e8 	.word	0x200008e8

08009b70 <_isatty_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4d06      	ldr	r5, [pc, #24]	; (8009b8c <_isatty_r+0x1c>)
 8009b74:	2300      	movs	r3, #0
 8009b76:	4604      	mov	r4, r0
 8009b78:	4608      	mov	r0, r1
 8009b7a:	602b      	str	r3, [r5, #0]
 8009b7c:	f7f9 f83f 	bl	8002bfe <_isatty>
 8009b80:	1c43      	adds	r3, r0, #1
 8009b82:	d102      	bne.n	8009b8a <_isatty_r+0x1a>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	b103      	cbz	r3, 8009b8a <_isatty_r+0x1a>
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	200008e8 	.word	0x200008e8

08009b90 <_lseek_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4d07      	ldr	r5, [pc, #28]	; (8009bb0 <_lseek_r+0x20>)
 8009b94:	4604      	mov	r4, r0
 8009b96:	4608      	mov	r0, r1
 8009b98:	4611      	mov	r1, r2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	602a      	str	r2, [r5, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f7f9 f838 	bl	8002c14 <_lseek>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d102      	bne.n	8009bae <_lseek_r+0x1e>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	b103      	cbz	r3, 8009bae <_lseek_r+0x1e>
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	200008e8 	.word	0x200008e8

08009bb4 <_read_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	4d07      	ldr	r5, [pc, #28]	; (8009bd4 <_read_r+0x20>)
 8009bb8:	4604      	mov	r4, r0
 8009bba:	4608      	mov	r0, r1
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	602a      	str	r2, [r5, #0]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	f7f8 ffc6 	bl	8002b54 <_read>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	d102      	bne.n	8009bd2 <_read_r+0x1e>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	b103      	cbz	r3, 8009bd2 <_read_r+0x1e>
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	bd38      	pop	{r3, r4, r5, pc}
 8009bd4:	200008e8 	.word	0x200008e8

08009bd8 <atan>:
 8009bd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	ec55 4b10 	vmov	r4, r5, d0
 8009be0:	4bc3      	ldr	r3, [pc, #780]	; (8009ef0 <atan+0x318>)
 8009be2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009be6:	429e      	cmp	r6, r3
 8009be8:	46ab      	mov	fp, r5
 8009bea:	dd18      	ble.n	8009c1e <atan+0x46>
 8009bec:	4bc1      	ldr	r3, [pc, #772]	; (8009ef4 <atan+0x31c>)
 8009bee:	429e      	cmp	r6, r3
 8009bf0:	dc01      	bgt.n	8009bf6 <atan+0x1e>
 8009bf2:	d109      	bne.n	8009c08 <atan+0x30>
 8009bf4:	b144      	cbz	r4, 8009c08 <atan+0x30>
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	462b      	mov	r3, r5
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	f7f6 fb45 	bl	800028c <__adddf3>
 8009c02:	4604      	mov	r4, r0
 8009c04:	460d      	mov	r5, r1
 8009c06:	e006      	b.n	8009c16 <atan+0x3e>
 8009c08:	f1bb 0f00 	cmp.w	fp, #0
 8009c0c:	f300 8131 	bgt.w	8009e72 <atan+0x29a>
 8009c10:	a59b      	add	r5, pc, #620	; (adr r5, 8009e80 <atan+0x2a8>)
 8009c12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c16:	ec45 4b10 	vmov	d0, r4, r5
 8009c1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1e:	4bb6      	ldr	r3, [pc, #728]	; (8009ef8 <atan+0x320>)
 8009c20:	429e      	cmp	r6, r3
 8009c22:	dc14      	bgt.n	8009c4e <atan+0x76>
 8009c24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009c28:	429e      	cmp	r6, r3
 8009c2a:	dc0d      	bgt.n	8009c48 <atan+0x70>
 8009c2c:	a396      	add	r3, pc, #600	; (adr r3, 8009e88 <atan+0x2b0>)
 8009c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c32:	ee10 0a10 	vmov	r0, s0
 8009c36:	4629      	mov	r1, r5
 8009c38:	f7f6 fb28 	bl	800028c <__adddf3>
 8009c3c:	4baf      	ldr	r3, [pc, #700]	; (8009efc <atan+0x324>)
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f7f6 ff6a 	bl	8000b18 <__aeabi_dcmpgt>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d1e6      	bne.n	8009c16 <atan+0x3e>
 8009c48:	f04f 3aff 	mov.w	sl, #4294967295
 8009c4c:	e02b      	b.n	8009ca6 <atan+0xce>
 8009c4e:	f000 f963 	bl	8009f18 <fabs>
 8009c52:	4bab      	ldr	r3, [pc, #684]	; (8009f00 <atan+0x328>)
 8009c54:	429e      	cmp	r6, r3
 8009c56:	ec55 4b10 	vmov	r4, r5, d0
 8009c5a:	f300 80bf 	bgt.w	8009ddc <atan+0x204>
 8009c5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009c62:	429e      	cmp	r6, r3
 8009c64:	f300 80a0 	bgt.w	8009da8 <atan+0x1d0>
 8009c68:	ee10 2a10 	vmov	r2, s0
 8009c6c:	ee10 0a10 	vmov	r0, s0
 8009c70:	462b      	mov	r3, r5
 8009c72:	4629      	mov	r1, r5
 8009c74:	f7f6 fb0a 	bl	800028c <__adddf3>
 8009c78:	4ba0      	ldr	r3, [pc, #640]	; (8009efc <atan+0x324>)
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f7f6 fb04 	bl	8000288 <__aeabi_dsub>
 8009c80:	2200      	movs	r2, #0
 8009c82:	4606      	mov	r6, r0
 8009c84:	460f      	mov	r7, r1
 8009c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	f7f6 fafd 	bl	800028c <__adddf3>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4630      	mov	r0, r6
 8009c98:	4639      	mov	r1, r7
 8009c9a:	f7f6 fdd7 	bl	800084c <__aeabi_ddiv>
 8009c9e:	f04f 0a00 	mov.w	sl, #0
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	460d      	mov	r5, r1
 8009ca6:	4622      	mov	r2, r4
 8009ca8:	462b      	mov	r3, r5
 8009caa:	4620      	mov	r0, r4
 8009cac:	4629      	mov	r1, r5
 8009cae:	f7f6 fca3 	bl	80005f8 <__aeabi_dmul>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4680      	mov	r8, r0
 8009cb8:	4689      	mov	r9, r1
 8009cba:	f7f6 fc9d 	bl	80005f8 <__aeabi_dmul>
 8009cbe:	a374      	add	r3, pc, #464	; (adr r3, 8009e90 <atan+0x2b8>)
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	460f      	mov	r7, r1
 8009cc8:	f7f6 fc96 	bl	80005f8 <__aeabi_dmul>
 8009ccc:	a372      	add	r3, pc, #456	; (adr r3, 8009e98 <atan+0x2c0>)
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f7f6 fadb 	bl	800028c <__adddf3>
 8009cd6:	4632      	mov	r2, r6
 8009cd8:	463b      	mov	r3, r7
 8009cda:	f7f6 fc8d 	bl	80005f8 <__aeabi_dmul>
 8009cde:	a370      	add	r3, pc, #448	; (adr r3, 8009ea0 <atan+0x2c8>)
 8009ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce4:	f7f6 fad2 	bl	800028c <__adddf3>
 8009ce8:	4632      	mov	r2, r6
 8009cea:	463b      	mov	r3, r7
 8009cec:	f7f6 fc84 	bl	80005f8 <__aeabi_dmul>
 8009cf0:	a36d      	add	r3, pc, #436	; (adr r3, 8009ea8 <atan+0x2d0>)
 8009cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf6:	f7f6 fac9 	bl	800028c <__adddf3>
 8009cfa:	4632      	mov	r2, r6
 8009cfc:	463b      	mov	r3, r7
 8009cfe:	f7f6 fc7b 	bl	80005f8 <__aeabi_dmul>
 8009d02:	a36b      	add	r3, pc, #428	; (adr r3, 8009eb0 <atan+0x2d8>)
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	f7f6 fac0 	bl	800028c <__adddf3>
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	463b      	mov	r3, r7
 8009d10:	f7f6 fc72 	bl	80005f8 <__aeabi_dmul>
 8009d14:	a368      	add	r3, pc, #416	; (adr r3, 8009eb8 <atan+0x2e0>)
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	f7f6 fab7 	bl	800028c <__adddf3>
 8009d1e:	4642      	mov	r2, r8
 8009d20:	464b      	mov	r3, r9
 8009d22:	f7f6 fc69 	bl	80005f8 <__aeabi_dmul>
 8009d26:	a366      	add	r3, pc, #408	; (adr r3, 8009ec0 <atan+0x2e8>)
 8009d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2c:	4680      	mov	r8, r0
 8009d2e:	4689      	mov	r9, r1
 8009d30:	4630      	mov	r0, r6
 8009d32:	4639      	mov	r1, r7
 8009d34:	f7f6 fc60 	bl	80005f8 <__aeabi_dmul>
 8009d38:	a363      	add	r3, pc, #396	; (adr r3, 8009ec8 <atan+0x2f0>)
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	f7f6 faa3 	bl	8000288 <__aeabi_dsub>
 8009d42:	4632      	mov	r2, r6
 8009d44:	463b      	mov	r3, r7
 8009d46:	f7f6 fc57 	bl	80005f8 <__aeabi_dmul>
 8009d4a:	a361      	add	r3, pc, #388	; (adr r3, 8009ed0 <atan+0x2f8>)
 8009d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d50:	f7f6 fa9a 	bl	8000288 <__aeabi_dsub>
 8009d54:	4632      	mov	r2, r6
 8009d56:	463b      	mov	r3, r7
 8009d58:	f7f6 fc4e 	bl	80005f8 <__aeabi_dmul>
 8009d5c:	a35e      	add	r3, pc, #376	; (adr r3, 8009ed8 <atan+0x300>)
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	f7f6 fa91 	bl	8000288 <__aeabi_dsub>
 8009d66:	4632      	mov	r2, r6
 8009d68:	463b      	mov	r3, r7
 8009d6a:	f7f6 fc45 	bl	80005f8 <__aeabi_dmul>
 8009d6e:	a35c      	add	r3, pc, #368	; (adr r3, 8009ee0 <atan+0x308>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 fa88 	bl	8000288 <__aeabi_dsub>
 8009d78:	4632      	mov	r2, r6
 8009d7a:	463b      	mov	r3, r7
 8009d7c:	f7f6 fc3c 	bl	80005f8 <__aeabi_dmul>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4640      	mov	r0, r8
 8009d86:	4649      	mov	r1, r9
 8009d88:	f7f6 fa80 	bl	800028c <__adddf3>
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	462b      	mov	r3, r5
 8009d90:	f7f6 fc32 	bl	80005f8 <__aeabi_dmul>
 8009d94:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	d14b      	bne.n	8009e36 <atan+0x25e>
 8009d9e:	4620      	mov	r0, r4
 8009da0:	4629      	mov	r1, r5
 8009da2:	f7f6 fa71 	bl	8000288 <__aeabi_dsub>
 8009da6:	e72c      	b.n	8009c02 <atan+0x2a>
 8009da8:	ee10 0a10 	vmov	r0, s0
 8009dac:	4b53      	ldr	r3, [pc, #332]	; (8009efc <atan+0x324>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	4629      	mov	r1, r5
 8009db2:	f7f6 fa69 	bl	8000288 <__aeabi_dsub>
 8009db6:	4b51      	ldr	r3, [pc, #324]	; (8009efc <atan+0x324>)
 8009db8:	4606      	mov	r6, r0
 8009dba:	460f      	mov	r7, r1
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	4629      	mov	r1, r5
 8009dc2:	f7f6 fa63 	bl	800028c <__adddf3>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4630      	mov	r0, r6
 8009dcc:	4639      	mov	r1, r7
 8009dce:	f7f6 fd3d 	bl	800084c <__aeabi_ddiv>
 8009dd2:	f04f 0a01 	mov.w	sl, #1
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	460d      	mov	r5, r1
 8009dda:	e764      	b.n	8009ca6 <atan+0xce>
 8009ddc:	4b49      	ldr	r3, [pc, #292]	; (8009f04 <atan+0x32c>)
 8009dde:	429e      	cmp	r6, r3
 8009de0:	da1d      	bge.n	8009e1e <atan+0x246>
 8009de2:	ee10 0a10 	vmov	r0, s0
 8009de6:	4b48      	ldr	r3, [pc, #288]	; (8009f08 <atan+0x330>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	4629      	mov	r1, r5
 8009dec:	f7f6 fa4c 	bl	8000288 <__aeabi_dsub>
 8009df0:	4b45      	ldr	r3, [pc, #276]	; (8009f08 <atan+0x330>)
 8009df2:	4606      	mov	r6, r0
 8009df4:	460f      	mov	r7, r1
 8009df6:	2200      	movs	r2, #0
 8009df8:	4620      	mov	r0, r4
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	f7f6 fbfc 	bl	80005f8 <__aeabi_dmul>
 8009e00:	4b3e      	ldr	r3, [pc, #248]	; (8009efc <atan+0x324>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	f7f6 fa42 	bl	800028c <__adddf3>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	4639      	mov	r1, r7
 8009e10:	f7f6 fd1c 	bl	800084c <__aeabi_ddiv>
 8009e14:	f04f 0a02 	mov.w	sl, #2
 8009e18:	4604      	mov	r4, r0
 8009e1a:	460d      	mov	r5, r1
 8009e1c:	e743      	b.n	8009ca6 <atan+0xce>
 8009e1e:	462b      	mov	r3, r5
 8009e20:	ee10 2a10 	vmov	r2, s0
 8009e24:	4939      	ldr	r1, [pc, #228]	; (8009f0c <atan+0x334>)
 8009e26:	2000      	movs	r0, #0
 8009e28:	f7f6 fd10 	bl	800084c <__aeabi_ddiv>
 8009e2c:	f04f 0a03 	mov.w	sl, #3
 8009e30:	4604      	mov	r4, r0
 8009e32:	460d      	mov	r5, r1
 8009e34:	e737      	b.n	8009ca6 <atan+0xce>
 8009e36:	4b36      	ldr	r3, [pc, #216]	; (8009f10 <atan+0x338>)
 8009e38:	4e36      	ldr	r6, [pc, #216]	; (8009f14 <atan+0x33c>)
 8009e3a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009e3e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009e42:	e9da 2300 	ldrd	r2, r3, [sl]
 8009e46:	f7f6 fa1f 	bl	8000288 <__aeabi_dsub>
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	462b      	mov	r3, r5
 8009e4e:	f7f6 fa1b 	bl	8000288 <__aeabi_dsub>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009e5a:	f7f6 fa15 	bl	8000288 <__aeabi_dsub>
 8009e5e:	f1bb 0f00 	cmp.w	fp, #0
 8009e62:	4604      	mov	r4, r0
 8009e64:	460d      	mov	r5, r1
 8009e66:	f6bf aed6 	bge.w	8009c16 <atan+0x3e>
 8009e6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e6e:	461d      	mov	r5, r3
 8009e70:	e6d1      	b.n	8009c16 <atan+0x3e>
 8009e72:	a51d      	add	r5, pc, #116	; (adr r5, 8009ee8 <atan+0x310>)
 8009e74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e78:	e6cd      	b.n	8009c16 <atan+0x3e>
 8009e7a:	bf00      	nop
 8009e7c:	f3af 8000 	nop.w
 8009e80:	54442d18 	.word	0x54442d18
 8009e84:	bff921fb 	.word	0xbff921fb
 8009e88:	8800759c 	.word	0x8800759c
 8009e8c:	7e37e43c 	.word	0x7e37e43c
 8009e90:	e322da11 	.word	0xe322da11
 8009e94:	3f90ad3a 	.word	0x3f90ad3a
 8009e98:	24760deb 	.word	0x24760deb
 8009e9c:	3fa97b4b 	.word	0x3fa97b4b
 8009ea0:	a0d03d51 	.word	0xa0d03d51
 8009ea4:	3fb10d66 	.word	0x3fb10d66
 8009ea8:	c54c206e 	.word	0xc54c206e
 8009eac:	3fb745cd 	.word	0x3fb745cd
 8009eb0:	920083ff 	.word	0x920083ff
 8009eb4:	3fc24924 	.word	0x3fc24924
 8009eb8:	5555550d 	.word	0x5555550d
 8009ebc:	3fd55555 	.word	0x3fd55555
 8009ec0:	2c6a6c2f 	.word	0x2c6a6c2f
 8009ec4:	bfa2b444 	.word	0xbfa2b444
 8009ec8:	52defd9a 	.word	0x52defd9a
 8009ecc:	3fadde2d 	.word	0x3fadde2d
 8009ed0:	af749a6d 	.word	0xaf749a6d
 8009ed4:	3fb3b0f2 	.word	0x3fb3b0f2
 8009ed8:	fe231671 	.word	0xfe231671
 8009edc:	3fbc71c6 	.word	0x3fbc71c6
 8009ee0:	9998ebc4 	.word	0x9998ebc4
 8009ee4:	3fc99999 	.word	0x3fc99999
 8009ee8:	54442d18 	.word	0x54442d18
 8009eec:	3ff921fb 	.word	0x3ff921fb
 8009ef0:	440fffff 	.word	0x440fffff
 8009ef4:	7ff00000 	.word	0x7ff00000
 8009ef8:	3fdbffff 	.word	0x3fdbffff
 8009efc:	3ff00000 	.word	0x3ff00000
 8009f00:	3ff2ffff 	.word	0x3ff2ffff
 8009f04:	40038000 	.word	0x40038000
 8009f08:	3ff80000 	.word	0x3ff80000
 8009f0c:	bff00000 	.word	0xbff00000
 8009f10:	0800c110 	.word	0x0800c110
 8009f14:	0800c0f0 	.word	0x0800c0f0

08009f18 <fabs>:
 8009f18:	ec51 0b10 	vmov	r0, r1, d0
 8009f1c:	ee10 2a10 	vmov	r2, s0
 8009f20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f24:	ec43 2b10 	vmov	d0, r2, r3
 8009f28:	4770      	bx	lr
	...

08009f2c <atanf>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	ee10 5a10 	vmov	r5, s0
 8009f32:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009f36:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009f3a:	eef0 7a40 	vmov.f32	s15, s0
 8009f3e:	db10      	blt.n	8009f62 <atanf+0x36>
 8009f40:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009f44:	dd04      	ble.n	8009f50 <atanf+0x24>
 8009f46:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f4e:	bd38      	pop	{r3, r4, r5, pc}
 8009f50:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a088 <atanf+0x15c>
 8009f54:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800a08c <atanf+0x160>
 8009f58:	2d00      	cmp	r5, #0
 8009f5a:	bfd8      	it	le
 8009f5c:	eef0 7a40 	vmovle.f32	s15, s0
 8009f60:	e7f3      	b.n	8009f4a <atanf+0x1e>
 8009f62:	4b4b      	ldr	r3, [pc, #300]	; (800a090 <atanf+0x164>)
 8009f64:	429c      	cmp	r4, r3
 8009f66:	dc10      	bgt.n	8009f8a <atanf+0x5e>
 8009f68:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009f6c:	da0a      	bge.n	8009f84 <atanf+0x58>
 8009f6e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a094 <atanf+0x168>
 8009f72:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f7a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f82:	dce2      	bgt.n	8009f4a <atanf+0x1e>
 8009f84:	f04f 33ff 	mov.w	r3, #4294967295
 8009f88:	e013      	b.n	8009fb2 <atanf+0x86>
 8009f8a:	f000 f8e7 	bl	800a15c <fabsf>
 8009f8e:	4b42      	ldr	r3, [pc, #264]	; (800a098 <atanf+0x16c>)
 8009f90:	429c      	cmp	r4, r3
 8009f92:	dc4f      	bgt.n	800a034 <atanf+0x108>
 8009f94:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009f98:	429c      	cmp	r4, r3
 8009f9a:	dc41      	bgt.n	800a020 <atanf+0xf4>
 8009f9c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009fa0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009fa4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009fa8:	2300      	movs	r3, #0
 8009faa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009fae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009fb2:	1c5a      	adds	r2, r3, #1
 8009fb4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009fb8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a09c <atanf+0x170>
 8009fbc:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a0a0 <atanf+0x174>
 8009fc0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a0a4 <atanf+0x178>
 8009fc4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009fc8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009fcc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a0a8 <atanf+0x17c>
 8009fd0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009fd4:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a0ac <atanf+0x180>
 8009fd8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009fdc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a0b0 <atanf+0x184>
 8009fe0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009fe4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a0b4 <atanf+0x188>
 8009fe8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009fec:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a0b8 <atanf+0x18c>
 8009ff0:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009ff4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a0bc <atanf+0x190>
 8009ff8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009ffc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800a0c0 <atanf+0x194>
 800a000:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a004:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a0c4 <atanf+0x198>
 800a008:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a00c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a010:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a014:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a018:	d121      	bne.n	800a05e <atanf+0x132>
 800a01a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a01e:	e794      	b.n	8009f4a <atanf+0x1e>
 800a020:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a024:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a028:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a02c:	2301      	movs	r3, #1
 800a02e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a032:	e7be      	b.n	8009fb2 <atanf+0x86>
 800a034:	4b24      	ldr	r3, [pc, #144]	; (800a0c8 <atanf+0x19c>)
 800a036:	429c      	cmp	r4, r3
 800a038:	dc0b      	bgt.n	800a052 <atanf+0x126>
 800a03a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a03e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a042:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a046:	2302      	movs	r3, #2
 800a048:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a04c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a050:	e7af      	b.n	8009fb2 <atanf+0x86>
 800a052:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a056:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a05a:	2303      	movs	r3, #3
 800a05c:	e7a9      	b.n	8009fb2 <atanf+0x86>
 800a05e:	4a1b      	ldr	r2, [pc, #108]	; (800a0cc <atanf+0x1a0>)
 800a060:	491b      	ldr	r1, [pc, #108]	; (800a0d0 <atanf+0x1a4>)
 800a062:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a066:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a06a:	ed93 0a00 	vldr	s0, [r3]
 800a06e:	ee37 7a40 	vsub.f32	s14, s14, s0
 800a072:	ed92 0a00 	vldr	s0, [r2]
 800a076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a07a:	2d00      	cmp	r5, #0
 800a07c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a080:	bfb8      	it	lt
 800a082:	eef1 7a67 	vneglt.f32	s15, s15
 800a086:	e760      	b.n	8009f4a <atanf+0x1e>
 800a088:	3fc90fdb 	.word	0x3fc90fdb
 800a08c:	bfc90fdb 	.word	0xbfc90fdb
 800a090:	3edfffff 	.word	0x3edfffff
 800a094:	7149f2ca 	.word	0x7149f2ca
 800a098:	3f97ffff 	.word	0x3f97ffff
 800a09c:	3c8569d7 	.word	0x3c8569d7
 800a0a0:	3d4bda59 	.word	0x3d4bda59
 800a0a4:	bd6ef16b 	.word	0xbd6ef16b
 800a0a8:	3d886b35 	.word	0x3d886b35
 800a0ac:	3dba2e6e 	.word	0x3dba2e6e
 800a0b0:	3e124925 	.word	0x3e124925
 800a0b4:	3eaaaaab 	.word	0x3eaaaaab
 800a0b8:	bd15a221 	.word	0xbd15a221
 800a0bc:	bd9d8795 	.word	0xbd9d8795
 800a0c0:	bde38e38 	.word	0xbde38e38
 800a0c4:	be4ccccd 	.word	0xbe4ccccd
 800a0c8:	401bffff 	.word	0x401bffff
 800a0cc:	0800c130 	.word	0x0800c130
 800a0d0:	0800c140 	.word	0x0800c140

0800a0d4 <cosf>:
 800a0d4:	ee10 3a10 	vmov	r3, s0
 800a0d8:	b507      	push	{r0, r1, r2, lr}
 800a0da:	4a1e      	ldr	r2, [pc, #120]	; (800a154 <cosf+0x80>)
 800a0dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	dc06      	bgt.n	800a0f2 <cosf+0x1e>
 800a0e4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800a158 <cosf+0x84>
 800a0e8:	b003      	add	sp, #12
 800a0ea:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0ee:	f001 b867 	b.w	800b1c0 <__kernel_cosf>
 800a0f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a0f6:	db04      	blt.n	800a102 <cosf+0x2e>
 800a0f8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a0fc:	b003      	add	sp, #12
 800a0fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800a102:	4668      	mov	r0, sp
 800a104:	f000 ff20 	bl	800af48 <__ieee754_rem_pio2f>
 800a108:	f000 0003 	and.w	r0, r0, #3
 800a10c:	2801      	cmp	r0, #1
 800a10e:	d009      	beq.n	800a124 <cosf+0x50>
 800a110:	2802      	cmp	r0, #2
 800a112:	d010      	beq.n	800a136 <cosf+0x62>
 800a114:	b9b0      	cbnz	r0, 800a144 <cosf+0x70>
 800a116:	eddd 0a01 	vldr	s1, [sp, #4]
 800a11a:	ed9d 0a00 	vldr	s0, [sp]
 800a11e:	f001 f84f 	bl	800b1c0 <__kernel_cosf>
 800a122:	e7eb      	b.n	800a0fc <cosf+0x28>
 800a124:	eddd 0a01 	vldr	s1, [sp, #4]
 800a128:	ed9d 0a00 	vldr	s0, [sp]
 800a12c:	f001 fb1e 	bl	800b76c <__kernel_sinf>
 800a130:	eeb1 0a40 	vneg.f32	s0, s0
 800a134:	e7e2      	b.n	800a0fc <cosf+0x28>
 800a136:	eddd 0a01 	vldr	s1, [sp, #4]
 800a13a:	ed9d 0a00 	vldr	s0, [sp]
 800a13e:	f001 f83f 	bl	800b1c0 <__kernel_cosf>
 800a142:	e7f5      	b.n	800a130 <cosf+0x5c>
 800a144:	eddd 0a01 	vldr	s1, [sp, #4]
 800a148:	ed9d 0a00 	vldr	s0, [sp]
 800a14c:	2001      	movs	r0, #1
 800a14e:	f001 fb0d 	bl	800b76c <__kernel_sinf>
 800a152:	e7d3      	b.n	800a0fc <cosf+0x28>
 800a154:	3f490fd8 	.word	0x3f490fd8
 800a158:	00000000 	.word	0x00000000

0800a15c <fabsf>:
 800a15c:	ee10 3a10 	vmov	r3, s0
 800a160:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a164:	ee00 3a10 	vmov	s0, r3
 800a168:	4770      	bx	lr
	...

0800a16c <sinf>:
 800a16c:	ee10 3a10 	vmov	r3, s0
 800a170:	b507      	push	{r0, r1, r2, lr}
 800a172:	4a1f      	ldr	r2, [pc, #124]	; (800a1f0 <sinf+0x84>)
 800a174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a178:	4293      	cmp	r3, r2
 800a17a:	dc07      	bgt.n	800a18c <sinf+0x20>
 800a17c:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a1f4 <sinf+0x88>
 800a180:	2000      	movs	r0, #0
 800a182:	b003      	add	sp, #12
 800a184:	f85d eb04 	ldr.w	lr, [sp], #4
 800a188:	f001 baf0 	b.w	800b76c <__kernel_sinf>
 800a18c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a190:	db04      	blt.n	800a19c <sinf+0x30>
 800a192:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a196:	b003      	add	sp, #12
 800a198:	f85d fb04 	ldr.w	pc, [sp], #4
 800a19c:	4668      	mov	r0, sp
 800a19e:	f000 fed3 	bl	800af48 <__ieee754_rem_pio2f>
 800a1a2:	f000 0003 	and.w	r0, r0, #3
 800a1a6:	2801      	cmp	r0, #1
 800a1a8:	d00a      	beq.n	800a1c0 <sinf+0x54>
 800a1aa:	2802      	cmp	r0, #2
 800a1ac:	d00f      	beq.n	800a1ce <sinf+0x62>
 800a1ae:	b9c0      	cbnz	r0, 800a1e2 <sinf+0x76>
 800a1b0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a1b4:	ed9d 0a00 	vldr	s0, [sp]
 800a1b8:	2001      	movs	r0, #1
 800a1ba:	f001 fad7 	bl	800b76c <__kernel_sinf>
 800a1be:	e7ea      	b.n	800a196 <sinf+0x2a>
 800a1c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a1c4:	ed9d 0a00 	vldr	s0, [sp]
 800a1c8:	f000 fffa 	bl	800b1c0 <__kernel_cosf>
 800a1cc:	e7e3      	b.n	800a196 <sinf+0x2a>
 800a1ce:	eddd 0a01 	vldr	s1, [sp, #4]
 800a1d2:	ed9d 0a00 	vldr	s0, [sp]
 800a1d6:	2001      	movs	r0, #1
 800a1d8:	f001 fac8 	bl	800b76c <__kernel_sinf>
 800a1dc:	eeb1 0a40 	vneg.f32	s0, s0
 800a1e0:	e7d9      	b.n	800a196 <sinf+0x2a>
 800a1e2:	eddd 0a01 	vldr	s1, [sp, #4]
 800a1e6:	ed9d 0a00 	vldr	s0, [sp]
 800a1ea:	f000 ffe9 	bl	800b1c0 <__kernel_cosf>
 800a1ee:	e7f5      	b.n	800a1dc <sinf+0x70>
 800a1f0:	3f490fd8 	.word	0x3f490fd8
 800a1f4:	00000000 	.word	0x00000000

0800a1f8 <tanf>:
 800a1f8:	ee10 3a10 	vmov	r3, s0
 800a1fc:	b507      	push	{r0, r1, r2, lr}
 800a1fe:	4a12      	ldr	r2, [pc, #72]	; (800a248 <tanf+0x50>)
 800a200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a204:	4293      	cmp	r3, r2
 800a206:	dc07      	bgt.n	800a218 <tanf+0x20>
 800a208:	eddf 0a10 	vldr	s1, [pc, #64]	; 800a24c <tanf+0x54>
 800a20c:	2001      	movs	r0, #1
 800a20e:	b003      	add	sp, #12
 800a210:	f85d eb04 	ldr.w	lr, [sp], #4
 800a214:	f001 baf2 	b.w	800b7fc <__kernel_tanf>
 800a218:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a21c:	db04      	blt.n	800a228 <tanf+0x30>
 800a21e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a222:	b003      	add	sp, #12
 800a224:	f85d fb04 	ldr.w	pc, [sp], #4
 800a228:	4668      	mov	r0, sp
 800a22a:	f000 fe8d 	bl	800af48 <__ieee754_rem_pio2f>
 800a22e:	0040      	lsls	r0, r0, #1
 800a230:	f000 0002 	and.w	r0, r0, #2
 800a234:	eddd 0a01 	vldr	s1, [sp, #4]
 800a238:	ed9d 0a00 	vldr	s0, [sp]
 800a23c:	f1c0 0001 	rsb	r0, r0, #1
 800a240:	f001 fadc 	bl	800b7fc <__kernel_tanf>
 800a244:	e7ed      	b.n	800a222 <tanf+0x2a>
 800a246:	bf00      	nop
 800a248:	3f490fda 	.word	0x3f490fda
 800a24c:	00000000 	.word	0x00000000

0800a250 <pow>:
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	ed2d 8b02 	vpush	{d8}
 800a256:	eeb0 8a40 	vmov.f32	s16, s0
 800a25a:	eef0 8a60 	vmov.f32	s17, s1
 800a25e:	ec55 4b11 	vmov	r4, r5, d1
 800a262:	f000 f891 	bl	800a388 <__ieee754_pow>
 800a266:	4622      	mov	r2, r4
 800a268:	462b      	mov	r3, r5
 800a26a:	4620      	mov	r0, r4
 800a26c:	4629      	mov	r1, r5
 800a26e:	ec57 6b10 	vmov	r6, r7, d0
 800a272:	f7f6 fc5b 	bl	8000b2c <__aeabi_dcmpun>
 800a276:	2800      	cmp	r0, #0
 800a278:	d13b      	bne.n	800a2f2 <pow+0xa2>
 800a27a:	ec51 0b18 	vmov	r0, r1, d8
 800a27e:	2200      	movs	r2, #0
 800a280:	2300      	movs	r3, #0
 800a282:	f7f6 fc21 	bl	8000ac8 <__aeabi_dcmpeq>
 800a286:	b1b8      	cbz	r0, 800a2b8 <pow+0x68>
 800a288:	2200      	movs	r2, #0
 800a28a:	2300      	movs	r3, #0
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f6 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a294:	2800      	cmp	r0, #0
 800a296:	d146      	bne.n	800a326 <pow+0xd6>
 800a298:	ec45 4b10 	vmov	d0, r4, r5
 800a29c:	f001 fbbe 	bl	800ba1c <finite>
 800a2a0:	b338      	cbz	r0, 800a2f2 <pow+0xa2>
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	f7f6 fc17 	bl	8000adc <__aeabi_dcmplt>
 800a2ae:	b300      	cbz	r0, 800a2f2 <pow+0xa2>
 800a2b0:	f7fc fd7e 	bl	8006db0 <__errno>
 800a2b4:	2322      	movs	r3, #34	; 0x22
 800a2b6:	e01b      	b.n	800a2f0 <pow+0xa0>
 800a2b8:	ec47 6b10 	vmov	d0, r6, r7
 800a2bc:	f001 fbae 	bl	800ba1c <finite>
 800a2c0:	b9e0      	cbnz	r0, 800a2fc <pow+0xac>
 800a2c2:	eeb0 0a48 	vmov.f32	s0, s16
 800a2c6:	eef0 0a68 	vmov.f32	s1, s17
 800a2ca:	f001 fba7 	bl	800ba1c <finite>
 800a2ce:	b1a8      	cbz	r0, 800a2fc <pow+0xac>
 800a2d0:	ec45 4b10 	vmov	d0, r4, r5
 800a2d4:	f001 fba2 	bl	800ba1c <finite>
 800a2d8:	b180      	cbz	r0, 800a2fc <pow+0xac>
 800a2da:	4632      	mov	r2, r6
 800a2dc:	463b      	mov	r3, r7
 800a2de:	4630      	mov	r0, r6
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	f7f6 fc23 	bl	8000b2c <__aeabi_dcmpun>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	d0e2      	beq.n	800a2b0 <pow+0x60>
 800a2ea:	f7fc fd61 	bl	8006db0 <__errno>
 800a2ee:	2321      	movs	r3, #33	; 0x21
 800a2f0:	6003      	str	r3, [r0, #0]
 800a2f2:	ecbd 8b02 	vpop	{d8}
 800a2f6:	ec47 6b10 	vmov	d0, r6, r7
 800a2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	2300      	movs	r3, #0
 800a300:	4630      	mov	r0, r6
 800a302:	4639      	mov	r1, r7
 800a304:	f7f6 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a308:	2800      	cmp	r0, #0
 800a30a:	d0f2      	beq.n	800a2f2 <pow+0xa2>
 800a30c:	eeb0 0a48 	vmov.f32	s0, s16
 800a310:	eef0 0a68 	vmov.f32	s1, s17
 800a314:	f001 fb82 	bl	800ba1c <finite>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d0ea      	beq.n	800a2f2 <pow+0xa2>
 800a31c:	ec45 4b10 	vmov	d0, r4, r5
 800a320:	f001 fb7c 	bl	800ba1c <finite>
 800a324:	e7c3      	b.n	800a2ae <pow+0x5e>
 800a326:	4f01      	ldr	r7, [pc, #4]	; (800a32c <pow+0xdc>)
 800a328:	2600      	movs	r6, #0
 800a32a:	e7e2      	b.n	800a2f2 <pow+0xa2>
 800a32c:	3ff00000 	.word	0x3ff00000

0800a330 <sqrt>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	ed2d 8b02 	vpush	{d8}
 800a336:	ec55 4b10 	vmov	r4, r5, d0
 800a33a:	f000 fd53 	bl	800ade4 <__ieee754_sqrt>
 800a33e:	4622      	mov	r2, r4
 800a340:	462b      	mov	r3, r5
 800a342:	4620      	mov	r0, r4
 800a344:	4629      	mov	r1, r5
 800a346:	eeb0 8a40 	vmov.f32	s16, s0
 800a34a:	eef0 8a60 	vmov.f32	s17, s1
 800a34e:	f7f6 fbed 	bl	8000b2c <__aeabi_dcmpun>
 800a352:	b990      	cbnz	r0, 800a37a <sqrt+0x4a>
 800a354:	2200      	movs	r2, #0
 800a356:	2300      	movs	r3, #0
 800a358:	4620      	mov	r0, r4
 800a35a:	4629      	mov	r1, r5
 800a35c:	f7f6 fbbe 	bl	8000adc <__aeabi_dcmplt>
 800a360:	b158      	cbz	r0, 800a37a <sqrt+0x4a>
 800a362:	f7fc fd25 	bl	8006db0 <__errno>
 800a366:	2321      	movs	r3, #33	; 0x21
 800a368:	6003      	str	r3, [r0, #0]
 800a36a:	2200      	movs	r2, #0
 800a36c:	2300      	movs	r3, #0
 800a36e:	4610      	mov	r0, r2
 800a370:	4619      	mov	r1, r3
 800a372:	f7f6 fa6b 	bl	800084c <__aeabi_ddiv>
 800a376:	ec41 0b18 	vmov	d8, r0, r1
 800a37a:	eeb0 0a48 	vmov.f32	s0, s16
 800a37e:	eef0 0a68 	vmov.f32	s1, s17
 800a382:	ecbd 8b02 	vpop	{d8}
 800a386:	bd38      	pop	{r3, r4, r5, pc}

0800a388 <__ieee754_pow>:
 800a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	ed2d 8b06 	vpush	{d8-d10}
 800a390:	b089      	sub	sp, #36	; 0x24
 800a392:	ed8d 1b00 	vstr	d1, [sp]
 800a396:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a39a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a39e:	ea58 0102 	orrs.w	r1, r8, r2
 800a3a2:	ec57 6b10 	vmov	r6, r7, d0
 800a3a6:	d115      	bne.n	800a3d4 <__ieee754_pow+0x4c>
 800a3a8:	19b3      	adds	r3, r6, r6
 800a3aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a3ae:	4152      	adcs	r2, r2
 800a3b0:	4299      	cmp	r1, r3
 800a3b2:	4b89      	ldr	r3, [pc, #548]	; (800a5d8 <__ieee754_pow+0x250>)
 800a3b4:	4193      	sbcs	r3, r2
 800a3b6:	f080 84d2 	bcs.w	800ad5e <__ieee754_pow+0x9d6>
 800a3ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3be:	4630      	mov	r0, r6
 800a3c0:	4639      	mov	r1, r7
 800a3c2:	f7f5 ff63 	bl	800028c <__adddf3>
 800a3c6:	ec41 0b10 	vmov	d0, r0, r1
 800a3ca:	b009      	add	sp, #36	; 0x24
 800a3cc:	ecbd 8b06 	vpop	{d8-d10}
 800a3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d4:	4b81      	ldr	r3, [pc, #516]	; (800a5dc <__ieee754_pow+0x254>)
 800a3d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a3da:	429c      	cmp	r4, r3
 800a3dc:	ee10 aa10 	vmov	sl, s0
 800a3e0:	463d      	mov	r5, r7
 800a3e2:	dc06      	bgt.n	800a3f2 <__ieee754_pow+0x6a>
 800a3e4:	d101      	bne.n	800a3ea <__ieee754_pow+0x62>
 800a3e6:	2e00      	cmp	r6, #0
 800a3e8:	d1e7      	bne.n	800a3ba <__ieee754_pow+0x32>
 800a3ea:	4598      	cmp	r8, r3
 800a3ec:	dc01      	bgt.n	800a3f2 <__ieee754_pow+0x6a>
 800a3ee:	d10f      	bne.n	800a410 <__ieee754_pow+0x88>
 800a3f0:	b172      	cbz	r2, 800a410 <__ieee754_pow+0x88>
 800a3f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a3f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a3fa:	ea55 050a 	orrs.w	r5, r5, sl
 800a3fe:	d1dc      	bne.n	800a3ba <__ieee754_pow+0x32>
 800a400:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a404:	18db      	adds	r3, r3, r3
 800a406:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a40a:	4152      	adcs	r2, r2
 800a40c:	429d      	cmp	r5, r3
 800a40e:	e7d0      	b.n	800a3b2 <__ieee754_pow+0x2a>
 800a410:	2d00      	cmp	r5, #0
 800a412:	da3b      	bge.n	800a48c <__ieee754_pow+0x104>
 800a414:	4b72      	ldr	r3, [pc, #456]	; (800a5e0 <__ieee754_pow+0x258>)
 800a416:	4598      	cmp	r8, r3
 800a418:	dc51      	bgt.n	800a4be <__ieee754_pow+0x136>
 800a41a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a41e:	4598      	cmp	r8, r3
 800a420:	f340 84ac 	ble.w	800ad7c <__ieee754_pow+0x9f4>
 800a424:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a428:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a42c:	2b14      	cmp	r3, #20
 800a42e:	dd0f      	ble.n	800a450 <__ieee754_pow+0xc8>
 800a430:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a434:	fa22 f103 	lsr.w	r1, r2, r3
 800a438:	fa01 f303 	lsl.w	r3, r1, r3
 800a43c:	4293      	cmp	r3, r2
 800a43e:	f040 849d 	bne.w	800ad7c <__ieee754_pow+0x9f4>
 800a442:	f001 0101 	and.w	r1, r1, #1
 800a446:	f1c1 0302 	rsb	r3, r1, #2
 800a44a:	9304      	str	r3, [sp, #16]
 800a44c:	b182      	cbz	r2, 800a470 <__ieee754_pow+0xe8>
 800a44e:	e05f      	b.n	800a510 <__ieee754_pow+0x188>
 800a450:	2a00      	cmp	r2, #0
 800a452:	d15b      	bne.n	800a50c <__ieee754_pow+0x184>
 800a454:	f1c3 0314 	rsb	r3, r3, #20
 800a458:	fa48 f103 	asr.w	r1, r8, r3
 800a45c:	fa01 f303 	lsl.w	r3, r1, r3
 800a460:	4543      	cmp	r3, r8
 800a462:	f040 8488 	bne.w	800ad76 <__ieee754_pow+0x9ee>
 800a466:	f001 0101 	and.w	r1, r1, #1
 800a46a:	f1c1 0302 	rsb	r3, r1, #2
 800a46e:	9304      	str	r3, [sp, #16]
 800a470:	4b5c      	ldr	r3, [pc, #368]	; (800a5e4 <__ieee754_pow+0x25c>)
 800a472:	4598      	cmp	r8, r3
 800a474:	d132      	bne.n	800a4dc <__ieee754_pow+0x154>
 800a476:	f1b9 0f00 	cmp.w	r9, #0
 800a47a:	f280 8478 	bge.w	800ad6e <__ieee754_pow+0x9e6>
 800a47e:	4959      	ldr	r1, [pc, #356]	; (800a5e4 <__ieee754_pow+0x25c>)
 800a480:	4632      	mov	r2, r6
 800a482:	463b      	mov	r3, r7
 800a484:	2000      	movs	r0, #0
 800a486:	f7f6 f9e1 	bl	800084c <__aeabi_ddiv>
 800a48a:	e79c      	b.n	800a3c6 <__ieee754_pow+0x3e>
 800a48c:	2300      	movs	r3, #0
 800a48e:	9304      	str	r3, [sp, #16]
 800a490:	2a00      	cmp	r2, #0
 800a492:	d13d      	bne.n	800a510 <__ieee754_pow+0x188>
 800a494:	4b51      	ldr	r3, [pc, #324]	; (800a5dc <__ieee754_pow+0x254>)
 800a496:	4598      	cmp	r8, r3
 800a498:	d1ea      	bne.n	800a470 <__ieee754_pow+0xe8>
 800a49a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a49e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a4a2:	ea53 030a 	orrs.w	r3, r3, sl
 800a4a6:	f000 845a 	beq.w	800ad5e <__ieee754_pow+0x9d6>
 800a4aa:	4b4f      	ldr	r3, [pc, #316]	; (800a5e8 <__ieee754_pow+0x260>)
 800a4ac:	429c      	cmp	r4, r3
 800a4ae:	dd08      	ble.n	800a4c2 <__ieee754_pow+0x13a>
 800a4b0:	f1b9 0f00 	cmp.w	r9, #0
 800a4b4:	f2c0 8457 	blt.w	800ad66 <__ieee754_pow+0x9de>
 800a4b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4bc:	e783      	b.n	800a3c6 <__ieee754_pow+0x3e>
 800a4be:	2302      	movs	r3, #2
 800a4c0:	e7e5      	b.n	800a48e <__ieee754_pow+0x106>
 800a4c2:	f1b9 0f00 	cmp.w	r9, #0
 800a4c6:	f04f 0000 	mov.w	r0, #0
 800a4ca:	f04f 0100 	mov.w	r1, #0
 800a4ce:	f6bf af7a 	bge.w	800a3c6 <__ieee754_pow+0x3e>
 800a4d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a4d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a4da:	e774      	b.n	800a3c6 <__ieee754_pow+0x3e>
 800a4dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a4e0:	d106      	bne.n	800a4f0 <__ieee754_pow+0x168>
 800a4e2:	4632      	mov	r2, r6
 800a4e4:	463b      	mov	r3, r7
 800a4e6:	4630      	mov	r0, r6
 800a4e8:	4639      	mov	r1, r7
 800a4ea:	f7f6 f885 	bl	80005f8 <__aeabi_dmul>
 800a4ee:	e76a      	b.n	800a3c6 <__ieee754_pow+0x3e>
 800a4f0:	4b3e      	ldr	r3, [pc, #248]	; (800a5ec <__ieee754_pow+0x264>)
 800a4f2:	4599      	cmp	r9, r3
 800a4f4:	d10c      	bne.n	800a510 <__ieee754_pow+0x188>
 800a4f6:	2d00      	cmp	r5, #0
 800a4f8:	db0a      	blt.n	800a510 <__ieee754_pow+0x188>
 800a4fa:	ec47 6b10 	vmov	d0, r6, r7
 800a4fe:	b009      	add	sp, #36	; 0x24
 800a500:	ecbd 8b06 	vpop	{d8-d10}
 800a504:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a508:	f000 bc6c 	b.w	800ade4 <__ieee754_sqrt>
 800a50c:	2300      	movs	r3, #0
 800a50e:	9304      	str	r3, [sp, #16]
 800a510:	ec47 6b10 	vmov	d0, r6, r7
 800a514:	f7ff fd00 	bl	8009f18 <fabs>
 800a518:	ec51 0b10 	vmov	r0, r1, d0
 800a51c:	f1ba 0f00 	cmp.w	sl, #0
 800a520:	d129      	bne.n	800a576 <__ieee754_pow+0x1ee>
 800a522:	b124      	cbz	r4, 800a52e <__ieee754_pow+0x1a6>
 800a524:	4b2f      	ldr	r3, [pc, #188]	; (800a5e4 <__ieee754_pow+0x25c>)
 800a526:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d123      	bne.n	800a576 <__ieee754_pow+0x1ee>
 800a52e:	f1b9 0f00 	cmp.w	r9, #0
 800a532:	da05      	bge.n	800a540 <__ieee754_pow+0x1b8>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	2000      	movs	r0, #0
 800a53a:	492a      	ldr	r1, [pc, #168]	; (800a5e4 <__ieee754_pow+0x25c>)
 800a53c:	f7f6 f986 	bl	800084c <__aeabi_ddiv>
 800a540:	2d00      	cmp	r5, #0
 800a542:	f6bf af40 	bge.w	800a3c6 <__ieee754_pow+0x3e>
 800a546:	9b04      	ldr	r3, [sp, #16]
 800a548:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a54c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a550:	4323      	orrs	r3, r4
 800a552:	d108      	bne.n	800a566 <__ieee754_pow+0x1de>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	4610      	mov	r0, r2
 800a55a:	4619      	mov	r1, r3
 800a55c:	f7f5 fe94 	bl	8000288 <__aeabi_dsub>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	e78f      	b.n	800a486 <__ieee754_pow+0xfe>
 800a566:	9b04      	ldr	r3, [sp, #16]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	f47f af2c 	bne.w	800a3c6 <__ieee754_pow+0x3e>
 800a56e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a572:	4619      	mov	r1, r3
 800a574:	e727      	b.n	800a3c6 <__ieee754_pow+0x3e>
 800a576:	0feb      	lsrs	r3, r5, #31
 800a578:	3b01      	subs	r3, #1
 800a57a:	9306      	str	r3, [sp, #24]
 800a57c:	9a06      	ldr	r2, [sp, #24]
 800a57e:	9b04      	ldr	r3, [sp, #16]
 800a580:	4313      	orrs	r3, r2
 800a582:	d102      	bne.n	800a58a <__ieee754_pow+0x202>
 800a584:	4632      	mov	r2, r6
 800a586:	463b      	mov	r3, r7
 800a588:	e7e6      	b.n	800a558 <__ieee754_pow+0x1d0>
 800a58a:	4b19      	ldr	r3, [pc, #100]	; (800a5f0 <__ieee754_pow+0x268>)
 800a58c:	4598      	cmp	r8, r3
 800a58e:	f340 80fb 	ble.w	800a788 <__ieee754_pow+0x400>
 800a592:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a596:	4598      	cmp	r8, r3
 800a598:	4b13      	ldr	r3, [pc, #76]	; (800a5e8 <__ieee754_pow+0x260>)
 800a59a:	dd0c      	ble.n	800a5b6 <__ieee754_pow+0x22e>
 800a59c:	429c      	cmp	r4, r3
 800a59e:	dc0f      	bgt.n	800a5c0 <__ieee754_pow+0x238>
 800a5a0:	f1b9 0f00 	cmp.w	r9, #0
 800a5a4:	da0f      	bge.n	800a5c6 <__ieee754_pow+0x23e>
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	b009      	add	sp, #36	; 0x24
 800a5aa:	ecbd 8b06 	vpop	{d8-d10}
 800a5ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b2:	f001 ba2a 	b.w	800ba0a <__math_oflow>
 800a5b6:	429c      	cmp	r4, r3
 800a5b8:	dbf2      	blt.n	800a5a0 <__ieee754_pow+0x218>
 800a5ba:	4b0a      	ldr	r3, [pc, #40]	; (800a5e4 <__ieee754_pow+0x25c>)
 800a5bc:	429c      	cmp	r4, r3
 800a5be:	dd19      	ble.n	800a5f4 <__ieee754_pow+0x26c>
 800a5c0:	f1b9 0f00 	cmp.w	r9, #0
 800a5c4:	dcef      	bgt.n	800a5a6 <__ieee754_pow+0x21e>
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	b009      	add	sp, #36	; 0x24
 800a5ca:	ecbd 8b06 	vpop	{d8-d10}
 800a5ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d2:	f001 ba11 	b.w	800b9f8 <__math_uflow>
 800a5d6:	bf00      	nop
 800a5d8:	fff00000 	.word	0xfff00000
 800a5dc:	7ff00000 	.word	0x7ff00000
 800a5e0:	433fffff 	.word	0x433fffff
 800a5e4:	3ff00000 	.word	0x3ff00000
 800a5e8:	3fefffff 	.word	0x3fefffff
 800a5ec:	3fe00000 	.word	0x3fe00000
 800a5f0:	41e00000 	.word	0x41e00000
 800a5f4:	4b60      	ldr	r3, [pc, #384]	; (800a778 <__ieee754_pow+0x3f0>)
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f7f5 fe46 	bl	8000288 <__aeabi_dsub>
 800a5fc:	a354      	add	r3, pc, #336	; (adr r3, 800a750 <__ieee754_pow+0x3c8>)
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	4604      	mov	r4, r0
 800a604:	460d      	mov	r5, r1
 800a606:	f7f5 fff7 	bl	80005f8 <__aeabi_dmul>
 800a60a:	a353      	add	r3, pc, #332	; (adr r3, 800a758 <__ieee754_pow+0x3d0>)
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	4606      	mov	r6, r0
 800a612:	460f      	mov	r7, r1
 800a614:	4620      	mov	r0, r4
 800a616:	4629      	mov	r1, r5
 800a618:	f7f5 ffee 	bl	80005f8 <__aeabi_dmul>
 800a61c:	4b57      	ldr	r3, [pc, #348]	; (800a77c <__ieee754_pow+0x3f4>)
 800a61e:	4682      	mov	sl, r0
 800a620:	468b      	mov	fp, r1
 800a622:	2200      	movs	r2, #0
 800a624:	4620      	mov	r0, r4
 800a626:	4629      	mov	r1, r5
 800a628:	f7f5 ffe6 	bl	80005f8 <__aeabi_dmul>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	a14b      	add	r1, pc, #300	; (adr r1, 800a760 <__ieee754_pow+0x3d8>)
 800a632:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a636:	f7f5 fe27 	bl	8000288 <__aeabi_dsub>
 800a63a:	4622      	mov	r2, r4
 800a63c:	462b      	mov	r3, r5
 800a63e:	f7f5 ffdb 	bl	80005f8 <__aeabi_dmul>
 800a642:	4602      	mov	r2, r0
 800a644:	460b      	mov	r3, r1
 800a646:	2000      	movs	r0, #0
 800a648:	494d      	ldr	r1, [pc, #308]	; (800a780 <__ieee754_pow+0x3f8>)
 800a64a:	f7f5 fe1d 	bl	8000288 <__aeabi_dsub>
 800a64e:	4622      	mov	r2, r4
 800a650:	4680      	mov	r8, r0
 800a652:	4689      	mov	r9, r1
 800a654:	462b      	mov	r3, r5
 800a656:	4620      	mov	r0, r4
 800a658:	4629      	mov	r1, r5
 800a65a:	f7f5 ffcd 	bl	80005f8 <__aeabi_dmul>
 800a65e:	4602      	mov	r2, r0
 800a660:	460b      	mov	r3, r1
 800a662:	4640      	mov	r0, r8
 800a664:	4649      	mov	r1, r9
 800a666:	f7f5 ffc7 	bl	80005f8 <__aeabi_dmul>
 800a66a:	a33f      	add	r3, pc, #252	; (adr r3, 800a768 <__ieee754_pow+0x3e0>)
 800a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a670:	f7f5 ffc2 	bl	80005f8 <__aeabi_dmul>
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	4650      	mov	r0, sl
 800a67a:	4659      	mov	r1, fp
 800a67c:	f7f5 fe04 	bl	8000288 <__aeabi_dsub>
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	4680      	mov	r8, r0
 800a686:	4689      	mov	r9, r1
 800a688:	4630      	mov	r0, r6
 800a68a:	4639      	mov	r1, r7
 800a68c:	f7f5 fdfe 	bl	800028c <__adddf3>
 800a690:	2000      	movs	r0, #0
 800a692:	4632      	mov	r2, r6
 800a694:	463b      	mov	r3, r7
 800a696:	4604      	mov	r4, r0
 800a698:	460d      	mov	r5, r1
 800a69a:	f7f5 fdf5 	bl	8000288 <__aeabi_dsub>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	4640      	mov	r0, r8
 800a6a4:	4649      	mov	r1, r9
 800a6a6:	f7f5 fdef 	bl	8000288 <__aeabi_dsub>
 800a6aa:	9b04      	ldr	r3, [sp, #16]
 800a6ac:	9a06      	ldr	r2, [sp, #24]
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	4682      	mov	sl, r0
 800a6b4:	468b      	mov	fp, r1
 800a6b6:	f040 81e7 	bne.w	800aa88 <__ieee754_pow+0x700>
 800a6ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a770 <__ieee754_pow+0x3e8>
 800a6be:	eeb0 8a47 	vmov.f32	s16, s14
 800a6c2:	eef0 8a67 	vmov.f32	s17, s15
 800a6c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a6ca:	2600      	movs	r6, #0
 800a6cc:	4632      	mov	r2, r6
 800a6ce:	463b      	mov	r3, r7
 800a6d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6d4:	f7f5 fdd8 	bl	8000288 <__aeabi_dsub>
 800a6d8:	4622      	mov	r2, r4
 800a6da:	462b      	mov	r3, r5
 800a6dc:	f7f5 ff8c 	bl	80005f8 <__aeabi_dmul>
 800a6e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6e4:	4680      	mov	r8, r0
 800a6e6:	4689      	mov	r9, r1
 800a6e8:	4650      	mov	r0, sl
 800a6ea:	4659      	mov	r1, fp
 800a6ec:	f7f5 ff84 	bl	80005f8 <__aeabi_dmul>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	4640      	mov	r0, r8
 800a6f6:	4649      	mov	r1, r9
 800a6f8:	f7f5 fdc8 	bl	800028c <__adddf3>
 800a6fc:	4632      	mov	r2, r6
 800a6fe:	463b      	mov	r3, r7
 800a700:	4680      	mov	r8, r0
 800a702:	4689      	mov	r9, r1
 800a704:	4620      	mov	r0, r4
 800a706:	4629      	mov	r1, r5
 800a708:	f7f5 ff76 	bl	80005f8 <__aeabi_dmul>
 800a70c:	460b      	mov	r3, r1
 800a70e:	4604      	mov	r4, r0
 800a710:	460d      	mov	r5, r1
 800a712:	4602      	mov	r2, r0
 800a714:	4649      	mov	r1, r9
 800a716:	4640      	mov	r0, r8
 800a718:	f7f5 fdb8 	bl	800028c <__adddf3>
 800a71c:	4b19      	ldr	r3, [pc, #100]	; (800a784 <__ieee754_pow+0x3fc>)
 800a71e:	4299      	cmp	r1, r3
 800a720:	ec45 4b19 	vmov	d9, r4, r5
 800a724:	4606      	mov	r6, r0
 800a726:	460f      	mov	r7, r1
 800a728:	468b      	mov	fp, r1
 800a72a:	f340 82f1 	ble.w	800ad10 <__ieee754_pow+0x988>
 800a72e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a732:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a736:	4303      	orrs	r3, r0
 800a738:	f000 81e4 	beq.w	800ab04 <__ieee754_pow+0x77c>
 800a73c:	ec51 0b18 	vmov	r0, r1, d8
 800a740:	2200      	movs	r2, #0
 800a742:	2300      	movs	r3, #0
 800a744:	f7f6 f9ca 	bl	8000adc <__aeabi_dcmplt>
 800a748:	3800      	subs	r0, #0
 800a74a:	bf18      	it	ne
 800a74c:	2001      	movne	r0, #1
 800a74e:	e72b      	b.n	800a5a8 <__ieee754_pow+0x220>
 800a750:	60000000 	.word	0x60000000
 800a754:	3ff71547 	.word	0x3ff71547
 800a758:	f85ddf44 	.word	0xf85ddf44
 800a75c:	3e54ae0b 	.word	0x3e54ae0b
 800a760:	55555555 	.word	0x55555555
 800a764:	3fd55555 	.word	0x3fd55555
 800a768:	652b82fe 	.word	0x652b82fe
 800a76c:	3ff71547 	.word	0x3ff71547
 800a770:	00000000 	.word	0x00000000
 800a774:	bff00000 	.word	0xbff00000
 800a778:	3ff00000 	.word	0x3ff00000
 800a77c:	3fd00000 	.word	0x3fd00000
 800a780:	3fe00000 	.word	0x3fe00000
 800a784:	408fffff 	.word	0x408fffff
 800a788:	4bd5      	ldr	r3, [pc, #852]	; (800aae0 <__ieee754_pow+0x758>)
 800a78a:	402b      	ands	r3, r5
 800a78c:	2200      	movs	r2, #0
 800a78e:	b92b      	cbnz	r3, 800a79c <__ieee754_pow+0x414>
 800a790:	4bd4      	ldr	r3, [pc, #848]	; (800aae4 <__ieee754_pow+0x75c>)
 800a792:	f7f5 ff31 	bl	80005f8 <__aeabi_dmul>
 800a796:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a79a:	460c      	mov	r4, r1
 800a79c:	1523      	asrs	r3, r4, #20
 800a79e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a7a2:	4413      	add	r3, r2
 800a7a4:	9305      	str	r3, [sp, #20]
 800a7a6:	4bd0      	ldr	r3, [pc, #832]	; (800aae8 <__ieee754_pow+0x760>)
 800a7a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a7ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a7b0:	429c      	cmp	r4, r3
 800a7b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a7b6:	dd08      	ble.n	800a7ca <__ieee754_pow+0x442>
 800a7b8:	4bcc      	ldr	r3, [pc, #816]	; (800aaec <__ieee754_pow+0x764>)
 800a7ba:	429c      	cmp	r4, r3
 800a7bc:	f340 8162 	ble.w	800aa84 <__ieee754_pow+0x6fc>
 800a7c0:	9b05      	ldr	r3, [sp, #20]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	9305      	str	r3, [sp, #20]
 800a7c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a7ca:	2400      	movs	r4, #0
 800a7cc:	00e3      	lsls	r3, r4, #3
 800a7ce:	9307      	str	r3, [sp, #28]
 800a7d0:	4bc7      	ldr	r3, [pc, #796]	; (800aaf0 <__ieee754_pow+0x768>)
 800a7d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7d6:	ed93 7b00 	vldr	d7, [r3]
 800a7da:	4629      	mov	r1, r5
 800a7dc:	ec53 2b17 	vmov	r2, r3, d7
 800a7e0:	eeb0 9a47 	vmov.f32	s18, s14
 800a7e4:	eef0 9a67 	vmov.f32	s19, s15
 800a7e8:	4682      	mov	sl, r0
 800a7ea:	f7f5 fd4d 	bl	8000288 <__aeabi_dsub>
 800a7ee:	4652      	mov	r2, sl
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	460f      	mov	r7, r1
 800a7f4:	462b      	mov	r3, r5
 800a7f6:	ec51 0b19 	vmov	r0, r1, d9
 800a7fa:	f7f5 fd47 	bl	800028c <__adddf3>
 800a7fe:	4602      	mov	r2, r0
 800a800:	460b      	mov	r3, r1
 800a802:	2000      	movs	r0, #0
 800a804:	49bb      	ldr	r1, [pc, #748]	; (800aaf4 <__ieee754_pow+0x76c>)
 800a806:	f7f6 f821 	bl	800084c <__aeabi_ddiv>
 800a80a:	ec41 0b1a 	vmov	d10, r0, r1
 800a80e:	4602      	mov	r2, r0
 800a810:	460b      	mov	r3, r1
 800a812:	4630      	mov	r0, r6
 800a814:	4639      	mov	r1, r7
 800a816:	f7f5 feef 	bl	80005f8 <__aeabi_dmul>
 800a81a:	2300      	movs	r3, #0
 800a81c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a820:	9302      	str	r3, [sp, #8]
 800a822:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a826:	46ab      	mov	fp, r5
 800a828:	106d      	asrs	r5, r5, #1
 800a82a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a82e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a832:	ec41 0b18 	vmov	d8, r0, r1
 800a836:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a83a:	2200      	movs	r2, #0
 800a83c:	4640      	mov	r0, r8
 800a83e:	4649      	mov	r1, r9
 800a840:	4614      	mov	r4, r2
 800a842:	461d      	mov	r5, r3
 800a844:	f7f5 fed8 	bl	80005f8 <__aeabi_dmul>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	4630      	mov	r0, r6
 800a84e:	4639      	mov	r1, r7
 800a850:	f7f5 fd1a 	bl	8000288 <__aeabi_dsub>
 800a854:	ec53 2b19 	vmov	r2, r3, d9
 800a858:	4606      	mov	r6, r0
 800a85a:	460f      	mov	r7, r1
 800a85c:	4620      	mov	r0, r4
 800a85e:	4629      	mov	r1, r5
 800a860:	f7f5 fd12 	bl	8000288 <__aeabi_dsub>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	4650      	mov	r0, sl
 800a86a:	4659      	mov	r1, fp
 800a86c:	f7f5 fd0c 	bl	8000288 <__aeabi_dsub>
 800a870:	4642      	mov	r2, r8
 800a872:	464b      	mov	r3, r9
 800a874:	f7f5 fec0 	bl	80005f8 <__aeabi_dmul>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	4630      	mov	r0, r6
 800a87e:	4639      	mov	r1, r7
 800a880:	f7f5 fd02 	bl	8000288 <__aeabi_dsub>
 800a884:	ec53 2b1a 	vmov	r2, r3, d10
 800a888:	f7f5 feb6 	bl	80005f8 <__aeabi_dmul>
 800a88c:	ec53 2b18 	vmov	r2, r3, d8
 800a890:	ec41 0b19 	vmov	d9, r0, r1
 800a894:	ec51 0b18 	vmov	r0, r1, d8
 800a898:	f7f5 feae 	bl	80005f8 <__aeabi_dmul>
 800a89c:	a37c      	add	r3, pc, #496	; (adr r3, 800aa90 <__ieee754_pow+0x708>)
 800a89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	460d      	mov	r5, r1
 800a8a6:	f7f5 fea7 	bl	80005f8 <__aeabi_dmul>
 800a8aa:	a37b      	add	r3, pc, #492	; (adr r3, 800aa98 <__ieee754_pow+0x710>)
 800a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b0:	f7f5 fcec 	bl	800028c <__adddf3>
 800a8b4:	4622      	mov	r2, r4
 800a8b6:	462b      	mov	r3, r5
 800a8b8:	f7f5 fe9e 	bl	80005f8 <__aeabi_dmul>
 800a8bc:	a378      	add	r3, pc, #480	; (adr r3, 800aaa0 <__ieee754_pow+0x718>)
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	f7f5 fce3 	bl	800028c <__adddf3>
 800a8c6:	4622      	mov	r2, r4
 800a8c8:	462b      	mov	r3, r5
 800a8ca:	f7f5 fe95 	bl	80005f8 <__aeabi_dmul>
 800a8ce:	a376      	add	r3, pc, #472	; (adr r3, 800aaa8 <__ieee754_pow+0x720>)
 800a8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d4:	f7f5 fcda 	bl	800028c <__adddf3>
 800a8d8:	4622      	mov	r2, r4
 800a8da:	462b      	mov	r3, r5
 800a8dc:	f7f5 fe8c 	bl	80005f8 <__aeabi_dmul>
 800a8e0:	a373      	add	r3, pc, #460	; (adr r3, 800aab0 <__ieee754_pow+0x728>)
 800a8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e6:	f7f5 fcd1 	bl	800028c <__adddf3>
 800a8ea:	4622      	mov	r2, r4
 800a8ec:	462b      	mov	r3, r5
 800a8ee:	f7f5 fe83 	bl	80005f8 <__aeabi_dmul>
 800a8f2:	a371      	add	r3, pc, #452	; (adr r3, 800aab8 <__ieee754_pow+0x730>)
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	f7f5 fcc8 	bl	800028c <__adddf3>
 800a8fc:	4622      	mov	r2, r4
 800a8fe:	4606      	mov	r6, r0
 800a900:	460f      	mov	r7, r1
 800a902:	462b      	mov	r3, r5
 800a904:	4620      	mov	r0, r4
 800a906:	4629      	mov	r1, r5
 800a908:	f7f5 fe76 	bl	80005f8 <__aeabi_dmul>
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	4630      	mov	r0, r6
 800a912:	4639      	mov	r1, r7
 800a914:	f7f5 fe70 	bl	80005f8 <__aeabi_dmul>
 800a918:	4642      	mov	r2, r8
 800a91a:	4604      	mov	r4, r0
 800a91c:	460d      	mov	r5, r1
 800a91e:	464b      	mov	r3, r9
 800a920:	ec51 0b18 	vmov	r0, r1, d8
 800a924:	f7f5 fcb2 	bl	800028c <__adddf3>
 800a928:	ec53 2b19 	vmov	r2, r3, d9
 800a92c:	f7f5 fe64 	bl	80005f8 <__aeabi_dmul>
 800a930:	4622      	mov	r2, r4
 800a932:	462b      	mov	r3, r5
 800a934:	f7f5 fcaa 	bl	800028c <__adddf3>
 800a938:	4642      	mov	r2, r8
 800a93a:	4682      	mov	sl, r0
 800a93c:	468b      	mov	fp, r1
 800a93e:	464b      	mov	r3, r9
 800a940:	4640      	mov	r0, r8
 800a942:	4649      	mov	r1, r9
 800a944:	f7f5 fe58 	bl	80005f8 <__aeabi_dmul>
 800a948:	4b6b      	ldr	r3, [pc, #428]	; (800aaf8 <__ieee754_pow+0x770>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	4606      	mov	r6, r0
 800a94e:	460f      	mov	r7, r1
 800a950:	f7f5 fc9c 	bl	800028c <__adddf3>
 800a954:	4652      	mov	r2, sl
 800a956:	465b      	mov	r3, fp
 800a958:	f7f5 fc98 	bl	800028c <__adddf3>
 800a95c:	2000      	movs	r0, #0
 800a95e:	4604      	mov	r4, r0
 800a960:	460d      	mov	r5, r1
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	4640      	mov	r0, r8
 800a968:	4649      	mov	r1, r9
 800a96a:	f7f5 fe45 	bl	80005f8 <__aeabi_dmul>
 800a96e:	4b62      	ldr	r3, [pc, #392]	; (800aaf8 <__ieee754_pow+0x770>)
 800a970:	4680      	mov	r8, r0
 800a972:	4689      	mov	r9, r1
 800a974:	2200      	movs	r2, #0
 800a976:	4620      	mov	r0, r4
 800a978:	4629      	mov	r1, r5
 800a97a:	f7f5 fc85 	bl	8000288 <__aeabi_dsub>
 800a97e:	4632      	mov	r2, r6
 800a980:	463b      	mov	r3, r7
 800a982:	f7f5 fc81 	bl	8000288 <__aeabi_dsub>
 800a986:	4602      	mov	r2, r0
 800a988:	460b      	mov	r3, r1
 800a98a:	4650      	mov	r0, sl
 800a98c:	4659      	mov	r1, fp
 800a98e:	f7f5 fc7b 	bl	8000288 <__aeabi_dsub>
 800a992:	ec53 2b18 	vmov	r2, r3, d8
 800a996:	f7f5 fe2f 	bl	80005f8 <__aeabi_dmul>
 800a99a:	4622      	mov	r2, r4
 800a99c:	4606      	mov	r6, r0
 800a99e:	460f      	mov	r7, r1
 800a9a0:	462b      	mov	r3, r5
 800a9a2:	ec51 0b19 	vmov	r0, r1, d9
 800a9a6:	f7f5 fe27 	bl	80005f8 <__aeabi_dmul>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	4639      	mov	r1, r7
 800a9b2:	f7f5 fc6b 	bl	800028c <__adddf3>
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	460f      	mov	r7, r1
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4640      	mov	r0, r8
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	f7f5 fc63 	bl	800028c <__adddf3>
 800a9c6:	a33e      	add	r3, pc, #248	; (adr r3, 800aac0 <__ieee754_pow+0x738>)
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	460d      	mov	r5, r1
 800a9d2:	f7f5 fe11 	bl	80005f8 <__aeabi_dmul>
 800a9d6:	4642      	mov	r2, r8
 800a9d8:	ec41 0b18 	vmov	d8, r0, r1
 800a9dc:	464b      	mov	r3, r9
 800a9de:	4620      	mov	r0, r4
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	f7f5 fc51 	bl	8000288 <__aeabi_dsub>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	4639      	mov	r1, r7
 800a9ee:	f7f5 fc4b 	bl	8000288 <__aeabi_dsub>
 800a9f2:	a335      	add	r3, pc, #212	; (adr r3, 800aac8 <__ieee754_pow+0x740>)
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	f7f5 fdfe 	bl	80005f8 <__aeabi_dmul>
 800a9fc:	a334      	add	r3, pc, #208	; (adr r3, 800aad0 <__ieee754_pow+0x748>)
 800a9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa02:	4606      	mov	r6, r0
 800aa04:	460f      	mov	r7, r1
 800aa06:	4620      	mov	r0, r4
 800aa08:	4629      	mov	r1, r5
 800aa0a:	f7f5 fdf5 	bl	80005f8 <__aeabi_dmul>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	4630      	mov	r0, r6
 800aa14:	4639      	mov	r1, r7
 800aa16:	f7f5 fc39 	bl	800028c <__adddf3>
 800aa1a:	9a07      	ldr	r2, [sp, #28]
 800aa1c:	4b37      	ldr	r3, [pc, #220]	; (800aafc <__ieee754_pow+0x774>)
 800aa1e:	4413      	add	r3, r2
 800aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa24:	f7f5 fc32 	bl	800028c <__adddf3>
 800aa28:	4682      	mov	sl, r0
 800aa2a:	9805      	ldr	r0, [sp, #20]
 800aa2c:	468b      	mov	fp, r1
 800aa2e:	f7f5 fd79 	bl	8000524 <__aeabi_i2d>
 800aa32:	9a07      	ldr	r2, [sp, #28]
 800aa34:	4b32      	ldr	r3, [pc, #200]	; (800ab00 <__ieee754_pow+0x778>)
 800aa36:	4413      	add	r3, r2
 800aa38:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	460f      	mov	r7, r1
 800aa40:	4652      	mov	r2, sl
 800aa42:	465b      	mov	r3, fp
 800aa44:	ec51 0b18 	vmov	r0, r1, d8
 800aa48:	f7f5 fc20 	bl	800028c <__adddf3>
 800aa4c:	4642      	mov	r2, r8
 800aa4e:	464b      	mov	r3, r9
 800aa50:	f7f5 fc1c 	bl	800028c <__adddf3>
 800aa54:	4632      	mov	r2, r6
 800aa56:	463b      	mov	r3, r7
 800aa58:	f7f5 fc18 	bl	800028c <__adddf3>
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	4632      	mov	r2, r6
 800aa60:	463b      	mov	r3, r7
 800aa62:	4604      	mov	r4, r0
 800aa64:	460d      	mov	r5, r1
 800aa66:	f7f5 fc0f 	bl	8000288 <__aeabi_dsub>
 800aa6a:	4642      	mov	r2, r8
 800aa6c:	464b      	mov	r3, r9
 800aa6e:	f7f5 fc0b 	bl	8000288 <__aeabi_dsub>
 800aa72:	ec53 2b18 	vmov	r2, r3, d8
 800aa76:	f7f5 fc07 	bl	8000288 <__aeabi_dsub>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	4650      	mov	r0, sl
 800aa80:	4659      	mov	r1, fp
 800aa82:	e610      	b.n	800a6a6 <__ieee754_pow+0x31e>
 800aa84:	2401      	movs	r4, #1
 800aa86:	e6a1      	b.n	800a7cc <__ieee754_pow+0x444>
 800aa88:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800aad8 <__ieee754_pow+0x750>
 800aa8c:	e617      	b.n	800a6be <__ieee754_pow+0x336>
 800aa8e:	bf00      	nop
 800aa90:	4a454eef 	.word	0x4a454eef
 800aa94:	3fca7e28 	.word	0x3fca7e28
 800aa98:	93c9db65 	.word	0x93c9db65
 800aa9c:	3fcd864a 	.word	0x3fcd864a
 800aaa0:	a91d4101 	.word	0xa91d4101
 800aaa4:	3fd17460 	.word	0x3fd17460
 800aaa8:	518f264d 	.word	0x518f264d
 800aaac:	3fd55555 	.word	0x3fd55555
 800aab0:	db6fabff 	.word	0xdb6fabff
 800aab4:	3fdb6db6 	.word	0x3fdb6db6
 800aab8:	33333303 	.word	0x33333303
 800aabc:	3fe33333 	.word	0x3fe33333
 800aac0:	e0000000 	.word	0xe0000000
 800aac4:	3feec709 	.word	0x3feec709
 800aac8:	dc3a03fd 	.word	0xdc3a03fd
 800aacc:	3feec709 	.word	0x3feec709
 800aad0:	145b01f5 	.word	0x145b01f5
 800aad4:	be3e2fe0 	.word	0xbe3e2fe0
 800aad8:	00000000 	.word	0x00000000
 800aadc:	3ff00000 	.word	0x3ff00000
 800aae0:	7ff00000 	.word	0x7ff00000
 800aae4:	43400000 	.word	0x43400000
 800aae8:	0003988e 	.word	0x0003988e
 800aaec:	000bb679 	.word	0x000bb679
 800aaf0:	0800c150 	.word	0x0800c150
 800aaf4:	3ff00000 	.word	0x3ff00000
 800aaf8:	40080000 	.word	0x40080000
 800aafc:	0800c170 	.word	0x0800c170
 800ab00:	0800c160 	.word	0x0800c160
 800ab04:	a3b5      	add	r3, pc, #724	; (adr r3, 800addc <__ieee754_pow+0xa54>)
 800ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	f7f5 fbbd 	bl	800028c <__adddf3>
 800ab12:	4622      	mov	r2, r4
 800ab14:	ec41 0b1a 	vmov	d10, r0, r1
 800ab18:	462b      	mov	r3, r5
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	f7f5 fbb3 	bl	8000288 <__aeabi_dsub>
 800ab22:	4602      	mov	r2, r0
 800ab24:	460b      	mov	r3, r1
 800ab26:	ec51 0b1a 	vmov	r0, r1, d10
 800ab2a:	f7f5 fff5 	bl	8000b18 <__aeabi_dcmpgt>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	f47f ae04 	bne.w	800a73c <__ieee754_pow+0x3b4>
 800ab34:	4aa4      	ldr	r2, [pc, #656]	; (800adc8 <__ieee754_pow+0xa40>)
 800ab36:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	f340 8108 	ble.w	800ad50 <__ieee754_pow+0x9c8>
 800ab40:	151b      	asrs	r3, r3, #20
 800ab42:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ab46:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ab4a:	fa4a f303 	asr.w	r3, sl, r3
 800ab4e:	445b      	add	r3, fp
 800ab50:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ab54:	4e9d      	ldr	r6, [pc, #628]	; (800adcc <__ieee754_pow+0xa44>)
 800ab56:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ab5a:	4116      	asrs	r6, r2
 800ab5c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ab60:	2000      	movs	r0, #0
 800ab62:	ea23 0106 	bic.w	r1, r3, r6
 800ab66:	f1c2 0214 	rsb	r2, r2, #20
 800ab6a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ab6e:	fa4a fa02 	asr.w	sl, sl, r2
 800ab72:	f1bb 0f00 	cmp.w	fp, #0
 800ab76:	4602      	mov	r2, r0
 800ab78:	460b      	mov	r3, r1
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	bfb8      	it	lt
 800ab80:	f1ca 0a00 	rsblt	sl, sl, #0
 800ab84:	f7f5 fb80 	bl	8000288 <__aeabi_dsub>
 800ab88:	ec41 0b19 	vmov	d9, r0, r1
 800ab8c:	4642      	mov	r2, r8
 800ab8e:	464b      	mov	r3, r9
 800ab90:	ec51 0b19 	vmov	r0, r1, d9
 800ab94:	f7f5 fb7a 	bl	800028c <__adddf3>
 800ab98:	a37b      	add	r3, pc, #492	; (adr r3, 800ad88 <__ieee754_pow+0xa00>)
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	2000      	movs	r0, #0
 800aba0:	4604      	mov	r4, r0
 800aba2:	460d      	mov	r5, r1
 800aba4:	f7f5 fd28 	bl	80005f8 <__aeabi_dmul>
 800aba8:	ec53 2b19 	vmov	r2, r3, d9
 800abac:	4606      	mov	r6, r0
 800abae:	460f      	mov	r7, r1
 800abb0:	4620      	mov	r0, r4
 800abb2:	4629      	mov	r1, r5
 800abb4:	f7f5 fb68 	bl	8000288 <__aeabi_dsub>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	4640      	mov	r0, r8
 800abbe:	4649      	mov	r1, r9
 800abc0:	f7f5 fb62 	bl	8000288 <__aeabi_dsub>
 800abc4:	a372      	add	r3, pc, #456	; (adr r3, 800ad90 <__ieee754_pow+0xa08>)
 800abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abca:	f7f5 fd15 	bl	80005f8 <__aeabi_dmul>
 800abce:	a372      	add	r3, pc, #456	; (adr r3, 800ad98 <__ieee754_pow+0xa10>)
 800abd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd4:	4680      	mov	r8, r0
 800abd6:	4689      	mov	r9, r1
 800abd8:	4620      	mov	r0, r4
 800abda:	4629      	mov	r1, r5
 800abdc:	f7f5 fd0c 	bl	80005f8 <__aeabi_dmul>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	4640      	mov	r0, r8
 800abe6:	4649      	mov	r1, r9
 800abe8:	f7f5 fb50 	bl	800028c <__adddf3>
 800abec:	4604      	mov	r4, r0
 800abee:	460d      	mov	r5, r1
 800abf0:	4602      	mov	r2, r0
 800abf2:	460b      	mov	r3, r1
 800abf4:	4630      	mov	r0, r6
 800abf6:	4639      	mov	r1, r7
 800abf8:	f7f5 fb48 	bl	800028c <__adddf3>
 800abfc:	4632      	mov	r2, r6
 800abfe:	463b      	mov	r3, r7
 800ac00:	4680      	mov	r8, r0
 800ac02:	4689      	mov	r9, r1
 800ac04:	f7f5 fb40 	bl	8000288 <__aeabi_dsub>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	4629      	mov	r1, r5
 800ac10:	f7f5 fb3a 	bl	8000288 <__aeabi_dsub>
 800ac14:	4642      	mov	r2, r8
 800ac16:	4606      	mov	r6, r0
 800ac18:	460f      	mov	r7, r1
 800ac1a:	464b      	mov	r3, r9
 800ac1c:	4640      	mov	r0, r8
 800ac1e:	4649      	mov	r1, r9
 800ac20:	f7f5 fcea 	bl	80005f8 <__aeabi_dmul>
 800ac24:	a35e      	add	r3, pc, #376	; (adr r3, 800ada0 <__ieee754_pow+0xa18>)
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	460d      	mov	r5, r1
 800ac2e:	f7f5 fce3 	bl	80005f8 <__aeabi_dmul>
 800ac32:	a35d      	add	r3, pc, #372	; (adr r3, 800ada8 <__ieee754_pow+0xa20>)
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	f7f5 fb26 	bl	8000288 <__aeabi_dsub>
 800ac3c:	4622      	mov	r2, r4
 800ac3e:	462b      	mov	r3, r5
 800ac40:	f7f5 fcda 	bl	80005f8 <__aeabi_dmul>
 800ac44:	a35a      	add	r3, pc, #360	; (adr r3, 800adb0 <__ieee754_pow+0xa28>)
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	f7f5 fb1f 	bl	800028c <__adddf3>
 800ac4e:	4622      	mov	r2, r4
 800ac50:	462b      	mov	r3, r5
 800ac52:	f7f5 fcd1 	bl	80005f8 <__aeabi_dmul>
 800ac56:	a358      	add	r3, pc, #352	; (adr r3, 800adb8 <__ieee754_pow+0xa30>)
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	f7f5 fb14 	bl	8000288 <__aeabi_dsub>
 800ac60:	4622      	mov	r2, r4
 800ac62:	462b      	mov	r3, r5
 800ac64:	f7f5 fcc8 	bl	80005f8 <__aeabi_dmul>
 800ac68:	a355      	add	r3, pc, #340	; (adr r3, 800adc0 <__ieee754_pow+0xa38>)
 800ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6e:	f7f5 fb0d 	bl	800028c <__adddf3>
 800ac72:	4622      	mov	r2, r4
 800ac74:	462b      	mov	r3, r5
 800ac76:	f7f5 fcbf 	bl	80005f8 <__aeabi_dmul>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4640      	mov	r0, r8
 800ac80:	4649      	mov	r1, r9
 800ac82:	f7f5 fb01 	bl	8000288 <__aeabi_dsub>
 800ac86:	4604      	mov	r4, r0
 800ac88:	460d      	mov	r5, r1
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4640      	mov	r0, r8
 800ac90:	4649      	mov	r1, r9
 800ac92:	f7f5 fcb1 	bl	80005f8 <__aeabi_dmul>
 800ac96:	2200      	movs	r2, #0
 800ac98:	ec41 0b19 	vmov	d9, r0, r1
 800ac9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aca0:	4620      	mov	r0, r4
 800aca2:	4629      	mov	r1, r5
 800aca4:	f7f5 faf0 	bl	8000288 <__aeabi_dsub>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	ec51 0b19 	vmov	r0, r1, d9
 800acb0:	f7f5 fdcc 	bl	800084c <__aeabi_ddiv>
 800acb4:	4632      	mov	r2, r6
 800acb6:	4604      	mov	r4, r0
 800acb8:	460d      	mov	r5, r1
 800acba:	463b      	mov	r3, r7
 800acbc:	4640      	mov	r0, r8
 800acbe:	4649      	mov	r1, r9
 800acc0:	f7f5 fc9a 	bl	80005f8 <__aeabi_dmul>
 800acc4:	4632      	mov	r2, r6
 800acc6:	463b      	mov	r3, r7
 800acc8:	f7f5 fae0 	bl	800028c <__adddf3>
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	4620      	mov	r0, r4
 800acd2:	4629      	mov	r1, r5
 800acd4:	f7f5 fad8 	bl	8000288 <__aeabi_dsub>
 800acd8:	4642      	mov	r2, r8
 800acda:	464b      	mov	r3, r9
 800acdc:	f7f5 fad4 	bl	8000288 <__aeabi_dsub>
 800ace0:	460b      	mov	r3, r1
 800ace2:	4602      	mov	r2, r0
 800ace4:	493a      	ldr	r1, [pc, #232]	; (800add0 <__ieee754_pow+0xa48>)
 800ace6:	2000      	movs	r0, #0
 800ace8:	f7f5 face 	bl	8000288 <__aeabi_dsub>
 800acec:	ec41 0b10 	vmov	d0, r0, r1
 800acf0:	ee10 3a90 	vmov	r3, s1
 800acf4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800acf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acfc:	da2b      	bge.n	800ad56 <__ieee754_pow+0x9ce>
 800acfe:	4650      	mov	r0, sl
 800ad00:	f000 fe9a 	bl	800ba38 <scalbn>
 800ad04:	ec51 0b10 	vmov	r0, r1, d0
 800ad08:	ec53 2b18 	vmov	r2, r3, d8
 800ad0c:	f7ff bbed 	b.w	800a4ea <__ieee754_pow+0x162>
 800ad10:	4b30      	ldr	r3, [pc, #192]	; (800add4 <__ieee754_pow+0xa4c>)
 800ad12:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ad16:	429e      	cmp	r6, r3
 800ad18:	f77f af0c 	ble.w	800ab34 <__ieee754_pow+0x7ac>
 800ad1c:	4b2e      	ldr	r3, [pc, #184]	; (800add8 <__ieee754_pow+0xa50>)
 800ad1e:	440b      	add	r3, r1
 800ad20:	4303      	orrs	r3, r0
 800ad22:	d009      	beq.n	800ad38 <__ieee754_pow+0x9b0>
 800ad24:	ec51 0b18 	vmov	r0, r1, d8
 800ad28:	2200      	movs	r2, #0
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f7f5 fed6 	bl	8000adc <__aeabi_dcmplt>
 800ad30:	3800      	subs	r0, #0
 800ad32:	bf18      	it	ne
 800ad34:	2001      	movne	r0, #1
 800ad36:	e447      	b.n	800a5c8 <__ieee754_pow+0x240>
 800ad38:	4622      	mov	r2, r4
 800ad3a:	462b      	mov	r3, r5
 800ad3c:	f7f5 faa4 	bl	8000288 <__aeabi_dsub>
 800ad40:	4642      	mov	r2, r8
 800ad42:	464b      	mov	r3, r9
 800ad44:	f7f5 fede 	bl	8000b04 <__aeabi_dcmpge>
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	f43f aef3 	beq.w	800ab34 <__ieee754_pow+0x7ac>
 800ad4e:	e7e9      	b.n	800ad24 <__ieee754_pow+0x99c>
 800ad50:	f04f 0a00 	mov.w	sl, #0
 800ad54:	e71a      	b.n	800ab8c <__ieee754_pow+0x804>
 800ad56:	ec51 0b10 	vmov	r0, r1, d0
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	e7d4      	b.n	800ad08 <__ieee754_pow+0x980>
 800ad5e:	491c      	ldr	r1, [pc, #112]	; (800add0 <__ieee754_pow+0xa48>)
 800ad60:	2000      	movs	r0, #0
 800ad62:	f7ff bb30 	b.w	800a3c6 <__ieee754_pow+0x3e>
 800ad66:	2000      	movs	r0, #0
 800ad68:	2100      	movs	r1, #0
 800ad6a:	f7ff bb2c 	b.w	800a3c6 <__ieee754_pow+0x3e>
 800ad6e:	4630      	mov	r0, r6
 800ad70:	4639      	mov	r1, r7
 800ad72:	f7ff bb28 	b.w	800a3c6 <__ieee754_pow+0x3e>
 800ad76:	9204      	str	r2, [sp, #16]
 800ad78:	f7ff bb7a 	b.w	800a470 <__ieee754_pow+0xe8>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f7ff bb64 	b.w	800a44a <__ieee754_pow+0xc2>
 800ad82:	bf00      	nop
 800ad84:	f3af 8000 	nop.w
 800ad88:	00000000 	.word	0x00000000
 800ad8c:	3fe62e43 	.word	0x3fe62e43
 800ad90:	fefa39ef 	.word	0xfefa39ef
 800ad94:	3fe62e42 	.word	0x3fe62e42
 800ad98:	0ca86c39 	.word	0x0ca86c39
 800ad9c:	be205c61 	.word	0xbe205c61
 800ada0:	72bea4d0 	.word	0x72bea4d0
 800ada4:	3e663769 	.word	0x3e663769
 800ada8:	c5d26bf1 	.word	0xc5d26bf1
 800adac:	3ebbbd41 	.word	0x3ebbbd41
 800adb0:	af25de2c 	.word	0xaf25de2c
 800adb4:	3f11566a 	.word	0x3f11566a
 800adb8:	16bebd93 	.word	0x16bebd93
 800adbc:	3f66c16c 	.word	0x3f66c16c
 800adc0:	5555553e 	.word	0x5555553e
 800adc4:	3fc55555 	.word	0x3fc55555
 800adc8:	3fe00000 	.word	0x3fe00000
 800adcc:	000fffff 	.word	0x000fffff
 800add0:	3ff00000 	.word	0x3ff00000
 800add4:	4090cbff 	.word	0x4090cbff
 800add8:	3f6f3400 	.word	0x3f6f3400
 800addc:	652b82fe 	.word	0x652b82fe
 800ade0:	3c971547 	.word	0x3c971547

0800ade4 <__ieee754_sqrt>:
 800ade4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade8:	ec55 4b10 	vmov	r4, r5, d0
 800adec:	4e55      	ldr	r6, [pc, #340]	; (800af44 <__ieee754_sqrt+0x160>)
 800adee:	43ae      	bics	r6, r5
 800adf0:	ee10 0a10 	vmov	r0, s0
 800adf4:	ee10 3a10 	vmov	r3, s0
 800adf8:	462a      	mov	r2, r5
 800adfa:	4629      	mov	r1, r5
 800adfc:	d110      	bne.n	800ae20 <__ieee754_sqrt+0x3c>
 800adfe:	ee10 2a10 	vmov	r2, s0
 800ae02:	462b      	mov	r3, r5
 800ae04:	f7f5 fbf8 	bl	80005f8 <__aeabi_dmul>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	4629      	mov	r1, r5
 800ae10:	f7f5 fa3c 	bl	800028c <__adddf3>
 800ae14:	4604      	mov	r4, r0
 800ae16:	460d      	mov	r5, r1
 800ae18:	ec45 4b10 	vmov	d0, r4, r5
 800ae1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae20:	2d00      	cmp	r5, #0
 800ae22:	dc10      	bgt.n	800ae46 <__ieee754_sqrt+0x62>
 800ae24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ae28:	4330      	orrs	r0, r6
 800ae2a:	d0f5      	beq.n	800ae18 <__ieee754_sqrt+0x34>
 800ae2c:	b15d      	cbz	r5, 800ae46 <__ieee754_sqrt+0x62>
 800ae2e:	ee10 2a10 	vmov	r2, s0
 800ae32:	462b      	mov	r3, r5
 800ae34:	ee10 0a10 	vmov	r0, s0
 800ae38:	f7f5 fa26 	bl	8000288 <__aeabi_dsub>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	f7f5 fd04 	bl	800084c <__aeabi_ddiv>
 800ae44:	e7e6      	b.n	800ae14 <__ieee754_sqrt+0x30>
 800ae46:	1512      	asrs	r2, r2, #20
 800ae48:	d074      	beq.n	800af34 <__ieee754_sqrt+0x150>
 800ae4a:	07d4      	lsls	r4, r2, #31
 800ae4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ae50:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ae54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ae58:	bf5e      	ittt	pl
 800ae5a:	0fda      	lsrpl	r2, r3, #31
 800ae5c:	005b      	lslpl	r3, r3, #1
 800ae5e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ae62:	2400      	movs	r4, #0
 800ae64:	0fda      	lsrs	r2, r3, #31
 800ae66:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ae6a:	107f      	asrs	r7, r7, #1
 800ae6c:	005b      	lsls	r3, r3, #1
 800ae6e:	2516      	movs	r5, #22
 800ae70:	4620      	mov	r0, r4
 800ae72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ae76:	1886      	adds	r6, r0, r2
 800ae78:	428e      	cmp	r6, r1
 800ae7a:	bfde      	ittt	le
 800ae7c:	1b89      	suble	r1, r1, r6
 800ae7e:	18b0      	addle	r0, r6, r2
 800ae80:	18a4      	addle	r4, r4, r2
 800ae82:	0049      	lsls	r1, r1, #1
 800ae84:	3d01      	subs	r5, #1
 800ae86:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ae8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ae8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae92:	d1f0      	bne.n	800ae76 <__ieee754_sqrt+0x92>
 800ae94:	462a      	mov	r2, r5
 800ae96:	f04f 0e20 	mov.w	lr, #32
 800ae9a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ae9e:	4281      	cmp	r1, r0
 800aea0:	eb06 0c05 	add.w	ip, r6, r5
 800aea4:	dc02      	bgt.n	800aeac <__ieee754_sqrt+0xc8>
 800aea6:	d113      	bne.n	800aed0 <__ieee754_sqrt+0xec>
 800aea8:	459c      	cmp	ip, r3
 800aeaa:	d811      	bhi.n	800aed0 <__ieee754_sqrt+0xec>
 800aeac:	f1bc 0f00 	cmp.w	ip, #0
 800aeb0:	eb0c 0506 	add.w	r5, ip, r6
 800aeb4:	da43      	bge.n	800af3e <__ieee754_sqrt+0x15a>
 800aeb6:	2d00      	cmp	r5, #0
 800aeb8:	db41      	blt.n	800af3e <__ieee754_sqrt+0x15a>
 800aeba:	f100 0801 	add.w	r8, r0, #1
 800aebe:	1a09      	subs	r1, r1, r0
 800aec0:	459c      	cmp	ip, r3
 800aec2:	bf88      	it	hi
 800aec4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800aec8:	eba3 030c 	sub.w	r3, r3, ip
 800aecc:	4432      	add	r2, r6
 800aece:	4640      	mov	r0, r8
 800aed0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800aed4:	f1be 0e01 	subs.w	lr, lr, #1
 800aed8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800aedc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aee0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aee4:	d1db      	bne.n	800ae9e <__ieee754_sqrt+0xba>
 800aee6:	430b      	orrs	r3, r1
 800aee8:	d006      	beq.n	800aef8 <__ieee754_sqrt+0x114>
 800aeea:	1c50      	adds	r0, r2, #1
 800aeec:	bf13      	iteet	ne
 800aeee:	3201      	addne	r2, #1
 800aef0:	3401      	addeq	r4, #1
 800aef2:	4672      	moveq	r2, lr
 800aef4:	f022 0201 	bicne.w	r2, r2, #1
 800aef8:	1063      	asrs	r3, r4, #1
 800aefa:	0852      	lsrs	r2, r2, #1
 800aefc:	07e1      	lsls	r1, r4, #31
 800aefe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800af02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800af06:	bf48      	it	mi
 800af08:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800af0c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800af10:	4614      	mov	r4, r2
 800af12:	e781      	b.n	800ae18 <__ieee754_sqrt+0x34>
 800af14:	0ad9      	lsrs	r1, r3, #11
 800af16:	3815      	subs	r0, #21
 800af18:	055b      	lsls	r3, r3, #21
 800af1a:	2900      	cmp	r1, #0
 800af1c:	d0fa      	beq.n	800af14 <__ieee754_sqrt+0x130>
 800af1e:	02cd      	lsls	r5, r1, #11
 800af20:	d50a      	bpl.n	800af38 <__ieee754_sqrt+0x154>
 800af22:	f1c2 0420 	rsb	r4, r2, #32
 800af26:	fa23 f404 	lsr.w	r4, r3, r4
 800af2a:	1e55      	subs	r5, r2, #1
 800af2c:	4093      	lsls	r3, r2
 800af2e:	4321      	orrs	r1, r4
 800af30:	1b42      	subs	r2, r0, r5
 800af32:	e78a      	b.n	800ae4a <__ieee754_sqrt+0x66>
 800af34:	4610      	mov	r0, r2
 800af36:	e7f0      	b.n	800af1a <__ieee754_sqrt+0x136>
 800af38:	0049      	lsls	r1, r1, #1
 800af3a:	3201      	adds	r2, #1
 800af3c:	e7ef      	b.n	800af1e <__ieee754_sqrt+0x13a>
 800af3e:	4680      	mov	r8, r0
 800af40:	e7bd      	b.n	800aebe <__ieee754_sqrt+0xda>
 800af42:	bf00      	nop
 800af44:	7ff00000 	.word	0x7ff00000

0800af48 <__ieee754_rem_pio2f>:
 800af48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af4a:	ee10 6a10 	vmov	r6, s0
 800af4e:	4b8e      	ldr	r3, [pc, #568]	; (800b188 <__ieee754_rem_pio2f+0x240>)
 800af50:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800af54:	429d      	cmp	r5, r3
 800af56:	b087      	sub	sp, #28
 800af58:	eef0 7a40 	vmov.f32	s15, s0
 800af5c:	4604      	mov	r4, r0
 800af5e:	dc05      	bgt.n	800af6c <__ieee754_rem_pio2f+0x24>
 800af60:	2300      	movs	r3, #0
 800af62:	ed80 0a00 	vstr	s0, [r0]
 800af66:	6043      	str	r3, [r0, #4]
 800af68:	2000      	movs	r0, #0
 800af6a:	e01a      	b.n	800afa2 <__ieee754_rem_pio2f+0x5a>
 800af6c:	4b87      	ldr	r3, [pc, #540]	; (800b18c <__ieee754_rem_pio2f+0x244>)
 800af6e:	429d      	cmp	r5, r3
 800af70:	dc46      	bgt.n	800b000 <__ieee754_rem_pio2f+0xb8>
 800af72:	2e00      	cmp	r6, #0
 800af74:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800b190 <__ieee754_rem_pio2f+0x248>
 800af78:	4b86      	ldr	r3, [pc, #536]	; (800b194 <__ieee754_rem_pio2f+0x24c>)
 800af7a:	f025 050f 	bic.w	r5, r5, #15
 800af7e:	dd1f      	ble.n	800afc0 <__ieee754_rem_pio2f+0x78>
 800af80:	429d      	cmp	r5, r3
 800af82:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800af86:	d00e      	beq.n	800afa6 <__ieee754_rem_pio2f+0x5e>
 800af88:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b198 <__ieee754_rem_pio2f+0x250>
 800af8c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800af90:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800af94:	ed80 0a00 	vstr	s0, [r0]
 800af98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af9c:	2001      	movs	r0, #1
 800af9e:	edc4 7a01 	vstr	s15, [r4, #4]
 800afa2:	b007      	add	sp, #28
 800afa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800b19c <__ieee754_rem_pio2f+0x254>
 800afaa:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b1a0 <__ieee754_rem_pio2f+0x258>
 800afae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800afb2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800afb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800afba:	edc0 6a00 	vstr	s13, [r0]
 800afbe:	e7eb      	b.n	800af98 <__ieee754_rem_pio2f+0x50>
 800afc0:	429d      	cmp	r5, r3
 800afc2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800afc6:	d00e      	beq.n	800afe6 <__ieee754_rem_pio2f+0x9e>
 800afc8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b198 <__ieee754_rem_pio2f+0x250>
 800afcc:	ee37 0a87 	vadd.f32	s0, s15, s14
 800afd0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800afd4:	ed80 0a00 	vstr	s0, [r0]
 800afd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afdc:	f04f 30ff 	mov.w	r0, #4294967295
 800afe0:	edc4 7a01 	vstr	s15, [r4, #4]
 800afe4:	e7dd      	b.n	800afa2 <__ieee754_rem_pio2f+0x5a>
 800afe6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b19c <__ieee754_rem_pio2f+0x254>
 800afea:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800b1a0 <__ieee754_rem_pio2f+0x258>
 800afee:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aff2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aff6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800affa:	edc0 6a00 	vstr	s13, [r0]
 800affe:	e7eb      	b.n	800afd8 <__ieee754_rem_pio2f+0x90>
 800b000:	4b68      	ldr	r3, [pc, #416]	; (800b1a4 <__ieee754_rem_pio2f+0x25c>)
 800b002:	429d      	cmp	r5, r3
 800b004:	dc72      	bgt.n	800b0ec <__ieee754_rem_pio2f+0x1a4>
 800b006:	f7ff f8a9 	bl	800a15c <fabsf>
 800b00a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b1a8 <__ieee754_rem_pio2f+0x260>
 800b00e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b012:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b01a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b01e:	ee17 0a90 	vmov	r0, s15
 800b022:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b190 <__ieee754_rem_pio2f+0x248>
 800b026:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b02a:	281f      	cmp	r0, #31
 800b02c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b198 <__ieee754_rem_pio2f+0x250>
 800b030:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b034:	eeb1 6a47 	vneg.f32	s12, s14
 800b038:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b03c:	ee16 2a90 	vmov	r2, s13
 800b040:	dc1c      	bgt.n	800b07c <__ieee754_rem_pio2f+0x134>
 800b042:	495a      	ldr	r1, [pc, #360]	; (800b1ac <__ieee754_rem_pio2f+0x264>)
 800b044:	1e47      	subs	r7, r0, #1
 800b046:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b04a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b04e:	428b      	cmp	r3, r1
 800b050:	d014      	beq.n	800b07c <__ieee754_rem_pio2f+0x134>
 800b052:	6022      	str	r2, [r4, #0]
 800b054:	ed94 7a00 	vldr	s14, [r4]
 800b058:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b05c:	2e00      	cmp	r6, #0
 800b05e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b062:	ed84 0a01 	vstr	s0, [r4, #4]
 800b066:	da9c      	bge.n	800afa2 <__ieee754_rem_pio2f+0x5a>
 800b068:	eeb1 7a47 	vneg.f32	s14, s14
 800b06c:	eeb1 0a40 	vneg.f32	s0, s0
 800b070:	ed84 7a00 	vstr	s14, [r4]
 800b074:	ed84 0a01 	vstr	s0, [r4, #4]
 800b078:	4240      	negs	r0, r0
 800b07a:	e792      	b.n	800afa2 <__ieee754_rem_pio2f+0x5a>
 800b07c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b080:	15eb      	asrs	r3, r5, #23
 800b082:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800b086:	2d08      	cmp	r5, #8
 800b088:	dde3      	ble.n	800b052 <__ieee754_rem_pio2f+0x10a>
 800b08a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b19c <__ieee754_rem_pio2f+0x254>
 800b08e:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b1a0 <__ieee754_rem_pio2f+0x258>
 800b092:	eef0 6a40 	vmov.f32	s13, s0
 800b096:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b09a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b09e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800b0a2:	eef0 7a40 	vmov.f32	s15, s0
 800b0a6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b0aa:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b0ae:	ee15 2a90 	vmov	r2, s11
 800b0b2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b0b6:	1a5b      	subs	r3, r3, r1
 800b0b8:	2b19      	cmp	r3, #25
 800b0ba:	dc04      	bgt.n	800b0c6 <__ieee754_rem_pio2f+0x17e>
 800b0bc:	edc4 5a00 	vstr	s11, [r4]
 800b0c0:	eeb0 0a66 	vmov.f32	s0, s13
 800b0c4:	e7c6      	b.n	800b054 <__ieee754_rem_pio2f+0x10c>
 800b0c6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b1b0 <__ieee754_rem_pio2f+0x268>
 800b0ca:	eeb0 0a66 	vmov.f32	s0, s13
 800b0ce:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b0d2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b0d6:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b1b4 <__ieee754_rem_pio2f+0x26c>
 800b0da:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b0de:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b0e2:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b0e6:	ed84 7a00 	vstr	s14, [r4]
 800b0ea:	e7b3      	b.n	800b054 <__ieee754_rem_pio2f+0x10c>
 800b0ec:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b0f0:	db06      	blt.n	800b100 <__ieee754_rem_pio2f+0x1b8>
 800b0f2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b0f6:	edc0 7a01 	vstr	s15, [r0, #4]
 800b0fa:	edc0 7a00 	vstr	s15, [r0]
 800b0fe:	e733      	b.n	800af68 <__ieee754_rem_pio2f+0x20>
 800b100:	15ea      	asrs	r2, r5, #23
 800b102:	3a86      	subs	r2, #134	; 0x86
 800b104:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b108:	ee07 3a90 	vmov	s15, r3
 800b10c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b110:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b1b8 <__ieee754_rem_pio2f+0x270>
 800b114:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b118:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b11c:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b120:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b124:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b128:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b12c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b130:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b134:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b138:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b140:	edcd 7a05 	vstr	s15, [sp, #20]
 800b144:	d11e      	bne.n	800b184 <__ieee754_rem_pio2f+0x23c>
 800b146:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b14e:	bf14      	ite	ne
 800b150:	2302      	movne	r3, #2
 800b152:	2301      	moveq	r3, #1
 800b154:	4919      	ldr	r1, [pc, #100]	; (800b1bc <__ieee754_rem_pio2f+0x274>)
 800b156:	9101      	str	r1, [sp, #4]
 800b158:	2102      	movs	r1, #2
 800b15a:	9100      	str	r1, [sp, #0]
 800b15c:	a803      	add	r0, sp, #12
 800b15e:	4621      	mov	r1, r4
 800b160:	f000 f88e 	bl	800b280 <__kernel_rem_pio2f>
 800b164:	2e00      	cmp	r6, #0
 800b166:	f6bf af1c 	bge.w	800afa2 <__ieee754_rem_pio2f+0x5a>
 800b16a:	edd4 7a00 	vldr	s15, [r4]
 800b16e:	eef1 7a67 	vneg.f32	s15, s15
 800b172:	edc4 7a00 	vstr	s15, [r4]
 800b176:	edd4 7a01 	vldr	s15, [r4, #4]
 800b17a:	eef1 7a67 	vneg.f32	s15, s15
 800b17e:	edc4 7a01 	vstr	s15, [r4, #4]
 800b182:	e779      	b.n	800b078 <__ieee754_rem_pio2f+0x130>
 800b184:	2303      	movs	r3, #3
 800b186:	e7e5      	b.n	800b154 <__ieee754_rem_pio2f+0x20c>
 800b188:	3f490fd8 	.word	0x3f490fd8
 800b18c:	4016cbe3 	.word	0x4016cbe3
 800b190:	3fc90f80 	.word	0x3fc90f80
 800b194:	3fc90fd0 	.word	0x3fc90fd0
 800b198:	37354443 	.word	0x37354443
 800b19c:	37354400 	.word	0x37354400
 800b1a0:	2e85a308 	.word	0x2e85a308
 800b1a4:	43490f80 	.word	0x43490f80
 800b1a8:	3f22f984 	.word	0x3f22f984
 800b1ac:	0800c180 	.word	0x0800c180
 800b1b0:	2e85a300 	.word	0x2e85a300
 800b1b4:	248d3132 	.word	0x248d3132
 800b1b8:	43800000 	.word	0x43800000
 800b1bc:	0800c200 	.word	0x0800c200

0800b1c0 <__kernel_cosf>:
 800b1c0:	ee10 3a10 	vmov	r3, s0
 800b1c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b1cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b1d0:	da05      	bge.n	800b1de <__kernel_cosf+0x1e>
 800b1d2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b1d6:	ee17 2a90 	vmov	r2, s15
 800b1da:	2a00      	cmp	r2, #0
 800b1dc:	d03d      	beq.n	800b25a <__kernel_cosf+0x9a>
 800b1de:	ee60 5a00 	vmul.f32	s11, s0, s0
 800b1e2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b260 <__kernel_cosf+0xa0>
 800b1e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b264 <__kernel_cosf+0xa4>
 800b1ea:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800b268 <__kernel_cosf+0xa8>
 800b1ee:	4a1f      	ldr	r2, [pc, #124]	; (800b26c <__kernel_cosf+0xac>)
 800b1f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b270 <__kernel_cosf+0xb0>
 800b1fa:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b1fe:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800b274 <__kernel_cosf+0xb4>
 800b202:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b206:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800b278 <__kernel_cosf+0xb8>
 800b20a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b20e:	eeb0 7a66 	vmov.f32	s14, s13
 800b212:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b216:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b21a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800b21e:	ee67 6a25 	vmul.f32	s13, s14, s11
 800b222:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800b226:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b22a:	dc04      	bgt.n	800b236 <__kernel_cosf+0x76>
 800b22c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b230:	ee36 0a47 	vsub.f32	s0, s12, s14
 800b234:	4770      	bx	lr
 800b236:	4a11      	ldr	r2, [pc, #68]	; (800b27c <__kernel_cosf+0xbc>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	bfda      	itte	le
 800b23c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800b240:	ee06 3a90 	vmovle	s13, r3
 800b244:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800b248:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b24c:	ee36 0a66 	vsub.f32	s0, s12, s13
 800b250:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b254:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b258:	4770      	bx	lr
 800b25a:	eeb0 0a46 	vmov.f32	s0, s12
 800b25e:	4770      	bx	lr
 800b260:	ad47d74e 	.word	0xad47d74e
 800b264:	310f74f6 	.word	0x310f74f6
 800b268:	3d2aaaab 	.word	0x3d2aaaab
 800b26c:	3e999999 	.word	0x3e999999
 800b270:	b493f27c 	.word	0xb493f27c
 800b274:	37d00d01 	.word	0x37d00d01
 800b278:	bab60b61 	.word	0xbab60b61
 800b27c:	3f480000 	.word	0x3f480000

0800b280 <__kernel_rem_pio2f>:
 800b280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	ed2d 8b04 	vpush	{d8-d9}
 800b288:	b0d9      	sub	sp, #356	; 0x164
 800b28a:	4688      	mov	r8, r1
 800b28c:	9002      	str	r0, [sp, #8]
 800b28e:	49bb      	ldr	r1, [pc, #748]	; (800b57c <__kernel_rem_pio2f+0x2fc>)
 800b290:	9866      	ldr	r0, [sp, #408]	; 0x198
 800b292:	9301      	str	r3, [sp, #4]
 800b294:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800b298:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800b29c:	1e59      	subs	r1, r3, #1
 800b29e:	1d13      	adds	r3, r2, #4
 800b2a0:	db27      	blt.n	800b2f2 <__kernel_rem_pio2f+0x72>
 800b2a2:	f1b2 0b03 	subs.w	fp, r2, #3
 800b2a6:	bf48      	it	mi
 800b2a8:	f102 0b04 	addmi.w	fp, r2, #4
 800b2ac:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800b2b0:	1c45      	adds	r5, r0, #1
 800b2b2:	00ec      	lsls	r4, r5, #3
 800b2b4:	1a47      	subs	r7, r0, r1
 800b2b6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800b58c <__kernel_rem_pio2f+0x30c>
 800b2ba:	9403      	str	r4, [sp, #12]
 800b2bc:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800b2c0:	eb0a 0c01 	add.w	ip, sl, r1
 800b2c4:	ae1c      	add	r6, sp, #112	; 0x70
 800b2c6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800b2ca:	2400      	movs	r4, #0
 800b2cc:	4564      	cmp	r4, ip
 800b2ce:	dd12      	ble.n	800b2f6 <__kernel_rem_pio2f+0x76>
 800b2d0:	9b01      	ldr	r3, [sp, #4]
 800b2d2:	ac1c      	add	r4, sp, #112	; 0x70
 800b2d4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b2d8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800b2dc:	f04f 0c00 	mov.w	ip, #0
 800b2e0:	45d4      	cmp	ip, sl
 800b2e2:	dc27      	bgt.n	800b334 <__kernel_rem_pio2f+0xb4>
 800b2e4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b2e8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800b58c <__kernel_rem_pio2f+0x30c>
 800b2ec:	4627      	mov	r7, r4
 800b2ee:	2600      	movs	r6, #0
 800b2f0:	e016      	b.n	800b320 <__kernel_rem_pio2f+0xa0>
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	e7dc      	b.n	800b2b0 <__kernel_rem_pio2f+0x30>
 800b2f6:	42e7      	cmn	r7, r4
 800b2f8:	bf5d      	ittte	pl
 800b2fa:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800b2fe:	ee07 3a90 	vmovpl	s15, r3
 800b302:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b306:	eef0 7a47 	vmovmi.f32	s15, s14
 800b30a:	ece6 7a01 	vstmia	r6!, {s15}
 800b30e:	3401      	adds	r4, #1
 800b310:	e7dc      	b.n	800b2cc <__kernel_rem_pio2f+0x4c>
 800b312:	ecf9 6a01 	vldmia	r9!, {s13}
 800b316:	ed97 7a00 	vldr	s14, [r7]
 800b31a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b31e:	3601      	adds	r6, #1
 800b320:	428e      	cmp	r6, r1
 800b322:	f1a7 0704 	sub.w	r7, r7, #4
 800b326:	ddf4      	ble.n	800b312 <__kernel_rem_pio2f+0x92>
 800b328:	eceb 7a01 	vstmia	fp!, {s15}
 800b32c:	f10c 0c01 	add.w	ip, ip, #1
 800b330:	3404      	adds	r4, #4
 800b332:	e7d5      	b.n	800b2e0 <__kernel_rem_pio2f+0x60>
 800b334:	ab08      	add	r3, sp, #32
 800b336:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b33a:	eddf 8a93 	vldr	s17, [pc, #588]	; 800b588 <__kernel_rem_pio2f+0x308>
 800b33e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800b584 <__kernel_rem_pio2f+0x304>
 800b342:	9304      	str	r3, [sp, #16]
 800b344:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800b348:	4656      	mov	r6, sl
 800b34a:	00b3      	lsls	r3, r6, #2
 800b34c:	9305      	str	r3, [sp, #20]
 800b34e:	ab58      	add	r3, sp, #352	; 0x160
 800b350:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b354:	ac08      	add	r4, sp, #32
 800b356:	ab44      	add	r3, sp, #272	; 0x110
 800b358:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800b35c:	46a4      	mov	ip, r4
 800b35e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b362:	4637      	mov	r7, r6
 800b364:	2f00      	cmp	r7, #0
 800b366:	f1a0 0004 	sub.w	r0, r0, #4
 800b36a:	dc4f      	bgt.n	800b40c <__kernel_rem_pio2f+0x18c>
 800b36c:	4628      	mov	r0, r5
 800b36e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b372:	f000 fc29 	bl	800bbc8 <scalbnf>
 800b376:	eeb0 8a40 	vmov.f32	s16, s0
 800b37a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b37e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b382:	f000 fbdf 	bl	800bb44 <floorf>
 800b386:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b38a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b38e:	2d00      	cmp	r5, #0
 800b390:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b394:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b398:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800b39c:	ee17 9a90 	vmov	r9, s15
 800b3a0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b3a4:	dd44      	ble.n	800b430 <__kernel_rem_pio2f+0x1b0>
 800b3a6:	f106 3cff 	add.w	ip, r6, #4294967295
 800b3aa:	ab08      	add	r3, sp, #32
 800b3ac:	f1c5 0e08 	rsb	lr, r5, #8
 800b3b0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800b3b4:	fa47 f00e 	asr.w	r0, r7, lr
 800b3b8:	4481      	add	r9, r0
 800b3ba:	fa00 f00e 	lsl.w	r0, r0, lr
 800b3be:	1a3f      	subs	r7, r7, r0
 800b3c0:	f1c5 0007 	rsb	r0, r5, #7
 800b3c4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800b3c8:	4107      	asrs	r7, r0
 800b3ca:	2f00      	cmp	r7, #0
 800b3cc:	dd3f      	ble.n	800b44e <__kernel_rem_pio2f+0x1ce>
 800b3ce:	f04f 0e00 	mov.w	lr, #0
 800b3d2:	f109 0901 	add.w	r9, r9, #1
 800b3d6:	4673      	mov	r3, lr
 800b3d8:	4576      	cmp	r6, lr
 800b3da:	dc6b      	bgt.n	800b4b4 <__kernel_rem_pio2f+0x234>
 800b3dc:	2d00      	cmp	r5, #0
 800b3de:	dd04      	ble.n	800b3ea <__kernel_rem_pio2f+0x16a>
 800b3e0:	2d01      	cmp	r5, #1
 800b3e2:	d078      	beq.n	800b4d6 <__kernel_rem_pio2f+0x256>
 800b3e4:	2d02      	cmp	r5, #2
 800b3e6:	f000 8081 	beq.w	800b4ec <__kernel_rem_pio2f+0x26c>
 800b3ea:	2f02      	cmp	r7, #2
 800b3ec:	d12f      	bne.n	800b44e <__kernel_rem_pio2f+0x1ce>
 800b3ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b3f2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b3f6:	b353      	cbz	r3, 800b44e <__kernel_rem_pio2f+0x1ce>
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b3fe:	f000 fbe3 	bl	800bbc8 <scalbnf>
 800b402:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b406:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b40a:	e020      	b.n	800b44e <__kernel_rem_pio2f+0x1ce>
 800b40c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b410:	3f01      	subs	r7, #1
 800b412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b41a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b41e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b422:	ecac 0a01 	vstmia	ip!, {s0}
 800b426:	ed90 0a00 	vldr	s0, [r0]
 800b42a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b42e:	e799      	b.n	800b364 <__kernel_rem_pio2f+0xe4>
 800b430:	d105      	bne.n	800b43e <__kernel_rem_pio2f+0x1be>
 800b432:	1e70      	subs	r0, r6, #1
 800b434:	ab08      	add	r3, sp, #32
 800b436:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800b43a:	11ff      	asrs	r7, r7, #7
 800b43c:	e7c5      	b.n	800b3ca <__kernel_rem_pio2f+0x14a>
 800b43e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b442:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b44a:	da31      	bge.n	800b4b0 <__kernel_rem_pio2f+0x230>
 800b44c:	2700      	movs	r7, #0
 800b44e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b456:	f040 809b 	bne.w	800b590 <__kernel_rem_pio2f+0x310>
 800b45a:	1e74      	subs	r4, r6, #1
 800b45c:	46a4      	mov	ip, r4
 800b45e:	2000      	movs	r0, #0
 800b460:	45d4      	cmp	ip, sl
 800b462:	da4a      	bge.n	800b4fa <__kernel_rem_pio2f+0x27a>
 800b464:	2800      	cmp	r0, #0
 800b466:	d07a      	beq.n	800b55e <__kernel_rem_pio2f+0x2de>
 800b468:	ab08      	add	r3, sp, #32
 800b46a:	3d08      	subs	r5, #8
 800b46c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b470:	2b00      	cmp	r3, #0
 800b472:	f000 8081 	beq.w	800b578 <__kernel_rem_pio2f+0x2f8>
 800b476:	4628      	mov	r0, r5
 800b478:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b47c:	00a5      	lsls	r5, r4, #2
 800b47e:	f000 fba3 	bl	800bbc8 <scalbnf>
 800b482:	aa44      	add	r2, sp, #272	; 0x110
 800b484:	1d2b      	adds	r3, r5, #4
 800b486:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800b588 <__kernel_rem_pio2f+0x308>
 800b48a:	18d1      	adds	r1, r2, r3
 800b48c:	4622      	mov	r2, r4
 800b48e:	2a00      	cmp	r2, #0
 800b490:	f280 80ae 	bge.w	800b5f0 <__kernel_rem_pio2f+0x370>
 800b494:	4622      	mov	r2, r4
 800b496:	2a00      	cmp	r2, #0
 800b498:	f2c0 80cc 	blt.w	800b634 <__kernel_rem_pio2f+0x3b4>
 800b49c:	a944      	add	r1, sp, #272	; 0x110
 800b49e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800b4a2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800b580 <__kernel_rem_pio2f+0x300>
 800b4a6:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b58c <__kernel_rem_pio2f+0x30c>
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	1aa1      	subs	r1, r4, r2
 800b4ae:	e0b6      	b.n	800b61e <__kernel_rem_pio2f+0x39e>
 800b4b0:	2702      	movs	r7, #2
 800b4b2:	e78c      	b.n	800b3ce <__kernel_rem_pio2f+0x14e>
 800b4b4:	6820      	ldr	r0, [r4, #0]
 800b4b6:	b94b      	cbnz	r3, 800b4cc <__kernel_rem_pio2f+0x24c>
 800b4b8:	b118      	cbz	r0, 800b4c2 <__kernel_rem_pio2f+0x242>
 800b4ba:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800b4be:	6020      	str	r0, [r4, #0]
 800b4c0:	2001      	movs	r0, #1
 800b4c2:	f10e 0e01 	add.w	lr, lr, #1
 800b4c6:	3404      	adds	r4, #4
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	e785      	b.n	800b3d8 <__kernel_rem_pio2f+0x158>
 800b4cc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b4d0:	6020      	str	r0, [r4, #0]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	e7f5      	b.n	800b4c2 <__kernel_rem_pio2f+0x242>
 800b4d6:	1e74      	subs	r4, r6, #1
 800b4d8:	a808      	add	r0, sp, #32
 800b4da:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b4de:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b4e2:	f10d 0c20 	add.w	ip, sp, #32
 800b4e6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800b4ea:	e77e      	b.n	800b3ea <__kernel_rem_pio2f+0x16a>
 800b4ec:	1e74      	subs	r4, r6, #1
 800b4ee:	a808      	add	r0, sp, #32
 800b4f0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b4f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b4f8:	e7f3      	b.n	800b4e2 <__kernel_rem_pio2f+0x262>
 800b4fa:	ab08      	add	r3, sp, #32
 800b4fc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b500:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b504:	4318      	orrs	r0, r3
 800b506:	e7ab      	b.n	800b460 <__kernel_rem_pio2f+0x1e0>
 800b508:	f10c 0c01 	add.w	ip, ip, #1
 800b50c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800b510:	2c00      	cmp	r4, #0
 800b512:	d0f9      	beq.n	800b508 <__kernel_rem_pio2f+0x288>
 800b514:	9b05      	ldr	r3, [sp, #20]
 800b516:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b51a:	eb0d 0003 	add.w	r0, sp, r3
 800b51e:	9b01      	ldr	r3, [sp, #4]
 800b520:	18f4      	adds	r4, r6, r3
 800b522:	ab1c      	add	r3, sp, #112	; 0x70
 800b524:	1c77      	adds	r7, r6, #1
 800b526:	384c      	subs	r0, #76	; 0x4c
 800b528:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b52c:	4466      	add	r6, ip
 800b52e:	42be      	cmp	r6, r7
 800b530:	f6ff af0b 	blt.w	800b34a <__kernel_rem_pio2f+0xca>
 800b534:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800b538:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b53c:	ee07 3a90 	vmov	s15, r3
 800b540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b544:	f04f 0c00 	mov.w	ip, #0
 800b548:	ece4 7a01 	vstmia	r4!, {s15}
 800b54c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b58c <__kernel_rem_pio2f+0x30c>
 800b550:	46a1      	mov	r9, r4
 800b552:	458c      	cmp	ip, r1
 800b554:	dd07      	ble.n	800b566 <__kernel_rem_pio2f+0x2e6>
 800b556:	ece0 7a01 	vstmia	r0!, {s15}
 800b55a:	3701      	adds	r7, #1
 800b55c:	e7e7      	b.n	800b52e <__kernel_rem_pio2f+0x2ae>
 800b55e:	9804      	ldr	r0, [sp, #16]
 800b560:	f04f 0c01 	mov.w	ip, #1
 800b564:	e7d2      	b.n	800b50c <__kernel_rem_pio2f+0x28c>
 800b566:	ecfe 6a01 	vldmia	lr!, {s13}
 800b56a:	ed39 7a01 	vldmdb	r9!, {s14}
 800b56e:	f10c 0c01 	add.w	ip, ip, #1
 800b572:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b576:	e7ec      	b.n	800b552 <__kernel_rem_pio2f+0x2d2>
 800b578:	3c01      	subs	r4, #1
 800b57a:	e775      	b.n	800b468 <__kernel_rem_pio2f+0x1e8>
 800b57c:	0800c544 	.word	0x0800c544
 800b580:	0800c518 	.word	0x0800c518
 800b584:	43800000 	.word	0x43800000
 800b588:	3b800000 	.word	0x3b800000
 800b58c:	00000000 	.word	0x00000000
 800b590:	9b03      	ldr	r3, [sp, #12]
 800b592:	eeb0 0a48 	vmov.f32	s0, s16
 800b596:	1a98      	subs	r0, r3, r2
 800b598:	f000 fb16 	bl	800bbc8 <scalbnf>
 800b59c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800b584 <__kernel_rem_pio2f+0x304>
 800b5a0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5a8:	db19      	blt.n	800b5de <__kernel_rem_pio2f+0x35e>
 800b5aa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b588 <__kernel_rem_pio2f+0x308>
 800b5ae:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b5b2:	aa08      	add	r2, sp, #32
 800b5b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5b8:	1c74      	adds	r4, r6, #1
 800b5ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5be:	3508      	adds	r5, #8
 800b5c0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b5c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b5cc:	ee10 3a10 	vmov	r3, s0
 800b5d0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b5d4:	ee17 3a90 	vmov	r3, s15
 800b5d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b5dc:	e74b      	b.n	800b476 <__kernel_rem_pio2f+0x1f6>
 800b5de:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b5e2:	aa08      	add	r2, sp, #32
 800b5e4:	ee10 3a10 	vmov	r3, s0
 800b5e8:	4634      	mov	r4, r6
 800b5ea:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b5ee:	e742      	b.n	800b476 <__kernel_rem_pio2f+0x1f6>
 800b5f0:	a808      	add	r0, sp, #32
 800b5f2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800b5f6:	9001      	str	r0, [sp, #4]
 800b5f8:	ee07 0a90 	vmov	s15, r0
 800b5fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b600:	3a01      	subs	r2, #1
 800b602:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b606:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b60a:	ed61 7a01 	vstmdb	r1!, {s15}
 800b60e:	e73e      	b.n	800b48e <__kernel_rem_pio2f+0x20e>
 800b610:	ecfc 6a01 	vldmia	ip!, {s13}
 800b614:	ecb6 7a01 	vldmia	r6!, {s14}
 800b618:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b61c:	3001      	adds	r0, #1
 800b61e:	4550      	cmp	r0, sl
 800b620:	dc01      	bgt.n	800b626 <__kernel_rem_pio2f+0x3a6>
 800b622:	4288      	cmp	r0, r1
 800b624:	ddf4      	ble.n	800b610 <__kernel_rem_pio2f+0x390>
 800b626:	a858      	add	r0, sp, #352	; 0x160
 800b628:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b62c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800b630:	3a01      	subs	r2, #1
 800b632:	e730      	b.n	800b496 <__kernel_rem_pio2f+0x216>
 800b634:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800b636:	2a02      	cmp	r2, #2
 800b638:	dc09      	bgt.n	800b64e <__kernel_rem_pio2f+0x3ce>
 800b63a:	2a00      	cmp	r2, #0
 800b63c:	dc2a      	bgt.n	800b694 <__kernel_rem_pio2f+0x414>
 800b63e:	d043      	beq.n	800b6c8 <__kernel_rem_pio2f+0x448>
 800b640:	f009 0007 	and.w	r0, r9, #7
 800b644:	b059      	add	sp, #356	; 0x164
 800b646:	ecbd 8b04 	vpop	{d8-d9}
 800b64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800b650:	2b03      	cmp	r3, #3
 800b652:	d1f5      	bne.n	800b640 <__kernel_rem_pio2f+0x3c0>
 800b654:	ab30      	add	r3, sp, #192	; 0xc0
 800b656:	442b      	add	r3, r5
 800b658:	461a      	mov	r2, r3
 800b65a:	4619      	mov	r1, r3
 800b65c:	4620      	mov	r0, r4
 800b65e:	2800      	cmp	r0, #0
 800b660:	f1a1 0104 	sub.w	r1, r1, #4
 800b664:	dc51      	bgt.n	800b70a <__kernel_rem_pio2f+0x48a>
 800b666:	4621      	mov	r1, r4
 800b668:	2901      	cmp	r1, #1
 800b66a:	f1a2 0204 	sub.w	r2, r2, #4
 800b66e:	dc5c      	bgt.n	800b72a <__kernel_rem_pio2f+0x4aa>
 800b670:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800b58c <__kernel_rem_pio2f+0x30c>
 800b674:	3304      	adds	r3, #4
 800b676:	2c01      	cmp	r4, #1
 800b678:	dc67      	bgt.n	800b74a <__kernel_rem_pio2f+0x4ca>
 800b67a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800b67e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800b682:	2f00      	cmp	r7, #0
 800b684:	d167      	bne.n	800b756 <__kernel_rem_pio2f+0x4d6>
 800b686:	edc8 6a00 	vstr	s13, [r8]
 800b68a:	ed88 7a01 	vstr	s14, [r8, #4]
 800b68e:	edc8 7a02 	vstr	s15, [r8, #8]
 800b692:	e7d5      	b.n	800b640 <__kernel_rem_pio2f+0x3c0>
 800b694:	aa30      	add	r2, sp, #192	; 0xc0
 800b696:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800b58c <__kernel_rem_pio2f+0x30c>
 800b69a:	4413      	add	r3, r2
 800b69c:	4622      	mov	r2, r4
 800b69e:	2a00      	cmp	r2, #0
 800b6a0:	da24      	bge.n	800b6ec <__kernel_rem_pio2f+0x46c>
 800b6a2:	b34f      	cbz	r7, 800b6f8 <__kernel_rem_pio2f+0x478>
 800b6a4:	eef1 7a47 	vneg.f32	s15, s14
 800b6a8:	edc8 7a00 	vstr	s15, [r8]
 800b6ac:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800b6b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6b4:	aa31      	add	r2, sp, #196	; 0xc4
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	429c      	cmp	r4, r3
 800b6ba:	da20      	bge.n	800b6fe <__kernel_rem_pio2f+0x47e>
 800b6bc:	b10f      	cbz	r7, 800b6c2 <__kernel_rem_pio2f+0x442>
 800b6be:	eef1 7a67 	vneg.f32	s15, s15
 800b6c2:	edc8 7a01 	vstr	s15, [r8, #4]
 800b6c6:	e7bb      	b.n	800b640 <__kernel_rem_pio2f+0x3c0>
 800b6c8:	aa30      	add	r2, sp, #192	; 0xc0
 800b6ca:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800b58c <__kernel_rem_pio2f+0x30c>
 800b6ce:	4413      	add	r3, r2
 800b6d0:	2c00      	cmp	r4, #0
 800b6d2:	da05      	bge.n	800b6e0 <__kernel_rem_pio2f+0x460>
 800b6d4:	b10f      	cbz	r7, 800b6da <__kernel_rem_pio2f+0x45a>
 800b6d6:	eef1 7a67 	vneg.f32	s15, s15
 800b6da:	edc8 7a00 	vstr	s15, [r8]
 800b6de:	e7af      	b.n	800b640 <__kernel_rem_pio2f+0x3c0>
 800b6e0:	ed33 7a01 	vldmdb	r3!, {s14}
 800b6e4:	3c01      	subs	r4, #1
 800b6e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6ea:	e7f1      	b.n	800b6d0 <__kernel_rem_pio2f+0x450>
 800b6ec:	ed73 7a01 	vldmdb	r3!, {s15}
 800b6f0:	3a01      	subs	r2, #1
 800b6f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b6f6:	e7d2      	b.n	800b69e <__kernel_rem_pio2f+0x41e>
 800b6f8:	eef0 7a47 	vmov.f32	s15, s14
 800b6fc:	e7d4      	b.n	800b6a8 <__kernel_rem_pio2f+0x428>
 800b6fe:	ecb2 7a01 	vldmia	r2!, {s14}
 800b702:	3301      	adds	r3, #1
 800b704:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b708:	e7d6      	b.n	800b6b8 <__kernel_rem_pio2f+0x438>
 800b70a:	edd1 7a00 	vldr	s15, [r1]
 800b70e:	edd1 6a01 	vldr	s13, [r1, #4]
 800b712:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b716:	3801      	subs	r0, #1
 800b718:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b71c:	ed81 7a00 	vstr	s14, [r1]
 800b720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b724:	edc1 7a01 	vstr	s15, [r1, #4]
 800b728:	e799      	b.n	800b65e <__kernel_rem_pio2f+0x3de>
 800b72a:	edd2 7a00 	vldr	s15, [r2]
 800b72e:	edd2 6a01 	vldr	s13, [r2, #4]
 800b732:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b736:	3901      	subs	r1, #1
 800b738:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b73c:	ed82 7a00 	vstr	s14, [r2]
 800b740:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b744:	edc2 7a01 	vstr	s15, [r2, #4]
 800b748:	e78e      	b.n	800b668 <__kernel_rem_pio2f+0x3e8>
 800b74a:	ed33 7a01 	vldmdb	r3!, {s14}
 800b74e:	3c01      	subs	r4, #1
 800b750:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b754:	e78f      	b.n	800b676 <__kernel_rem_pio2f+0x3f6>
 800b756:	eef1 6a66 	vneg.f32	s13, s13
 800b75a:	eeb1 7a47 	vneg.f32	s14, s14
 800b75e:	edc8 6a00 	vstr	s13, [r8]
 800b762:	ed88 7a01 	vstr	s14, [r8, #4]
 800b766:	eef1 7a67 	vneg.f32	s15, s15
 800b76a:	e790      	b.n	800b68e <__kernel_rem_pio2f+0x40e>

0800b76c <__kernel_sinf>:
 800b76c:	ee10 3a10 	vmov	r3, s0
 800b770:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b774:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b778:	da04      	bge.n	800b784 <__kernel_sinf+0x18>
 800b77a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b77e:	ee17 3a90 	vmov	r3, s15
 800b782:	b35b      	cbz	r3, 800b7dc <__kernel_sinf+0x70>
 800b784:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b788:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b7e0 <__kernel_sinf+0x74>
 800b78c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b7e4 <__kernel_sinf+0x78>
 800b790:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b794:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b7e8 <__kernel_sinf+0x7c>
 800b798:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b79c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b7ec <__kernel_sinf+0x80>
 800b7a0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b7a4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b7f0 <__kernel_sinf+0x84>
 800b7a8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b7ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b7b0:	b930      	cbnz	r0, 800b7c0 <__kernel_sinf+0x54>
 800b7b2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b7f4 <__kernel_sinf+0x88>
 800b7b6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b7ba:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b7be:	4770      	bx	lr
 800b7c0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b7c4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b7c8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b7cc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b7d0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b7f8 <__kernel_sinf+0x8c>
 800b7d4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b7d8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	2f2ec9d3 	.word	0x2f2ec9d3
 800b7e4:	b2d72f34 	.word	0xb2d72f34
 800b7e8:	3638ef1b 	.word	0x3638ef1b
 800b7ec:	b9500d01 	.word	0xb9500d01
 800b7f0:	3c088889 	.word	0x3c088889
 800b7f4:	be2aaaab 	.word	0xbe2aaaab
 800b7f8:	3e2aaaab 	.word	0x3e2aaaab

0800b7fc <__kernel_tanf>:
 800b7fc:	b508      	push	{r3, lr}
 800b7fe:	ee10 3a10 	vmov	r3, s0
 800b802:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b806:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800b80a:	eef0 7a40 	vmov.f32	s15, s0
 800b80e:	da17      	bge.n	800b840 <__kernel_tanf+0x44>
 800b810:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800b814:	ee17 1a10 	vmov	r1, s14
 800b818:	bb41      	cbnz	r1, 800b86c <__kernel_tanf+0x70>
 800b81a:	1c43      	adds	r3, r0, #1
 800b81c:	4313      	orrs	r3, r2
 800b81e:	d108      	bne.n	800b832 <__kernel_tanf+0x36>
 800b820:	f7fe fc9c 	bl	800a15c <fabsf>
 800b824:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b828:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b82c:	eeb0 0a67 	vmov.f32	s0, s15
 800b830:	bd08      	pop	{r3, pc}
 800b832:	2801      	cmp	r0, #1
 800b834:	d0fa      	beq.n	800b82c <__kernel_tanf+0x30>
 800b836:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b83a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b83e:	e7f5      	b.n	800b82c <__kernel_tanf+0x30>
 800b840:	494c      	ldr	r1, [pc, #304]	; (800b974 <__kernel_tanf+0x178>)
 800b842:	428a      	cmp	r2, r1
 800b844:	db12      	blt.n	800b86c <__kernel_tanf+0x70>
 800b846:	2b00      	cmp	r3, #0
 800b848:	bfb8      	it	lt
 800b84a:	eef1 7a40 	vneglt.f32	s15, s0
 800b84e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800b978 <__kernel_tanf+0x17c>
 800b852:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b856:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800b97c <__kernel_tanf+0x180>
 800b85a:	bfb8      	it	lt
 800b85c:	eef1 0a60 	vneglt.f32	s1, s1
 800b860:	ee70 0a60 	vsub.f32	s1, s0, s1
 800b864:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800b868:	eddf 0a45 	vldr	s1, [pc, #276]	; 800b980 <__kernel_tanf+0x184>
 800b86c:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b984 <__kernel_tanf+0x188>
 800b870:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800b988 <__kernel_tanf+0x18c>
 800b874:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800b98c <__kernel_tanf+0x190>
 800b878:	493e      	ldr	r1, [pc, #248]	; (800b974 <__kernel_tanf+0x178>)
 800b87a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800b87e:	428a      	cmp	r2, r1
 800b880:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b884:	eea7 6a25 	vfma.f32	s12, s14, s11
 800b888:	eddf 5a41 	vldr	s11, [pc, #260]	; 800b990 <__kernel_tanf+0x194>
 800b88c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800b890:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800b994 <__kernel_tanf+0x198>
 800b894:	eea5 6a87 	vfma.f32	s12, s11, s14
 800b898:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b998 <__kernel_tanf+0x19c>
 800b89c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800b8a0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800b99c <__kernel_tanf+0x1a0>
 800b8a4:	eea5 6a87 	vfma.f32	s12, s11, s14
 800b8a8:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800b9a0 <__kernel_tanf+0x1a4>
 800b8ac:	eee7 5a05 	vfma.f32	s11, s14, s10
 800b8b0:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800b9a4 <__kernel_tanf+0x1a8>
 800b8b4:	eea5 5a87 	vfma.f32	s10, s11, s14
 800b8b8:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800b9a8 <__kernel_tanf+0x1ac>
 800b8bc:	eee5 5a07 	vfma.f32	s11, s10, s14
 800b8c0:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800b9ac <__kernel_tanf+0x1b0>
 800b8c4:	eea5 5a87 	vfma.f32	s10, s11, s14
 800b8c8:	eddf 5a39 	vldr	s11, [pc, #228]	; 800b9b0 <__kernel_tanf+0x1b4>
 800b8cc:	eee5 5a07 	vfma.f32	s11, s10, s14
 800b8d0:	eeb0 7a46 	vmov.f32	s14, s12
 800b8d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b8d8:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800b8dc:	eeb0 6a60 	vmov.f32	s12, s1
 800b8e0:	eea7 6a05 	vfma.f32	s12, s14, s10
 800b8e4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800b9b4 <__kernel_tanf+0x1b8>
 800b8e8:	eee6 0a26 	vfma.f32	s1, s12, s13
 800b8ec:	eee5 0a07 	vfma.f32	s1, s10, s14
 800b8f0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800b8f4:	db1d      	blt.n	800b932 <__kernel_tanf+0x136>
 800b8f6:	ee06 0a90 	vmov	s13, r0
 800b8fa:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800b8fe:	ee27 6a07 	vmul.f32	s12, s14, s14
 800b902:	ee37 7a00 	vadd.f32	s14, s14, s0
 800b906:	179b      	asrs	r3, r3, #30
 800b908:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800b90c:	f003 0302 	and.w	r3, r3, #2
 800b910:	f1c3 0301 	rsb	r3, r3, #1
 800b914:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b918:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800b91c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b920:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b924:	ee07 3a90 	vmov	s15, r3
 800b928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b92c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b930:	e77c      	b.n	800b82c <__kernel_tanf+0x30>
 800b932:	2801      	cmp	r0, #1
 800b934:	d01b      	beq.n	800b96e <__kernel_tanf+0x172>
 800b936:	4b20      	ldr	r3, [pc, #128]	; (800b9b8 <__kernel_tanf+0x1bc>)
 800b938:	ee17 2a10 	vmov	r2, s14
 800b93c:	401a      	ands	r2, r3
 800b93e:	ee06 2a10 	vmov	s12, r2
 800b942:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b946:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b94a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800b94e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b952:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b956:	ee16 2a90 	vmov	r2, s13
 800b95a:	4013      	ands	r3, r2
 800b95c:	ee07 3a90 	vmov	s15, r3
 800b960:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b964:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800b968:	eee7 7a26 	vfma.f32	s15, s14, s13
 800b96c:	e75e      	b.n	800b82c <__kernel_tanf+0x30>
 800b96e:	eef0 7a47 	vmov.f32	s15, s14
 800b972:	e75b      	b.n	800b82c <__kernel_tanf+0x30>
 800b974:	3f2ca140 	.word	0x3f2ca140
 800b978:	3f490fda 	.word	0x3f490fda
 800b97c:	33222168 	.word	0x33222168
 800b980:	00000000 	.word	0x00000000
 800b984:	b79bae5f 	.word	0xb79bae5f
 800b988:	38a3f445 	.word	0x38a3f445
 800b98c:	37d95384 	.word	0x37d95384
 800b990:	3a1a26c8 	.word	0x3a1a26c8
 800b994:	3b6b6916 	.word	0x3b6b6916
 800b998:	3cb327a4 	.word	0x3cb327a4
 800b99c:	3e088889 	.word	0x3e088889
 800b9a0:	3895c07a 	.word	0x3895c07a
 800b9a4:	398137b9 	.word	0x398137b9
 800b9a8:	3abede48 	.word	0x3abede48
 800b9ac:	3c11371f 	.word	0x3c11371f
 800b9b0:	3d5d0dd1 	.word	0x3d5d0dd1
 800b9b4:	3eaaaaab 	.word	0x3eaaaaab
 800b9b8:	fffff000 	.word	0xfffff000

0800b9bc <with_errno>:
 800b9bc:	b570      	push	{r4, r5, r6, lr}
 800b9be:	4604      	mov	r4, r0
 800b9c0:	460d      	mov	r5, r1
 800b9c2:	4616      	mov	r6, r2
 800b9c4:	f7fb f9f4 	bl	8006db0 <__errno>
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	6006      	str	r6, [r0, #0]
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}

0800b9d0 <xflow>:
 800b9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9d2:	4614      	mov	r4, r2
 800b9d4:	461d      	mov	r5, r3
 800b9d6:	b108      	cbz	r0, 800b9dc <xflow+0xc>
 800b9d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b9dc:	e9cd 2300 	strd	r2, r3, [sp]
 800b9e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	f7f4 fe06 	bl	80005f8 <__aeabi_dmul>
 800b9ec:	2222      	movs	r2, #34	; 0x22
 800b9ee:	b003      	add	sp, #12
 800b9f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9f4:	f7ff bfe2 	b.w	800b9bc <with_errno>

0800b9f8 <__math_uflow>:
 800b9f8:	b508      	push	{r3, lr}
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ba00:	f7ff ffe6 	bl	800b9d0 <xflow>
 800ba04:	ec41 0b10 	vmov	d0, r0, r1
 800ba08:	bd08      	pop	{r3, pc}

0800ba0a <__math_oflow>:
 800ba0a:	b508      	push	{r3, lr}
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ba12:	f7ff ffdd 	bl	800b9d0 <xflow>
 800ba16:	ec41 0b10 	vmov	d0, r0, r1
 800ba1a:	bd08      	pop	{r3, pc}

0800ba1c <finite>:
 800ba1c:	b082      	sub	sp, #8
 800ba1e:	ed8d 0b00 	vstr	d0, [sp]
 800ba22:	9801      	ldr	r0, [sp, #4]
 800ba24:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ba28:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ba2c:	0fc0      	lsrs	r0, r0, #31
 800ba2e:	b002      	add	sp, #8
 800ba30:	4770      	bx	lr
 800ba32:	0000      	movs	r0, r0
 800ba34:	0000      	movs	r0, r0
	...

0800ba38 <scalbn>:
 800ba38:	b570      	push	{r4, r5, r6, lr}
 800ba3a:	ec55 4b10 	vmov	r4, r5, d0
 800ba3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba42:	4606      	mov	r6, r0
 800ba44:	462b      	mov	r3, r5
 800ba46:	b99a      	cbnz	r2, 800ba70 <scalbn+0x38>
 800ba48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba4c:	4323      	orrs	r3, r4
 800ba4e:	d036      	beq.n	800babe <scalbn+0x86>
 800ba50:	4b39      	ldr	r3, [pc, #228]	; (800bb38 <scalbn+0x100>)
 800ba52:	4629      	mov	r1, r5
 800ba54:	ee10 0a10 	vmov	r0, s0
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f7f4 fdcd 	bl	80005f8 <__aeabi_dmul>
 800ba5e:	4b37      	ldr	r3, [pc, #220]	; (800bb3c <scalbn+0x104>)
 800ba60:	429e      	cmp	r6, r3
 800ba62:	4604      	mov	r4, r0
 800ba64:	460d      	mov	r5, r1
 800ba66:	da10      	bge.n	800ba8a <scalbn+0x52>
 800ba68:	a32b      	add	r3, pc, #172	; (adr r3, 800bb18 <scalbn+0xe0>)
 800ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6e:	e03a      	b.n	800bae6 <scalbn+0xae>
 800ba70:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ba74:	428a      	cmp	r2, r1
 800ba76:	d10c      	bne.n	800ba92 <scalbn+0x5a>
 800ba78:	ee10 2a10 	vmov	r2, s0
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	4629      	mov	r1, r5
 800ba80:	f7f4 fc04 	bl	800028c <__adddf3>
 800ba84:	4604      	mov	r4, r0
 800ba86:	460d      	mov	r5, r1
 800ba88:	e019      	b.n	800babe <scalbn+0x86>
 800ba8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ba8e:	460b      	mov	r3, r1
 800ba90:	3a36      	subs	r2, #54	; 0x36
 800ba92:	4432      	add	r2, r6
 800ba94:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ba98:	428a      	cmp	r2, r1
 800ba9a:	dd08      	ble.n	800baae <scalbn+0x76>
 800ba9c:	2d00      	cmp	r5, #0
 800ba9e:	a120      	add	r1, pc, #128	; (adr r1, 800bb20 <scalbn+0xe8>)
 800baa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baa4:	da1c      	bge.n	800bae0 <scalbn+0xa8>
 800baa6:	a120      	add	r1, pc, #128	; (adr r1, 800bb28 <scalbn+0xf0>)
 800baa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baac:	e018      	b.n	800bae0 <scalbn+0xa8>
 800baae:	2a00      	cmp	r2, #0
 800bab0:	dd08      	ble.n	800bac4 <scalbn+0x8c>
 800bab2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bab6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800baba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800babe:	ec45 4b10 	vmov	d0, r4, r5
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
 800bac4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bac8:	da19      	bge.n	800bafe <scalbn+0xc6>
 800baca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bace:	429e      	cmp	r6, r3
 800bad0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bad4:	dd0a      	ble.n	800baec <scalbn+0xb4>
 800bad6:	a112      	add	r1, pc, #72	; (adr r1, 800bb20 <scalbn+0xe8>)
 800bad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1e2      	bne.n	800baa6 <scalbn+0x6e>
 800bae0:	a30f      	add	r3, pc, #60	; (adr r3, 800bb20 <scalbn+0xe8>)
 800bae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae6:	f7f4 fd87 	bl	80005f8 <__aeabi_dmul>
 800baea:	e7cb      	b.n	800ba84 <scalbn+0x4c>
 800baec:	a10a      	add	r1, pc, #40	; (adr r1, 800bb18 <scalbn+0xe0>)
 800baee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d0b8      	beq.n	800ba68 <scalbn+0x30>
 800baf6:	a10e      	add	r1, pc, #56	; (adr r1, 800bb30 <scalbn+0xf8>)
 800baf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bafc:	e7b4      	b.n	800ba68 <scalbn+0x30>
 800bafe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb02:	3236      	adds	r2, #54	; 0x36
 800bb04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	4b0c      	ldr	r3, [pc, #48]	; (800bb40 <scalbn+0x108>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	e7e8      	b.n	800bae6 <scalbn+0xae>
 800bb14:	f3af 8000 	nop.w
 800bb18:	c2f8f359 	.word	0xc2f8f359
 800bb1c:	01a56e1f 	.word	0x01a56e1f
 800bb20:	8800759c 	.word	0x8800759c
 800bb24:	7e37e43c 	.word	0x7e37e43c
 800bb28:	8800759c 	.word	0x8800759c
 800bb2c:	fe37e43c 	.word	0xfe37e43c
 800bb30:	c2f8f359 	.word	0xc2f8f359
 800bb34:	81a56e1f 	.word	0x81a56e1f
 800bb38:	43500000 	.word	0x43500000
 800bb3c:	ffff3cb0 	.word	0xffff3cb0
 800bb40:	3c900000 	.word	0x3c900000

0800bb44 <floorf>:
 800bb44:	ee10 3a10 	vmov	r3, s0
 800bb48:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bb4c:	3a7f      	subs	r2, #127	; 0x7f
 800bb4e:	2a16      	cmp	r2, #22
 800bb50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb54:	dc2a      	bgt.n	800bbac <floorf+0x68>
 800bb56:	2a00      	cmp	r2, #0
 800bb58:	da11      	bge.n	800bb7e <floorf+0x3a>
 800bb5a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800bbbc <floorf+0x78>
 800bb5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bb62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb6a:	dd05      	ble.n	800bb78 <floorf+0x34>
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	da23      	bge.n	800bbb8 <floorf+0x74>
 800bb70:	4a13      	ldr	r2, [pc, #76]	; (800bbc0 <floorf+0x7c>)
 800bb72:	2900      	cmp	r1, #0
 800bb74:	bf18      	it	ne
 800bb76:	4613      	movne	r3, r2
 800bb78:	ee00 3a10 	vmov	s0, r3
 800bb7c:	4770      	bx	lr
 800bb7e:	4911      	ldr	r1, [pc, #68]	; (800bbc4 <floorf+0x80>)
 800bb80:	4111      	asrs	r1, r2
 800bb82:	420b      	tst	r3, r1
 800bb84:	d0fa      	beq.n	800bb7c <floorf+0x38>
 800bb86:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800bbbc <floorf+0x78>
 800bb8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bb8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb96:	ddef      	ble.n	800bb78 <floorf+0x34>
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	bfbe      	ittt	lt
 800bb9c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800bba0:	fa40 f202 	asrlt.w	r2, r0, r2
 800bba4:	189b      	addlt	r3, r3, r2
 800bba6:	ea23 0301 	bic.w	r3, r3, r1
 800bbaa:	e7e5      	b.n	800bb78 <floorf+0x34>
 800bbac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bbb0:	d3e4      	bcc.n	800bb7c <floorf+0x38>
 800bbb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bbb6:	4770      	bx	lr
 800bbb8:	2300      	movs	r3, #0
 800bbba:	e7dd      	b.n	800bb78 <floorf+0x34>
 800bbbc:	7149f2ca 	.word	0x7149f2ca
 800bbc0:	bf800000 	.word	0xbf800000
 800bbc4:	007fffff 	.word	0x007fffff

0800bbc8 <scalbnf>:
 800bbc8:	ee10 3a10 	vmov	r3, s0
 800bbcc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800bbd0:	d025      	beq.n	800bc1e <scalbnf+0x56>
 800bbd2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bbd6:	d302      	bcc.n	800bbde <scalbnf+0x16>
 800bbd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bbdc:	4770      	bx	lr
 800bbde:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800bbe2:	d122      	bne.n	800bc2a <scalbnf+0x62>
 800bbe4:	4b2a      	ldr	r3, [pc, #168]	; (800bc90 <scalbnf+0xc8>)
 800bbe6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800bc94 <scalbnf+0xcc>
 800bbea:	4298      	cmp	r0, r3
 800bbec:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bbf0:	db16      	blt.n	800bc20 <scalbnf+0x58>
 800bbf2:	ee10 3a10 	vmov	r3, s0
 800bbf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bbfa:	3a19      	subs	r2, #25
 800bbfc:	4402      	add	r2, r0
 800bbfe:	2afe      	cmp	r2, #254	; 0xfe
 800bc00:	dd15      	ble.n	800bc2e <scalbnf+0x66>
 800bc02:	ee10 3a10 	vmov	r3, s0
 800bc06:	eddf 7a24 	vldr	s15, [pc, #144]	; 800bc98 <scalbnf+0xd0>
 800bc0a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800bc9c <scalbnf+0xd4>
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	eeb0 7a67 	vmov.f32	s14, s15
 800bc14:	bfb8      	it	lt
 800bc16:	eef0 7a66 	vmovlt.f32	s15, s13
 800bc1a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800bc1e:	4770      	bx	lr
 800bc20:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bca0 <scalbnf+0xd8>
 800bc24:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bc28:	4770      	bx	lr
 800bc2a:	0dd2      	lsrs	r2, r2, #23
 800bc2c:	e7e6      	b.n	800bbfc <scalbnf+0x34>
 800bc2e:	2a00      	cmp	r2, #0
 800bc30:	dd06      	ble.n	800bc40 <scalbnf+0x78>
 800bc32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bc36:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800bc3a:	ee00 3a10 	vmov	s0, r3
 800bc3e:	4770      	bx	lr
 800bc40:	f112 0f16 	cmn.w	r2, #22
 800bc44:	da1a      	bge.n	800bc7c <scalbnf+0xb4>
 800bc46:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bc4a:	4298      	cmp	r0, r3
 800bc4c:	ee10 3a10 	vmov	r3, s0
 800bc50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc54:	dd0a      	ble.n	800bc6c <scalbnf+0xa4>
 800bc56:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800bc98 <scalbnf+0xd0>
 800bc5a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800bc9c <scalbnf+0xd4>
 800bc5e:	eef0 7a40 	vmov.f32	s15, s0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	bf18      	it	ne
 800bc66:	eeb0 0a47 	vmovne.f32	s0, s14
 800bc6a:	e7db      	b.n	800bc24 <scalbnf+0x5c>
 800bc6c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800bca0 <scalbnf+0xd8>
 800bc70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800bca4 <scalbnf+0xdc>
 800bc74:	eef0 7a40 	vmov.f32	s15, s0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	e7f3      	b.n	800bc64 <scalbnf+0x9c>
 800bc7c:	3219      	adds	r2, #25
 800bc7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bc82:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800bc86:	eddf 7a08 	vldr	s15, [pc, #32]	; 800bca8 <scalbnf+0xe0>
 800bc8a:	ee07 3a10 	vmov	s14, r3
 800bc8e:	e7c4      	b.n	800bc1a <scalbnf+0x52>
 800bc90:	ffff3cb0 	.word	0xffff3cb0
 800bc94:	4c000000 	.word	0x4c000000
 800bc98:	7149f2ca 	.word	0x7149f2ca
 800bc9c:	f149f2ca 	.word	0xf149f2ca
 800bca0:	0da24260 	.word	0x0da24260
 800bca4:	8da24260 	.word	0x8da24260
 800bca8:	33000000 	.word	0x33000000

0800bcac <_init>:
 800bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcae:	bf00      	nop
 800bcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcb2:	bc08      	pop	{r3}
 800bcb4:	469e      	mov	lr, r3
 800bcb6:	4770      	bx	lr

0800bcb8 <_fini>:
 800bcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcba:	bf00      	nop
 800bcbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcbe:	bc08      	pop	{r3}
 800bcc0:	469e      	mov	lr, r3
 800bcc2:	4770      	bx	lr
