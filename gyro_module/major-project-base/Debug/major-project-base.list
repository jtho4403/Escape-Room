
major-project-base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a824  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800a9b8  0800a9b8  0001a9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae50  0800ae50  00020410  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae50  0800ae50  00020410  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae50  0800ae50  00020410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae50  0800ae50  0001ae50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae54  0800ae54  0001ae54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000410  20000000  0800ae58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020410  2**0
                  CONTENTS
 10 .bss          000004e0  20000410  20000410  00020410  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008f0  200008f0  00020410  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020410  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003665  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b9f  00000000  00000000  00023aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  00024644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f8  00000000  00000000  0002588c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e883  00000000  00000000  00026984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00002ff4  00000000  00000000  00035207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000381fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006314  00000000  00000000  0003824c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000410 	.word	0x20000410
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a99c 	.word	0x0800a99c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000414 	.word	0x20000414
 80001cc:	0800a99c 	.word	0x0800a99c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <enable_clocks>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <enable_clocks+0x1c>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <enable_clocks+0x1c>)
 8000c92:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000c96:	6153      	str	r3, [r2, #20]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <initialise_board+0x20>)
 8000cb0:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f245 5255 	movw	r2, #21845	; 0x5555
 8000cb8:	801a      	strh	r2, [r3, #0]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	48001002 	.word	0x48001002

08000ccc <HAL_TIM_IC_CaptureCallback>:
uint16_t last_period = 0;

float x = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	; 0x30
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[32];
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d127      	bne.n	8000d2e <HAL_TIM_IC_CaptureCallback+0x62>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7f1b      	ldrb	r3, [r3, #28]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d123      	bne.n	8000d2e <HAL_TIM_IC_CaptureCallback+0x62>
	{
		uint16_t IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f005 faa5 	bl	8006238 <HAL_TIM_ReadCapturedValue>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	85fb      	strh	r3, [r7, #46]	; 0x2e

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 8000cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfa:	f002 f98f 	bl	800301c <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d103      	bne.n	8000d0c <HAL_TIM_IC_CaptureCallback+0x40>
			rise_time = IC_Val1;
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_TIM_IC_CaptureCallback+0x70>)
 8000d06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d08:	8013      	strh	r3, [r2, #0]
 8000d0a:	e006      	b.n	8000d1a <HAL_TIM_IC_CaptureCallback+0x4e>
		else
			last_period = IC_Val1 - rise_time;
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_TIM_IC_CaptureCallback+0x70>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000d18:	801a      	strh	r2, [r3, #0]

		diff = IC_Val1 - last_capture;
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000d26:	801a      	strh	r2, [r3, #0]
		last_capture = IC_Val1;
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000d2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d2c:	8013      	strh	r3, [r2, #0]
	}
}
 8000d2e:	bf00      	nop
 8000d30:	3730      	adds	r7, #48	; 0x30
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	200008c0 	.word	0x200008c0
 8000d40:	200008c2 	.word	0x200008c2
 8000d44:	200008bc 	.word	0x200008bc
 8000d48:	200008be 	.word	0x200008be
 8000d4c:	00000000 	.word	0x00000000

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d54:	b0aa      	sub	sp, #168	; 0xa8
 8000d56:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	enable_clocks();
 8000d58:	f7ff ff96 	bl	8000c88 <enable_clocks>
	initialise_board();
 8000d5c:	f7ff ffa4 	bl	8000ca8 <initialise_board>

	LedRegister *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000d60:	4bb2      	ldr	r3, [pc, #712]	; (800102c <main+0x2dc>)
 8000d62:	66bb      	str	r3, [r7, #104]	; 0x68

	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000d64:	2200      	movs	r2, #0
 8000d66:	49b2      	ldr	r1, [pc, #712]	; (8001030 <main+0x2e0>)
 8000d68:	2004      	movs	r0, #4
 8000d6a:	f001 fa19 	bl	80021a0 <SerialInitialise>


	HAL_StatusTypeDef return_value = 0x00;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	volatile uint16_t vertical_PWM = 1000;
 8000d74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d78:	847b      	strh	r3, [r7, #34]	; 0x22
	volatile uint16_t horizontal_PWM = 1000;
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	843b      	strh	r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d80:	f001 fe36 	bl	80029f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d84:	f000 fe42 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d88:	f000 fffc 	bl	8001d84 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d8c:	f000 fea4 	bl	8001ad8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000d90:	f000 ff22 	bl	8001bd8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000d94:	f000 ffd4 	bl	8001d40 <MX_USB_PCD_Init>
  //MX_TIM2_Init();
  MX_TIM1_Init();
 8000d98:	f000 ff5c 	bl	8001c54 <MX_TIM1_Init>
  MX_I2C2_Init();
 8000d9c:	f000 fedc 	bl	8001b58 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // PAN
 8000da0:	2100      	movs	r1, #0
 8000da2:	48a4      	ldr	r0, [pc, #656]	; (8001034 <main+0x2e4>)
 8000da4:	f004 fd20 	bl	80057e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // TILT
 8000da8:	2104      	movs	r1, #4
 8000daa:	48a2      	ldr	r0, [pc, #648]	; (8001034 <main+0x2e4>)
 8000dac:	f004 fd1c 	bl	80057e8 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // LIDAR
 8000db0:	2100      	movs	r1, #0
 8000db2:	48a1      	ldr	r0, [pc, #644]	; (8001038 <main+0x2e8>)
 8000db4:	f004 fe7a 	bl	8005aac <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 8000db8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dbc:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000dc0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 8000dc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd0:	6013      	str	r3, [r2, #0]
	// NVIC_EnableIRQ(TIM2_IRQn);

	// literallty set the PTU registers using I2C
	// Stews code to initalise HAL_TYPE_STRUCT used for I2C communications
	// he is exrecting a certain stream of infromation and sets it up like so
	initialise_ptu_i2c(&hi2c2);
 8000dd2:	489a      	ldr	r0, [pc, #616]	; (800103c <main+0x2ec>)
 8000dd4:	f001 f872 	bl	8001ebc <initialise_ptu_i2c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	// reset lidar board
	uint8_t reset_value = 0x00;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	77fb      	strb	r3, [r7, #31]
	return_value = HAL_I2C_Mem_Write(&hi2c2, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000ddc:	230a      	movs	r3, #10
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	2301      	movs	r3, #1
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	f107 031f 	add.w	r3, r7, #31
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2301      	movs	r3, #1
 8000dec:	2200      	movs	r2, #0
 8000dee:	21c4      	movs	r1, #196	; 0xc4
 8000df0:	4892      	ldr	r0, [pc, #584]	; (800103c <main+0x2ec>)
 8000df2:	f002 f9d3 	bl	800319c <HAL_I2C_Mem_Write>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	uint8_t PWM_direction_clockwise = 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

	// delay for initialisation of the lidar
	HAL_Delay(100);
 8000e02:	2064      	movs	r0, #100	; 0x64
 8000e04:	f001 fe5a 	bl	8002abc <HAL_Delay>

	uint16_t time = 10; // 4 seconds = 4000ms // 10ms = 10
 8000e08:	230a      	movs	r3, #10
 8000e0a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	//Idea get a interrupt every 10ms
	up_count_TIM3(time, PTU_callback_function);
 8000e0e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8000e12:	498b      	ldr	r1, [pc, #556]	; (8001040 <main+0x2f0>)
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fd69 	bl	80028ec <up_count_TIM3>

	float x_acc = 0.0;
 8000e1a:	f04f 0300 	mov.w	r3, #0
 8000e1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	float y_acc = 0.0;
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	float z_acc = 0.0;
 8000e2a:	f04f 0300 	mov.w	r3, #0
 8000e2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	float x_v = 0.0;
 8000e32:	f04f 0300 	mov.w	r3, #0
 8000e36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	float y_v = 0.0;
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	float z_v = 0.0;
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	67fb      	str	r3, [r7, #124]	; 0x7c
	float x_angle = 0.0;
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	67bb      	str	r3, [r7, #120]	; 0x78
	float y_angle = 0.0;
 8000e4e:	f04f 0300 	mov.w	r3, #0
 8000e52:	677b      	str	r3, [r7, #116]	; 0x74
	float z_angle = 0.0;
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	673b      	str	r3, [r7, #112]	; 0x70
	while (1)
	{
		if (PWM_direction_clockwise == 1) {
 8000e5a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d10a      	bne.n	8000e78 <main+0x128>
			vertical_PWM += 3;
 8000e62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	3303      	adds	r3, #3
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	847b      	strh	r3, [r7, #34]	; 0x22
			horizontal_PWM += 3;
 8000e6c:	8c3b      	ldrh	r3, [r7, #32]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3303      	adds	r3, #3
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	843b      	strh	r3, [r7, #32]
 8000e76:	e009      	b.n	8000e8c <main+0x13c>
		}
		else {
			vertical_PWM -= 3;
 8000e78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	847b      	strh	r3, [r7, #34]	; 0x22
			horizontal_PWM -= 3;
 8000e82:	8c3b      	ldrh	r3, [r7, #32]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	3b03      	subs	r3, #3
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	843b      	strh	r3, [r7, #32]
		}

		if (vertical_PWM > 1900) {
 8000e8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	f240 726c 	movw	r2, #1900	; 0x76c
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d905      	bls.n	8000ea4 <main+0x154>
			vertical_PWM = 1900;
 8000e98:	f240 736c 	movw	r3, #1900	; 0x76c
 8000e9c:	847b      	strh	r3, [r7, #34]	; 0x22
			PWM_direction_clockwise = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		if (vertical_PWM < 1200) {
 8000ea4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000eac:	d205      	bcs.n	8000eba <main+0x16a>
			vertical_PWM = 1200;
 8000eae:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000eb2:	847b      	strh	r3, [r7, #34]	; 0x22
			PWM_direction_clockwise = 1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		TIM2->CCR1 = vertical_PWM;
 8000eba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = horizontal_PWM;
 8000ec4:	8c3b      	ldrh	r3, [r7, #32]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ecc:	639a      	str	r2, [r3, #56]	; 0x38


		uint8_t xMSB = 0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	77bb      	strb	r3, [r7, #30]
		HAL_I2C_Mem_Read(&hi2c2,gyro_rd, 0x29, 1, &xMSB, 1, 10);
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	f107 031e 	add.w	r3, r7, #30
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	2229      	movs	r2, #41	; 0x29
 8000ee4:	21d3      	movs	r1, #211	; 0xd3
 8000ee6:	4855      	ldr	r0, [pc, #340]	; (800103c <main+0x2ec>)
 8000ee8:	f002 fa6c 	bl	80033c4 <HAL_I2C_Mem_Read>
		uint8_t xLSB = 0x00;
 8000eec:	2300      	movs	r3, #0
 8000eee:	777b      	strb	r3, [r7, #29]
		HAL_I2C_Mem_Read(&hi2c2,gyro_rd, 0x28, 1, &xLSB, 1, 10);
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	f107 031d 	add.w	r3, r7, #29
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2301      	movs	r3, #1
 8000f00:	2228      	movs	r2, #40	; 0x28
 8000f02:	21d3      	movs	r1, #211	; 0xd3
 8000f04:	484d      	ldr	r0, [pc, #308]	; (800103c <main+0x2ec>)
 8000f06:	f002 fa5d 	bl	80033c4 <HAL_I2C_Mem_Read>
		int16_t yaw_rate = ((xMSB << 8) | xLSB);
 8000f0a:	7fbb      	ldrb	r3, [r7, #30]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	7f7b      	ldrb	r3, [r7, #29]
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	4313      	orrs	r3, r2
 8000f16:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

		uint8_t yMSB = 0x00;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	773b      	strb	r3, [r7, #28]
		HAL_I2C_Mem_Read(&hi2c2,gyro_rd, 0x2B, 1, &yMSB, 1, 10);
 8000f1e:	230a      	movs	r3, #10
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	2301      	movs	r3, #1
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	222b      	movs	r2, #43	; 0x2b
 8000f30:	21d3      	movs	r1, #211	; 0xd3
 8000f32:	4842      	ldr	r0, [pc, #264]	; (800103c <main+0x2ec>)
 8000f34:	f002 fa46 	bl	80033c4 <HAL_I2C_Mem_Read>
		uint8_t yLSB = 0x00;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	76fb      	strb	r3, [r7, #27]
		HAL_I2C_Mem_Read(&hi2c2,gyro_rd, 0x2A, 1, &yLSB, 1, 10);
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	2301      	movs	r3, #1
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	f107 031b 	add.w	r3, r7, #27
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	222a      	movs	r2, #42	; 0x2a
 8000f4e:	21d3      	movs	r1, #211	; 0xd3
 8000f50:	483a      	ldr	r0, [pc, #232]	; (800103c <main+0x2ec>)
 8000f52:	f002 fa37 	bl	80033c4 <HAL_I2C_Mem_Read>
		int16_t pitch_rate = ((yMSB << 8) | yLSB);
 8000f56:	7f3b      	ldrb	r3, [r7, #28]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	7efb      	ldrb	r3, [r7, #27]
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	4313      	orrs	r3, r2
 8000f62:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

		uint8_t zMSB = 0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	76bb      	strb	r3, [r7, #26]
		HAL_I2C_Mem_Read(&hi2c2,gyro_rd, 0x2D, 1, &zMSB, 1, 10);
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	9302      	str	r3, [sp, #8]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	f107 031a 	add.w	r3, r7, #26
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	222d      	movs	r2, #45	; 0x2d
 8000f7c:	21d3      	movs	r1, #211	; 0xd3
 8000f7e:	482f      	ldr	r0, [pc, #188]	; (800103c <main+0x2ec>)
 8000f80:	f002 fa20 	bl	80033c4 <HAL_I2C_Mem_Read>
		uint8_t zLSB = 0x00;
 8000f84:	2300      	movs	r3, #0
 8000f86:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Mem_Read(&hi2c2,gyro_rd, 0x2C, 1, &zLSB, 1, 10);
 8000f88:	230a      	movs	r3, #10
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	f107 0319 	add.w	r3, r7, #25
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	222c      	movs	r2, #44	; 0x2c
 8000f9a:	21d3      	movs	r1, #211	; 0xd3
 8000f9c:	4827      	ldr	r0, [pc, #156]	; (800103c <main+0x2ec>)
 8000f9e:	f002 fa11 	bl	80033c4 <HAL_I2C_Mem_Read>
		int16_t roll_rate = ((zMSB << 8) | zLSB);
 8000fa2:	7ebb      	ldrb	r3, [r7, #26]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	7e7b      	ldrb	r3, [r7, #25]
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

		if (pitch_rate < 0)
 8000fb2:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	da06      	bge.n	8000fc8 <main+0x278>
			led_register->led_groups.led_pair_1 = 0b01;
 8000fba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fbc:	7813      	ldrb	r3, [r2, #0]
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	f361 0301 	bfi	r3, r1, #0, #2
 8000fc4:	7013      	strb	r3, [r2, #0]
 8000fc6:	e005      	b.n	8000fd4 <main+0x284>
		else
			led_register->led_groups.led_pair_1 = 0b10;
 8000fc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fca:	7813      	ldrb	r3, [r2, #0]
 8000fcc:	2102      	movs	r1, #2
 8000fce:	f361 0301 	bfi	r3, r1, #0, #2
 8000fd2:	7013      	strb	r3, [r2, #0]

		if (yaw_rate < 0)
 8000fd4:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	da06      	bge.n	8000fea <main+0x29a>
			led_register->led_groups.led_pair_2 = 1;
 8000fdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fde:	7813      	ldrb	r3, [r2, #0]
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	f361 0383 	bfi	r3, r1, #2, #2
 8000fe6:	7013      	strb	r3, [r2, #0]
 8000fe8:	e005      	b.n	8000ff6 <main+0x2a6>
		else
			led_register->led_groups.led_pair_2 = 2;
 8000fea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fec:	7813      	ldrb	r3, [r2, #0]
 8000fee:	2102      	movs	r1, #2
 8000ff0:	f361 0383 	bfi	r3, r1, #2, #2
 8000ff4:	7013      	strb	r3, [r2, #0]


		uint8_t lidar_value = 0x03;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	763b      	strb	r3, [r7, #24]
		return_value = HAL_I2C_Mem_Write(&hi2c2, LIDAR_WR, 0x00, 1, &lidar_value, 1, 100);
 8000ffa:	2364      	movs	r3, #100	; 0x64
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	2200      	movs	r2, #0
 800100c:	21c4      	movs	r1, #196	; 0xc4
 800100e:	480b      	ldr	r0, [pc, #44]	; (800103c <main+0x2ec>)
 8001010:	f002 f8c4 	bl	800319c <HAL_I2C_Mem_Write>
 8001014:	4603      	mov	r3, r0
 8001016:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		lidar_value = 0xff;
 800101a:	23ff      	movs	r3, #255	; 0xff
 800101c:	763b      	strb	r3, [r7, #24]

		uint8_t lidar_MSBa = 0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	75fb      	strb	r3, [r7, #23]
		uint8_t lidar_LSBa = 0x00;
 8001022:	2300      	movs	r3, #0
 8001024:	75bb      	strb	r3, [r7, #22]

		volatile uint16_t lidar_distance = 0xff;
 8001026:	23ff      	movs	r3, #255	; 0xff
 8001028:	82bb      	strh	r3, [r7, #20]

		uint16_t timeout;
// some WERID ERROS happen here
		while ((lidar_value & 0x01) != 0x00) {
 800102a:	e04d      	b.n	80010c8 <main+0x378>
 800102c:	48001015 	.word	0x48001015
 8001030:	200001f4 	.word	0x200001f4
 8001034:	20000584 	.word	0x20000584
 8001038:	20000538 	.word	0x20000538
 800103c:	20000480 	.word	0x20000480
 8001040:	08001e81 	.word	0x08001e81
			return_value = HAL_I2C_Mem_Read(&hi2c2, LIDAR_RD, 0x01, 1, &lidar_value, 1, 100);
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	f107 0318 	add.w	r3, r7, #24
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	2201      	movs	r2, #1
 8001056:	21c5      	movs	r1, #197	; 0xc5
 8001058:	481e      	ldr	r0, [pc, #120]	; (80010d4 <main+0x384>)
 800105a:	f002 f9b3 	bl	80033c4 <HAL_I2C_Mem_Read>
 800105e:	4603      	mov	r3, r0
 8001060:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			return_value = HAL_I2C_Mem_Read(&hi2c2, LIDAR_RD, 0x0f, 1, &lidar_MSBa, 1, 100);
 8001064:	2364      	movs	r3, #100	; 0x64
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	2301      	movs	r3, #1
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	f107 0317 	add.w	r3, r7, #23
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	220f      	movs	r2, #15
 8001076:	21c5      	movs	r1, #197	; 0xc5
 8001078:	4816      	ldr	r0, [pc, #88]	; (80010d4 <main+0x384>)
 800107a:	f002 f9a3 	bl	80033c4 <HAL_I2C_Mem_Read>
 800107e:	4603      	mov	r3, r0
 8001080:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			return_value = HAL_I2C_Mem_Read(&hi2c2, LIDAR_RD, 0x10, 1, &lidar_LSBa, 1, 100);
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	2301      	movs	r3, #1
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	f107 0316 	add.w	r3, r7, #22
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	2210      	movs	r2, #16
 8001096:	21c5      	movs	r1, #197	; 0xc5
 8001098:	480e      	ldr	r0, [pc, #56]	; (80010d4 <main+0x384>)
 800109a:	f002 f993 	bl	80033c4 <HAL_I2C_Mem_Read>
 800109e:	4603      	mov	r3, r0
 80010a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			lidar_distance = ((lidar_MSBa << 8) | lidar_LSBa);
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	7dbb      	ldrb	r3, [r7, #22]
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	82bb      	strh	r3, [r7, #20]
			timeout += 1;
 80010b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80010ba:	3301      	adds	r3, #1
 80010bc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			if (timeout > 0xff)
 80010c0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80010c4:	2bff      	cmp	r3, #255	; 0xff
 80010c6:	d807      	bhi.n	80010d8 <main+0x388>
		while ((lidar_value & 0x01) != 0x00) {
 80010c8:	7e3b      	ldrb	r3, [r7, #24]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1b8      	bne.n	8001044 <main+0x2f4>
 80010d2:	e002      	b.n	80010da <main+0x38a>
 80010d4:	20000480 	.word	0x20000480
				break;
 80010d8:	bf00      	nop
		}

		uint8_t lidar_ranges = lidar_distance / (100/4); // 100cm broken into 4 groups
 80010da:	8abb      	ldrh	r3, [r7, #20]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4ad6      	ldr	r2, [pc, #856]	; (8001438 <main+0x6e8>)
 80010e0:	fba2 2303 	umull	r2, r3, r2, r3
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		if (lidar_ranges > 3)
 80010ec:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d902      	bls.n	80010fa <main+0x3aa>
			lidar_ranges = 3;
 80010f4:	2303      	movs	r3, #3
 80010f6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

		uint8_t led_values = pow(2, lidar_ranges);
 80010fa:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa00 	bl	8000504 <__aeabi_ui2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	ec43 2b11 	vmov	d1, r2, r3
 800110c:	ed9f 0bc4 	vldr	d0, [pc, #784]	; 8001420 <main+0x6d0>
 8001110:	f008 fd04 	bl	8009b1c <pow>
 8001114:	ec53 2b10 	vmov	r2, r3, d0
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fd44 	bl	8000ba8 <__aeabi_d2uiz>
 8001120:	4603      	mov	r3, r0
 8001122:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

		led_register->led_groups.led_set_of_4 = led_values;
 8001126:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	b2d9      	uxtb	r1, r3
 8001130:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001132:	7813      	ldrb	r3, [r2, #0]
 8001134:	f361 1307 	bfi	r3, r1, #4, #4
 8001138:	7013      	strb	r3, [r2, #0]

		volatile int read_values_now = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]

		if (last_period > 4000)
 800113e:	4bbf      	ldr	r3, [pc, #764]	; (800143c <main+0x6ec>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001146:	d903      	bls.n	8001150 <main+0x400>
			last_period = 5000;
 8001148:	4bbc      	ldr	r3, [pc, #752]	; (800143c <main+0x6ec>)
 800114a:	f241 3288 	movw	r2, #5000	; 0x1388
 800114e:	801a      	strh	r2, [r3, #0]
		if (lidar_distance > 4000)
 8001150:	8abb      	ldrh	r3, [r7, #20]
 8001152:	b29b      	uxth	r3, r3
 8001154:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001158:	d902      	bls.n	8001160 <main+0x410>
			lidar_distance = 5500;
 800115a:	f241 537c 	movw	r3, #5500	; 0x157c
 800115e:	82bb      	strh	r3, [r7, #20]
		// Read the magnetometer

		uint8_t mag_setting = 0b11111100;
 8001160:	23fc      	movs	r3, #252	; 0xfc
 8001162:	73fb      	strb	r3, [r7, #15]
		return_value = HAL_I2C_Mem_Write(&hi2c2, magnet_wr, 0x02, 1, &mag_setting, 1, 10);
 8001164:	230a      	movs	r3, #10
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	2301      	movs	r3, #1
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	f107 030f 	add.w	r3, r7, #15
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2202      	movs	r2, #2
 8001176:	213c      	movs	r1, #60	; 0x3c
 8001178:	48b1      	ldr	r0, [pc, #708]	; (8001440 <main+0x6f0>)
 800117a:	f002 f80f 	bl	800319c <HAL_I2C_Mem_Write>
 800117e:	4603      	mov	r3, r0
 8001180:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		uint8_t mag_data_buf[6];
		return_value = HAL_I2C_Mem_Read(&hi2c2, magnet_rd, 0x03, 1, mag_data_buf, 6, 10);
 8001184:	230a      	movs	r3, #10
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	2306      	movs	r3, #6
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	2203      	movs	r2, #3
 8001196:	213d      	movs	r1, #61	; 0x3d
 8001198:	48a9      	ldr	r0, [pc, #676]	; (8001440 <main+0x6f0>)
 800119a:	f002 f913 	bl	80033c4 <HAL_I2C_Mem_Read>
 800119e:	4603      	mov	r3, r0
 80011a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		int16_t x_mag = ((mag_data_buf[0] << 8) | mag_data_buf[1]);
 80011a4:	7a3b      	ldrb	r3, [r7, #8]
 80011a6:	021b      	lsls	r3, r3, #8
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	7a7b      	ldrb	r3, [r7, #9]
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4313      	orrs	r3, r2
 80011b0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		int16_t z_mag = ((mag_data_buf[2] << 8) | mag_data_buf[3]);
 80011b4:	7abb      	ldrb	r3, [r7, #10]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	7afb      	ldrb	r3, [r7, #11]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		int16_t y_mag = ((mag_data_buf[4] << 8) | mag_data_buf[5]);
 80011c4:	7b3b      	ldrb	r3, [r7, #12]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7b7b      	ldrb	r3, [r7, #13]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

		// I'm so confused it seems stw things roll is z yaw is x pitch is y??

		// Read acceleration values from ADXL345 registers
		uint8_t buffer[6];
		HAL_I2C_Mem_Read(&hi2c2, accel_rd, 0x32, 1, buffer, 6, 10);
 80011d4:	230a      	movs	r3, #10
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2306      	movs	r3, #6
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	463b      	mov	r3, r7
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	2232      	movs	r2, #50	; 0x32
 80011e4:	21a7      	movs	r1, #167	; 0xa7
 80011e6:	4896      	ldr	r0, [pc, #600]	; (8001440 <main+0x6f0>)
 80011e8:	f002 f8ec 	bl	80033c4 <HAL_I2C_Mem_Read>
		int16_t x_acceleration = ((buffer[1] << 8) | buffer[0]);
 80011ec:	787b      	ldrb	r3, [r7, #1]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	783b      	ldrb	r3, [r7, #0]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		int16_t y_acceleration = ((buffer[3] << 8) | buffer[2]);
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b21a      	sxth	r2, r3
 8001202:	78bb      	ldrb	r3, [r7, #2]
 8001204:	b21b      	sxth	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		int16_t z_acceleration = ((buffer[5] << 8) | buffer[4]);
 800120c:	797b      	ldrb	r3, [r7, #5]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21a      	sxth	r2, r3
 8001212:	793b      	ldrb	r3, [r7, #4]
 8001214:	b21b      	sxth	r3, r3
 8001216:	4313      	orrs	r3, r2
 8001218:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50


		// I think these calcs are wrong but wait and see
		int32_t x_input = y_acceleration*y_acceleration + z_acceleration*z_acceleration;
 800121c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001220:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8001224:	fb03 f202 	mul.w	r2, r3, r2
 8001228:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800122c:	f9b7 1050 	ldrsh.w	r1, [r7, #80]	; 0x50
 8001230:	fb01 f303 	mul.w	r3, r1, r3
 8001234:	4413      	add	r3, r2
 8001236:	64fb      	str	r3, [r7, #76]	; 0x4c
		int32_t y_input = x_acceleration*x_acceleration + z_acceleration*z_acceleration;
 8001238:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800123c:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 8001240:	fb03 f202 	mul.w	r2, r3, r2
 8001244:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8001248:	f9b7 1050 	ldrsh.w	r1, [r7, #80]	; 0x50
 800124c:	fb01 f303 	mul.w	r3, r1, r3
 8001250:	4413      	add	r3, r2
 8001252:	64bb      	str	r3, [r7, #72]	; 0x48
		int32_t z_input = x_acceleration*x_acceleration + y_acceleration*y_acceleration;
 8001254:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8001258:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800125c:	fb03 f202 	mul.w	r2, r3, r2
 8001260:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001264:	f9b7 1052 	ldrsh.w	r1, [r7, #82]	; 0x52
 8001268:	fb01 f303 	mul.w	r3, r1, r3
 800126c:	4413      	add	r3, r2
 800126e:	647b      	str	r3, [r7, #68]	; 0x44
		float ax_roll = (180/3.14)*atan(y_acceleration/sqrt(y_input));
 8001270:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f955 	bl	8000524 <__aeabi_i2d>
 800127a:	4604      	mov	r4, r0
 800127c:	460d      	mov	r5, r1
 800127e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001280:	f7ff f950 	bl	8000524 <__aeabi_i2d>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	ec43 2b10 	vmov	d0, r2, r3
 800128c:	f008 fcb6 	bl	8009bfc <sqrt>
 8001290:	ec53 2b10 	vmov	r2, r3, d0
 8001294:	4620      	mov	r0, r4
 8001296:	4629      	mov	r1, r5
 8001298:	f7ff fad8 	bl	800084c <__aeabi_ddiv>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	ec43 2b17 	vmov	d7, r2, r3
 80012a4:	eeb0 0a47 	vmov.f32	s0, s14
 80012a8:	eef0 0a67 	vmov.f32	s1, s15
 80012ac:	f008 fa8c 	bl	80097c8 <atan>
 80012b0:	ec51 0b10 	vmov	r0, r1, d0
 80012b4:	a35c      	add	r3, pc, #368	; (adr r3, 8001428 <main+0x6d8>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7ff f99d 	bl	80005f8 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fc8f 	bl	8000be8 <__aeabi_d2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	643b      	str	r3, [r7, #64]	; 0x40
		float ax_pitch = (180/3.14)*atan(x_acceleration/sqrt(x_input));
 80012ce:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f926 	bl	8000524 <__aeabi_i2d>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80012de:	f7ff f921 	bl	8000524 <__aeabi_i2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	ec43 2b10 	vmov	d0, r2, r3
 80012ea:	f008 fc87 	bl	8009bfc <sqrt>
 80012ee:	ec53 2b10 	vmov	r2, r3, d0
 80012f2:	4620      	mov	r0, r4
 80012f4:	4629      	mov	r1, r5
 80012f6:	f7ff faa9 	bl	800084c <__aeabi_ddiv>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	ec43 2b17 	vmov	d7, r2, r3
 8001302:	eeb0 0a47 	vmov.f32	s0, s14
 8001306:	eef0 0a67 	vmov.f32	s1, s15
 800130a:	f008 fa5d 	bl	80097c8 <atan>
 800130e:	ec51 0b10 	vmov	r0, r1, d0
 8001312:	a345      	add	r3, pc, #276	; (adr r3, 8001428 <main+0x6d8>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff f96e 	bl	80005f8 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	f7ff fc60 	bl	8000be8 <__aeabi_d2f>
 8001328:	4603      	mov	r3, r0
 800132a:	63fb      	str	r3, [r7, #60]	; 0x3c
		float ax_yaw = (180/3.14)*atan(z_acceleration/sqrt(z_input));
 800132c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f8f7 	bl	8000524 <__aeabi_i2d>
 8001336:	4604      	mov	r4, r0
 8001338:	460d      	mov	r5, r1
 800133a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800133c:	f7ff f8f2 	bl	8000524 <__aeabi_i2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	ec43 2b10 	vmov	d0, r2, r3
 8001348:	f008 fc58 	bl	8009bfc <sqrt>
 800134c:	ec53 2b10 	vmov	r2, r3, d0
 8001350:	4620      	mov	r0, r4
 8001352:	4629      	mov	r1, r5
 8001354:	f7ff fa7a 	bl	800084c <__aeabi_ddiv>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	ec43 2b17 	vmov	d7, r2, r3
 8001360:	eeb0 0a47 	vmov.f32	s0, s14
 8001364:	eef0 0a67 	vmov.f32	s1, s15
 8001368:	f008 fa2e 	bl	80097c8 <atan>
 800136c:	ec51 0b10 	vmov	r0, r1, d0
 8001370:	a32d      	add	r3, pc, #180	; (adr r3, 8001428 <main+0x6d8>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff f93f 	bl	80005f8 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fc31 	bl	8000be8 <__aeabi_d2f>
 8001386:	4603      	mov	r3, r0
 8001388:	63bb      	str	r3, [r7, #56]	; 0x38
		float fYg = (roll_rate+86)*0.00875;
 800138a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800138e:	3356      	adds	r3, #86	; 0x56
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f8c7 	bl	8000524 <__aeabi_i2d>
 8001396:	a326      	add	r3, pc, #152	; (adr r3, 8001430 <main+0x6e0>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7ff f92c 	bl	80005f8 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4610      	mov	r0, r2
 80013a6:	4619      	mov	r1, r3
 80013a8:	f7ff fc1e 	bl	8000be8 <__aeabi_d2f>
 80013ac:	4603      	mov	r3, r0
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34


		//float fXg = (roll_rate+86)*0.00875;
		// Do some math to get distance

		float ALPHA = 0.1;
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <main+0x6f4>)
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
		 * 1. find the offset of acceleration to stablise it
		 * 2. see if can combine acceleration and velocity together to get some values for x y and z
		 * 3.
		 *  */
		// filter out information using low pass filter
		x_acc = ((float)x_acceleration+2.5) * 0.00390625 + (1.0-ALPHA)*x_acc;
 80013b4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c0:	ee17 0a90 	vmov	r0, s15
 80013c4:	f7ff f8c0 	bl	8000548 <__aeabi_f2d>
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <main+0x6f8>)
 80013ce:	f7fe ff5d 	bl	800028c <__adddf3>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <main+0x6fc>)
 80013e0:	f7ff f90a 	bl	80005f8 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4614      	mov	r4, r2
 80013ea:	461d      	mov	r5, r3
 80013ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013ee:	f7ff f8ab 	bl	8000548 <__aeabi_f2d>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	f04f 0000 	mov.w	r0, #0
 80013fa:	4915      	ldr	r1, [pc, #84]	; (8001450 <main+0x700>)
 80013fc:	f7fe ff44 	bl	8000288 <__aeabi_dsub>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4690      	mov	r8, r2
 8001406:	4699      	mov	r9, r3
 8001408:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800140c:	f7ff f89c 	bl	8000548 <__aeabi_f2d>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4640      	mov	r0, r8
 8001416:	4649      	mov	r1, r9
 8001418:	f7ff f8ee 	bl	80005f8 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	e019      	b.n	8001454 <main+0x704>
 8001420:	00000000 	.word	0x00000000
 8001424:	40000000 	.word	0x40000000
 8001428:	61d59ae7 	.word	0x61d59ae7
 800142c:	404ca994 	.word	0x404ca994
 8001430:	1eb851ec 	.word	0x1eb851ec
 8001434:	3f81eb85 	.word	0x3f81eb85
 8001438:	51eb851f 	.word	0x51eb851f
 800143c:	200008c2 	.word	0x200008c2
 8001440:	20000480 	.word	0x20000480
 8001444:	3dcccccd 	.word	0x3dcccccd
 8001448:	40040000 	.word	0x40040000
 800144c:	3f700000 	.word	0x3f700000
 8001450:	3ff00000 	.word	0x3ff00000
 8001454:	460b      	mov	r3, r1
 8001456:	4620      	mov	r0, r4
 8001458:	4629      	mov	r1, r5
 800145a:	f7fe ff17 	bl	800028c <__adddf3>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fbbf 	bl	8000be8 <__aeabi_d2f>
 800146a:	4603      	mov	r3, r0
 800146c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		y_acc = ((float)y_acceleration+1.5) * 0.00390625 + (1.0-ALPHA)*y_acc;
 8001470:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	ee17 0a90 	vmov	r0, s15
 8001480:	f7ff f862 	bl	8000548 <__aeabi_f2d>
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4bed      	ldr	r3, [pc, #948]	; (8001840 <main+0xaf0>)
 800148a:	f7fe feff 	bl	800028c <__adddf3>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	4bea      	ldr	r3, [pc, #936]	; (8001844 <main+0xaf4>)
 800149c:	f7ff f8ac 	bl	80005f8 <__aeabi_dmul>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4614      	mov	r4, r2
 80014a6:	461d      	mov	r5, r3
 80014a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014aa:	f7ff f84d 	bl	8000548 <__aeabi_f2d>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	f04f 0000 	mov.w	r0, #0
 80014b6:	49e4      	ldr	r1, [pc, #912]	; (8001848 <main+0xaf8>)
 80014b8:	f7fe fee6 	bl	8000288 <__aeabi_dsub>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4690      	mov	r8, r2
 80014c2:	4699      	mov	r9, r3
 80014c4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80014c8:	f7ff f83e 	bl	8000548 <__aeabi_f2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4640      	mov	r0, r8
 80014d2:	4649      	mov	r1, r9
 80014d4:	f7ff f890 	bl	80005f8 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4620      	mov	r0, r4
 80014de:	4629      	mov	r1, r5
 80014e0:	f7fe fed4 	bl	800028c <__adddf3>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fb7c 	bl	8000be8 <__aeabi_d2f>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		z_acc = ((float)z_acceleration+0.0987) * 0.00390625 + (1.0-ALPHA)*z_acc;
 80014f6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001502:	ee17 0a90 	vmov	r0, s15
 8001506:	f7ff f81f 	bl	8000548 <__aeabi_f2d>
 800150a:	a3c7      	add	r3, pc, #796	; (adr r3, 8001828 <main+0xad8>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7fe febc 	bl	800028c <__adddf3>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	4bc8      	ldr	r3, [pc, #800]	; (8001844 <main+0xaf4>)
 8001522:	f7ff f869 	bl	80005f8 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4614      	mov	r4, r2
 800152c:	461d      	mov	r5, r3
 800152e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001530:	f7ff f80a 	bl	8000548 <__aeabi_f2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	f04f 0000 	mov.w	r0, #0
 800153c:	49c2      	ldr	r1, [pc, #776]	; (8001848 <main+0xaf8>)
 800153e:	f7fe fea3 	bl	8000288 <__aeabi_dsub>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4690      	mov	r8, r2
 8001548:	4699      	mov	r9, r3
 800154a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800154e:	f7fe fffb 	bl	8000548 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4640      	mov	r0, r8
 8001558:	4649      	mov	r1, r9
 800155a:	f7ff f84d 	bl	80005f8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7fe fe91 	bl	800028c <__adddf3>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb39 	bl	8000be8 <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		float a_roll = (180/3.14)*atan(y_acc/sqrt(x_acc*x_acc+z_acc*z_acc));
 800157c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001580:	f7fe ffe2 	bl	8000548 <__aeabi_f2d>
 8001584:	4604      	mov	r4, r0
 8001586:	460d      	mov	r5, r1
 8001588:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800158c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001590:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001594:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159c:	ee17 0a90 	vmov	r0, s15
 80015a0:	f7fe ffd2 	bl	8000548 <__aeabi_f2d>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	ec43 2b10 	vmov	d0, r2, r3
 80015ac:	f008 fb26 	bl	8009bfc <sqrt>
 80015b0:	ec53 2b10 	vmov	r2, r3, d0
 80015b4:	4620      	mov	r0, r4
 80015b6:	4629      	mov	r1, r5
 80015b8:	f7ff f948 	bl	800084c <__aeabi_ddiv>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	ec43 2b17 	vmov	d7, r2, r3
 80015c4:	eeb0 0a47 	vmov.f32	s0, s14
 80015c8:	eef0 0a67 	vmov.f32	s1, s15
 80015cc:	f008 f8fc 	bl	80097c8 <atan>
 80015d0:	ec51 0b10 	vmov	r0, r1, d0
 80015d4:	a396      	add	r3, pc, #600	; (adr r3, 8001830 <main+0xae0>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff f80d 	bl	80005f8 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f7ff faff 	bl	8000be8 <__aeabi_d2f>
 80015ea:	4603      	mov	r3, r0
 80015ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		float a_pitch = (180/3.14)*atan(x_acc/sqrt(y_acc*y_acc+z_acc*z_acc));
 80015ee:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80015f2:	f7fe ffa9 	bl	8000548 <__aeabi_f2d>
 80015f6:	4604      	mov	r4, r0
 80015f8:	460d      	mov	r5, r1
 80015fa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80015fe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001602:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001606:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800160a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160e:	ee17 0a90 	vmov	r0, s15
 8001612:	f7fe ff99 	bl	8000548 <__aeabi_f2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	ec43 2b10 	vmov	d0, r2, r3
 800161e:	f008 faed 	bl	8009bfc <sqrt>
 8001622:	ec53 2b10 	vmov	r2, r3, d0
 8001626:	4620      	mov	r0, r4
 8001628:	4629      	mov	r1, r5
 800162a:	f7ff f90f 	bl	800084c <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	ec43 2b17 	vmov	d7, r2, r3
 8001636:	eeb0 0a47 	vmov.f32	s0, s14
 800163a:	eef0 0a67 	vmov.f32	s1, s15
 800163e:	f008 f8c3 	bl	80097c8 <atan>
 8001642:	ec51 0b10 	vmov	r0, r1, d0
 8001646:	a37a      	add	r3, pc, #488	; (adr r3, 8001830 <main+0xae0>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe ffd4 	bl	80005f8 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff fac6 	bl	8000be8 <__aeabi_d2f>
 800165c:	4603      	mov	r3, r0
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
		float a_yaw = (180/3.14)*atan(z_acc/sqrt(y_acc*y_acc+x_acc*x_acc));
 8001660:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001664:	f7fe ff70 	bl	8000548 <__aeabi_f2d>
 8001668:	4604      	mov	r4, r0
 800166a:	460d      	mov	r5, r1
 800166c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001670:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001674:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001678:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800167c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001680:	ee17 0a90 	vmov	r0, s15
 8001684:	f7fe ff60 	bl	8000548 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	ec43 2b10 	vmov	d0, r2, r3
 8001690:	f008 fab4 	bl	8009bfc <sqrt>
 8001694:	ec53 2b10 	vmov	r2, r3, d0
 8001698:	4620      	mov	r0, r4
 800169a:	4629      	mov	r1, r5
 800169c:	f7ff f8d6 	bl	800084c <__aeabi_ddiv>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	ec43 2b17 	vmov	d7, r2, r3
 80016a8:	eeb0 0a47 	vmov.f32	s0, s14
 80016ac:	eef0 0a67 	vmov.f32	s1, s15
 80016b0:	f008 f88a 	bl	80097c8 <atan>
 80016b4:	ec51 0b10 	vmov	r0, r1, d0
 80016b8:	a35d      	add	r3, pc, #372	; (adr r3, 8001830 <main+0xae0>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7fe ff9b 	bl	80005f8 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff fa8d 	bl	8000be8 <__aeabi_d2f>
 80016ce:	4603      	mov	r3, r0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
		//sprintf(string_to_send, "%lf,%lf,%lf,%lf,%lf,%lf\r\n", x_acc, y_acc, z_acc, a_roll, a_pitch, a_yaw);
		//sprintf(string_to_send, "%hd,%hd,%hd\r\n", x_acceleration, y_acceleration, z_acceleration);
		// DO cals on all gryo parts..

		x_v = (pitch_rate-74)*0.00875* ALPHA + x_v * (1.0-ALPHA);
 80016d2:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 80016d6:	3b4a      	subs	r3, #74	; 0x4a
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe ff23 	bl	8000524 <__aeabi_i2d>
 80016de:	a356      	add	r3, pc, #344	; (adr r3, 8001838 <main+0xae8>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ff88 	bl	80005f8 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4614      	mov	r4, r2
 80016ee:	461d      	mov	r5, r3
 80016f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016f2:	f7fe ff29 	bl	8000548 <__aeabi_f2d>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4620      	mov	r0, r4
 80016fc:	4629      	mov	r1, r5
 80016fe:	f7fe ff7b 	bl	80005f8 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4690      	mov	r8, r2
 8001708:	4699      	mov	r9, r3
 800170a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800170e:	f7fe ff1b 	bl	8000548 <__aeabi_f2d>
 8001712:	4604      	mov	r4, r0
 8001714:	460d      	mov	r5, r1
 8001716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001718:	f7fe ff16 	bl	8000548 <__aeabi_f2d>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	f04f 0000 	mov.w	r0, #0
 8001724:	4948      	ldr	r1, [pc, #288]	; (8001848 <main+0xaf8>)
 8001726:	f7fe fdaf 	bl	8000288 <__aeabi_dsub>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f7fe ff61 	bl	80005f8 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4640      	mov	r0, r8
 800173c:	4649      	mov	r1, r9
 800173e:	f7fe fda5 	bl	800028c <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff fa4d 	bl	8000be8 <__aeabi_d2f>
 800174e:	4603      	mov	r3, r0
 8001750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		y_v = (yaw_rate+86)*0.00875* ALPHA + y_v * (1.0-ALPHA);
 8001754:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001758:	3356      	adds	r3, #86	; 0x56
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fee2 	bl	8000524 <__aeabi_i2d>
 8001760:	a335      	add	r3, pc, #212	; (adr r3, 8001838 <main+0xae8>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7fe ff47 	bl	80005f8 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4614      	mov	r4, r2
 8001770:	461d      	mov	r5, r3
 8001772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001774:	f7fe fee8 	bl	8000548 <__aeabi_f2d>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe ff3a 	bl	80005f8 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4690      	mov	r8, r2
 800178a:	4699      	mov	r9, r3
 800178c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001790:	f7fe feda 	bl	8000548 <__aeabi_f2d>
 8001794:	4604      	mov	r4, r0
 8001796:	460d      	mov	r5, r1
 8001798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800179a:	f7fe fed5 	bl	8000548 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	f04f 0000 	mov.w	r0, #0
 80017a6:	4928      	ldr	r1, [pc, #160]	; (8001848 <main+0xaf8>)
 80017a8:	f7fe fd6e 	bl	8000288 <__aeabi_dsub>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4620      	mov	r0, r4
 80017b2:	4629      	mov	r1, r5
 80017b4:	f7fe ff20 	bl	80005f8 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4640      	mov	r0, r8
 80017be:	4649      	mov	r1, r9
 80017c0:	f7fe fd64 	bl	800028c <__adddf3>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff fa0c 	bl	8000be8 <__aeabi_d2f>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		z_v = (roll_rate-100)*0.00875* ALPHA + z_v * (1.0-ALPHA);
 80017d6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80017da:	3b64      	subs	r3, #100	; 0x64
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fea1 	bl	8000524 <__aeabi_i2d>
 80017e2:	a315      	add	r3, pc, #84	; (adr r3, 8001838 <main+0xae8>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7fe ff06 	bl	80005f8 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4614      	mov	r4, r2
 80017f2:	461d      	mov	r5, r3
 80017f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017f6:	f7fe fea7 	bl	8000548 <__aeabi_f2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4620      	mov	r0, r4
 8001800:	4629      	mov	r1, r5
 8001802:	f7fe fef9 	bl	80005f8 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4690      	mov	r8, r2
 800180c:	4699      	mov	r9, r3
 800180e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001810:	f7fe fe9a 	bl	8000548 <__aeabi_f2d>
 8001814:	4604      	mov	r4, r0
 8001816:	460d      	mov	r5, r1
 8001818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800181a:	f7fe fe95 	bl	8000548 <__aeabi_f2d>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	e013      	b.n	800184c <main+0xafc>
 8001824:	f3af 8000 	nop.w
 8001828:	381d7dbf 	.word	0x381d7dbf
 800182c:	3fb94467 	.word	0x3fb94467
 8001830:	61d59ae7 	.word	0x61d59ae7
 8001834:	404ca994 	.word	0x404ca994
 8001838:	1eb851ec 	.word	0x1eb851ec
 800183c:	3f81eb85 	.word	0x3f81eb85
 8001840:	3ff80000 	.word	0x3ff80000
 8001844:	3f700000 	.word	0x3f700000
 8001848:	3ff00000 	.word	0x3ff00000
 800184c:	f04f 0000 	mov.w	r0, #0
 8001850:	496b      	ldr	r1, [pc, #428]	; (8001a00 <main+0xcb0>)
 8001852:	f7fe fd19 	bl	8000288 <__aeabi_dsub>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4620      	mov	r0, r4
 800185c:	4629      	mov	r1, r5
 800185e:	f7fe fecb 	bl	80005f8 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4640      	mov	r0, r8
 8001868:	4649      	mov	r1, r9
 800186a:	f7fe fd0f 	bl	800028c <__adddf3>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f7ff f9b7 	bl	8000be8 <__aeabi_d2f>
 800187a:	4603      	mov	r3, r0
 800187c:	67fb      	str	r3, [r7, #124]	; 0x7c
		//sprintf(string_to_send, "%hd,%hd,%hd,%lf,%lf,%lf\r\n", roll_rate, pitch_rate, yaw_rate, x_v, y_v, z_v);


		// Now do math to combines readings
		x_angle = 0.95*(x_angle + x_v*0.09) + 0.05*a_roll;
 800187e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001880:	f7fe fe62 	bl	8000548 <__aeabi_f2d>
 8001884:	4604      	mov	r4, r0
 8001886:	460d      	mov	r5, r1
 8001888:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800188c:	f7fe fe5c 	bl	8000548 <__aeabi_f2d>
 8001890:	a355      	add	r3, pc, #340	; (adr r3, 80019e8 <main+0xc98>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe feaf 	bl	80005f8 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f7fe fcf3 	bl	800028c <__adddf3>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	a350      	add	r3, pc, #320	; (adr r3, 80019f0 <main+0xca0>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe fea0 	bl	80005f8 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4614      	mov	r4, r2
 80018be:	461d      	mov	r5, r3
 80018c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018c2:	f7fe fe41 	bl	8000548 <__aeabi_f2d>
 80018c6:	a34c      	add	r3, pc, #304	; (adr r3, 80019f8 <main+0xca8>)
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	f7fe fe94 	bl	80005f8 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fcd8 	bl	800028c <__adddf3>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f7ff f980 	bl	8000be8 <__aeabi_d2f>
 80018e8:	4603      	mov	r3, r0
 80018ea:	67bb      	str	r3, [r7, #120]	; 0x78
		y_angle = 0.95*(y_angle + y_v*0.09) + 0.05*a_pitch;
 80018ec:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80018ee:	f7fe fe2b 	bl	8000548 <__aeabi_f2d>
 80018f2:	4604      	mov	r4, r0
 80018f4:	460d      	mov	r5, r1
 80018f6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80018fa:	f7fe fe25 	bl	8000548 <__aeabi_f2d>
 80018fe:	a33a      	add	r3, pc, #232	; (adr r3, 80019e8 <main+0xc98>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f7fe fe78 	bl	80005f8 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4620      	mov	r0, r4
 800190e:	4629      	mov	r1, r5
 8001910:	f7fe fcbc 	bl	800028c <__adddf3>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	a334      	add	r3, pc, #208	; (adr r3, 80019f0 <main+0xca0>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fe69 	bl	80005f8 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4614      	mov	r4, r2
 800192c:	461d      	mov	r5, r3
 800192e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001930:	f7fe fe0a 	bl	8000548 <__aeabi_f2d>
 8001934:	a330      	add	r3, pc, #192	; (adr r3, 80019f8 <main+0xca8>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe fe5d 	bl	80005f8 <__aeabi_dmul>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f7fe fca1 	bl	800028c <__adddf3>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f949 	bl	8000be8 <__aeabi_d2f>
 8001956:	4603      	mov	r3, r0
 8001958:	677b      	str	r3, [r7, #116]	; 0x74
		z_angle = 0.95*(z_angle + z_v*0.09) + 0.05*a_yaw;
 800195a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800195c:	f7fe fdf4 	bl	8000548 <__aeabi_f2d>
 8001960:	4604      	mov	r4, r0
 8001962:	460d      	mov	r5, r1
 8001964:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001966:	f7fe fdef 	bl	8000548 <__aeabi_f2d>
 800196a:	a31f      	add	r3, pc, #124	; (adr r3, 80019e8 <main+0xc98>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	f7fe fe42 	bl	80005f8 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4620      	mov	r0, r4
 800197a:	4629      	mov	r1, r5
 800197c:	f7fe fc86 	bl	800028c <__adddf3>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	a319      	add	r3, pc, #100	; (adr r3, 80019f0 <main+0xca0>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7fe fe33 	bl	80005f8 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4614      	mov	r4, r2
 8001998:	461d      	mov	r5, r3
 800199a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800199c:	f7fe fdd4 	bl	8000548 <__aeabi_f2d>
 80019a0:	a315      	add	r3, pc, #84	; (adr r3, 80019f8 <main+0xca8>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	f7fe fe27 	bl	80005f8 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4620      	mov	r0, r4
 80019b0:	4629      	mov	r1, r5
 80019b2:	f7fe fc6b 	bl	800028c <__adddf3>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f913 	bl	8000be8 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	673b      	str	r3, [r7, #112]	; 0x70
		//float angle = (y_angle + x_angle);
		//float y = y_angle - x_angle;
		//sprintf(string_to_send, "%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf\r\n", x_v, y_v, z_v, x_angle, y_angle, z_angle, angle, y);

		// Investigating magnetic rates
		sprintf(string_to_send,"%hd,%hd,%hd\r\n",x_mag, z_mag, y_mag);
 80019c6:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80019ca:	f9b7 1058 	ldrsh.w	r1, [r7, #88]	; 0x58
 80019ce:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	460b      	mov	r3, r1
 80019d6:	490b      	ldr	r1, [pc, #44]	; (8001a04 <main+0xcb4>)
 80019d8:	480b      	ldr	r0, [pc, #44]	; (8001a08 <main+0xcb8>)
 80019da:	f005 fc7d 	bl	80072d8 <siprintf>
	{
 80019de:	f7ff ba3c 	b.w	8000e5a <main+0x10a>
 80019e2:	bf00      	nop
 80019e4:	f3af 8000 	nop.w
 80019e8:	70a3d70a 	.word	0x70a3d70a
 80019ec:	3fb70a3d 	.word	0x3fb70a3d
 80019f0:	66666666 	.word	0x66666666
 80019f4:	3fee6666 	.word	0x3fee6666
 80019f8:	9999999a 	.word	0x9999999a
 80019fc:	3fa99999 	.word	0x3fa99999
 8001a00:	3ff00000 	.word	0x3ff00000
 8001a04:	0800a9b8 	.word	0x0800a9b8
 8001a08:	20000000 	.word	0x20000000

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b09e      	sub	sp, #120	; 0x78
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a16:	2228      	movs	r2, #40	; 0x28
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 ffea 	bl	80069f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a30:	463b      	mov	r3, r7
 8001a32:	223c      	movs	r2, #60	; 0x3c
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f004 ffdc 	bl	80069f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a44:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a4e:	2310      	movs	r3, #16
 8001a50:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a52:	2302      	movs	r3, #2
 8001a54:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a5a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001a5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a60:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 f9e8 	bl	8003e3c <HAL_RCC_OscConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001a72:	f000 fa1d 	bl	8001eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a76:	230f      	movs	r3, #15
 8001a78:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a90:	2101      	movs	r1, #1
 8001a92:	4618      	mov	r0, r3
 8001a94:	f003 fa10 	bl	8004eb8 <HAL_RCC_ClockConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a9e:	f000 fa07 	bl	8001eb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <SystemClock_Config+0xc8>)
 8001aa4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001aae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab8:	463b      	mov	r3, r7
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fbe2 	bl	8005284 <HAL_RCCEx_PeriphCLKConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001ac6:	f000 f9f3 	bl	8001eb0 <Error_Handler>
  }
}
 8001aca:	bf00      	nop
 8001acc:	3778      	adds	r7, #120	; 0x78
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	00021060 	.word	0x00021060

08001ad8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <MX_I2C1_Init+0x74>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <MX_I2C1_Init+0x78>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_I2C1_Init+0x74>)
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <MX_I2C1_Init+0x7c>)
 8001ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <MX_I2C1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <MX_I2C1_Init+0x74>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_I2C1_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_I2C1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_I2C1_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_I2C1_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b12:	480e      	ldr	r0, [pc, #56]	; (8001b4c <MX_I2C1_Init+0x74>)
 8001b14:	f001 fab2 	bl	800307c <HAL_I2C_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b1e:	f000 f9c7 	bl	8001eb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b22:	2100      	movs	r1, #0
 8001b24:	4809      	ldr	r0, [pc, #36]	; (8001b4c <MX_I2C1_Init+0x74>)
 8001b26:	f002 f81f 	bl	8003b68 <HAL_I2CEx_ConfigAnalogFilter>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b30:	f000 f9be 	bl	8001eb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b34:	2100      	movs	r1, #0
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <MX_I2C1_Init+0x74>)
 8001b38:	f002 f861 	bl	8003bfe <HAL_I2CEx_ConfigDigitalFilter>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f000 f9b5 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2000042c 	.word	0x2000042c
 8001b50:	40005400 	.word	0x40005400
 8001b54:	2000090e 	.word	0x2000090e

08001b58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <MX_I2C2_Init+0x74>)
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <MX_I2C2_Init+0x78>)
 8001b60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <MX_I2C2_Init+0x74>)
 8001b64:	4a1b      	ldr	r2, [pc, #108]	; (8001bd4 <MX_I2C2_Init+0x7c>)
 8001b66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <MX_I2C2_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <MX_I2C2_Init+0x74>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <MX_I2C2_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <MX_I2C2_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <MX_I2C2_Init+0x74>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_I2C2_Init+0x74>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_I2C2_Init+0x74>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b92:	480e      	ldr	r0, [pc, #56]	; (8001bcc <MX_I2C2_Init+0x74>)
 8001b94:	f001 fa72 	bl	800307c <HAL_I2C_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b9e:	f000 f987 	bl	8001eb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4809      	ldr	r0, [pc, #36]	; (8001bcc <MX_I2C2_Init+0x74>)
 8001ba6:	f001 ffdf 	bl	8003b68 <HAL_I2CEx_ConfigAnalogFilter>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001bb0:	f000 f97e 	bl	8001eb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_I2C2_Init+0x74>)
 8001bb8:	f002 f821 	bl	8003bfe <HAL_I2CEx_ConfigDigitalFilter>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001bc2:	f000 f975 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000480 	.word	0x20000480
 8001bd0:	40005800 	.word	0x40005800
 8001bd4:	2000090e 	.word	0x2000090e

08001bd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001bde:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <MX_SPI1_Init+0x78>)
 8001be0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001be4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001be8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bea:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001bf2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001bf6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c0e:	2208      	movs	r2, #8
 8001c10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c26:	2207      	movs	r2, #7
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c32:	2208      	movs	r2, #8
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_SPI1_Init+0x74>)
 8001c38:	f003 fcd4 	bl	80055e4 <HAL_SPI_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c42:	f000 f935 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200004d4 	.word	0x200004d4
 8001c50:	40013000 	.word	0x40013000

08001c54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5a:	f107 0320 	add.w	r3, r7, #32
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <MX_TIM1_Init+0xe4>)
 8001c82:	4a2e      	ldr	r2, [pc, #184]	; (8001d3c <MX_TIM1_Init+0xe8>)
 8001c84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8001c86:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <MX_TIM1_Init+0xe4>)
 8001c88:	222f      	movs	r2, #47	; 0x2f
 8001c8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <MX_TIM1_Init+0xe4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <MX_TIM1_Init+0xe4>)
 8001c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9a:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <MX_TIM1_Init+0xe4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <MX_TIM1_Init+0xe4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca6:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <MX_TIM1_Init+0xe4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cac:	4822      	ldr	r0, [pc, #136]	; (8001d38 <MX_TIM1_Init+0xe4>)
 8001cae:	f003 fd44 	bl	800573a <HAL_TIM_Base_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001cb8:	f000 f8fa 	bl	8001eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cc2:	f107 0320 	add.w	r3, r7, #32
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	481b      	ldr	r0, [pc, #108]	; (8001d38 <MX_TIM1_Init+0xe4>)
 8001cca:	f004 f9ec 	bl	80060a6 <HAL_TIM_ConfigClockSource>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001cd4:	f000 f8ec 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001cd8:	4817      	ldr	r0, [pc, #92]	; (8001d38 <MX_TIM1_Init+0xe4>)
 8001cda:	f003 fe85 	bl	80059e8 <HAL_TIM_IC_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001ce4:	f000 f8e4 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480f      	ldr	r0, [pc, #60]	; (8001d38 <MX_TIM1_Init+0xe4>)
 8001cfc:	f004 fd76 	bl	80067ec <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001d06:	f000 f8d3 	bl	8001eb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001d0a:	230a      	movs	r3, #10
 8001d0c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_TIM1_Init+0xe4>)
 8001d22:	f004 f924 	bl	8005f6e <HAL_TIM_IC_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001d2c:	f000 f8c0 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	3730      	adds	r7, #48	; 0x30
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000538 	.word	0x20000538
 8001d3c:	40012c00 	.word	0x40012c00

08001d40 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001d44:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <MX_USB_PCD_Init+0x3c>)
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <MX_USB_PCD_Init+0x40>)
 8001d48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <MX_USB_PCD_Init+0x3c>)
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <MX_USB_PCD_Init+0x3c>)
 8001d52:	2202      	movs	r2, #2
 8001d54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <MX_USB_PCD_Init+0x3c>)
 8001d58:	2202      	movs	r2, #2
 8001d5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <MX_USB_PCD_Init+0x3c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MX_USB_PCD_Init+0x3c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001d68:	4804      	ldr	r0, [pc, #16]	; (8001d7c <MX_USB_PCD_Init+0x3c>)
 8001d6a:	f001 ff94 	bl	8003c96 <HAL_PCD_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001d74:	f000 f89c 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200005d0 	.word	0x200005d0
 8001d80:	40005c00 	.word	0x40005c00

08001d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	f107 0314 	add.w	r3, r7, #20
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d9a:	4b37      	ldr	r3, [pc, #220]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	4a36      	ldr	r2, [pc, #216]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001da4:	6153      	str	r3, [r2, #20]
 8001da6:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db2:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	4a30      	ldr	r2, [pc, #192]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001db8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dbc:	6153      	str	r3, [r2, #20]
 8001dbe:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dca:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	4a2a      	ldr	r2, [pc, #168]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001dd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dd4:	6153      	str	r3, [r2, #20]
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	4a24      	ldr	r2, [pc, #144]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dec:	6153      	str	r3, [r2, #20]
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	4a1e      	ldr	r2, [pc, #120]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e04:	6153      	str	r3, [r2, #20]
 8001e06:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <MX_GPIO_Init+0xf4>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001e12:	2200      	movs	r2, #0
 8001e14:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001e18:	4818      	ldr	r0, [pc, #96]	; (8001e7c <MX_GPIO_Init+0xf8>)
 8001e1a:	f001 f917 	bl	800304c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001e1e:	2337      	movs	r3, #55	; 0x37
 8001e20:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e22:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	4812      	ldr	r0, [pc, #72]	; (8001e7c <MX_GPIO_Init+0xf8>)
 8001e34:	f000 ff78 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001e38:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001e3c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480a      	ldr	r0, [pc, #40]	; (8001e7c <MX_GPIO_Init+0xf8>)
 8001e52:	f000 ff69 	bl	8002d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e56:	2301      	movs	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6c:	f000 ff5c 	bl	8002d28 <HAL_GPIO_Init>

}
 8001e70:	bf00      	nop
 8001e72:	3728      	adds	r7, #40	; 0x28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	48001000 	.word	0x48001000

08001e80 <PTU_callback_function>:

/* USER CODE BEGIN 4 */
void PTU_callback_function(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	static uint8_t count = 0;
	if(count == 0){
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <PTU_callback_function+0x24>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d106      	bne.n	8001e9a <PTU_callback_function+0x1a>
		//setup_transmission(string_to_send, &USART1_PORT);
		count++;
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <PTU_callback_function+0x24>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <PTU_callback_function+0x24>)
 8001e96:	701a      	strb	r2, [r3, #0]
		return;
 8001e98:	e003      	b.n	8001ea2 <PTU_callback_function+0x22>
//		return;
//	}

//	LedRegister *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
//	led_register->led_groups.led_pair_1 ^= 0b10;
	setup_transmission(string_to_send, &USART1_PORT);
 8001e9a:	4903      	ldr	r1, [pc, #12]	; (8001ea8 <PTU_callback_function+0x28>)
 8001e9c:	4803      	ldr	r0, [pc, #12]	; (8001eac <PTU_callback_function+0x2c>)
 8001e9e:	f000 f9f9 	bl	8002294 <setup_transmission>
	// usart1_tx_push(string_to_send);
	// when called enable interrupts
	//enable_USART_interrupts(&USART1_PORT);
	// uint8_t *test = "new wtf hty\r\n";

}
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200008c4 	.word	0x200008c4
 8001ea8:	200001f4 	.word	0x200001f4
 8001eac:	20000000 	.word	0x20000000

08001eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
}
 8001eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <Error_Handler+0x8>
	...

08001ebc <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b0d4      	sub	sp, #336	; 0x150
 8001ec0:	af04      	add	r7, sp, #16
 8001ec2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001ec6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001eca:	6018      	str	r0, [r3, #0]

	  /* USER CODE BEGIN 1 */
		uint8_t i2cBuf[2];
		uint8_t accdata[6];
		uint16_t x,y,z;
		uint8_t reg1a = 0x00;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
		uint8_t reg2a = 0x00;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
		uint8_t reg4a = 0x00;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	  uint8_t ctrl1 = 0x00, ctrl4 = 0x00;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 313d 	strb.w	r3, [r7, #317]	; 0x13d

	  HAL_StatusTypeDef return_value = 0x00;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
	  i2cBuf[0]=0x21;
	  i2cBuf[1]=0x38;
	  HAL_I2C_Master_Transmit(&hi2c1, gyro_wr, i2cBuf, 2, 10);
	*/
	  // bit0 = X bit1 = Y bit2 = Z bit 3 = PD = power down
	  uint8_t reg_1 = 0b00001111;
 8001ef0:	230f      	movs	r3, #15
 8001ef2:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	  // Enable x, y, z and turn off power down:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 8001ef6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001efa:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8001efe:	230a      	movs	r3, #10
 8001f00:	9302      	str	r3, [sp, #8]
 8001f02:	2301      	movs	r3, #1
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	f207 1321 	addw	r3, r7, #289	; 0x121
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	2220      	movs	r2, #32
 8001f10:	21d2      	movs	r1, #210	; 0xd2
 8001f12:	6800      	ldr	r0, [r0, #0]
 8001f14:	f001 f942 	bl	800319c <HAL_I2C_Mem_Write>


	  uint8_t reg_2 = 0b00000000;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
	  // HPF = high_pass filter
	  // If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 8001f1e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f22:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8001f26:	230a      	movs	r3, #10
 8001f28:	9302      	str	r3, [sp, #8]
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2301      	movs	r3, #1
 8001f36:	2221      	movs	r2, #33	; 0x21
 8001f38:	21d2      	movs	r1, #210	; 0xd2
 8001f3a:	6800      	ldr	r0, [r0, #0]
 8001f3c:	f001 f92e 	bl	800319c <HAL_I2C_Mem_Write>

	  // interrupt enabled everyhting else in reg 3 disabled
	  // Configure CTRL_REG3 to generate data ready interrupt on INT2
	  // No interrupts used on INT1, if you'd like to configure INT1
	  // or INT2 otherwise, consult the datasheet:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 8001f40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f44:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8001f48:	230a      	movs	r3, #10
 8001f4a:	9302      	str	r3, [sp, #8]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2301      	movs	r3, #1
 8001f58:	2222      	movs	r2, #34	; 0x22
 8001f5a:	21d2      	movs	r1, #210	; 0xd2
 8001f5c:	6800      	ldr	r0, [r0, #0]
 8001f5e:	f001 f91d 	bl	800319c <HAL_I2C_Mem_Write>

	  uint8_t reg_4 = 0b00000000;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  // CTRL_REG4 controls the full-scale range, among other things:
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG4, 1, &reg_4, 1, 10);
 8001f68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f6c:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8001f70:	230a      	movs	r3, #10
 8001f72:	9302      	str	r3, [sp, #8]
 8001f74:	2301      	movs	r3, #1
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	f207 131f 	addw	r3, r7, #287	; 0x11f
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2301      	movs	r3, #1
 8001f80:	2223      	movs	r2, #35	; 0x23
 8001f82:	21d2      	movs	r1, #210	; 0xd2
 8001f84:	6800      	ldr	r0, [r0, #0]
 8001f86:	f001 f909 	bl	800319c <HAL_I2C_Mem_Write>
	  //writeRegister(gyro_Address, gyro_CTRL_REG4, 0b00110000);
	  //}

	  // CTRL_REG5 controls high-pass filtering of outputs, use it
	  // if you'd like:
	  uint8_t reg_5 = 0b00000000;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
	  HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG5, 1, &reg_5, 1, 10);
 8001f90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001f94:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8001f98:	230a      	movs	r3, #10
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	f507 738f 	add.w	r3, r7, #286	; 0x11e
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	2224      	movs	r2, #36	; 0x24
 8001faa:	21d2      	movs	r1, #210	; 0xd2
 8001fac:	6800      	ldr	r0, [r0, #0]
 8001fae:	f001 f8f5 	bl	800319c <HAL_I2C_Mem_Write>




	  //trying to read from the same registers where we wrote in
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x20,1,&reg1a,1,10);
 8001fb2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001fb6:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8001fba:	230a      	movs	r3, #10
 8001fbc:	9302      	str	r3, [sp, #8]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	f207 1323 	addw	r3, r7, #291	; 0x123
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	2220      	movs	r2, #32
 8001fcc:	21d3      	movs	r1, #211	; 0xd3
 8001fce:	6800      	ldr	r0, [r0, #0]
 8001fd0:	f001 f9f8 	bl	80033c4 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(i2c,gyro_rd,0x21,1,&reg2a,1,10);
 8001fd4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001fd8:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8001fdc:	230a      	movs	r3, #10
 8001fde:	9302      	str	r3, [sp, #8]
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	f507 7391 	add.w	r3, r7, #290	; 0x122
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	2221      	movs	r2, #33	; 0x21
 8001fee:	21d3      	movs	r1, #211	; 0xd3
 8001ff0:	6800      	ldr	r0, [r0, #0]
 8001ff2:	f001 f9e7 	bl	80033c4 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c1,ACC_I2C_ADDRESS_READ,0x23,1,&reg4a,1,10);

	*/

	//uint8_t status = 0x00;
	uint8_t ready = 0x00;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	uint8_t return_status = 0x00;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a

	uint8_t val_1[2];
	uint16_t* val_1p = &val_1[0];
 8002002:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002006:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	val_1p = 0x00;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	uint8_t text_buffer[255];

	uint16_t val_2 = 0x00;
 8002010:	2300      	movs	r3, #0
 8002012:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
	uint16_t val_3 = 0x00;
 8002016:	2300      	movs	r3, #0
 8002018:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

	uint8_t Text[] = "Hello\r\n";
 800201c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002024:	4a4d      	ldr	r2, [pc, #308]	; (800215c <initialise_ptu_i2c+0x2a0>)
 8002026:	e892 0003 	ldmia.w	r2, {r0, r1}
 800202a:	e883 0003 	stmia.w	r3, {r0, r1}
//	BSP_LED_Toggle(LED_GREEN);
	//BSP_GYRO_Init();
	//BSP_ACCELERO_Init();

	// reset lidar board
	uint8_t reset_value = 0x00;
 800202e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002032:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 800203a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800203e:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8002042:	230a      	movs	r3, #10
 8002044:	9302      	str	r3, [sp, #8]
 8002046:	2301      	movs	r3, #1
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	f107 0313 	add.w	r3, r7, #19
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2301      	movs	r3, #1
 8002052:	2200      	movs	r2, #0
 8002054:	21c4      	movs	r1, #196	; 0xc4
 8002056:	6800      	ldr	r0, [r0, #0]
 8002058:	f001 f8a0 	bl	800319c <HAL_I2C_Mem_Write>
 800205c:	4603      	mov	r3, r0
 800205e:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c




	// Turn on measurements in power register
	uint8_t areg_1 = 0b00001000;
 8002062:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002066:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800206a:	2208      	movs	r2, #8
 800206c:	701a      	strb	r2, [r3, #0]
	// Enable x, y, z and turn off power down:
	HAL_I2C_Mem_Write(i2c, accel_wr, ADXL345_POWER_CTL, 1, &areg_1, 1, 10);
 800206e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002072:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8002076:	230a      	movs	r3, #10
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	2301      	movs	r3, #1
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	f107 0312 	add.w	r3, r7, #18
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2301      	movs	r3, #1
 8002086:	222d      	movs	r2, #45	; 0x2d
 8002088:	21a6      	movs	r1, #166	; 0xa6
 800208a:	6800      	ldr	r0, [r0, #0]
 800208c:	f001 f886 	bl	800319c <HAL_I2C_Mem_Write>

	// set the data register to full resolution i.e read every 4mg/LSB?
	uint8_t areg_2 = 0b00001000;
 8002090:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002094:	f2a3 132f 	subw	r3, r3, #303	; 0x12f
 8002098:	2208      	movs	r2, #8
 800209a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(i2c, accel_wr, ADXL345_DATA_FORMAT, 1, &areg_2, 1, 10);
 800209c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80020a0:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 80020a4:	230a      	movs	r3, #10
 80020a6:	9302      	str	r3, [sp, #8]
 80020a8:	2301      	movs	r3, #1
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	f107 0311 	add.w	r3, r7, #17
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	2301      	movs	r3, #1
 80020b4:	2231      	movs	r2, #49	; 0x31
 80020b6:	21a6      	movs	r1, #166	; 0xa6
 80020b8:	6800      	ldr	r0, [r0, #0]
 80020ba:	f001 f86f 	bl	800319c <HAL_I2C_Mem_Write>

	// accleration calibration
	// offset found to be 250 -8 18 note: the use of 2 compliment to send a -ve 8
	//
	uint8_t acc_offset_calibration[3] = {0x3, 0x01, 0xFE};
 80020be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80020c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020c6:	4a26      	ldr	r2, [pc, #152]	; (8002160 <initialise_ptu_i2c+0x2a4>)
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	4611      	mov	r1, r2
 80020cc:	8019      	strh	r1, [r3, #0]
 80020ce:	3302      	adds	r3, #2
 80020d0:	0c12      	lsrs	r2, r2, #16
 80020d2:	701a      	strb	r2, [r3, #0]

	// Left here in case I want to start setting the data offset registers
	HAL_I2C_Mem_Write(i2c, accel_wr, ADXL345_OFSX, 1, acc_offset_calibration, 3, 10);
 80020d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80020d8:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 80020dc:	230a      	movs	r3, #10
 80020de:	9302      	str	r3, [sp, #8]
 80020e0:	2303      	movs	r3, #3
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2301      	movs	r3, #1
 80020ec:	221e      	movs	r2, #30
 80020ee:	21a6      	movs	r1, #166	; 0xa6
 80020f0:	6800      	ldr	r0, [r0, #0]
 80020f2:	f001 f853 	bl	800319c <HAL_I2C_Mem_Write>
	//HAL_I2C_Mem_Write(i2c, accel_wr, ADXL345_OFSY, 1, acc_offset_calibration[1], 1, 10);
	//HAL_I2C_Mem_Write(i2c, accel_wr, ADXL345_OFSZ, 1, acc_offset_calibration[2], 1, 10);

	// control register A values
	uint8_t register_setting_a = 0x78;
 80020f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80020fa:	f2a3 1335 	subw	r3, r3, #309	; 0x135
 80020fe:	2278      	movs	r2, #120	; 0x78
 8002100:	701a      	strb	r2, [r3, #0]
	// control register B values
	uint8_t register_setting_b = 0xA0;
 8002102:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002106:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800210a:	22a0      	movs	r2, #160	; 0xa0
 800210c:	701a      	strb	r2, [r3, #0]


	HAL_I2C_Mem_Write(i2c, magnet_wr, 0x00, 1, &register_setting_a, 1, 100);
 800210e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002112:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8002116:	2364      	movs	r3, #100	; 0x64
 8002118:	9302      	str	r3, [sp, #8]
 800211a:	2301      	movs	r3, #1
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	f107 030b 	add.w	r3, r7, #11
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2301      	movs	r3, #1
 8002126:	2200      	movs	r2, #0
 8002128:	213c      	movs	r1, #60	; 0x3c
 800212a:	6800      	ldr	r0, [r0, #0]
 800212c:	f001 f836 	bl	800319c <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(i2c, magnet_wr, 0x01, 1, &register_setting_b, 1, 100);
 8002130:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002134:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8002138:	2364      	movs	r3, #100	; 0x64
 800213a:	9302      	str	r3, [sp, #8]
 800213c:	2301      	movs	r3, #1
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	f107 030a 	add.w	r3, r7, #10
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2301      	movs	r3, #1
 8002148:	2201      	movs	r2, #1
 800214a:	213c      	movs	r1, #60	; 0x3c
 800214c:	6800      	ldr	r0, [r0, #0]
 800214e:	f001 f825 	bl	800319c <HAL_I2C_Mem_Write>

}
 8002152:	bf00      	nop
 8002154:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	0800a9c8 	.word	0x0800a9c8
 8002160:	0800a9d0 	.word	0x0800a9d0

08002164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	db0b      	blt.n	800218e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	f003 021f 	and.w	r2, r3, #31
 800217c:	4907      	ldr	r1, [pc, #28]	; (800219c <__NVIC_EnableIRQ+0x38>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2001      	movs	r0, #1
 8002186:	fa00 f202 	lsl.w	r2, r0, r2
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100

080021a0 <SerialInitialise>:
};

void (*callback_function2)() = 0x00;

// Initialise the serial port using baudRate from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function; // Assign function pointer to run when interrupt is called.
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	63da      	str	r2, [r3, #60]	; 0x3c


	// Enable clock power, system configuration clock, and GPIOC.
	// Common to all UARTs.
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80021b2:	4b36      	ldr	r3, [pc, #216]	; (800228c <SerialInitialise+0xec>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	4a35      	ldr	r2, [pc, #212]	; (800228c <SerialInitialise+0xec>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021bc:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80021be:	4b33      	ldr	r3, [pc, #204]	; (800228c <SerialInitialise+0xec>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	4a32      	ldr	r2, [pc, #200]	; (800228c <SerialInitialise+0xec>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6193      	str	r3, [r2, #24]

	// Select & assign correct GPIO port.
	switch(serial_port->SerialPortGPIO) {
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d106      	bne.n	80021e0 <SerialInitialise+0x40>
		case SERIAL_GPIO_C:
			RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80021d2:	4b2e      	ldr	r3, [pc, #184]	; (800228c <SerialInitialise+0xec>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	4a2d      	ldr	r2, [pc, #180]	; (800228c <SerialInitialise+0xec>)
 80021d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021dc:	6153      	str	r3, [r2, #20]
			break;
 80021de:	e000      	b.n	80021e2 <SerialInitialise+0x42>
		default:
			break;
 80021e0:	bf00      	nop
	}

	// Set pin mode for GPIO port.
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80021ea:	601a      	str	r2, [r3, #0]

	// Enable high speed clock for GPIOC.
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021f4:	601a      	str	r2, [r3, #0]

	// Set alternate function to enable USART to an external pin.
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	701a      	strb	r2, [r3, #0]

	// Enable output regulation timer to control baud rate.
	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	69d9      	ldr	r1, [r3, #28]
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]

	// Set bead Rate. Only 16 bits used.
	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	617b      	str	r3, [r7, #20]


	// Baud rate calculation:
	switch(baudRate) {
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b04      	cmp	r3, #4
 8002220:	d823      	bhi.n	800226a <SerialInitialise+0xca>
 8002222:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <SerialInitialise+0x88>)
 8002224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002228:	0800223d 	.word	0x0800223d
 800222c:	08002247 	.word	0x08002247
 8002230:	08002251 	.word	0x08002251
 8002234:	08002259 	.word	0x08002259
 8002238:	08002261 	.word	0x08002261
		case BAUD_9600:
			*baud_rate_config = 840;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f44f 7252 	mov.w	r2, #840	; 0x348
 8002242:	801a      	strh	r2, [r3, #0]
			break;
 8002244:	e011      	b.n	800226a <SerialInitialise+0xca>
		case BAUD_19200:
			*baud_rate_config = 420;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800224c:	801a      	strh	r2, [r3, #0]
			break;
 800224e:	e00c      	b.n	800226a <SerialInitialise+0xca>
		case BAUD_38400:
			*baud_rate_config = 210;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	22d2      	movs	r2, #210	; 0xd2
 8002254:	801a      	strh	r2, [r3, #0]
			break;
 8002256:	e008      	b.n	800226a <SerialInitialise+0xca>
		case BAUD_57600:
			*baud_rate_config = 140;  // 57600 at 8MHz
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	228c      	movs	r2, #140	; 0x8c
 800225c:	801a      	strh	r2, [r3, #0]
			break;
 800225e:	e004      	b.n	800226a <SerialInitialise+0xca>
		case BAUD_115200:
			*baud_rate_config = 0x46*0x06;  // 115200 at 8MHz
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8002266:	801a      	strh	r2, [r3, #0]
			break;
 8002268:	bf00      	nop
	}


	// Enable serial port for tx and rx functionality.
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 8002278:	601a      	str	r2, [r3, #0]

	callback_function2 = completion_function;
 800227a:	4a05      	ldr	r2, [pc, #20]	; (8002290 <SerialInitialise+0xf0>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6013      	str	r3, [r2, #0]

	 EnableInterrupt(); // Enable interrupts for serial port.
 8002280:	f000 f86c 	bl	800235c <EnableInterrupt>
}
 8002284:	bf00      	nop
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	200008c8 	.word	0x200008c8

08002294 <setup_transmission>:

volatile static uint8_t *buffer;
static uint8_t *start;
static SerialPort *Saved_UART;

void setup_transmission(volatile uint8_t* string, SerialPort *serial_port){
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
	Saved_UART = serial_port;
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <setup_transmission+0x54>)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	6013      	str	r3, [r2, #0]
	buffer = string;
 80022a4:	4a11      	ldr	r2, [pc, #68]	; (80022ec <setup_transmission+0x58>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6013      	str	r3, [r2, #0]
	*(Saved_UART->ControlRegister1) |= USART_CR1_TXEIE;
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <setup_transmission+0x54>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <setup_transmission+0x54>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022bc:	601a      	str	r2, [r3, #0]
	*(Saved_UART->DataOutputRegister) = *buffer;
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <setup_transmission+0x58>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <setup_transmission+0x54>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	b292      	uxth	r2, r2
 80022ce:	801a      	strh	r2, [r3, #0]
	buffer++;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <setup_transmission+0x58>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3301      	adds	r3, #1
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <setup_transmission+0x58>)
 80022d8:	6013      	str	r3, [r2, #0]
	return;
 80022da:	bf00      	nop
}
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	200008d0 	.word	0x200008d0
 80022ec:	200008cc 	.word	0x200008cc

080022f0 <USART1_IRQHandler>:
	*(serial_port->DataOutputRegister) = *buffer;
	buffer++;
	return;
}

void USART1_IRQHandler(){
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
	*(Saved_UART->StatusRegister) ^= USART_ISR_TC;
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <USART1_IRQHandler+0x64>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <USART1_IRQHandler+0x64>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 8002306:	601a      	str	r2, [r3, #0]
	if(*buffer){
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <USART1_IRQHandler+0x68>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00e      	beq.n	8002332 <USART1_IRQHandler+0x42>
		*(Saved_UART->DataOutputRegister) = *buffer;
 8002314:	4b10      	ldr	r3, [pc, #64]	; (8002358 <USART1_IRQHandler+0x68>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <USART1_IRQHandler+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	b292      	uxth	r2, r2
 8002324:	801a      	strh	r2, [r3, #0]
		buffer++;
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <USART1_IRQHandler+0x68>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3301      	adds	r3, #1
 800232c:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <USART1_IRQHandler+0x68>)
 800232e:	6013      	str	r3, [r2, #0]
		return;
 8002330:	e00c      	b.n	800234c <USART1_IRQHandler+0x5c>
	}
	*(Saved_UART->ControlRegister1) ^= USART_CR1_TXEIE;
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <USART1_IRQHandler+0x64>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <USART1_IRQHandler+0x64>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8002344:	601a      	str	r2, [r3, #0]
	buffer = 0x00;
 8002346:	4b04      	ldr	r3, [pc, #16]	; (8002358 <USART1_IRQHandler+0x68>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
}
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	200008d0 	.word	0x200008d0
 8002358:	200008cc 	.word	0x200008cc

0800235c <EnableInterrupt>:
//	}



// Enable interrupts for USART1 rx functionality.
void EnableInterrupt() {
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop

	__disable_irq(); // Disable the interrupts while editing settings.

	// Enable the system configuration controller (SYSCFG in RCC).
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002364:	4b0e      	ldr	r3, [pc, #56]	; (80023a0 <EnableInterrupt+0x44>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	4a0d      	ldr	r2, [pc, #52]	; (80023a0 <EnableInterrupt+0x44>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6193      	str	r3, [r2, #24]

	//////USART1->CR1 |= USART_CR1_RXNEIE; // Enable RXNE (Receive Data Register Not Empty) interrupt.

    // Configure EXTI line for USART1.
    SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR2_EXTI5_Msk; // Clear EXTI5, remove previous settings.
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <EnableInterrupt+0x48>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <EnableInterrupt+0x48>)
 8002376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800237a:	60d3      	str	r3, [r2, #12]
    SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PA; // Set EXTI5 bits to PA for  (USART1)
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <EnableInterrupt+0x48>)
 800237e:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <EnableInterrupt+0x48>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	60d3      	str	r3, [r2, #12]

    // Enable EXTI5 interrupt (corresponding to USART1).
    EXTI->IMR |= EXTI_IMR_MR5; // Enable interrupt on EXTI line 5 (corresponding to PA5/USART1).
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <EnableInterrupt+0x4c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <EnableInterrupt+0x4c>)
 800238a:	f043 0320 	orr.w	r3, r3, #32
 800238e:	6013      	str	r3, [r2, #0]

	// Tell the NVIC module that EXTI0 interrupts should be handled.
	// NVIC_SetPriority(USART1_IRQn, 3); // Set priority to 5, fairly low.
	NVIC_EnableIRQ(USART1_IRQn);
 8002390:	2025      	movs	r0, #37	; 0x25
 8002392:	f7ff fee7 	bl	8002164 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002396:	b662      	cpsie	i
}
 8002398:	bf00      	nop

	__enable_irq(); // Re-enable all interrupts now that we are finished editing settings.
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40010000 	.word	0x40010000
 80023a8:	40010400 	.word	0x40010400

080023ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <HAL_MspInit+0x44>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	4a0e      	ldr	r2, [pc, #56]	; (80023f0 <HAL_MspInit+0x44>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6193      	str	r3, [r2, #24]
 80023be:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <HAL_MspInit+0x44>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	607b      	str	r3, [r7, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_MspInit+0x44>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <HAL_MspInit+0x44>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d4:	61d3      	str	r3, [r2, #28]
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_MspInit+0x44>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023e2:	2007      	movs	r0, #7
 80023e4:	f000 fc5e 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000

080023f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	; 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2f      	ldr	r2, [pc, #188]	; (80024d0 <HAL_I2C_MspInit+0xdc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d128      	bne.n	8002468 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <HAL_I2C_MspInit+0xe0>)
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	4a2e      	ldr	r2, [pc, #184]	; (80024d4 <HAL_I2C_MspInit+0xe0>)
 800241c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002420:	6153      	str	r3, [r2, #20]
 8002422:	4b2c      	ldr	r3, [pc, #176]	; (80024d4 <HAL_I2C_MspInit+0xe0>)
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800242e:	23c0      	movs	r3, #192	; 0xc0
 8002430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002432:	2312      	movs	r3, #18
 8002434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002436:	2301      	movs	r3, #1
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800243e:	2304      	movs	r3, #4
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002442:	f107 031c 	add.w	r3, r7, #28
 8002446:	4619      	mov	r1, r3
 8002448:	4823      	ldr	r0, [pc, #140]	; (80024d8 <HAL_I2C_MspInit+0xe4>)
 800244a:	f000 fc6d 	bl	8002d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800244e:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <HAL_I2C_MspInit+0xe0>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a20      	ldr	r2, [pc, #128]	; (80024d4 <HAL_I2C_MspInit+0xe0>)
 8002454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002458:	61d3      	str	r3, [r2, #28]
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <HAL_I2C_MspInit+0xe0>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002466:	e02e      	b.n	80024c6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1b      	ldr	r2, [pc, #108]	; (80024dc <HAL_I2C_MspInit+0xe8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d129      	bne.n	80024c6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <HAL_I2C_MspInit+0xe0>)
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <HAL_I2C_MspInit+0xe0>)
 8002478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247c:	6153      	str	r3, [r2, #20]
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <HAL_I2C_MspInit+0xe0>)
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800248a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002490:	2312      	movs	r3, #18
 8002492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002494:	2301      	movs	r3, #1
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002498:	2303      	movs	r3, #3
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800249c:	2304      	movs	r3, #4
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	4619      	mov	r1, r3
 80024a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024aa:	f000 fc3d 	bl	8002d28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_I2C_MspInit+0xe0>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <HAL_I2C_MspInit+0xe0>)
 80024b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024b8:	61d3      	str	r3, [r2, #28]
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_I2C_MspInit+0xe0>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
}
 80024c6:	bf00      	nop
 80024c8:	3730      	adds	r7, #48	; 0x30
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40005400 	.word	0x40005400
 80024d4:	40021000 	.word	0x40021000
 80024d8:	48000400 	.word	0x48000400
 80024dc:	40005800 	.word	0x40005800

080024e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a17      	ldr	r2, [pc, #92]	; (800255c <HAL_SPI_MspInit+0x7c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d128      	bne.n	8002554 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <HAL_SPI_MspInit+0x80>)
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <HAL_SPI_MspInit+0x80>)
 8002508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800250c:	6193      	str	r3, [r2, #24]
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <HAL_SPI_MspInit+0x80>)
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_SPI_MspInit+0x80>)
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	4a10      	ldr	r2, [pc, #64]	; (8002560 <HAL_SPI_MspInit+0x80>)
 8002520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002524:	6153      	str	r3, [r2, #20]
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HAL_SPI_MspInit+0x80>)
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8002532:	23e0      	movs	r3, #224	; 0xe0
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002542:	2305      	movs	r3, #5
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002550:	f000 fbea 	bl	8002d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002554:	bf00      	nop
 8002556:	3728      	adds	r7, #40	; 0x28
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40013000 	.word	0x40013000
 8002560:	40021000 	.word	0x40021000

08002564 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_TIM_Base_MspInit+0x90>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d131      	bne.n	80025ea <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002586:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_TIM_Base_MspInit+0x94>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_TIM_Base_MspInit+0x94>)
 800258c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002590:	6193      	str	r3, [r2, #24]
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_TIM_Base_MspInit+0x94>)
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259e:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <HAL_TIM_Base_MspInit+0x94>)
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	4a15      	ldr	r2, [pc, #84]	; (80025f8 <HAL_TIM_Base_MspInit+0x94>)
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a8:	6153      	str	r3, [r2, #20]
 80025aa:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <HAL_TIM_Base_MspInit+0x94>)
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	2302      	movs	r3, #2
 80025be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	2300      	movs	r3, #0
 80025c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80025c8:	2306      	movs	r3, #6
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	4619      	mov	r1, r3
 80025d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d6:	f000 fba7 	bl	8002d28 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	201b      	movs	r0, #27
 80025e0:	f000 fb6b 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80025e4:	201b      	movs	r0, #27
 80025e6:	f000 fb84 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025ea:	bf00      	nop
 80025ec:	3728      	adds	r7, #40	; 0x28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a18      	ldr	r2, [pc, #96]	; (800267c <HAL_PCD_MspInit+0x80>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d129      	bne.n	8002672 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_PCD_MspInit+0x84>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	4a17      	ldr	r2, [pc, #92]	; (8002680 <HAL_PCD_MspInit+0x84>)
 8002624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002628:	6153      	str	r3, [r2, #20]
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_PCD_MspInit+0x84>)
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002636:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800263a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002644:	2303      	movs	r3, #3
 8002646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8002648:	230e      	movs	r3, #14
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4619      	mov	r1, r3
 8002652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002656:	f000 fb67 	bl	8002d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_PCD_MspInit+0x84>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4a08      	ldr	r2, [pc, #32]	; (8002680 <HAL_PCD_MspInit+0x84>)
 8002660:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002664:	61d3      	str	r3, [r2, #28]
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_PCD_MspInit+0x84>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002672:	bf00      	nop
 8002674:	3728      	adds	r7, #40	; 0x28
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40005c00 	.word	0x40005c00
 8002680:	40021000 	.word	0x40021000

08002684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <NMI_Handler+0x4>

0800268a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800268e:	e7fe      	b.n	800268e <HardFault_Handler+0x4>

08002690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002694:	e7fe      	b.n	8002694 <MemManage_Handler+0x4>

08002696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800269a:	e7fe      	b.n	800269a <BusFault_Handler+0x4>

0800269c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <UsageFault_Handler+0x4>

080026a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026d0:	f000 f9d4 	bl	8002a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <TIM1_CC_IRQHandler+0x10>)
 80026de:	f003 fb27 	bl	8005d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000538 	.word	0x20000538

080026ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <TIM2_IRQHandler+0x10>)
 80026f2:	f003 fb1d 	bl	8005d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000584 	.word	0x20000584

08002700 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
	return 1;
 8002704:	2301      	movs	r3, #1
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_kill>:

int _kill(int pid, int sig)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800271a:	f004 f941 	bl	80069a0 <__errno>
 800271e:	4603      	mov	r3, r0
 8002720:	2216      	movs	r2, #22
 8002722:	601a      	str	r2, [r3, #0]
	return -1;
 8002724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_exit>:

void _exit (int status)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ffe7 	bl	8002710 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002742:	e7fe      	b.n	8002742 <_exit+0x12>

08002744 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e00a      	b.n	800276c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002756:	f3af 8000 	nop.w
 800275a:	4601      	mov	r1, r0
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	60ba      	str	r2, [r7, #8]
 8002762:	b2ca      	uxtb	r2, r1
 8002764:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	dbf0      	blt.n	8002756 <_read+0x12>
	}

return len;
 8002774:	687b      	ldr	r3, [r7, #4]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	e009      	b.n	80027a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	60ba      	str	r2, [r7, #8]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3301      	adds	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dbf1      	blt.n	8002790 <_write+0x12>
	}
	return len;
 80027ac:	687b      	ldr	r3, [r7, #4]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <_close>:

int _close(int file)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
	return -1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027de:	605a      	str	r2, [r3, #4]
	return 0;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <_isatty>:

int _isatty(int file)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
	return 1;
 80027f6:	2301      	movs	r3, #1
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
	return 0;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <_sbrk+0x5c>)
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <_sbrk+0x60>)
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <_sbrk+0x64>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <_sbrk+0x64>)
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <_sbrk+0x68>)
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002842:	4b10      	ldr	r3, [pc, #64]	; (8002884 <_sbrk+0x64>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	429a      	cmp	r2, r3
 800284e:	d207      	bcs.n	8002860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002850:	f004 f8a6 	bl	80069a0 <__errno>
 8002854:	4603      	mov	r3, r0
 8002856:	220c      	movs	r2, #12
 8002858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800285a:	f04f 33ff 	mov.w	r3, #4294967295
 800285e:	e009      	b.n	8002874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <_sbrk+0x64>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <_sbrk+0x64>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	4a05      	ldr	r2, [pc, #20]	; (8002884 <_sbrk+0x64>)
 8002870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002872:	68fb      	ldr	r3, [r7, #12]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	2000a000 	.word	0x2000a000
 8002880:	00000400 	.word	0x00000400
 8002884:	200008d4 	.word	0x200008d4
 8002888:	200008f0 	.word	0x200008f0

0800288c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <SystemInit+0x20>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	4a05      	ldr	r2, [pc, #20]	; (80028ac <SystemInit+0x20>)
 8002898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800289c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <up_count_TIM3>:
// Function pointer set up
void (*function_pointer)() = 0x00;
void (*oneshot_function_pointer)() = 0x00;
void (*interrupt_pointer)() = 0x00;

void up_count_TIM3(uint32_t time, void (*desired_function)()){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
	// Set function pointer to given function
	interrupt_pointer = desired_function;
 80028f6:	4a07      	ldr	r2, [pc, #28]	; (8002914 <up_count_TIM3+0x28>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6013      	str	r3, [r2, #0]

	uint32_t prescaler = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]

	// Enable timer 2 in PWM mode
	config_TIM3(time, prescaler, PWM_MODE);
 8002900:	2201      	movs	r2, #1
 8002902:	68f9      	ldr	r1, [r7, #12]
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f807 	bl	8002918 <config_TIM3>

}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200008d8 	.word	0x200008d8

08002918 <config_TIM3>:

void config_TIM3(uint32_t time, uint32_t prescaler, uint32_t mode){
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002924:	b672      	cpsid	i
}
 8002926:	bf00      	nop
	__disable_irq();
	// enable the TIM3 Peripherial through the RCC registers
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <config_TIM3+0x58>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	4a10      	ldr	r2, [pc, #64]	; (8002970 <config_TIM3+0x58>)
 800292e:	f043 0304 	orr.w	r3, r3, #4
 8002932:	61d3      	str	r3, [r2, #28]

	// set the prescaler so that 1 count is 1 milisecond
	// 8MHz = 0.000000125, 1 microsecond is 0.000001,
	// prescaler 0.000001/0.000000125 = 8
	TIM4->PSC = 47999;  // timer at 48MHz/1KHz sysclock/desiredfreq
 8002934:	4b0f      	ldr	r3, [pc, #60]	; (8002974 <config_TIM3+0x5c>)
 8002936:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800293a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = time-1; // 1 second before reset
 800293c:	4a0d      	ldr	r2, [pc, #52]	; (8002974 <config_TIM3+0x5c>)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3b01      	subs	r3, #1
 8002942:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Make the TIM3 trigger an interrupt when there is an overflow
	TIM4->DIER |= TIM_DIER_UIE;// | TIM_DIER_CC1IE;
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <config_TIM3+0x5c>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <config_TIM3+0x5c>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	60d3      	str	r3, [r2, #12]

	// NVIC_SetPriority(TIM3_IRQn, 20);
	// Tell the NVIC module that timer2 interrupts should be handled
	NVIC_EnableIRQ(TIM4_IRQn); //TIM_CR1_CMS
 8002950:	201e      	movs	r0, #30
 8002952:	f7ff ffad 	bl	80028b0 <__NVIC_EnableIRQ>

	// Finally, enable the timer 3
	TIM4->CR1 |= TIM_CR1_CEN;
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <config_TIM3+0x5c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a06      	ldr	r2, [pc, #24]	; (8002974 <config_TIM3+0x5c>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002962:	b662      	cpsie	i
}
 8002964:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	40000800 	.word	0x40000800

08002978 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
	// enable interrupts on USART 1?
	interrupt_pointer();
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <TIM4_IRQHandler+0x1c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4798      	blx	r3
	//TIM3->SR &= ~TIM_SR_UIF
	TIM4->SR &= ~(TIM_SR_UIF | TIM_SR_CC1IF  | TIM_SR_CC2IF | TIM_SR_CC3IF );
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <TIM4_IRQHandler+0x20>)
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	4a04      	ldr	r2, [pc, #16]	; (8002998 <TIM4_IRQHandler+0x20>)
 8002988:	f023 030f 	bic.w	r3, r3, #15
 800298c:	6113      	str	r3, [r2, #16]
	//TIM4->SR ^= TIM4->SR;
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200008d8 	.word	0x200008d8
 8002998:	40000800 	.word	0x40000800

0800299c <Reset_Handler>:
 800299c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029d4 <LoopForever+0x2>
 80029a0:	f7ff ff74 	bl	800288c <SystemInit>
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <LoopForever+0x6>)
 80029a6:	490d      	ldr	r1, [pc, #52]	; (80029dc <LoopForever+0xa>)
 80029a8:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <LoopForever+0xe>)
 80029aa:	2300      	movs	r3, #0
 80029ac:	e002      	b.n	80029b4 <LoopCopyDataInit>

080029ae <CopyDataInit>:
 80029ae:	58d4      	ldr	r4, [r2, r3]
 80029b0:	50c4      	str	r4, [r0, r3]
 80029b2:	3304      	adds	r3, #4

080029b4 <LoopCopyDataInit>:
 80029b4:	18c4      	adds	r4, r0, r3
 80029b6:	428c      	cmp	r4, r1
 80029b8:	d3f9      	bcc.n	80029ae <CopyDataInit>
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <LoopForever+0x12>)
 80029bc:	4c0a      	ldr	r4, [pc, #40]	; (80029e8 <LoopForever+0x16>)
 80029be:	2300      	movs	r3, #0
 80029c0:	e001      	b.n	80029c6 <LoopFillZerobss>

080029c2 <FillZerobss>:
 80029c2:	6013      	str	r3, [r2, #0]
 80029c4:	3204      	adds	r2, #4

080029c6 <LoopFillZerobss>:
 80029c6:	42a2      	cmp	r2, r4
 80029c8:	d3fb      	bcc.n	80029c2 <FillZerobss>
 80029ca:	f003 ffef 	bl	80069ac <__libc_init_array>
 80029ce:	f7fe f9bf 	bl	8000d50 <main>

080029d2 <LoopForever>:
 80029d2:	e7fe      	b.n	80029d2 <LoopForever>
 80029d4:	2000a000 	.word	0x2000a000
 80029d8:	20000000 	.word	0x20000000
 80029dc:	20000410 	.word	0x20000410
 80029e0:	0800ae58 	.word	0x0800ae58
 80029e4:	20000410 	.word	0x20000410
 80029e8:	200008f0 	.word	0x200008f0

080029ec <ADC1_2_IRQHandler>:
 80029ec:	e7fe      	b.n	80029ec <ADC1_2_IRQHandler>
	...

080029f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_Init+0x28>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <HAL_Init+0x28>)
 80029fa:	f043 0310 	orr.w	r3, r3, #16
 80029fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a00:	2003      	movs	r0, #3
 8002a02:	f000 f94f 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f000 f808 	bl	8002a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a0c:	f7ff fcce 	bl	80023ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40022000 	.word	0x40022000

08002a1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_InitTick+0x54>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_InitTick+0x58>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f967 	bl	8002d0e <HAL_SYSTICK_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00e      	b.n	8002a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b0f      	cmp	r3, #15
 8002a4e:	d80a      	bhi.n	8002a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a50:	2200      	movs	r2, #0
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	f000 f92f 	bl	8002cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a5c:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <HAL_InitTick+0x5c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000234 	.word	0x20000234
 8002a74:	2000023c 	.word	0x2000023c
 8002a78:	20000238 	.word	0x20000238

08002a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_IncTick+0x20>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	2000023c 	.word	0x2000023c
 8002aa0:	200008dc 	.word	0x200008dc

08002aa4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return uwTick;  
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_GetTick+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	200008dc 	.word	0x200008dc

08002abc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7ff ffee 	bl	8002aa4 <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d005      	beq.n	8002ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <HAL_Delay+0x44>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ae2:	bf00      	nop
 8002ae4:	f7ff ffde 	bl	8002aa4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d8f7      	bhi.n	8002ae4 <HAL_Delay+0x28>
  {
  }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	2000023c 	.word	0x2000023c

08002b04 <__NVIC_SetPriorityGrouping>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b36:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60d3      	str	r3, [r2, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_GetPriorityGrouping>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	; (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	; (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	; (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	; 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf28      	it	cs
 8002c16:	2304      	movcs	r3, #4
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b03      	subs	r3, #3
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
         );
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	; 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c70:	d301      	bcc.n	8002c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00f      	b.n	8002c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <SysTick_Config+0x40>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7e:	210f      	movs	r1, #15
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	f7ff ff8e 	bl	8002ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <SysTick_Config+0x40>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <SysTick_Config+0x40>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff29 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ccc:	f7ff ff3e 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	f7ff ff8e 	bl	8002bf8 <NVIC_EncodePriority>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff5d 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002cea:	bf00      	nop
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff31 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffa2 	bl	8002c60 <SysTick_Config>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d36:	e154      	b.n	8002fe2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8146 	beq.w	8002fdc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d005      	beq.n	8002d68 <HAL_GPIO_Init+0x40>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d130      	bne.n	8002dca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d9e:	2201      	movs	r2, #1
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 0201 	and.w	r2, r3, #1
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d017      	beq.n	8002e06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	2203      	movs	r2, #3
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4013      	ands	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d123      	bne.n	8002e5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	08da      	lsrs	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3208      	adds	r2, #8
 8002e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	08da      	lsrs	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3208      	adds	r2, #8
 8002e54:	6939      	ldr	r1, [r7, #16]
 8002e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	2203      	movs	r2, #3
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0203 	and.w	r2, r3, #3
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80a0 	beq.w	8002fdc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9c:	4b58      	ldr	r3, [pc, #352]	; (8003000 <HAL_GPIO_Init+0x2d8>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4a57      	ldr	r2, [pc, #348]	; (8003000 <HAL_GPIO_Init+0x2d8>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6193      	str	r3, [r2, #24]
 8002ea8:	4b55      	ldr	r3, [pc, #340]	; (8003000 <HAL_GPIO_Init+0x2d8>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002eb4:	4a53      	ldr	r2, [pc, #332]	; (8003004 <HAL_GPIO_Init+0x2dc>)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	3302      	adds	r3, #2
 8002ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	220f      	movs	r2, #15
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ede:	d019      	beq.n	8002f14 <HAL_GPIO_Init+0x1ec>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a49      	ldr	r2, [pc, #292]	; (8003008 <HAL_GPIO_Init+0x2e0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d013      	beq.n	8002f10 <HAL_GPIO_Init+0x1e8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a48      	ldr	r2, [pc, #288]	; (800300c <HAL_GPIO_Init+0x2e4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00d      	beq.n	8002f0c <HAL_GPIO_Init+0x1e4>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a47      	ldr	r2, [pc, #284]	; (8003010 <HAL_GPIO_Init+0x2e8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d007      	beq.n	8002f08 <HAL_GPIO_Init+0x1e0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a46      	ldr	r2, [pc, #280]	; (8003014 <HAL_GPIO_Init+0x2ec>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <HAL_GPIO_Init+0x1dc>
 8002f00:	2304      	movs	r3, #4
 8002f02:	e008      	b.n	8002f16 <HAL_GPIO_Init+0x1ee>
 8002f04:	2305      	movs	r3, #5
 8002f06:	e006      	b.n	8002f16 <HAL_GPIO_Init+0x1ee>
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e004      	b.n	8002f16 <HAL_GPIO_Init+0x1ee>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e002      	b.n	8002f16 <HAL_GPIO_Init+0x1ee>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_GPIO_Init+0x1ee>
 8002f14:	2300      	movs	r3, #0
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	f002 0203 	and.w	r2, r2, #3
 8002f1c:	0092      	lsls	r2, r2, #2
 8002f1e:	4093      	lsls	r3, r2
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f26:	4937      	ldr	r1, [pc, #220]	; (8003004 <HAL_GPIO_Init+0x2dc>)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	089b      	lsrs	r3, r3, #2
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f34:	4b38      	ldr	r3, [pc, #224]	; (8003018 <HAL_GPIO_Init+0x2f0>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4013      	ands	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f58:	4a2f      	ldr	r2, [pc, #188]	; (8003018 <HAL_GPIO_Init+0x2f0>)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f5e:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <HAL_GPIO_Init+0x2f0>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f82:	4a25      	ldr	r2, [pc, #148]	; (8003018 <HAL_GPIO_Init+0x2f0>)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f88:	4b23      	ldr	r3, [pc, #140]	; (8003018 <HAL_GPIO_Init+0x2f0>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fac:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <HAL_GPIO_Init+0x2f0>)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fb2:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_GPIO_Init+0x2f0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fd6:	4a10      	ldr	r2, [pc, #64]	; (8003018 <HAL_GPIO_Init+0x2f0>)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f47f aea3 	bne.w	8002d38 <HAL_GPIO_Init+0x10>
  }
}
 8002ff2:	bf00      	nop
 8002ff4:	bf00      	nop
 8002ff6:	371c      	adds	r7, #28
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	40021000 	.word	0x40021000
 8003004:	40010000 	.word	0x40010000
 8003008:	48000400 	.word	0x48000400
 800300c:	48000800 	.word	0x48000800
 8003010:	48000c00 	.word	0x48000c00
 8003014:	48001000 	.word	0x48001000
 8003018:	40010400 	.word	0x40010400

0800301c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	887b      	ldrh	r3, [r7, #2]
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
 8003038:	e001      	b.n	800303e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800303e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	807b      	strh	r3, [r7, #2]
 8003058:	4613      	mov	r3, r2
 800305a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800305c:	787b      	ldrb	r3, [r7, #1]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003062:	887a      	ldrh	r2, [r7, #2]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003068:	e002      	b.n	8003070 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e081      	b.n	8003192 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff f9a6 	bl	80023f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	; 0x24
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0201 	bic.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d107      	bne.n	80030f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	e006      	b.n	8003104 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003102:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d104      	bne.n	8003116 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003114:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003128:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003138:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69d9      	ldr	r1, [r3, #28]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1a      	ldr	r2, [r3, #32]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	4608      	mov	r0, r1
 80031a6:	4611      	mov	r1, r2
 80031a8:	461a      	mov	r2, r3
 80031aa:	4603      	mov	r3, r0
 80031ac:	817b      	strh	r3, [r7, #10]
 80031ae:	460b      	mov	r3, r1
 80031b0:	813b      	strh	r3, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b20      	cmp	r3, #32
 80031c0:	f040 80f9 	bne.w	80033b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_I2C_Mem_Write+0x34>
 80031ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0ed      	b.n	80033b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_I2C_Mem_Write+0x4e>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e0e6      	b.n	80033b8 <HAL_I2C_Mem_Write+0x21c>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031f2:	f7ff fc57 	bl	8002aa4 <HAL_GetTick>
 80031f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	2319      	movs	r3, #25
 80031fe:	2201      	movs	r2, #1
 8003200:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 fac3 	bl	8003790 <I2C_WaitOnFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0d1      	b.n	80033b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2221      	movs	r2, #33	; 0x21
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2240      	movs	r2, #64	; 0x40
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a3a      	ldr	r2, [r7, #32]
 800322e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003234:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800323c:	88f8      	ldrh	r0, [r7, #6]
 800323e:	893a      	ldrh	r2, [r7, #8]
 8003240:	8979      	ldrh	r1, [r7, #10]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	4603      	mov	r3, r0
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f9d3 	bl	80035f8 <I2C_RequestMemoryWrite>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0a9      	b.n	80033b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	2bff      	cmp	r3, #255	; 0xff
 800326c:	d90e      	bls.n	800328c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	22ff      	movs	r2, #255	; 0xff
 8003272:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003278:	b2da      	uxtb	r2, r3
 800327a:	8979      	ldrh	r1, [r7, #10]
 800327c:	2300      	movs	r3, #0
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 fc3d 	bl	8003b04 <I2C_TransferConfig>
 800328a:	e00f      	b.n	80032ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	b2da      	uxtb	r2, r3
 800329c:	8979      	ldrh	r1, [r7, #10]
 800329e:	2300      	movs	r3, #0
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fc2c 	bl	8003b04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fabc 	bl	800382e <I2C_WaitOnTXISFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e07b      	b.n	80033b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d034      	beq.n	8003364 <HAL_I2C_Mem_Write+0x1c8>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d130      	bne.n	8003364 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	2200      	movs	r2, #0
 800330a:	2180      	movs	r1, #128	; 0x80
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fa3f 	bl	8003790 <I2C_WaitOnFlagUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e04d      	b.n	80033b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	2bff      	cmp	r3, #255	; 0xff
 8003324:	d90e      	bls.n	8003344 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	22ff      	movs	r2, #255	; 0xff
 800332a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	b2da      	uxtb	r2, r3
 8003332:	8979      	ldrh	r1, [r7, #10]
 8003334:	2300      	movs	r3, #0
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fbe1 	bl	8003b04 <I2C_TransferConfig>
 8003342:	e00f      	b.n	8003364 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003352:	b2da      	uxtb	r2, r3
 8003354:	8979      	ldrh	r1, [r7, #10]
 8003356:	2300      	movs	r3, #0
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fbd0 	bl	8003b04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d19e      	bne.n	80032ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 faa2 	bl	80038bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e01a      	b.n	80033b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2220      	movs	r2, #32
 8003388:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_I2C_Mem_Write+0x224>)
 8003396:	400b      	ands	r3, r1
 8003398:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e000      	b.n	80033b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80033b6:	2302      	movs	r3, #2
  }
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	fe00e800 	.word	0xfe00e800

080033c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	4608      	mov	r0, r1
 80033ce:	4611      	mov	r1, r2
 80033d0:	461a      	mov	r2, r3
 80033d2:	4603      	mov	r3, r0
 80033d4:	817b      	strh	r3, [r7, #10]
 80033d6:	460b      	mov	r3, r1
 80033d8:	813b      	strh	r3, [r7, #8]
 80033da:	4613      	mov	r3, r2
 80033dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	f040 80fd 	bne.w	80035e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_I2C_Mem_Read+0x34>
 80033f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d105      	bne.n	8003404 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0f1      	b.n	80035e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_I2C_Mem_Read+0x4e>
 800340e:	2302      	movs	r3, #2
 8003410:	e0ea      	b.n	80035e8 <HAL_I2C_Mem_Read+0x224>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800341a:	f7ff fb43 	bl	8002aa4 <HAL_GetTick>
 800341e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2319      	movs	r3, #25
 8003426:	2201      	movs	r2, #1
 8003428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f9af 	bl	8003790 <I2C_WaitOnFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0d5      	b.n	80035e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2222      	movs	r2, #34	; 0x22
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2240      	movs	r2, #64	; 0x40
 8003448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a3a      	ldr	r2, [r7, #32]
 8003456:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800345c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003464:	88f8      	ldrh	r0, [r7, #6]
 8003466:	893a      	ldrh	r2, [r7, #8]
 8003468:	8979      	ldrh	r1, [r7, #10]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	4603      	mov	r3, r0
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f913 	bl	80036a0 <I2C_RequestMemoryRead>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0ad      	b.n	80035e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	2bff      	cmp	r3, #255	; 0xff
 8003494:	d90e      	bls.n	80034b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	22ff      	movs	r2, #255	; 0xff
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	8979      	ldrh	r1, [r7, #10]
 80034a4:	4b52      	ldr	r3, [pc, #328]	; (80035f0 <HAL_I2C_Mem_Read+0x22c>)
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fb29 	bl	8003b04 <I2C_TransferConfig>
 80034b2:	e00f      	b.n	80034d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	8979      	ldrh	r1, [r7, #10]
 80034c6:	4b4a      	ldr	r3, [pc, #296]	; (80035f0 <HAL_I2C_Mem_Read+0x22c>)
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 fb18 	bl	8003b04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	2200      	movs	r2, #0
 80034dc:	2104      	movs	r1, #4
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f956 	bl	8003790 <I2C_WaitOnFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e07c      	b.n	80035e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d034      	beq.n	8003594 <HAL_I2C_Mem_Read+0x1d0>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	2b00      	cmp	r3, #0
 8003530:	d130      	bne.n	8003594 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	2200      	movs	r2, #0
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f927 	bl	8003790 <I2C_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e04d      	b.n	80035e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	2bff      	cmp	r3, #255	; 0xff
 8003554:	d90e      	bls.n	8003574 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	22ff      	movs	r2, #255	; 0xff
 800355a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003560:	b2da      	uxtb	r2, r3
 8003562:	8979      	ldrh	r1, [r7, #10]
 8003564:	2300      	movs	r3, #0
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fac9 	bl	8003b04 <I2C_TransferConfig>
 8003572:	e00f      	b.n	8003594 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003582:	b2da      	uxtb	r2, r3
 8003584:	8979      	ldrh	r1, [r7, #10]
 8003586:	2300      	movs	r3, #0
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fab8 	bl	8003b04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d19a      	bne.n	80034d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f98a 	bl	80038bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e01a      	b.n	80035e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2220      	movs	r2, #32
 80035b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_I2C_Mem_Read+0x230>)
 80035c6:	400b      	ands	r3, r1
 80035c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e000      	b.n	80035e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80035e6:	2302      	movs	r3, #2
  }
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	80002400 	.word	0x80002400
 80035f4:	fe00e800 	.word	0xfe00e800

080035f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	4608      	mov	r0, r1
 8003602:	4611      	mov	r1, r2
 8003604:	461a      	mov	r2, r3
 8003606:	4603      	mov	r3, r0
 8003608:	817b      	strh	r3, [r7, #10]
 800360a:	460b      	mov	r3, r1
 800360c:	813b      	strh	r3, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	8979      	ldrh	r1, [r7, #10]
 8003618:	4b20      	ldr	r3, [pc, #128]	; (800369c <I2C_RequestMemoryWrite+0xa4>)
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fa6f 	bl	8003b04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	69b9      	ldr	r1, [r7, #24]
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f8ff 	bl	800382e <I2C_WaitOnTXISFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e02c      	b.n	8003694 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d105      	bne.n	800364c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003640:	893b      	ldrh	r3, [r7, #8]
 8003642:	b2da      	uxtb	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	629a      	str	r2, [r3, #40]	; 0x28
 800364a:	e015      	b.n	8003678 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800364c:	893b      	ldrh	r3, [r7, #8]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	b29b      	uxth	r3, r3
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	69b9      	ldr	r1, [r7, #24]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f8e5 	bl	800382e <I2C_WaitOnTXISFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e012      	b.n	8003694 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800366e:	893b      	ldrh	r3, [r7, #8]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2200      	movs	r2, #0
 8003680:	2180      	movs	r1, #128	; 0x80
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f884 	bl	8003790 <I2C_WaitOnFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	80002000 	.word	0x80002000

080036a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	817b      	strh	r3, [r7, #10]
 80036b2:	460b      	mov	r3, r1
 80036b4:	813b      	strh	r3, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	8979      	ldrh	r1, [r7, #10]
 80036c0:	4b20      	ldr	r3, [pc, #128]	; (8003744 <I2C_RequestMemoryRead+0xa4>)
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2300      	movs	r3, #0
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fa1c 	bl	8003b04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	69b9      	ldr	r1, [r7, #24]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f8ac 	bl	800382e <I2C_WaitOnTXISFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e02c      	b.n	800373a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d105      	bne.n	80036f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036e6:	893b      	ldrh	r3, [r7, #8]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28
 80036f0:	e015      	b.n	800371e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036f2:	893b      	ldrh	r3, [r7, #8]
 80036f4:	0a1b      	lsrs	r3, r3, #8
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	69b9      	ldr	r1, [r7, #24]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f892 	bl	800382e <I2C_WaitOnTXISFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e012      	b.n	800373a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003714:	893b      	ldrh	r3, [r7, #8]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	2200      	movs	r2, #0
 8003726:	2140      	movs	r1, #64	; 0x40
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f831 	bl	8003790 <I2C_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	80002000 	.word	0x80002000

08003748 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b02      	cmp	r3, #2
 800375c:	d103      	bne.n	8003766 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2200      	movs	r2, #0
 8003764:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	d007      	beq.n	8003784 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	619a      	str	r2, [r3, #24]
  }
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037a0:	e031      	b.n	8003806 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d02d      	beq.n	8003806 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037aa:	f7ff f97b 	bl	8002aa4 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d302      	bcc.n	80037c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d122      	bne.n	8003806 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4013      	ands	r3, r2
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d113      	bne.n	8003806 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e00f      	b.n	8003826 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699a      	ldr	r2, [r3, #24]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4013      	ands	r3, r2
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	429a      	cmp	r2, r3
 8003814:	bf0c      	ite	eq
 8003816:	2301      	moveq	r3, #1
 8003818:	2300      	movne	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	461a      	mov	r2, r3
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	429a      	cmp	r2, r3
 8003822:	d0be      	beq.n	80037a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800383a:	e033      	b.n	80038a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f87f 	bl	8003944 <I2C_IsErrorOccurred>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e031      	b.n	80038b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d025      	beq.n	80038a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003858:	f7ff f924 	bl	8002aa4 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	429a      	cmp	r2, r3
 8003866:	d302      	bcc.n	800386e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d11a      	bne.n	80038a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b02      	cmp	r3, #2
 800387a:	d013      	beq.n	80038a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e007      	b.n	80038b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d1c4      	bne.n	800383c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038c8:	e02f      	b.n	800392a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f838 	bl	8003944 <I2C_IsErrorOccurred>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e02d      	b.n	800393a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038de:	f7ff f8e1 	bl	8002aa4 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d11a      	bne.n	800392a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d013      	beq.n	800392a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f043 0220 	orr.w	r2, r3, #32
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2220      	movs	r2, #32
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e007      	b.n	800393a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b20      	cmp	r3, #32
 8003936:	d1c8      	bne.n	80038ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	; 0x28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	d068      	beq.n	8003a42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2210      	movs	r2, #16
 8003976:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003978:	e049      	b.n	8003a0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003980:	d045      	beq.n	8003a0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003982:	f7ff f88f 	bl	8002aa4 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	d302      	bcc.n	8003998 <I2C_IsErrorOccurred+0x54>
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d13a      	bne.n	8003a0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ba:	d121      	bne.n	8003a00 <I2C_IsErrorOccurred+0xbc>
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c2:	d01d      	beq.n	8003a00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d01a      	beq.n	8003a00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039da:	f7ff f863 	bl	8002aa4 <HAL_GetTick>
 80039de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039e0:	e00e      	b.n	8003a00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039e2:	f7ff f85f 	bl	8002aa4 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b19      	cmp	r3, #25
 80039ee:	d907      	bls.n	8003a00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	f043 0320 	orr.w	r3, r3, #32
 80039f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80039fe:	e006      	b.n	8003a0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d1e9      	bne.n	80039e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d003      	beq.n	8003a24 <I2C_IsErrorOccurred+0xe0>
 8003a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0aa      	beq.n	800397a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d103      	bne.n	8003a34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2220      	movs	r2, #32
 8003a32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	f043 0304 	orr.w	r3, r3, #4
 8003a3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f043 0308 	orr.w	r3, r3, #8
 8003a7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00b      	beq.n	8003ab0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	f043 0302 	orr.w	r3, r3, #2
 8003a9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01c      	beq.n	8003af2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f7ff fe45 	bl	8003748 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <I2C_IsErrorOccurred+0x1bc>)
 8003aca:	400b      	ands	r3, r1
 8003acc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3728      	adds	r7, #40	; 0x28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	fe00e800 	.word	0xfe00e800

08003b04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	607b      	str	r3, [r7, #4]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	817b      	strh	r3, [r7, #10]
 8003b12:	4613      	mov	r3, r2
 8003b14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b16:	897b      	ldrh	r3, [r7, #10]
 8003b18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b1c:	7a7b      	ldrb	r3, [r7, #9]
 8003b1e:	041b      	lsls	r3, r3, #16
 8003b20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	0d5b      	lsrs	r3, r3, #21
 8003b3e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b42:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <I2C_TransferConfig+0x60>)
 8003b44:	430b      	orrs	r3, r1
 8003b46:	43db      	mvns	r3, r3
 8003b48:	ea02 0103 	and.w	r1, r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	03ff63ff 	.word	0x03ff63ff

08003b68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d138      	bne.n	8003bf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d101      	bne.n	8003b8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e032      	b.n	8003bf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2224      	movs	r2, #36	; 0x24
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6819      	ldr	r1, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	e000      	b.n	8003bf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bf0:	2302      	movs	r3, #2
  }
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d139      	bne.n	8003c88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e033      	b.n	8003c8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2224      	movs	r2, #36	; 0x24
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0201 	bic.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c98:	b08b      	sub	sp, #44	; 0x2c
 8003c9a:	af06      	add	r7, sp, #24
 8003c9c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0c4      	b.n	8003e32 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d106      	bne.n	8003cc2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7fe fc9d 	bl	80025fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f002 fe2a 	bl	8006928 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	73fb      	strb	r3, [r7, #15]
 8003cd8:	e040      	b.n	8003d5c <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	440b      	add	r3, r1
 8003cea:	3301      	adds	r3, #1
 8003cec:	2201      	movs	r2, #1
 8003cee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	440b      	add	r3, r1
 8003d00:	7bfa      	ldrb	r2, [r7, #15]
 8003d02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	440b      	add	r3, r1
 8003d14:	3303      	adds	r3, #3
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d1a:	7bfa      	ldrb	r2, [r7, #15]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	440b      	add	r3, r1
 8003d28:	3338      	adds	r3, #56	; 0x38
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d2e:	7bfa      	ldrb	r2, [r7, #15]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	440b      	add	r3, r1
 8003d3c:	333c      	adds	r3, #60	; 0x3c
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d42:	7bfa      	ldrb	r2, [r7, #15]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	440b      	add	r3, r1
 8003d50:	3340      	adds	r3, #64	; 0x40
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
 8003d5c:	7bfa      	ldrb	r2, [r7, #15]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d3b9      	bcc.n	8003cda <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
 8003d6a:	e044      	b.n	8003df6 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d6c:	7bfa      	ldrb	r2, [r7, #15]
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	440b      	add	r3, r1
 8003d7a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d82:	7bfa      	ldrb	r2, [r7, #15]
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	440b      	add	r3, r1
 8003d90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d94:	7bfa      	ldrb	r2, [r7, #15]
 8003d96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d98:	7bfa      	ldrb	r2, [r7, #15]
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	440b      	add	r3, r1
 8003da6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003daa:	2200      	movs	r2, #0
 8003dac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dae:	7bfa      	ldrb	r2, [r7, #15]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	440b      	add	r3, r1
 8003dbc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dc4:	7bfa      	ldrb	r2, [r7, #15]
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	440b      	add	r3, r1
 8003dd2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dda:	7bfa      	ldrb	r2, [r7, #15]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	440b      	add	r3, r1
 8003de8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	3301      	adds	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d3b5      	bcc.n	8003d6c <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	687e      	ldr	r6, [r7, #4]
 8003e08:	466d      	mov	r5, sp
 8003e0a:	f106 0410 	add.w	r4, r6, #16
 8003e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	602b      	str	r3, [r5, #0]
 8003e16:	1d33      	adds	r3, r6, #4
 8003e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e1a:	6838      	ldr	r0, [r7, #0]
 8003e1c:	f002 fd9f 	bl	800695e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e4c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f001 b823 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 817d 	beq.w	8004172 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e78:	4bbc      	ldr	r3, [pc, #752]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 030c 	and.w	r3, r3, #12
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d00c      	beq.n	8003e9e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e84:	4bb9      	ldr	r3, [pc, #740]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d15c      	bne.n	8003f4a <HAL_RCC_OscConfig+0x10e>
 8003e90:	4bb6      	ldr	r3, [pc, #728]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d155      	bne.n	8003f4a <HAL_RCC_OscConfig+0x10e>
 8003e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ea2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003eaa:	fa93 f3a3 	rbit	r3, r3
 8003eae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003eb2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb6:	fab3 f383 	clz	r3, r3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d102      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x94>
 8003eca:	4ba8      	ldr	r3, [pc, #672]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	e015      	b.n	8003efc <HAL_RCC_OscConfig+0xc0>
 8003ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ed4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ee8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003eec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003ef0:	fa93 f3a3 	rbit	r3, r3
 8003ef4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003ef8:	4b9c      	ldr	r3, [pc, #624]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f00:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003f04:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003f08:	fa92 f2a2 	rbit	r2, r2
 8003f0c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003f10:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003f14:	fab2 f282 	clz	r2, r2
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	f042 0220 	orr.w	r2, r2, #32
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	f002 021f 	and.w	r2, r2, #31
 8003f24:	2101      	movs	r1, #1
 8003f26:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 811f 	beq.w	8004170 <HAL_RCC_OscConfig+0x334>
 8003f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f040 8116 	bne.w	8004170 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f000 bfaf 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5a:	d106      	bne.n	8003f6a <HAL_RCC_OscConfig+0x12e>
 8003f5c:	4b83      	ldr	r3, [pc, #524]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a82      	ldr	r2, [pc, #520]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	e036      	b.n	8003fd8 <HAL_RCC_OscConfig+0x19c>
 8003f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x158>
 8003f7a:	4b7c      	ldr	r3, [pc, #496]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a7b      	ldr	r2, [pc, #492]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b79      	ldr	r3, [pc, #484]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a78      	ldr	r2, [pc, #480]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e021      	b.n	8003fd8 <HAL_RCC_OscConfig+0x19c>
 8003f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x184>
 8003fa6:	4b71      	ldr	r3, [pc, #452]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a70      	ldr	r2, [pc, #448]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	4b6e      	ldr	r3, [pc, #440]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a6d      	ldr	r2, [pc, #436]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e00b      	b.n	8003fd8 <HAL_RCC_OscConfig+0x19c>
 8003fc0:	4b6a      	ldr	r3, [pc, #424]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a69      	ldr	r2, [pc, #420]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	4b67      	ldr	r3, [pc, #412]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a66      	ldr	r2, [pc, #408]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fd6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fd8:	4b64      	ldr	r3, [pc, #400]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	f023 020f 	bic.w	r2, r3, #15
 8003fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	495f      	ldr	r1, [pc, #380]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d059      	beq.n	80040b6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004002:	f7fe fd4f 	bl	8002aa4 <HAL_GetTick>
 8004006:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	e00a      	b.n	8004022 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800400c:	f7fe fd4a 	bl	8002aa4 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b64      	cmp	r3, #100	; 0x64
 800401a:	d902      	bls.n	8004022 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	f000 bf43 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
 8004022:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004026:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800402e:	fa93 f3a3 	rbit	r3, r3
 8004032:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004036:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403a:	fab3 f383 	clz	r3, r3
 800403e:	b2db      	uxtb	r3, r3
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	b2db      	uxtb	r3, r3
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d102      	bne.n	8004054 <HAL_RCC_OscConfig+0x218>
 800404e:	4b47      	ldr	r3, [pc, #284]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	e015      	b.n	8004080 <HAL_RCC_OscConfig+0x244>
 8004054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004058:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004060:	fa93 f3a3 	rbit	r3, r3
 8004064:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800406c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004070:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800407c:	4b3b      	ldr	r3, [pc, #236]	; (800416c <HAL_RCC_OscConfig+0x330>)
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004084:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004088:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800408c:	fa92 f2a2 	rbit	r2, r2
 8004090:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004094:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004098:	fab2 f282 	clz	r2, r2
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	f042 0220 	orr.w	r2, r2, #32
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	f002 021f 	and.w	r2, r2, #31
 80040a8:	2101      	movs	r1, #1
 80040aa:	fa01 f202 	lsl.w	r2, r1, r2
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0ab      	beq.n	800400c <HAL_RCC_OscConfig+0x1d0>
 80040b4:	e05d      	b.n	8004172 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b6:	f7fe fcf5 	bl	8002aa4 <HAL_GetTick>
 80040ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040be:	e00a      	b.n	80040d6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c0:	f7fe fcf0 	bl	8002aa4 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b64      	cmp	r3, #100	; 0x64
 80040ce:	d902      	bls.n	80040d6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	f000 bee9 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
 80040d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040da:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040de:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80040e2:	fa93 f3a3 	rbit	r3, r3
 80040e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80040ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d102      	bne.n	8004108 <HAL_RCC_OscConfig+0x2cc>
 8004102:	4b1a      	ldr	r3, [pc, #104]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	e015      	b.n	8004134 <HAL_RCC_OscConfig+0x2f8>
 8004108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800410c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004110:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800411c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004120:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004124:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004138:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800413c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004140:	fa92 f2a2 	rbit	r2, r2
 8004144:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004148:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800414c:	fab2 f282 	clz	r2, r2
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	f042 0220 	orr.w	r2, r2, #32
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	f002 021f 	and.w	r2, r2, #31
 800415c:	2101      	movs	r1, #1
 800415e:	fa01 f202 	lsl.w	r2, r1, r2
 8004162:	4013      	ands	r3, r2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ab      	bne.n	80040c0 <HAL_RCC_OscConfig+0x284>
 8004168:	e003      	b.n	8004172 <HAL_RCC_OscConfig+0x336>
 800416a:	bf00      	nop
 800416c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004176:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 817d 	beq.w	8004482 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004188:	4ba6      	ldr	r3, [pc, #664]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004194:	4ba3      	ldr	r3, [pc, #652]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 030c 	and.w	r3, r3, #12
 800419c:	2b08      	cmp	r3, #8
 800419e:	d172      	bne.n	8004286 <HAL_RCC_OscConfig+0x44a>
 80041a0:	4ba0      	ldr	r3, [pc, #640]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d16c      	bne.n	8004286 <HAL_RCC_OscConfig+0x44a>
 80041ac:	2302      	movs	r3, #2
 80041ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80041be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d102      	bne.n	80041dc <HAL_RCC_OscConfig+0x3a0>
 80041d6:	4b93      	ldr	r3, [pc, #588]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	e013      	b.n	8004204 <HAL_RCC_OscConfig+0x3c8>
 80041dc:	2302      	movs	r3, #2
 80041de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80041ee:	2302      	movs	r3, #2
 80041f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80041f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004200:	4b88      	ldr	r3, [pc, #544]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2202      	movs	r2, #2
 8004206:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800420a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800420e:	fa92 f2a2 	rbit	r2, r2
 8004212:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004216:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800421a:	fab2 f282 	clz	r2, r2
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	f042 0220 	orr.w	r2, r2, #32
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	f002 021f 	and.w	r2, r2, #31
 800422a:	2101      	movs	r1, #1
 800422c:	fa01 f202 	lsl.w	r2, r1, r2
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_RCC_OscConfig+0x410>
 8004236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d002      	beq.n	800424c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f000 be2e 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424c:	4b75      	ldr	r3, [pc, #468]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004258:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	21f8      	movs	r1, #248	; 0xf8
 8004262:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800426a:	fa91 f1a1 	rbit	r1, r1
 800426e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004272:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004276:	fab1 f181 	clz	r1, r1
 800427a:	b2c9      	uxtb	r1, r1
 800427c:	408b      	lsls	r3, r1
 800427e:	4969      	ldr	r1, [pc, #420]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 8004280:	4313      	orrs	r3, r2
 8004282:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004284:	e0fd      	b.n	8004482 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800428a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8088 	beq.w	80043a8 <HAL_RCC_OscConfig+0x56c>
 8004298:	2301      	movs	r3, #1
 800429a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80042aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042ae:	fab3 f383 	clz	r3, r3
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	461a      	mov	r2, r3
 80042c0:	2301      	movs	r3, #1
 80042c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fe fbee 	bl	8002aa4 <HAL_GetTick>
 80042c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ce:	f7fe fbe9 	bl	8002aa4 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d902      	bls.n	80042e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	f000 bde2 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
 80042e4:	2302      	movs	r3, #2
 80042e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80042f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d102      	bne.n	8004314 <HAL_RCC_OscConfig+0x4d8>
 800430e:	4b45      	ldr	r3, [pc, #276]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	e013      	b.n	800433c <HAL_RCC_OscConfig+0x500>
 8004314:	2302      	movs	r3, #2
 8004316:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004326:	2302      	movs	r3, #2
 8004328:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800432c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004330:	fa93 f3a3 	rbit	r3, r3
 8004334:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004338:	4b3a      	ldr	r3, [pc, #232]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	2202      	movs	r2, #2
 800433e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004342:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004346:	fa92 f2a2 	rbit	r2, r2
 800434a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800434e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004352:	fab2 f282 	clz	r2, r2
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	f042 0220 	orr.w	r2, r2, #32
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	f002 021f 	and.w	r2, r2, #31
 8004362:	2101      	movs	r1, #1
 8004364:	fa01 f202 	lsl.w	r2, r1, r2
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0af      	beq.n	80042ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436e:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	21f8      	movs	r1, #248	; 0xf8
 8004384:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004388:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800438c:	fa91 f1a1 	rbit	r1, r1
 8004390:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004394:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004398:	fab1 f181 	clz	r1, r1
 800439c:	b2c9      	uxtb	r1, r1
 800439e:	408b      	lsls	r3, r1
 80043a0:	4920      	ldr	r1, [pc, #128]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]
 80043a6:	e06c      	b.n	8004482 <HAL_RCC_OscConfig+0x646>
 80043a8:	2301      	movs	r3, #1
 80043aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80043b2:	fa93 f3a3 	rbit	r3, r3
 80043b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80043ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043be:	fab3 f383 	clz	r3, r3
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	461a      	mov	r2, r3
 80043d0:	2300      	movs	r3, #0
 80043d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7fe fb66 	bl	8002aa4 <HAL_GetTick>
 80043d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043dc:	e00a      	b.n	80043f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043de:	f7fe fb61 	bl	8002aa4 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d902      	bls.n	80043f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	f000 bd5a 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
 80043f4:	2302      	movs	r3, #2
 80043f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80043fe:	fa93 f3a3 	rbit	r3, r3
 8004402:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440a:	fab3 f383 	clz	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	b2db      	uxtb	r3, r3
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b01      	cmp	r3, #1
 800441c:	d104      	bne.n	8004428 <HAL_RCC_OscConfig+0x5ec>
 800441e:	4b01      	ldr	r3, [pc, #4]	; (8004424 <HAL_RCC_OscConfig+0x5e8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	e015      	b.n	8004450 <HAL_RCC_OscConfig+0x614>
 8004424:	40021000 	.word	0x40021000
 8004428:	2302      	movs	r3, #2
 800442a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004432:	fa93 f3a3 	rbit	r3, r3
 8004436:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800443a:	2302      	movs	r3, #2
 800443c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004440:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800444c:	4bc8      	ldr	r3, [pc, #800]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	2202      	movs	r2, #2
 8004452:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004456:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800445a:	fa92 f2a2 	rbit	r2, r2
 800445e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004462:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004466:	fab2 f282 	clz	r2, r2
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	f042 0220 	orr.w	r2, r2, #32
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	f002 021f 	and.w	r2, r2, #31
 8004476:	2101      	movs	r1, #1
 8004478:	fa01 f202 	lsl.w	r2, r1, r2
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1ad      	bne.n	80043de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004486:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 8110 	beq.w	80046b8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800449c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d079      	beq.n	800459c <HAL_RCC_OscConfig+0x760>
 80044a8:	2301      	movs	r3, #1
 80044aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044b2:	fa93 f3a3 	rbit	r3, r3
 80044b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80044ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044be:	fab3 f383 	clz	r3, r3
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	4bab      	ldr	r3, [pc, #684]	; (8004774 <HAL_RCC_OscConfig+0x938>)
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	461a      	mov	r2, r3
 80044ce:	2301      	movs	r3, #1
 80044d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d2:	f7fe fae7 	bl	8002aa4 <HAL_GetTick>
 80044d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044da:	e00a      	b.n	80044f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044dc:	f7fe fae2 	bl	8002aa4 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d902      	bls.n	80044f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	f000 bcdb 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
 80044f2:	2302      	movs	r3, #2
 80044f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80044fc:	fa93 f3a3 	rbit	r3, r3
 8004500:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004504:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004508:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800450c:	2202      	movs	r2, #2
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004514:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	fa93 f2a3 	rbit	r2, r3
 800451e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004530:	2202      	movs	r2, #2
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	fa93 f2a3 	rbit	r2, r3
 8004542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004546:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800454a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454c:	4b88      	ldr	r3, [pc, #544]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 800454e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004554:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004558:	2102      	movs	r1, #2
 800455a:	6019      	str	r1, [r3, #0]
 800455c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004560:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	fa93 f1a3 	rbit	r1, r3
 800456a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004572:	6019      	str	r1, [r3, #0]
  return result;
 8004574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004578:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	fab3 f383 	clz	r3, r3
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f003 031f 	and.w	r3, r3, #31
 800458e:	2101      	movs	r1, #1
 8004590:	fa01 f303 	lsl.w	r3, r1, r3
 8004594:	4013      	ands	r3, r2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0a0      	beq.n	80044dc <HAL_RCC_OscConfig+0x6a0>
 800459a:	e08d      	b.n	80046b8 <HAL_RCC_OscConfig+0x87c>
 800459c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045a4:	2201      	movs	r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	fa93 f2a3 	rbit	r2, r3
 80045b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045be:	601a      	str	r2, [r3, #0]
  return result;
 80045c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ca:	fab3 f383 	clz	r3, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	4b68      	ldr	r3, [pc, #416]	; (8004774 <HAL_RCC_OscConfig+0x938>)
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	461a      	mov	r2, r3
 80045da:	2300      	movs	r3, #0
 80045dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045de:	f7fe fa61 	bl	8002aa4 <HAL_GetTick>
 80045e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045e8:	f7fe fa5c 	bl	8002aa4 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d902      	bls.n	80045fe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	f000 bc55 	b.w	8004ea8 <HAL_RCC_OscConfig+0x106c>
 80045fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004602:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004606:	2202      	movs	r2, #2
 8004608:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800460e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	fa93 f2a3 	rbit	r2, r3
 8004618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800461c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004626:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800462a:	2202      	movs	r2, #2
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004632:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	fa93 f2a3 	rbit	r2, r3
 800463c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004640:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800464a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800464e:	2202      	movs	r2, #2
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	fa93 f2a3 	rbit	r2, r3
 8004660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004664:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004668:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800466a:	4b41      	ldr	r3, [pc, #260]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 800466c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800466e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004672:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004676:	2102      	movs	r1, #2
 8004678:	6019      	str	r1, [r3, #0]
 800467a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	fa93 f1a3 	rbit	r1, r3
 8004688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800468c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004690:	6019      	str	r1, [r3, #0]
  return result;
 8004692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004696:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	fab3 f383 	clz	r3, r3
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	2101      	movs	r1, #1
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d197      	bne.n	80045e8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 81a1 	beq.w	8004a10 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ce:	2300      	movs	r3, #0
 80046d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d4:	4b26      	ldr	r3, [pc, #152]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d116      	bne.n	800470e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e0:	4b23      	ldr	r3, [pc, #140]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	4a22      	ldr	r2, [pc, #136]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 80046e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ea:	61d3      	str	r3, [r2, #28]
 80046ec:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80046f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004702:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004706:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470e:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <HAL_RCC_OscConfig+0x93c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004716:	2b00      	cmp	r3, #0
 8004718:	d11a      	bne.n	8004750 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800471a:	4b17      	ldr	r3, [pc, #92]	; (8004778 <HAL_RCC_OscConfig+0x93c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a16      	ldr	r2, [pc, #88]	; (8004778 <HAL_RCC_OscConfig+0x93c>)
 8004720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004724:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004726:	f7fe f9bd 	bl	8002aa4 <HAL_GetTick>
 800472a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472e:	e009      	b.n	8004744 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004730:	f7fe f9b8 	bl	8002aa4 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b64      	cmp	r3, #100	; 0x64
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e3b1      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004744:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <HAL_RCC_OscConfig+0x93c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0ef      	beq.n	8004730 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004754:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d10d      	bne.n	800477c <HAL_RCC_OscConfig+0x940>
 8004760:	4b03      	ldr	r3, [pc, #12]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	4a02      	ldr	r2, [pc, #8]	; (8004770 <HAL_RCC_OscConfig+0x934>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6213      	str	r3, [r2, #32]
 800476c:	e03c      	b.n	80047e8 <HAL_RCC_OscConfig+0x9ac>
 800476e:	bf00      	nop
 8004770:	40021000 	.word	0x40021000
 8004774:	10908120 	.word	0x10908120
 8004778:	40007000 	.word	0x40007000
 800477c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004780:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10c      	bne.n	80047a6 <HAL_RCC_OscConfig+0x96a>
 800478c:	4bc1      	ldr	r3, [pc, #772]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	4ac0      	ldr	r2, [pc, #768]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	6213      	str	r3, [r2, #32]
 8004798:	4bbe      	ldr	r3, [pc, #760]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	4abd      	ldr	r2, [pc, #756]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 800479e:	f023 0304 	bic.w	r3, r3, #4
 80047a2:	6213      	str	r3, [r2, #32]
 80047a4:	e020      	b.n	80047e8 <HAL_RCC_OscConfig+0x9ac>
 80047a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2b05      	cmp	r3, #5
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCC_OscConfig+0x994>
 80047b6:	4bb7      	ldr	r3, [pc, #732]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	4ab6      	ldr	r2, [pc, #728]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047bc:	f043 0304 	orr.w	r3, r3, #4
 80047c0:	6213      	str	r3, [r2, #32]
 80047c2:	4bb4      	ldr	r3, [pc, #720]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	4ab3      	ldr	r2, [pc, #716]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	6213      	str	r3, [r2, #32]
 80047ce:	e00b      	b.n	80047e8 <HAL_RCC_OscConfig+0x9ac>
 80047d0:	4bb0      	ldr	r3, [pc, #704]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	4aaf      	ldr	r2, [pc, #700]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047d6:	f023 0301 	bic.w	r3, r3, #1
 80047da:	6213      	str	r3, [r2, #32]
 80047dc:	4bad      	ldr	r3, [pc, #692]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	4aac      	ldr	r2, [pc, #688]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80047e2:	f023 0304 	bic.w	r3, r3, #4
 80047e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 8081 	beq.w	80048fc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fa:	f7fe f953 	bl	8002aa4 <HAL_GetTick>
 80047fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004802:	e00b      	b.n	800481c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004804:	f7fe f94e 	bl	8002aa4 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f241 3288 	movw	r2, #5000	; 0x1388
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e345      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
 800481c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004820:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004824:	2202      	movs	r2, #2
 8004826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	fa93 f2a3 	rbit	r2, r3
 8004836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004844:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004848:	2202      	movs	r2, #2
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004850:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	fa93 f2a3 	rbit	r2, r3
 800485a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004862:	601a      	str	r2, [r3, #0]
  return result;
 8004864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004868:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800486c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486e:	fab3 f383 	clz	r3, r3
 8004872:	b2db      	uxtb	r3, r3
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	b2db      	uxtb	r3, r3
 8004878:	f043 0302 	orr.w	r3, r3, #2
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d102      	bne.n	8004888 <HAL_RCC_OscConfig+0xa4c>
 8004882:	4b84      	ldr	r3, [pc, #528]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	e013      	b.n	80048b0 <HAL_RCC_OscConfig+0xa74>
 8004888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004890:	2202      	movs	r2, #2
 8004892:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004898:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	fa93 f2a3 	rbit	r2, r3
 80048a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	4b79      	ldr	r3, [pc, #484]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048b4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80048b8:	2102      	movs	r1, #2
 80048ba:	6011      	str	r1, [r2, #0]
 80048bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	fa92 f1a2 	rbit	r1, r2
 80048ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048ce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80048d2:	6011      	str	r1, [r2, #0]
  return result;
 80048d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048d8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80048dc:	6812      	ldr	r2, [r2, #0]
 80048de:	fab2 f282 	clz	r2, r2
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	f002 021f 	and.w	r2, r2, #31
 80048ee:	2101      	movs	r1, #1
 80048f0:	fa01 f202 	lsl.w	r2, r1, r2
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d084      	beq.n	8004804 <HAL_RCC_OscConfig+0x9c8>
 80048fa:	e07f      	b.n	80049fc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fc:	f7fe f8d2 	bl	8002aa4 <HAL_GetTick>
 8004900:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004904:	e00b      	b.n	800491e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004906:	f7fe f8cd 	bl	8002aa4 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	; 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e2c4      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
 800491e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004922:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004926:	2202      	movs	r2, #2
 8004928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	fa93 f2a3 	rbit	r2, r3
 8004938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004946:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800494a:	2202      	movs	r2, #2
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004952:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	fa93 f2a3 	rbit	r2, r3
 800495c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004960:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004964:	601a      	str	r2, [r3, #0]
  return result;
 8004966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800496e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004970:	fab3 f383 	clz	r3, r3
 8004974:	b2db      	uxtb	r3, r3
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	b2db      	uxtb	r3, r3
 800497a:	f043 0302 	orr.w	r3, r3, #2
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d102      	bne.n	800498a <HAL_RCC_OscConfig+0xb4e>
 8004984:	4b43      	ldr	r3, [pc, #268]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	e013      	b.n	80049b2 <HAL_RCC_OscConfig+0xb76>
 800498a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800498e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004992:	2202      	movs	r2, #2
 8004994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	fa93 f2a3 	rbit	r2, r3
 80049a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	4b39      	ldr	r3, [pc, #228]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049b6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80049ba:	2102      	movs	r1, #2
 80049bc:	6011      	str	r1, [r2, #0]
 80049be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	fa92 f1a2 	rbit	r1, r2
 80049cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049d0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80049d4:	6011      	str	r1, [r2, #0]
  return result;
 80049d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049da:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	fab2 f282 	clz	r2, r2
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	f002 021f 	and.w	r2, r2, #31
 80049f0:	2101      	movs	r1, #1
 80049f2:	fa01 f202 	lsl.w	r2, r1, r2
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d184      	bne.n	8004906 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d105      	bne.n	8004a10 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a04:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	4a22      	ldr	r2, [pc, #136]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 8004a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8242 	beq.w	8004ea6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a22:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <HAL_RCC_OscConfig+0xc58>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	f000 8213 	beq.w	8004e56 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	f040 8162 	bne.w	8004d06 <HAL_RCC_OscConfig+0xeca>
 8004a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a46:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004a4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a54:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	fa93 f2a3 	rbit	r2, r3
 8004a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a62:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004a66:	601a      	str	r2, [r3, #0]
  return result;
 8004a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004a70:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a72:	fab3 f383 	clz	r3, r3
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	461a      	mov	r2, r3
 8004a84:	2300      	movs	r3, #0
 8004a86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a88:	f7fe f80c 	bl	8002aa4 <HAL_GetTick>
 8004a8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a90:	e00c      	b.n	8004aac <HAL_RCC_OscConfig+0xc70>
 8004a92:	bf00      	nop
 8004a94:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fe f804 	bl	8002aa4 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e1fd      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
 8004aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ab0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ab8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004abe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	fa93 f2a3 	rbit	r2, r3
 8004ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004acc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ad0:	601a      	str	r2, [r3, #0]
  return result;
 8004ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ada:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004adc:	fab3 f383 	clz	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d102      	bne.n	8004af6 <HAL_RCC_OscConfig+0xcba>
 8004af0:	4bb0      	ldr	r3, [pc, #704]	; (8004db4 <HAL_RCC_OscConfig+0xf78>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	e027      	b.n	8004b46 <HAL_RCC_OscConfig+0xd0a>
 8004af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004afe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	fa93 f2a3 	rbit	r2, r3
 8004b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b20:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004b24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	fa93 f2a3 	rbit	r2, r3
 8004b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	4b9c      	ldr	r3, [pc, #624]	; (8004db4 <HAL_RCC_OscConfig+0xf78>)
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b4a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004b4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004b52:	6011      	str	r1, [r2, #0]
 8004b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b58:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	fa92 f1a2 	rbit	r1, r2
 8004b62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004b6a:	6011      	str	r1, [r2, #0]
  return result;
 8004b6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b70:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	fab2 f282 	clz	r2, r2
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	f042 0220 	orr.w	r2, r2, #32
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	f002 021f 	and.w	r2, r2, #31
 8004b86:	2101      	movs	r1, #1
 8004b88:	fa01 f202 	lsl.w	r2, r1, r2
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d182      	bne.n	8004a98 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b92:	4b88      	ldr	r3, [pc, #544]	; (8004db4 <HAL_RCC_OscConfig+0xf78>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004baa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	497f      	ldr	r1, [pc, #508]	; (8004db4 <HAL_RCC_OscConfig+0xf78>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	604b      	str	r3, [r1, #4]
 8004bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bbe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004bc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bcc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	fa93 f2a3 	rbit	r2, r3
 8004bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bda:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004bde:	601a      	str	r2, [r3, #0]
  return result;
 8004be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004be8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bea:	fab3 f383 	clz	r3, r3
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c00:	f7fd ff50 	bl	8002aa4 <HAL_GetTick>
 8004c04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c08:	e009      	b.n	8004c1e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c0a:	f7fd ff4b 	bl	8002aa4 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e144      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
 8004c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c22:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004c26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c30:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	fa93 f2a3 	rbit	r2, r3
 8004c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c3e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004c42:	601a      	str	r2, [r3, #0]
  return result;
 8004c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c48:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004c4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d102      	bne.n	8004c68 <HAL_RCC_OscConfig+0xe2c>
 8004c62:	4b54      	ldr	r3, [pc, #336]	; (8004db4 <HAL_RCC_OscConfig+0xf78>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	e027      	b.n	8004cb8 <HAL_RCC_OscConfig+0xe7c>
 8004c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004c70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	fa93 f2a3 	rbit	r2, r3
 8004c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c92:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004c96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	fa93 f2a3 	rbit	r2, r3
 8004caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	4b3f      	ldr	r3, [pc, #252]	; (8004db4 <HAL_RCC_OscConfig+0xf78>)
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cbc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004cc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004cc4:	6011      	str	r1, [r2, #0]
 8004cc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	fa92 f1a2 	rbit	r1, r2
 8004cd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004cd8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004cdc:	6011      	str	r1, [r2, #0]
  return result;
 8004cde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ce2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	fab2 f282 	clz	r2, r2
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	f042 0220 	orr.w	r2, r2, #32
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	f002 021f 	and.w	r2, r2, #31
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d082      	beq.n	8004c0a <HAL_RCC_OscConfig+0xdce>
 8004d04:	e0cf      	b.n	8004ea6 <HAL_RCC_OscConfig+0x106a>
 8004d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d0a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004d0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d18:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	fa93 f2a3 	rbit	r2, r3
 8004d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d26:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004d2a:	601a      	str	r2, [r3, #0]
  return result;
 8004d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d30:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004d34:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d36:	fab3 f383 	clz	r3, r3
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	461a      	mov	r2, r3
 8004d48:	2300      	movs	r3, #0
 8004d4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4c:	f7fd feaa 	bl	8002aa4 <HAL_GetTick>
 8004d50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d54:	e009      	b.n	8004d6a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d56:	f7fd fea5 	bl	8002aa4 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e09e      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
 8004d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d6e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004d72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	fa93 f2a3 	rbit	r2, r3
 8004d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004d8e:	601a      	str	r2, [r3, #0]
  return result;
 8004d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d94:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004d98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d9a:	fab3 f383 	clz	r3, r3
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d104      	bne.n	8004db8 <HAL_RCC_OscConfig+0xf7c>
 8004dae:	4b01      	ldr	r3, [pc, #4]	; (8004db4 <HAL_RCC_OscConfig+0xf78>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	e029      	b.n	8004e08 <HAL_RCC_OscConfig+0xfcc>
 8004db4:	40021000 	.word	0x40021000
 8004db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dbc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004dc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	fa93 f2a3 	rbit	r2, r3
 8004dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004de6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004df0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	fa93 f2a3 	rbit	r2, r3
 8004dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dfe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	4b2b      	ldr	r3, [pc, #172]	; (8004eb4 <HAL_RCC_OscConfig+0x1078>)
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e0c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004e10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004e14:	6011      	str	r1, [r2, #0]
 8004e16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e1a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004e1e:	6812      	ldr	r2, [r2, #0]
 8004e20:	fa92 f1a2 	rbit	r1, r2
 8004e24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e28:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004e2c:	6011      	str	r1, [r2, #0]
  return result;
 8004e2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e32:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	fab2 f282 	clz	r2, r2
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	f042 0220 	orr.w	r2, r2, #32
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	f002 021f 	and.w	r2, r2, #31
 8004e48:	2101      	movs	r1, #1
 8004e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d180      	bne.n	8004d56 <HAL_RCC_OscConfig+0xf1a>
 8004e54:	e027      	b.n	8004ea6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e01e      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <HAL_RCC_OscConfig+0x1078>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e72:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004e76:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d10b      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004e8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004e8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d001      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40021000 	.word	0x40021000

08004eb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b09e      	sub	sp, #120	; 0x78
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e162      	b.n	8005196 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed0:	4b90      	ldr	r3, [pc, #576]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d910      	bls.n	8004f00 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ede:	4b8d      	ldr	r3, [pc, #564]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f023 0207 	bic.w	r2, r3, #7
 8004ee6:	498b      	ldr	r1, [pc, #556]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b89      	ldr	r3, [pc, #548]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e14a      	b.n	8005196 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f0c:	4b82      	ldr	r3, [pc, #520]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	497f      	ldr	r1, [pc, #508]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 80dc 	beq.w	80050e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d13c      	bne.n	8004fae <HAL_RCC_ClockConfig+0xf6>
 8004f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f3c:	fa93 f3a3 	rbit	r3, r3
 8004f40:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f44:	fab3 f383 	clz	r3, r3
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d102      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xa6>
 8004f58:	4b6f      	ldr	r3, [pc, #444]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	e00f      	b.n	8004f7e <HAL_RCC_ClockConfig+0xc6>
 8004f5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f66:	fa93 f3a3 	rbit	r3, r3
 8004f6a:	667b      	str	r3, [r7, #100]	; 0x64
 8004f6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f70:	663b      	str	r3, [r7, #96]	; 0x60
 8004f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f74:	fa93 f3a3 	rbit	r3, r3
 8004f78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f7a:	4b67      	ldr	r3, [pc, #412]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f82:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f86:	fa92 f2a2 	rbit	r2, r2
 8004f8a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004f8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f8e:	fab2 f282 	clz	r2, r2
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	f042 0220 	orr.w	r2, r2, #32
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	f002 021f 	and.w	r2, r2, #31
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d17b      	bne.n	80050a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e0f3      	b.n	8005196 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d13c      	bne.n	8005030 <HAL_RCC_ClockConfig+0x178>
 8004fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fbe:	fa93 f3a3 	rbit	r3, r3
 8004fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc6:	fab3 f383 	clz	r3, r3
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d102      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x128>
 8004fda:	4b4f      	ldr	r3, [pc, #316]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	e00f      	b.n	8005000 <HAL_RCC_ClockConfig+0x148>
 8004fe0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fe4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe8:	fa93 f3a3 	rbit	r3, r3
 8004fec:	647b      	str	r3, [r7, #68]	; 0x44
 8004fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff6:	fa93 f3a3 	rbit	r3, r3
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ffc:	4b46      	ldr	r3, [pc, #280]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005004:	63ba      	str	r2, [r7, #56]	; 0x38
 8005006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005008:	fa92 f2a2 	rbit	r2, r2
 800500c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800500e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005010:	fab2 f282 	clz	r2, r2
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	f042 0220 	orr.w	r2, r2, #32
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	f002 021f 	and.w	r2, r2, #31
 8005020:	2101      	movs	r1, #1
 8005022:	fa01 f202 	lsl.w	r2, r1, r2
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d13a      	bne.n	80050a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0b2      	b.n	8005196 <HAL_RCC_ClockConfig+0x2de>
 8005030:	2302      	movs	r3, #2
 8005032:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	fa93 f3a3 	rbit	r3, r3
 800503a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800503e:	fab3 f383 	clz	r3, r3
 8005042:	b2db      	uxtb	r3, r3
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b01      	cmp	r3, #1
 8005050:	d102      	bne.n	8005058 <HAL_RCC_ClockConfig+0x1a0>
 8005052:	4b31      	ldr	r3, [pc, #196]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	e00d      	b.n	8005074 <HAL_RCC_ClockConfig+0x1bc>
 8005058:	2302      	movs	r3, #2
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	fa93 f3a3 	rbit	r3, r3
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
 8005064:	2302      	movs	r3, #2
 8005066:	623b      	str	r3, [r7, #32]
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	fa93 f3a3 	rbit	r3, r3
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	4b29      	ldr	r3, [pc, #164]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	2202      	movs	r2, #2
 8005076:	61ba      	str	r2, [r7, #24]
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	fa92 f2a2 	rbit	r2, r2
 800507e:	617a      	str	r2, [r7, #20]
  return result;
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	fab2 f282 	clz	r2, r2
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	f042 0220 	orr.w	r2, r2, #32
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	f002 021f 	and.w	r2, r2, #31
 8005092:	2101      	movs	r1, #1
 8005094:	fa01 f202 	lsl.w	r2, r1, r2
 8005098:	4013      	ands	r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e079      	b.n	8005196 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050a2:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f023 0203 	bic.w	r2, r3, #3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	491a      	ldr	r1, [pc, #104]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050b4:	f7fd fcf6 	bl	8002aa4 <HAL_GetTick>
 80050b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050bc:	f7fd fcf2 	bl	8002aa4 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e061      	b.n	8005196 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d2:	4b11      	ldr	r3, [pc, #68]	; (8005118 <HAL_RCC_ClockConfig+0x260>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f003 020c 	and.w	r2, r3, #12
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d1eb      	bne.n	80050bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050e4:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d214      	bcs.n	800511c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f2:	4b08      	ldr	r3, [pc, #32]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f023 0207 	bic.w	r2, r3, #7
 80050fa:	4906      	ldr	r1, [pc, #24]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	4313      	orrs	r3, r2
 8005100:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005102:	4b04      	ldr	r3, [pc, #16]	; (8005114 <HAL_RCC_ClockConfig+0x25c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d005      	beq.n	800511c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e040      	b.n	8005196 <HAL_RCC_ClockConfig+0x2de>
 8005114:	40022000 	.word	0x40022000
 8005118:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005128:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <HAL_RCC_ClockConfig+0x2e8>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	491a      	ldr	r1, [pc, #104]	; (80051a0 <HAL_RCC_ClockConfig+0x2e8>)
 8005136:	4313      	orrs	r3, r2
 8005138:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005146:	4b16      	ldr	r3, [pc, #88]	; (80051a0 <HAL_RCC_ClockConfig+0x2e8>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4912      	ldr	r1, [pc, #72]	; (80051a0 <HAL_RCC_ClockConfig+0x2e8>)
 8005156:	4313      	orrs	r3, r2
 8005158:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800515a:	f000 f829 	bl	80051b0 <HAL_RCC_GetSysClockFreq>
 800515e:	4601      	mov	r1, r0
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <HAL_RCC_ClockConfig+0x2e8>)
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005168:	22f0      	movs	r2, #240	; 0xf0
 800516a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	fa92 f2a2 	rbit	r2, r2
 8005172:	60fa      	str	r2, [r7, #12]
  return result;
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	fab2 f282 	clz	r2, r2
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	40d3      	lsrs	r3, r2
 800517e:	4a09      	ldr	r2, [pc, #36]	; (80051a4 <HAL_RCC_ClockConfig+0x2ec>)
 8005180:	5cd3      	ldrb	r3, [r2, r3]
 8005182:	fa21 f303 	lsr.w	r3, r1, r3
 8005186:	4a08      	ldr	r2, [pc, #32]	; (80051a8 <HAL_RCC_ClockConfig+0x2f0>)
 8005188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800518a:	4b08      	ldr	r3, [pc, #32]	; (80051ac <HAL_RCC_ClockConfig+0x2f4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f7fd fc44 	bl	8002a1c <HAL_InitTick>
  
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3778      	adds	r7, #120	; 0x78
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40021000 	.word	0x40021000
 80051a4:	0800a9d4 	.word	0x0800a9d4
 80051a8:	20000234 	.word	0x20000234
 80051ac:	20000238 	.word	0x20000238

080051b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b08b      	sub	sp, #44	; 0x2c
 80051b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	2300      	movs	r3, #0
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	2300      	movs	r3, #0
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80051ca:	4b29      	ldr	r3, [pc, #164]	; (8005270 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f003 030c 	and.w	r3, r3, #12
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d002      	beq.n	80051e0 <HAL_RCC_GetSysClockFreq+0x30>
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d003      	beq.n	80051e6 <HAL_RCC_GetSysClockFreq+0x36>
 80051de:	e03c      	b.n	800525a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051e0:	4b24      	ldr	r3, [pc, #144]	; (8005274 <HAL_RCC_GetSysClockFreq+0xc4>)
 80051e2:	623b      	str	r3, [r7, #32]
      break;
 80051e4:	e03c      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80051ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80051f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	fa92 f2a2 	rbit	r2, r2
 80051f8:	607a      	str	r2, [r7, #4]
  return result;
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	fab2 f282 	clz	r2, r2
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	40d3      	lsrs	r3, r2
 8005204:	4a1c      	ldr	r2, [pc, #112]	; (8005278 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005206:	5cd3      	ldrb	r3, [r2, r3]
 8005208:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800520a:	4b19      	ldr	r3, [pc, #100]	; (8005270 <HAL_RCC_GetSysClockFreq+0xc0>)
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	220f      	movs	r2, #15
 8005214:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	fa92 f2a2 	rbit	r2, r2
 800521c:	60fa      	str	r2, [r7, #12]
  return result;
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	fab2 f282 	clz	r2, r2
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	40d3      	lsrs	r3, r2
 8005228:	4a14      	ldr	r2, [pc, #80]	; (800527c <HAL_RCC_GetSysClockFreq+0xcc>)
 800522a:	5cd3      	ldrb	r3, [r2, r3]
 800522c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005238:	4a0e      	ldr	r2, [pc, #56]	; (8005274 <HAL_RCC_GetSysClockFreq+0xc4>)
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	fb02 f303 	mul.w	r3, r2, r3
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
 8005248:	e004      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <HAL_RCC_GetSysClockFreq+0xd0>)
 800524e:	fb02 f303 	mul.w	r3, r2, r3
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	623b      	str	r3, [r7, #32]
      break;
 8005258:	e002      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800525a:	4b06      	ldr	r3, [pc, #24]	; (8005274 <HAL_RCC_GetSysClockFreq+0xc4>)
 800525c:	623b      	str	r3, [r7, #32]
      break;
 800525e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005260:	6a3b      	ldr	r3, [r7, #32]
}
 8005262:	4618      	mov	r0, r3
 8005264:	372c      	adds	r7, #44	; 0x2c
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	007a1200 	.word	0x007a1200
 8005278:	0800a9e4 	.word	0x0800a9e4
 800527c:	0800a9f4 	.word	0x0800a9f4
 8005280:	003d0900 	.word	0x003d0900

08005284 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b092      	sub	sp, #72	; 0x48
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80d4 	beq.w	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a8:	4b4e      	ldr	r3, [pc, #312]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10e      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b4:	4b4b      	ldr	r3, [pc, #300]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	4a4a      	ldr	r2, [pc, #296]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052be:	61d3      	str	r3, [r2, #28]
 80052c0:	4b48      	ldr	r3, [pc, #288]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c8:	60bb      	str	r3, [r7, #8]
 80052ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d2:	4b45      	ldr	r3, [pc, #276]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d118      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052de:	4b42      	ldr	r3, [pc, #264]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a41      	ldr	r2, [pc, #260]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80052e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ea:	f7fd fbdb 	bl	8002aa4 <HAL_GetTick>
 80052ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f0:	e008      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f2:	f7fd fbd7 	bl	8002aa4 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b64      	cmp	r3, #100	; 0x64
 80052fe:	d901      	bls.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e169      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005304:	4b38      	ldr	r3, [pc, #224]	; (80053e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005310:	4b34      	ldr	r3, [pc, #208]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005318:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800531a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8084 	beq.w	800542a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800532c:	429a      	cmp	r2, r3
 800532e:	d07c      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005330:	4b2c      	ldr	r3, [pc, #176]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005338:	63fb      	str	r3, [r7, #60]	; 0x3c
 800533a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800533e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005342:	fa93 f3a3 	rbit	r3, r3
 8005346:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800534a:	fab3 f383 	clz	r3, r3
 800534e:	b2db      	uxtb	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	4b26      	ldr	r3, [pc, #152]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	461a      	mov	r2, r3
 800535a:	2301      	movs	r3, #1
 800535c:	6013      	str	r3, [r2, #0]
 800535e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005362:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	fa93 f3a3 	rbit	r3, r3
 800536a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800536c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800536e:	fab3 f383 	clz	r3, r3
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	4b1d      	ldr	r3, [pc, #116]	; (80053ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	461a      	mov	r2, r3
 800537e:	2300      	movs	r3, #0
 8005380:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005382:	4a18      	ldr	r2, [pc, #96]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005386:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d04b      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005392:	f7fd fb87 	bl	8002aa4 <HAL_GetTick>
 8005396:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005398:	e00a      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800539a:	f7fd fb83 	bl	8002aa4 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e113      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80053b0:	2302      	movs	r3, #2
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	fa93 f3a3 	rbit	r3, r3
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
 80053bc:	2302      	movs	r3, #2
 80053be:	623b      	str	r3, [r7, #32]
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	fa93 f3a3 	rbit	r3, r3
 80053c6:	61fb      	str	r3, [r7, #28]
  return result;
 80053c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ca:	fab3 f383 	clz	r3, r3
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	f043 0302 	orr.w	r3, r3, #2
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d108      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80053de:	4b01      	ldr	r3, [pc, #4]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	e00d      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40007000 	.word	0x40007000
 80053ec:	10908100 	.word	0x10908100
 80053f0:	2302      	movs	r3, #2
 80053f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	fa93 f3a3 	rbit	r3, r3
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	4b78      	ldr	r3, [pc, #480]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2202      	movs	r2, #2
 8005402:	613a      	str	r2, [r7, #16]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	fa92 f2a2 	rbit	r2, r2
 800540a:	60fa      	str	r2, [r7, #12]
  return result;
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	fab2 f282 	clz	r2, r2
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	f002 021f 	and.w	r2, r2, #31
 800541e:	2101      	movs	r1, #1
 8005420:	fa01 f202 	lsl.w	r2, r1, r2
 8005424:	4013      	ands	r3, r2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0b7      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800542a:	4b6d      	ldr	r3, [pc, #436]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	496a      	ldr	r1, [pc, #424]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005438:	4313      	orrs	r3, r2
 800543a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800543c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005440:	2b01      	cmp	r3, #1
 8005442:	d105      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005444:	4b66      	ldr	r3, [pc, #408]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	4a65      	ldr	r2, [pc, #404]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800544a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800545c:	4b60      	ldr	r3, [pc, #384]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	f023 0203 	bic.w	r2, r3, #3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	495d      	ldr	r1, [pc, #372]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800546a:	4313      	orrs	r3, r2
 800546c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d008      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800547a:	4b59      	ldr	r3, [pc, #356]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	4956      	ldr	r1, [pc, #344]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005488:	4313      	orrs	r3, r2
 800548a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b00      	cmp	r3, #0
 8005496:	d008      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005498:	4b51      	ldr	r3, [pc, #324]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800549a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	494e      	ldr	r1, [pc, #312]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d008      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054b6:	4b4a      	ldr	r3, [pc, #296]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	f023 0210 	bic.w	r2, r3, #16
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	4947      	ldr	r1, [pc, #284]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80054d4:	4b42      	ldr	r3, [pc, #264]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e0:	493f      	ldr	r1, [pc, #252]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d008      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054f2:	4b3b      	ldr	r3, [pc, #236]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f6:	f023 0220 	bic.w	r2, r3, #32
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	4938      	ldr	r1, [pc, #224]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005500:	4313      	orrs	r3, r2
 8005502:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005510:	4b33      	ldr	r3, [pc, #204]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	4930      	ldr	r1, [pc, #192]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800551e:	4313      	orrs	r3, r2
 8005520:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0310 	and.w	r3, r3, #16
 800552a:	2b00      	cmp	r3, #0
 800552c:	d008      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800552e:	4b2c      	ldr	r3, [pc, #176]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	4929      	ldr	r1, [pc, #164]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800553c:	4313      	orrs	r3, r2
 800553e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005548:	2b00      	cmp	r3, #0
 800554a:	d008      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800554c:	4b24      	ldr	r3, [pc, #144]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	4921      	ldr	r1, [pc, #132]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800555a:	4313      	orrs	r3, r2
 800555c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005566:	2b00      	cmp	r3, #0
 8005568:	d008      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800556a:	4b1d      	ldr	r3, [pc, #116]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800556c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	491a      	ldr	r1, [pc, #104]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005578:	4313      	orrs	r3, r2
 800557a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005588:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005594:	4912      	ldr	r1, [pc, #72]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005596:	4313      	orrs	r3, r2
 8005598:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d008      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80055a6:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b2:	490b      	ldr	r1, [pc, #44]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80055c4:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d0:	4903      	ldr	r1, [pc, #12]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3748      	adds	r7, #72	; 0x48
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40021000 	.word	0x40021000

080055e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e09d      	b.n	8005732 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d108      	bne.n	8005610 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005606:	d009      	beq.n	800561c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	61da      	str	r2, [r3, #28]
 800560e:	e005      	b.n	800561c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7fc ff52 	bl	80024e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005652:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800565c:	d902      	bls.n	8005664 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	e002      	b.n	800566a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005668:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005672:	d007      	beq.n	8005684 <HAL_SPI_Init+0xa0>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800567c:	d002      	beq.n	8005684 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c6:	ea42 0103 	orr.w	r1, r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	0c1b      	lsrs	r3, r3, #16
 80056e0:	f003 0204 	and.w	r2, r3, #4
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005700:	ea42 0103 	orr.w	r1, r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005720:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b082      	sub	sp, #8
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e049      	b.n	80057e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	d106      	bne.n	8005766 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fc feff 	bl	8002564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2202      	movs	r2, #2
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3304      	adds	r3, #4
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f000 fdc9 	bl	8006310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d109      	bne.n	800580c <HAL_TIM_PWM_Start+0x24>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b01      	cmp	r3, #1
 8005802:	bf14      	ite	ne
 8005804:	2301      	movne	r3, #1
 8005806:	2300      	moveq	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	e03c      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b04      	cmp	r3, #4
 8005810:	d109      	bne.n	8005826 <HAL_TIM_PWM_Start+0x3e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b01      	cmp	r3, #1
 800581c:	bf14      	ite	ne
 800581e:	2301      	movne	r3, #1
 8005820:	2300      	moveq	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	e02f      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b08      	cmp	r3, #8
 800582a:	d109      	bne.n	8005840 <HAL_TIM_PWM_Start+0x58>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	e022      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b0c      	cmp	r3, #12
 8005844:	d109      	bne.n	800585a <HAL_TIM_PWM_Start+0x72>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	bf14      	ite	ne
 8005852:	2301      	movne	r3, #1
 8005854:	2300      	moveq	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	e015      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b10      	cmp	r3, #16
 800585e:	d109      	bne.n	8005874 <HAL_TIM_PWM_Start+0x8c>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	bf14      	ite	ne
 800586c:	2301      	movne	r3, #1
 800586e:	2300      	moveq	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	e008      	b.n	8005886 <HAL_TIM_PWM_Start+0x9e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	bf14      	ite	ne
 8005880:	2301      	movne	r3, #1
 8005882:	2300      	moveq	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e097      	b.n	80059be <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d104      	bne.n	800589e <HAL_TIM_PWM_Start+0xb6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800589c:	e023      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d104      	bne.n	80058ae <HAL_TIM_PWM_Start+0xc6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ac:	e01b      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d104      	bne.n	80058be <HAL_TIM_PWM_Start+0xd6>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058bc:	e013      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b0c      	cmp	r3, #12
 80058c2:	d104      	bne.n	80058ce <HAL_TIM_PWM_Start+0xe6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058cc:	e00b      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b10      	cmp	r3, #16
 80058d2:	d104      	bne.n	80058de <HAL_TIM_PWM_Start+0xf6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058dc:	e003      	b.n	80058e6 <HAL_TIM_PWM_Start+0xfe>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2201      	movs	r2, #1
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 ff56 	bl	80067a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a33      	ldr	r2, [pc, #204]	; (80059c8 <HAL_TIM_PWM_Start+0x1e0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <HAL_TIM_PWM_Start+0x13e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a32      	ldr	r2, [pc, #200]	; (80059cc <HAL_TIM_PWM_Start+0x1e4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_TIM_PWM_Start+0x13e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a30      	ldr	r2, [pc, #192]	; (80059d0 <HAL_TIM_PWM_Start+0x1e8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_TIM_PWM_Start+0x13e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a2f      	ldr	r2, [pc, #188]	; (80059d4 <HAL_TIM_PWM_Start+0x1ec>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_TIM_PWM_Start+0x13e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a2d      	ldr	r2, [pc, #180]	; (80059d8 <HAL_TIM_PWM_Start+0x1f0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d101      	bne.n	800592a <HAL_TIM_PWM_Start+0x142>
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <HAL_TIM_PWM_Start+0x144>
 800592a:	2300      	movs	r3, #0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800593e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a20      	ldr	r2, [pc, #128]	; (80059c8 <HAL_TIM_PWM_Start+0x1e0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d018      	beq.n	800597c <HAL_TIM_PWM_Start+0x194>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005952:	d013      	beq.n	800597c <HAL_TIM_PWM_Start+0x194>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a20      	ldr	r2, [pc, #128]	; (80059dc <HAL_TIM_PWM_Start+0x1f4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00e      	beq.n	800597c <HAL_TIM_PWM_Start+0x194>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1f      	ldr	r2, [pc, #124]	; (80059e0 <HAL_TIM_PWM_Start+0x1f8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d009      	beq.n	800597c <HAL_TIM_PWM_Start+0x194>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a17      	ldr	r2, [pc, #92]	; (80059cc <HAL_TIM_PWM_Start+0x1e4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d004      	beq.n	800597c <HAL_TIM_PWM_Start+0x194>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a16      	ldr	r2, [pc, #88]	; (80059d0 <HAL_TIM_PWM_Start+0x1e8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d115      	bne.n	80059a8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <HAL_TIM_PWM_Start+0x1fc>)
 8005984:	4013      	ands	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b06      	cmp	r3, #6
 800598c:	d015      	beq.n	80059ba <HAL_TIM_PWM_Start+0x1d2>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005994:	d011      	beq.n	80059ba <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a6:	e008      	b.n	80059ba <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0201 	orr.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e000      	b.n	80059bc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40012c00 	.word	0x40012c00
 80059cc:	40013400 	.word	0x40013400
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40014400 	.word	0x40014400
 80059d8:	40014800 	.word	0x40014800
 80059dc:	40000400 	.word	0x40000400
 80059e0:	40000800 	.word	0x40000800
 80059e4:	00010007 	.word	0x00010007

080059e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e049      	b.n	8005a8e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f841 	bl	8005a96 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f000 fc72 	bl	8006310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <HAL_TIM_IC_Start_IT+0x1e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	e023      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0x66>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d104      	bne.n	8005ada <HAL_TIM_IC_Start_IT+0x2e>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	e01b      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0x66>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d104      	bne.n	8005aea <HAL_TIM_IC_Start_IT+0x3e>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	e013      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0x66>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b0c      	cmp	r3, #12
 8005aee:	d104      	bne.n	8005afa <HAL_TIM_IC_Start_IT+0x4e>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	e00b      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0x66>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d104      	bne.n	8005b0a <HAL_TIM_IC_Start_IT+0x5e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	e003      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0x66>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d104      	bne.n	8005b24 <HAL_TIM_IC_Start_IT+0x78>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	e013      	b.n	8005b4c <HAL_TIM_IC_Start_IT+0xa0>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d104      	bne.n	8005b34 <HAL_TIM_IC_Start_IT+0x88>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	e00b      	b.n	8005b4c <HAL_TIM_IC_Start_IT+0xa0>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d104      	bne.n	8005b44 <HAL_TIM_IC_Start_IT+0x98>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	e003      	b.n	8005b4c <HAL_TIM_IC_Start_IT+0xa0>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b4e:	7bbb      	ldrb	r3, [r7, #14]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d102      	bne.n	8005b5a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b54:	7b7b      	ldrb	r3, [r7, #13]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d001      	beq.n	8005b5e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e0d8      	b.n	8005d10 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d104      	bne.n	8005b6e <HAL_TIM_IC_Start_IT+0xc2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b6c:	e023      	b.n	8005bb6 <HAL_TIM_IC_Start_IT+0x10a>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d104      	bne.n	8005b7e <HAL_TIM_IC_Start_IT+0xd2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b7c:	e01b      	b.n	8005bb6 <HAL_TIM_IC_Start_IT+0x10a>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d104      	bne.n	8005b8e <HAL_TIM_IC_Start_IT+0xe2>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b8c:	e013      	b.n	8005bb6 <HAL_TIM_IC_Start_IT+0x10a>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b0c      	cmp	r3, #12
 8005b92:	d104      	bne.n	8005b9e <HAL_TIM_IC_Start_IT+0xf2>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b9c:	e00b      	b.n	8005bb6 <HAL_TIM_IC_Start_IT+0x10a>
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	2b10      	cmp	r3, #16
 8005ba2:	d104      	bne.n	8005bae <HAL_TIM_IC_Start_IT+0x102>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bac:	e003      	b.n	8005bb6 <HAL_TIM_IC_Start_IT+0x10a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d104      	bne.n	8005bc6 <HAL_TIM_IC_Start_IT+0x11a>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc4:	e013      	b.n	8005bee <HAL_TIM_IC_Start_IT+0x142>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d104      	bne.n	8005bd6 <HAL_TIM_IC_Start_IT+0x12a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2202      	movs	r2, #2
 8005bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bd4:	e00b      	b.n	8005bee <HAL_TIM_IC_Start_IT+0x142>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d104      	bne.n	8005be6 <HAL_TIM_IC_Start_IT+0x13a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005be4:	e003      	b.n	8005bee <HAL_TIM_IC_Start_IT+0x142>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2202      	movs	r2, #2
 8005bea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b0c      	cmp	r3, #12
 8005bf2:	d841      	bhi.n	8005c78 <HAL_TIM_IC_Start_IT+0x1cc>
 8005bf4:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <HAL_TIM_IC_Start_IT+0x150>)
 8005bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfa:	bf00      	nop
 8005bfc:	08005c31 	.word	0x08005c31
 8005c00:	08005c79 	.word	0x08005c79
 8005c04:	08005c79 	.word	0x08005c79
 8005c08:	08005c79 	.word	0x08005c79
 8005c0c:	08005c43 	.word	0x08005c43
 8005c10:	08005c79 	.word	0x08005c79
 8005c14:	08005c79 	.word	0x08005c79
 8005c18:	08005c79 	.word	0x08005c79
 8005c1c:	08005c55 	.word	0x08005c55
 8005c20:	08005c79 	.word	0x08005c79
 8005c24:	08005c79 	.word	0x08005c79
 8005c28:	08005c79 	.word	0x08005c79
 8005c2c:	08005c67 	.word	0x08005c67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0202 	orr.w	r2, r2, #2
 8005c3e:	60da      	str	r2, [r3, #12]
      break;
 8005c40:	e01d      	b.n	8005c7e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f042 0204 	orr.w	r2, r2, #4
 8005c50:	60da      	str	r2, [r3, #12]
      break;
 8005c52:	e014      	b.n	8005c7e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0208 	orr.w	r2, r2, #8
 8005c62:	60da      	str	r2, [r3, #12]
      break;
 8005c64:	e00b      	b.n	8005c7e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0210 	orr.w	r2, r2, #16
 8005c74:	60da      	str	r2, [r3, #12]
      break;
 8005c76:	e002      	b.n	8005c7e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d144      	bne.n	8005d0e <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	6839      	ldr	r1, [r7, #0]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fd87 	bl	80067a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a20      	ldr	r2, [pc, #128]	; (8005d18 <HAL_TIM_IC_Start_IT+0x26c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d018      	beq.n	8005cce <HAL_TIM_IC_Start_IT+0x222>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca4:	d013      	beq.n	8005cce <HAL_TIM_IC_Start_IT+0x222>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1c      	ldr	r2, [pc, #112]	; (8005d1c <HAL_TIM_IC_Start_IT+0x270>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00e      	beq.n	8005cce <HAL_TIM_IC_Start_IT+0x222>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a1a      	ldr	r2, [pc, #104]	; (8005d20 <HAL_TIM_IC_Start_IT+0x274>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d009      	beq.n	8005cce <HAL_TIM_IC_Start_IT+0x222>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a19      	ldr	r2, [pc, #100]	; (8005d24 <HAL_TIM_IC_Start_IT+0x278>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d004      	beq.n	8005cce <HAL_TIM_IC_Start_IT+0x222>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <HAL_TIM_IC_Start_IT+0x27c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d115      	bne.n	8005cfa <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <HAL_TIM_IC_Start_IT+0x280>)
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b06      	cmp	r3, #6
 8005cde:	d015      	beq.n	8005d0c <HAL_TIM_IC_Start_IT+0x260>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce6:	d011      	beq.n	8005d0c <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0201 	orr.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf8:	e008      	b.n	8005d0c <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0201 	orr.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	e000      	b.n	8005d0e <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40000400 	.word	0x40000400
 8005d20:	40000800 	.word	0x40000800
 8005d24:	40013400 	.word	0x40013400
 8005d28:	40014000 	.word	0x40014000
 8005d2c:	00010007 	.word	0x00010007

08005d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d122      	bne.n	8005d8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d11b      	bne.n	8005d8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f06f 0202 	mvn.w	r2, #2
 8005d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fa ffaa 	bl	8000ccc <HAL_TIM_IC_CaptureCallback>
 8005d78:	e005      	b.n	8005d86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 faaa 	bl	80062d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fab1 	bl	80062e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d122      	bne.n	8005de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d11b      	bne.n	8005de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f06f 0204 	mvn.w	r2, #4
 8005db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2202      	movs	r2, #2
 8005db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fa ff80 	bl	8000ccc <HAL_TIM_IC_CaptureCallback>
 8005dcc:	e005      	b.n	8005dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fa80 	bl	80062d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fa87 	bl	80062e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d122      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d11b      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f06f 0208 	mvn.w	r2, #8
 8005e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2204      	movs	r2, #4
 8005e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7fa ff56 	bl	8000ccc <HAL_TIM_IC_CaptureCallback>
 8005e20:	e005      	b.n	8005e2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fa56 	bl	80062d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fa5d 	bl	80062e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	2b10      	cmp	r3, #16
 8005e40:	d122      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b10      	cmp	r3, #16
 8005e4e:	d11b      	bne.n	8005e88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0210 	mvn.w	r2, #16
 8005e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2208      	movs	r2, #8
 8005e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fa ff2c 	bl	8000ccc <HAL_TIM_IC_CaptureCallback>
 8005e74:	e005      	b.n	8005e82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fa2c 	bl	80062d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fa33 	bl	80062e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d10e      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d107      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f06f 0201 	mvn.w	r2, #1
 8005eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa06 	bl	80062c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebe:	2b80      	cmp	r3, #128	; 0x80
 8005ec0:	d10e      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ecc:	2b80      	cmp	r3, #128	; 0x80
 8005ece:	d107      	bne.n	8005ee0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fd10 	bl	8006900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eee:	d10e      	bne.n	8005f0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efa:	2b80      	cmp	r3, #128	; 0x80
 8005efc:	d107      	bne.n	8005f0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fd03 	bl	8006914 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	2b40      	cmp	r3, #64	; 0x40
 8005f1a:	d10e      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f26:	2b40      	cmp	r3, #64	; 0x40
 8005f28:	d107      	bne.n	8005f3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f9e1 	bl	80062fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	d10e      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d107      	bne.n	8005f66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f06f 0220 	mvn.w	r2, #32
 8005f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fcc3 	bl	80068ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f66:	bf00      	nop
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b086      	sub	sp, #24
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e088      	b.n	800609e <HAL_TIM_IC_ConfigChannel+0x130>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d11b      	bne.n	8005fd2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6819      	ldr	r1, [r3, #0]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f000 fa41 	bl	8006430 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	699a      	ldr	r2, [r3, #24]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 020c 	bic.w	r2, r2, #12
 8005fbc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6999      	ldr	r1, [r3, #24]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	619a      	str	r2, [r3, #24]
 8005fd0:	e060      	b.n	8006094 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d11c      	bne.n	8006012 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6818      	ldr	r0, [r3, #0]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	6819      	ldr	r1, [r3, #0]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f000 fab9 	bl	800655e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ffa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6999      	ldr	r1, [r3, #24]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	021a      	lsls	r2, r3, #8
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	619a      	str	r2, [r3, #24]
 8006010:	e040      	b.n	8006094 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b08      	cmp	r3, #8
 8006016:	d11b      	bne.n	8006050 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	6819      	ldr	r1, [r3, #0]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f000 fb06 	bl	8006638 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69da      	ldr	r2, [r3, #28]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 020c 	bic.w	r2, r2, #12
 800603a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69d9      	ldr	r1, [r3, #28]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	61da      	str	r2, [r3, #28]
 800604e:	e021      	b.n	8006094 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b0c      	cmp	r3, #12
 8006054:	d11c      	bne.n	8006090 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6818      	ldr	r0, [r3, #0]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6819      	ldr	r1, [r3, #0]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f000 fb23 	bl	80066b0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69da      	ldr	r2, [r3, #28]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006078:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69d9      	ldr	r1, [r3, #28]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	021a      	lsls	r2, r3, #8
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	61da      	str	r2, [r3, #28]
 800608e:	e001      	b.n	8006094 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800609c:	7dfb      	ldrb	r3, [r7, #23]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d101      	bne.n	80060c2 <HAL_TIM_ConfigClockSource+0x1c>
 80060be:	2302      	movs	r3, #2
 80060c0:	e0b6      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x18a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2202      	movs	r2, #2
 80060ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060fe:	d03e      	beq.n	800617e <HAL_TIM_ConfigClockSource+0xd8>
 8006100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006104:	f200 8087 	bhi.w	8006216 <HAL_TIM_ConfigClockSource+0x170>
 8006108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610c:	f000 8086 	beq.w	800621c <HAL_TIM_ConfigClockSource+0x176>
 8006110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006114:	d87f      	bhi.n	8006216 <HAL_TIM_ConfigClockSource+0x170>
 8006116:	2b70      	cmp	r3, #112	; 0x70
 8006118:	d01a      	beq.n	8006150 <HAL_TIM_ConfigClockSource+0xaa>
 800611a:	2b70      	cmp	r3, #112	; 0x70
 800611c:	d87b      	bhi.n	8006216 <HAL_TIM_ConfigClockSource+0x170>
 800611e:	2b60      	cmp	r3, #96	; 0x60
 8006120:	d050      	beq.n	80061c4 <HAL_TIM_ConfigClockSource+0x11e>
 8006122:	2b60      	cmp	r3, #96	; 0x60
 8006124:	d877      	bhi.n	8006216 <HAL_TIM_ConfigClockSource+0x170>
 8006126:	2b50      	cmp	r3, #80	; 0x50
 8006128:	d03c      	beq.n	80061a4 <HAL_TIM_ConfigClockSource+0xfe>
 800612a:	2b50      	cmp	r3, #80	; 0x50
 800612c:	d873      	bhi.n	8006216 <HAL_TIM_ConfigClockSource+0x170>
 800612e:	2b40      	cmp	r3, #64	; 0x40
 8006130:	d058      	beq.n	80061e4 <HAL_TIM_ConfigClockSource+0x13e>
 8006132:	2b40      	cmp	r3, #64	; 0x40
 8006134:	d86f      	bhi.n	8006216 <HAL_TIM_ConfigClockSource+0x170>
 8006136:	2b30      	cmp	r3, #48	; 0x30
 8006138:	d064      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0x15e>
 800613a:	2b30      	cmp	r3, #48	; 0x30
 800613c:	d86b      	bhi.n	8006216 <HAL_TIM_ConfigClockSource+0x170>
 800613e:	2b20      	cmp	r3, #32
 8006140:	d060      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0x15e>
 8006142:	2b20      	cmp	r3, #32
 8006144:	d867      	bhi.n	8006216 <HAL_TIM_ConfigClockSource+0x170>
 8006146:	2b00      	cmp	r3, #0
 8006148:	d05c      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0x15e>
 800614a:	2b10      	cmp	r3, #16
 800614c:	d05a      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0x15e>
 800614e:	e062      	b.n	8006216 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6818      	ldr	r0, [r3, #0]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	6899      	ldr	r1, [r3, #8]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f000 fafe 	bl	8006760 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006172:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	609a      	str	r2, [r3, #8]
      break;
 800617c:	e04f      	b.n	800621e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	6899      	ldr	r1, [r3, #8]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f000 fae7 	bl	8006760 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061a0:	609a      	str	r2, [r3, #8]
      break;
 80061a2:	e03c      	b.n	800621e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6818      	ldr	r0, [r3, #0]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	6859      	ldr	r1, [r3, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	461a      	mov	r2, r3
 80061b2:	f000 f9a5 	bl	8006500 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2150      	movs	r1, #80	; 0x50
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fab4 	bl	800672a <TIM_ITRx_SetConfig>
      break;
 80061c2:	e02c      	b.n	800621e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	6859      	ldr	r1, [r3, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	461a      	mov	r2, r3
 80061d2:	f000 fa01 	bl	80065d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2160      	movs	r1, #96	; 0x60
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 faa4 	bl	800672a <TIM_ITRx_SetConfig>
      break;
 80061e2:	e01c      	b.n	800621e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	6859      	ldr	r1, [r3, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	461a      	mov	r2, r3
 80061f2:	f000 f985 	bl	8006500 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2140      	movs	r1, #64	; 0x40
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fa94 	bl	800672a <TIM_ITRx_SetConfig>
      break;
 8006202:	e00c      	b.n	800621e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4619      	mov	r1, r3
 800620e:	4610      	mov	r0, r2
 8006210:	f000 fa8b 	bl	800672a <TIM_ITRx_SetConfig>
      break;
 8006214:	e003      	b.n	800621e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	73fb      	strb	r3, [r7, #15]
      break;
 800621a:	e000      	b.n	800621e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800621c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800622e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b0c      	cmp	r3, #12
 800624a:	d831      	bhi.n	80062b0 <HAL_TIM_ReadCapturedValue+0x78>
 800624c:	a201      	add	r2, pc, #4	; (adr r2, 8006254 <HAL_TIM_ReadCapturedValue+0x1c>)
 800624e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006252:	bf00      	nop
 8006254:	08006289 	.word	0x08006289
 8006258:	080062b1 	.word	0x080062b1
 800625c:	080062b1 	.word	0x080062b1
 8006260:	080062b1 	.word	0x080062b1
 8006264:	08006293 	.word	0x08006293
 8006268:	080062b1 	.word	0x080062b1
 800626c:	080062b1 	.word	0x080062b1
 8006270:	080062b1 	.word	0x080062b1
 8006274:	0800629d 	.word	0x0800629d
 8006278:	080062b1 	.word	0x080062b1
 800627c:	080062b1 	.word	0x080062b1
 8006280:	080062b1 	.word	0x080062b1
 8006284:	080062a7 	.word	0x080062a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628e:	60fb      	str	r3, [r7, #12]

      break;
 8006290:	e00f      	b.n	80062b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006298:	60fb      	str	r3, [r7, #12]

      break;
 800629a:	e00a      	b.n	80062b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a2:	60fb      	str	r3, [r7, #12]

      break;
 80062a4:	e005      	b.n	80062b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ac:	60fb      	str	r3, [r7, #12]

      break;
 80062ae:	e000      	b.n	80062b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80062b0:	bf00      	nop
  }

  return tmpreg;
 80062b2:	68fb      	ldr	r3, [r7, #12]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a3c      	ldr	r2, [pc, #240]	; (8006414 <TIM_Base_SetConfig+0x104>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00f      	beq.n	8006348 <TIM_Base_SetConfig+0x38>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800632e:	d00b      	beq.n	8006348 <TIM_Base_SetConfig+0x38>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a39      	ldr	r2, [pc, #228]	; (8006418 <TIM_Base_SetConfig+0x108>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d007      	beq.n	8006348 <TIM_Base_SetConfig+0x38>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a38      	ldr	r2, [pc, #224]	; (800641c <TIM_Base_SetConfig+0x10c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <TIM_Base_SetConfig+0x38>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a37      	ldr	r2, [pc, #220]	; (8006420 <TIM_Base_SetConfig+0x110>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d108      	bne.n	800635a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a2d      	ldr	r2, [pc, #180]	; (8006414 <TIM_Base_SetConfig+0x104>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d01b      	beq.n	800639a <TIM_Base_SetConfig+0x8a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	d017      	beq.n	800639a <TIM_Base_SetConfig+0x8a>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a2a      	ldr	r2, [pc, #168]	; (8006418 <TIM_Base_SetConfig+0x108>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d013      	beq.n	800639a <TIM_Base_SetConfig+0x8a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a29      	ldr	r2, [pc, #164]	; (800641c <TIM_Base_SetConfig+0x10c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00f      	beq.n	800639a <TIM_Base_SetConfig+0x8a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a28      	ldr	r2, [pc, #160]	; (8006420 <TIM_Base_SetConfig+0x110>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00b      	beq.n	800639a <TIM_Base_SetConfig+0x8a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a27      	ldr	r2, [pc, #156]	; (8006424 <TIM_Base_SetConfig+0x114>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d007      	beq.n	800639a <TIM_Base_SetConfig+0x8a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a26      	ldr	r2, [pc, #152]	; (8006428 <TIM_Base_SetConfig+0x118>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d003      	beq.n	800639a <TIM_Base_SetConfig+0x8a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a25      	ldr	r2, [pc, #148]	; (800642c <TIM_Base_SetConfig+0x11c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d108      	bne.n	80063ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a10      	ldr	r2, [pc, #64]	; (8006414 <TIM_Base_SetConfig+0x104>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00f      	beq.n	80063f8 <TIM_Base_SetConfig+0xe8>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a11      	ldr	r2, [pc, #68]	; (8006420 <TIM_Base_SetConfig+0x110>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00b      	beq.n	80063f8 <TIM_Base_SetConfig+0xe8>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a10      	ldr	r2, [pc, #64]	; (8006424 <TIM_Base_SetConfig+0x114>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d007      	beq.n	80063f8 <TIM_Base_SetConfig+0xe8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a0f      	ldr	r2, [pc, #60]	; (8006428 <TIM_Base_SetConfig+0x118>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d003      	beq.n	80063f8 <TIM_Base_SetConfig+0xe8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a0e      	ldr	r2, [pc, #56]	; (800642c <TIM_Base_SetConfig+0x11c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d103      	bne.n	8006400 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	615a      	str	r2, [r3, #20]
}
 8006406:	bf00      	nop
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	40012c00 	.word	0x40012c00
 8006418:	40000400 	.word	0x40000400
 800641c:	40000800 	.word	0x40000800
 8006420:	40013400 	.word	0x40013400
 8006424:	40014000 	.word	0x40014000
 8006428:	40014400 	.word	0x40014400
 800642c:	40014800 	.word	0x40014800

08006430 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f023 0201 	bic.w	r2, r3, #1
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4a24      	ldr	r2, [pc, #144]	; (80064ec <TIM_TI1_SetConfig+0xbc>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <TIM_TI1_SetConfig+0x56>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006464:	d00f      	beq.n	8006486 <TIM_TI1_SetConfig+0x56>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4a21      	ldr	r2, [pc, #132]	; (80064f0 <TIM_TI1_SetConfig+0xc0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00b      	beq.n	8006486 <TIM_TI1_SetConfig+0x56>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4a20      	ldr	r2, [pc, #128]	; (80064f4 <TIM_TI1_SetConfig+0xc4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d007      	beq.n	8006486 <TIM_TI1_SetConfig+0x56>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4a1f      	ldr	r2, [pc, #124]	; (80064f8 <TIM_TI1_SetConfig+0xc8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d003      	beq.n	8006486 <TIM_TI1_SetConfig+0x56>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4a1e      	ldr	r2, [pc, #120]	; (80064fc <TIM_TI1_SetConfig+0xcc>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d101      	bne.n	800648a <TIM_TI1_SetConfig+0x5a>
 8006486:	2301      	movs	r3, #1
 8006488:	e000      	b.n	800648c <TIM_TI1_SetConfig+0x5c>
 800648a:	2300      	movs	r3, #0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f023 0303 	bic.w	r3, r3, #3
 8006496:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
 80064a0:	e003      	b.n	80064aa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f043 0301 	orr.w	r3, r3, #1
 80064a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f023 030a 	bic.w	r3, r3, #10
 80064c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f003 030a 	and.w	r3, r3, #10
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	621a      	str	r2, [r3, #32]
}
 80064de:	bf00      	nop
 80064e0:	371c      	adds	r7, #28
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40012c00 	.word	0x40012c00
 80064f0:	40000400 	.word	0x40000400
 80064f4:	40000800 	.word	0x40000800
 80064f8:	40013400 	.word	0x40013400
 80064fc:	40014000 	.word	0x40014000

08006500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	f023 0201 	bic.w	r2, r3, #1
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800652a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f023 030a 	bic.w	r3, r3, #10
 800653c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800655e:	b480      	push	{r7}
 8006560:	b087      	sub	sp, #28
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	60b9      	str	r1, [r7, #8]
 8006568:	607a      	str	r2, [r7, #4]
 800656a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	f023 0210 	bic.w	r2, r3, #16
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800659c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	031b      	lsls	r3, r3, #12
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	011b      	lsls	r3, r3, #4
 80065b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	621a      	str	r2, [r3, #32]
}
 80065cc:	bf00      	nop
 80065ce:	371c      	adds	r7, #28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	f023 0210 	bic.w	r2, r3, #16
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006602:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	031b      	lsls	r3, r3, #12
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006614:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	621a      	str	r2, [r3, #32]
}
 800662c:	bf00      	nop
 800662e:	371c      	adds	r7, #28
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f023 0303 	bic.w	r3, r3, #3
 8006664:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006674:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	b2db      	uxtb	r3, r3
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006688:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	021b      	lsls	r3, r3, #8
 800668e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	621a      	str	r2, [r3, #32]
}
 80066a4:	bf00      	nop
 80066a6:	371c      	adds	r7, #28
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	021b      	lsls	r3, r3, #8
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	031b      	lsls	r3, r3, #12
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006702:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	031b      	lsls	r3, r3, #12
 8006708:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	621a      	str	r2, [r3, #32]
}
 800671e:	bf00      	nop
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	f043 0307 	orr.w	r3, r3, #7
 800674c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	609a      	str	r2, [r3, #8]
}
 8006754:	bf00      	nop
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800677a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	021a      	lsls	r2, r3, #8
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	431a      	orrs	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4313      	orrs	r3, r2
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	609a      	str	r2, [r3, #8]
}
 8006794:	bf00      	nop
 8006796:	371c      	adds	r7, #28
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f003 031f 	and.w	r3, r3, #31
 80067b2:	2201      	movs	r2, #1
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a1a      	ldr	r2, [r3, #32]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	43db      	mvns	r3, r3
 80067c2:	401a      	ands	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a1a      	ldr	r2, [r3, #32]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	fa01 f303 	lsl.w	r3, r1, r3
 80067d8:	431a      	orrs	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	621a      	str	r2, [r3, #32]
}
 80067de:	bf00      	nop
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
	...

080067ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d101      	bne.n	8006804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006800:	2302      	movs	r3, #2
 8006802:	e063      	b.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a2b      	ldr	r2, [pc, #172]	; (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d004      	beq.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a2a      	ldr	r2, [pc, #168]	; (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d108      	bne.n	800684a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800683e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006850:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1b      	ldr	r2, [pc, #108]	; (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d018      	beq.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006876:	d013      	beq.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a18      	ldr	r2, [pc, #96]	; (80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00e      	beq.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a17      	ldr	r2, [pc, #92]	; (80068e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d009      	beq.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a12      	ldr	r2, [pc, #72]	; (80068dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d004      	beq.n	80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a13      	ldr	r2, [pc, #76]	; (80068e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d10c      	bne.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	40012c00 	.word	0x40012c00
 80068dc:	40013400 	.word	0x40013400
 80068e0:	40000400 	.word	0x40000400
 80068e4:	40000800 	.word	0x40000800
 80068e8:	40014000 	.word	0x40014000

080068ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006930:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006934:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	b29b      	uxth	r3, r3
 8006942:	43db      	mvns	r3, r3
 8006944:	b29b      	uxth	r3, r3
 8006946:	4013      	ands	r3, r2
 8006948:	b29a      	uxth	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800695e:	b084      	sub	sp, #16
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	f107 0014 	add.w	r0, r7, #20
 800696c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	b004      	add	sp, #16
 800699e:	4770      	bx	lr

080069a0 <__errno>:
 80069a0:	4b01      	ldr	r3, [pc, #4]	; (80069a8 <__errno+0x8>)
 80069a2:	6818      	ldr	r0, [r3, #0]
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	20000240 	.word	0x20000240

080069ac <__libc_init_array>:
 80069ac:	b570      	push	{r4, r5, r6, lr}
 80069ae:	4d0d      	ldr	r5, [pc, #52]	; (80069e4 <__libc_init_array+0x38>)
 80069b0:	4c0d      	ldr	r4, [pc, #52]	; (80069e8 <__libc_init_array+0x3c>)
 80069b2:	1b64      	subs	r4, r4, r5
 80069b4:	10a4      	asrs	r4, r4, #2
 80069b6:	2600      	movs	r6, #0
 80069b8:	42a6      	cmp	r6, r4
 80069ba:	d109      	bne.n	80069d0 <__libc_init_array+0x24>
 80069bc:	4d0b      	ldr	r5, [pc, #44]	; (80069ec <__libc_init_array+0x40>)
 80069be:	4c0c      	ldr	r4, [pc, #48]	; (80069f0 <__libc_init_array+0x44>)
 80069c0:	f003 ffec 	bl	800a99c <_init>
 80069c4:	1b64      	subs	r4, r4, r5
 80069c6:	10a4      	asrs	r4, r4, #2
 80069c8:	2600      	movs	r6, #0
 80069ca:	42a6      	cmp	r6, r4
 80069cc:	d105      	bne.n	80069da <__libc_init_array+0x2e>
 80069ce:	bd70      	pop	{r4, r5, r6, pc}
 80069d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d4:	4798      	blx	r3
 80069d6:	3601      	adds	r6, #1
 80069d8:	e7ee      	b.n	80069b8 <__libc_init_array+0xc>
 80069da:	f855 3b04 	ldr.w	r3, [r5], #4
 80069de:	4798      	blx	r3
 80069e0:	3601      	adds	r6, #1
 80069e2:	e7f2      	b.n	80069ca <__libc_init_array+0x1e>
 80069e4:	0800ae50 	.word	0x0800ae50
 80069e8:	0800ae50 	.word	0x0800ae50
 80069ec:	0800ae50 	.word	0x0800ae50
 80069f0:	0800ae54 	.word	0x0800ae54

080069f4 <memset>:
 80069f4:	4402      	add	r2, r0
 80069f6:	4603      	mov	r3, r0
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d100      	bne.n	80069fe <memset+0xa>
 80069fc:	4770      	bx	lr
 80069fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006a02:	e7f9      	b.n	80069f8 <memset+0x4>

08006a04 <__cvt>:
 8006a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a08:	ec55 4b10 	vmov	r4, r5, d0
 8006a0c:	2d00      	cmp	r5, #0
 8006a0e:	460e      	mov	r6, r1
 8006a10:	4619      	mov	r1, r3
 8006a12:	462b      	mov	r3, r5
 8006a14:	bfbb      	ittet	lt
 8006a16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a1a:	461d      	movlt	r5, r3
 8006a1c:	2300      	movge	r3, #0
 8006a1e:	232d      	movlt	r3, #45	; 0x2d
 8006a20:	700b      	strb	r3, [r1, #0]
 8006a22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a28:	4691      	mov	r9, r2
 8006a2a:	f023 0820 	bic.w	r8, r3, #32
 8006a2e:	bfbc      	itt	lt
 8006a30:	4622      	movlt	r2, r4
 8006a32:	4614      	movlt	r4, r2
 8006a34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a38:	d005      	beq.n	8006a46 <__cvt+0x42>
 8006a3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a3e:	d100      	bne.n	8006a42 <__cvt+0x3e>
 8006a40:	3601      	adds	r6, #1
 8006a42:	2102      	movs	r1, #2
 8006a44:	e000      	b.n	8006a48 <__cvt+0x44>
 8006a46:	2103      	movs	r1, #3
 8006a48:	ab03      	add	r3, sp, #12
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	ab02      	add	r3, sp, #8
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	ec45 4b10 	vmov	d0, r4, r5
 8006a54:	4653      	mov	r3, sl
 8006a56:	4632      	mov	r2, r6
 8006a58:	f000 fcea 	bl	8007430 <_dtoa_r>
 8006a5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a60:	4607      	mov	r7, r0
 8006a62:	d102      	bne.n	8006a6a <__cvt+0x66>
 8006a64:	f019 0f01 	tst.w	r9, #1
 8006a68:	d022      	beq.n	8006ab0 <__cvt+0xac>
 8006a6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a6e:	eb07 0906 	add.w	r9, r7, r6
 8006a72:	d110      	bne.n	8006a96 <__cvt+0x92>
 8006a74:	783b      	ldrb	r3, [r7, #0]
 8006a76:	2b30      	cmp	r3, #48	; 0x30
 8006a78:	d10a      	bne.n	8006a90 <__cvt+0x8c>
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	4620      	mov	r0, r4
 8006a80:	4629      	mov	r1, r5
 8006a82:	f7fa f821 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a86:	b918      	cbnz	r0, 8006a90 <__cvt+0x8c>
 8006a88:	f1c6 0601 	rsb	r6, r6, #1
 8006a8c:	f8ca 6000 	str.w	r6, [sl]
 8006a90:	f8da 3000 	ldr.w	r3, [sl]
 8006a94:	4499      	add	r9, r3
 8006a96:	2200      	movs	r2, #0
 8006a98:	2300      	movs	r3, #0
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	4629      	mov	r1, r5
 8006a9e:	f7fa f813 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aa2:	b108      	cbz	r0, 8006aa8 <__cvt+0xa4>
 8006aa4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006aa8:	2230      	movs	r2, #48	; 0x30
 8006aaa:	9b03      	ldr	r3, [sp, #12]
 8006aac:	454b      	cmp	r3, r9
 8006aae:	d307      	bcc.n	8006ac0 <__cvt+0xbc>
 8006ab0:	9b03      	ldr	r3, [sp, #12]
 8006ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ab4:	1bdb      	subs	r3, r3, r7
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	b004      	add	sp, #16
 8006abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac0:	1c59      	adds	r1, r3, #1
 8006ac2:	9103      	str	r1, [sp, #12]
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	e7f0      	b.n	8006aaa <__cvt+0xa6>

08006ac8 <__exponent>:
 8006ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aca:	4603      	mov	r3, r0
 8006acc:	2900      	cmp	r1, #0
 8006ace:	bfb8      	it	lt
 8006ad0:	4249      	neglt	r1, r1
 8006ad2:	f803 2b02 	strb.w	r2, [r3], #2
 8006ad6:	bfb4      	ite	lt
 8006ad8:	222d      	movlt	r2, #45	; 0x2d
 8006ada:	222b      	movge	r2, #43	; 0x2b
 8006adc:	2909      	cmp	r1, #9
 8006ade:	7042      	strb	r2, [r0, #1]
 8006ae0:	dd2a      	ble.n	8006b38 <__exponent+0x70>
 8006ae2:	f10d 0407 	add.w	r4, sp, #7
 8006ae6:	46a4      	mov	ip, r4
 8006ae8:	270a      	movs	r7, #10
 8006aea:	46a6      	mov	lr, r4
 8006aec:	460a      	mov	r2, r1
 8006aee:	fb91 f6f7 	sdiv	r6, r1, r7
 8006af2:	fb07 1516 	mls	r5, r7, r6, r1
 8006af6:	3530      	adds	r5, #48	; 0x30
 8006af8:	2a63      	cmp	r2, #99	; 0x63
 8006afa:	f104 34ff 	add.w	r4, r4, #4294967295
 8006afe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b02:	4631      	mov	r1, r6
 8006b04:	dcf1      	bgt.n	8006aea <__exponent+0x22>
 8006b06:	3130      	adds	r1, #48	; 0x30
 8006b08:	f1ae 0502 	sub.w	r5, lr, #2
 8006b0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b10:	1c44      	adds	r4, r0, #1
 8006b12:	4629      	mov	r1, r5
 8006b14:	4561      	cmp	r1, ip
 8006b16:	d30a      	bcc.n	8006b2e <__exponent+0x66>
 8006b18:	f10d 0209 	add.w	r2, sp, #9
 8006b1c:	eba2 020e 	sub.w	r2, r2, lr
 8006b20:	4565      	cmp	r5, ip
 8006b22:	bf88      	it	hi
 8006b24:	2200      	movhi	r2, #0
 8006b26:	4413      	add	r3, r2
 8006b28:	1a18      	subs	r0, r3, r0
 8006b2a:	b003      	add	sp, #12
 8006b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b36:	e7ed      	b.n	8006b14 <__exponent+0x4c>
 8006b38:	2330      	movs	r3, #48	; 0x30
 8006b3a:	3130      	adds	r1, #48	; 0x30
 8006b3c:	7083      	strb	r3, [r0, #2]
 8006b3e:	70c1      	strb	r1, [r0, #3]
 8006b40:	1d03      	adds	r3, r0, #4
 8006b42:	e7f1      	b.n	8006b28 <__exponent+0x60>

08006b44 <_printf_float>:
 8006b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b48:	ed2d 8b02 	vpush	{d8}
 8006b4c:	b08d      	sub	sp, #52	; 0x34
 8006b4e:	460c      	mov	r4, r1
 8006b50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b54:	4616      	mov	r6, r2
 8006b56:	461f      	mov	r7, r3
 8006b58:	4605      	mov	r5, r0
 8006b5a:	f001 fa57 	bl	800800c <_localeconv_r>
 8006b5e:	f8d0 a000 	ldr.w	sl, [r0]
 8006b62:	4650      	mov	r0, sl
 8006b64:	f7f9 fb34 	bl	80001d0 <strlen>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	9305      	str	r3, [sp, #20]
 8006b70:	f8d8 3000 	ldr.w	r3, [r8]
 8006b74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b78:	3307      	adds	r3, #7
 8006b7a:	f023 0307 	bic.w	r3, r3, #7
 8006b7e:	f103 0208 	add.w	r2, r3, #8
 8006b82:	f8c8 2000 	str.w	r2, [r8]
 8006b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b96:	9307      	str	r3, [sp, #28]
 8006b98:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b9c:	ee08 0a10 	vmov	s16, r0
 8006ba0:	4b9f      	ldr	r3, [pc, #636]	; (8006e20 <_printf_float+0x2dc>)
 8006ba2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8006baa:	f7f9 ffbf 	bl	8000b2c <__aeabi_dcmpun>
 8006bae:	bb88      	cbnz	r0, 8006c14 <_printf_float+0xd0>
 8006bb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bb4:	4b9a      	ldr	r3, [pc, #616]	; (8006e20 <_printf_float+0x2dc>)
 8006bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bba:	f7f9 ff99 	bl	8000af0 <__aeabi_dcmple>
 8006bbe:	bb48      	cbnz	r0, 8006c14 <_printf_float+0xd0>
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	4640      	mov	r0, r8
 8006bc6:	4649      	mov	r1, r9
 8006bc8:	f7f9 ff88 	bl	8000adc <__aeabi_dcmplt>
 8006bcc:	b110      	cbz	r0, 8006bd4 <_printf_float+0x90>
 8006bce:	232d      	movs	r3, #45	; 0x2d
 8006bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd4:	4b93      	ldr	r3, [pc, #588]	; (8006e24 <_printf_float+0x2e0>)
 8006bd6:	4894      	ldr	r0, [pc, #592]	; (8006e28 <_printf_float+0x2e4>)
 8006bd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006bdc:	bf94      	ite	ls
 8006bde:	4698      	movls	r8, r3
 8006be0:	4680      	movhi	r8, r0
 8006be2:	2303      	movs	r3, #3
 8006be4:	6123      	str	r3, [r4, #16]
 8006be6:	9b05      	ldr	r3, [sp, #20]
 8006be8:	f023 0204 	bic.w	r2, r3, #4
 8006bec:	6022      	str	r2, [r4, #0]
 8006bee:	f04f 0900 	mov.w	r9, #0
 8006bf2:	9700      	str	r7, [sp, #0]
 8006bf4:	4633      	mov	r3, r6
 8006bf6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f000 f9d8 	bl	8006fb0 <_printf_common>
 8006c00:	3001      	adds	r0, #1
 8006c02:	f040 8090 	bne.w	8006d26 <_printf_float+0x1e2>
 8006c06:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0a:	b00d      	add	sp, #52	; 0x34
 8006c0c:	ecbd 8b02 	vpop	{d8}
 8006c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c14:	4642      	mov	r2, r8
 8006c16:	464b      	mov	r3, r9
 8006c18:	4640      	mov	r0, r8
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	f7f9 ff86 	bl	8000b2c <__aeabi_dcmpun>
 8006c20:	b140      	cbz	r0, 8006c34 <_printf_float+0xf0>
 8006c22:	464b      	mov	r3, r9
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bfbc      	itt	lt
 8006c28:	232d      	movlt	r3, #45	; 0x2d
 8006c2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c2e:	487f      	ldr	r0, [pc, #508]	; (8006e2c <_printf_float+0x2e8>)
 8006c30:	4b7f      	ldr	r3, [pc, #508]	; (8006e30 <_printf_float+0x2ec>)
 8006c32:	e7d1      	b.n	8006bd8 <_printf_float+0x94>
 8006c34:	6863      	ldr	r3, [r4, #4]
 8006c36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c3a:	9206      	str	r2, [sp, #24]
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	d13f      	bne.n	8006cc0 <_printf_float+0x17c>
 8006c40:	2306      	movs	r3, #6
 8006c42:	6063      	str	r3, [r4, #4]
 8006c44:	9b05      	ldr	r3, [sp, #20]
 8006c46:	6861      	ldr	r1, [r4, #4]
 8006c48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	9303      	str	r3, [sp, #12]
 8006c50:	ab0a      	add	r3, sp, #40	; 0x28
 8006c52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006c56:	ab09      	add	r3, sp, #36	; 0x24
 8006c58:	ec49 8b10 	vmov	d0, r8, r9
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	6022      	str	r2, [r4, #0]
 8006c60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c64:	4628      	mov	r0, r5
 8006c66:	f7ff fecd 	bl	8006a04 <__cvt>
 8006c6a:	9b06      	ldr	r3, [sp, #24]
 8006c6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c6e:	2b47      	cmp	r3, #71	; 0x47
 8006c70:	4680      	mov	r8, r0
 8006c72:	d108      	bne.n	8006c86 <_printf_float+0x142>
 8006c74:	1cc8      	adds	r0, r1, #3
 8006c76:	db02      	blt.n	8006c7e <_printf_float+0x13a>
 8006c78:	6863      	ldr	r3, [r4, #4]
 8006c7a:	4299      	cmp	r1, r3
 8006c7c:	dd41      	ble.n	8006d02 <_printf_float+0x1be>
 8006c7e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c82:	fa5f fb8b 	uxtb.w	fp, fp
 8006c86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c8a:	d820      	bhi.n	8006cce <_printf_float+0x18a>
 8006c8c:	3901      	subs	r1, #1
 8006c8e:	465a      	mov	r2, fp
 8006c90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c94:	9109      	str	r1, [sp, #36]	; 0x24
 8006c96:	f7ff ff17 	bl	8006ac8 <__exponent>
 8006c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c9c:	1813      	adds	r3, r2, r0
 8006c9e:	2a01      	cmp	r2, #1
 8006ca0:	4681      	mov	r9, r0
 8006ca2:	6123      	str	r3, [r4, #16]
 8006ca4:	dc02      	bgt.n	8006cac <_printf_float+0x168>
 8006ca6:	6822      	ldr	r2, [r4, #0]
 8006ca8:	07d2      	lsls	r2, r2, #31
 8006caa:	d501      	bpl.n	8006cb0 <_printf_float+0x16c>
 8006cac:	3301      	adds	r3, #1
 8006cae:	6123      	str	r3, [r4, #16]
 8006cb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d09c      	beq.n	8006bf2 <_printf_float+0xae>
 8006cb8:	232d      	movs	r3, #45	; 0x2d
 8006cba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cbe:	e798      	b.n	8006bf2 <_printf_float+0xae>
 8006cc0:	9a06      	ldr	r2, [sp, #24]
 8006cc2:	2a47      	cmp	r2, #71	; 0x47
 8006cc4:	d1be      	bne.n	8006c44 <_printf_float+0x100>
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1bc      	bne.n	8006c44 <_printf_float+0x100>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e7b9      	b.n	8006c42 <_printf_float+0xfe>
 8006cce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006cd2:	d118      	bne.n	8006d06 <_printf_float+0x1c2>
 8006cd4:	2900      	cmp	r1, #0
 8006cd6:	6863      	ldr	r3, [r4, #4]
 8006cd8:	dd0b      	ble.n	8006cf2 <_printf_float+0x1ae>
 8006cda:	6121      	str	r1, [r4, #16]
 8006cdc:	b913      	cbnz	r3, 8006ce4 <_printf_float+0x1a0>
 8006cde:	6822      	ldr	r2, [r4, #0]
 8006ce0:	07d0      	lsls	r0, r2, #31
 8006ce2:	d502      	bpl.n	8006cea <_printf_float+0x1a6>
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	440b      	add	r3, r1
 8006ce8:	6123      	str	r3, [r4, #16]
 8006cea:	65a1      	str	r1, [r4, #88]	; 0x58
 8006cec:	f04f 0900 	mov.w	r9, #0
 8006cf0:	e7de      	b.n	8006cb0 <_printf_float+0x16c>
 8006cf2:	b913      	cbnz	r3, 8006cfa <_printf_float+0x1b6>
 8006cf4:	6822      	ldr	r2, [r4, #0]
 8006cf6:	07d2      	lsls	r2, r2, #31
 8006cf8:	d501      	bpl.n	8006cfe <_printf_float+0x1ba>
 8006cfa:	3302      	adds	r3, #2
 8006cfc:	e7f4      	b.n	8006ce8 <_printf_float+0x1a4>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e7f2      	b.n	8006ce8 <_printf_float+0x1a4>
 8006d02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d08:	4299      	cmp	r1, r3
 8006d0a:	db05      	blt.n	8006d18 <_printf_float+0x1d4>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	6121      	str	r1, [r4, #16]
 8006d10:	07d8      	lsls	r0, r3, #31
 8006d12:	d5ea      	bpl.n	8006cea <_printf_float+0x1a6>
 8006d14:	1c4b      	adds	r3, r1, #1
 8006d16:	e7e7      	b.n	8006ce8 <_printf_float+0x1a4>
 8006d18:	2900      	cmp	r1, #0
 8006d1a:	bfd4      	ite	le
 8006d1c:	f1c1 0202 	rsble	r2, r1, #2
 8006d20:	2201      	movgt	r2, #1
 8006d22:	4413      	add	r3, r2
 8006d24:	e7e0      	b.n	8006ce8 <_printf_float+0x1a4>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	055a      	lsls	r2, r3, #21
 8006d2a:	d407      	bmi.n	8006d3c <_printf_float+0x1f8>
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	4642      	mov	r2, r8
 8006d30:	4631      	mov	r1, r6
 8006d32:	4628      	mov	r0, r5
 8006d34:	47b8      	blx	r7
 8006d36:	3001      	adds	r0, #1
 8006d38:	d12c      	bne.n	8006d94 <_printf_float+0x250>
 8006d3a:	e764      	b.n	8006c06 <_printf_float+0xc2>
 8006d3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d40:	f240 80e0 	bls.w	8006f04 <_printf_float+0x3c0>
 8006d44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f7f9 febc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d034      	beq.n	8006dbe <_printf_float+0x27a>
 8006d54:	4a37      	ldr	r2, [pc, #220]	; (8006e34 <_printf_float+0x2f0>)
 8006d56:	2301      	movs	r3, #1
 8006d58:	4631      	mov	r1, r6
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	47b8      	blx	r7
 8006d5e:	3001      	adds	r0, #1
 8006d60:	f43f af51 	beq.w	8006c06 <_printf_float+0xc2>
 8006d64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	db02      	blt.n	8006d72 <_printf_float+0x22e>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	07d8      	lsls	r0, r3, #31
 8006d70:	d510      	bpl.n	8006d94 <_printf_float+0x250>
 8006d72:	ee18 3a10 	vmov	r3, s16
 8006d76:	4652      	mov	r2, sl
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b8      	blx	r7
 8006d7e:	3001      	adds	r0, #1
 8006d80:	f43f af41 	beq.w	8006c06 <_printf_float+0xc2>
 8006d84:	f04f 0800 	mov.w	r8, #0
 8006d88:	f104 091a 	add.w	r9, r4, #26
 8006d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	4543      	cmp	r3, r8
 8006d92:	dc09      	bgt.n	8006da8 <_printf_float+0x264>
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	079b      	lsls	r3, r3, #30
 8006d98:	f100 8105 	bmi.w	8006fa6 <_printf_float+0x462>
 8006d9c:	68e0      	ldr	r0, [r4, #12]
 8006d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da0:	4298      	cmp	r0, r3
 8006da2:	bfb8      	it	lt
 8006da4:	4618      	movlt	r0, r3
 8006da6:	e730      	b.n	8006c0a <_printf_float+0xc6>
 8006da8:	2301      	movs	r3, #1
 8006daa:	464a      	mov	r2, r9
 8006dac:	4631      	mov	r1, r6
 8006dae:	4628      	mov	r0, r5
 8006db0:	47b8      	blx	r7
 8006db2:	3001      	adds	r0, #1
 8006db4:	f43f af27 	beq.w	8006c06 <_printf_float+0xc2>
 8006db8:	f108 0801 	add.w	r8, r8, #1
 8006dbc:	e7e6      	b.n	8006d8c <_printf_float+0x248>
 8006dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	dc39      	bgt.n	8006e38 <_printf_float+0x2f4>
 8006dc4:	4a1b      	ldr	r2, [pc, #108]	; (8006e34 <_printf_float+0x2f0>)
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4628      	mov	r0, r5
 8006dcc:	47b8      	blx	r7
 8006dce:	3001      	adds	r0, #1
 8006dd0:	f43f af19 	beq.w	8006c06 <_printf_float+0xc2>
 8006dd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	d102      	bne.n	8006de2 <_printf_float+0x29e>
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	07d9      	lsls	r1, r3, #31
 8006de0:	d5d8      	bpl.n	8006d94 <_printf_float+0x250>
 8006de2:	ee18 3a10 	vmov	r3, s16
 8006de6:	4652      	mov	r2, sl
 8006de8:	4631      	mov	r1, r6
 8006dea:	4628      	mov	r0, r5
 8006dec:	47b8      	blx	r7
 8006dee:	3001      	adds	r0, #1
 8006df0:	f43f af09 	beq.w	8006c06 <_printf_float+0xc2>
 8006df4:	f04f 0900 	mov.w	r9, #0
 8006df8:	f104 0a1a 	add.w	sl, r4, #26
 8006dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfe:	425b      	negs	r3, r3
 8006e00:	454b      	cmp	r3, r9
 8006e02:	dc01      	bgt.n	8006e08 <_printf_float+0x2c4>
 8006e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e06:	e792      	b.n	8006d2e <_printf_float+0x1ea>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	4652      	mov	r2, sl
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b8      	blx	r7
 8006e12:	3001      	adds	r0, #1
 8006e14:	f43f aef7 	beq.w	8006c06 <_printf_float+0xc2>
 8006e18:	f109 0901 	add.w	r9, r9, #1
 8006e1c:	e7ee      	b.n	8006dfc <_printf_float+0x2b8>
 8006e1e:	bf00      	nop
 8006e20:	7fefffff 	.word	0x7fefffff
 8006e24:	0800aa08 	.word	0x0800aa08
 8006e28:	0800aa0c 	.word	0x0800aa0c
 8006e2c:	0800aa14 	.word	0x0800aa14
 8006e30:	0800aa10 	.word	0x0800aa10
 8006e34:	0800aa18 	.word	0x0800aa18
 8006e38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	bfa8      	it	ge
 8006e40:	461a      	movge	r2, r3
 8006e42:	2a00      	cmp	r2, #0
 8006e44:	4691      	mov	r9, r2
 8006e46:	dc37      	bgt.n	8006eb8 <_printf_float+0x374>
 8006e48:	f04f 0b00 	mov.w	fp, #0
 8006e4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e50:	f104 021a 	add.w	r2, r4, #26
 8006e54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e56:	9305      	str	r3, [sp, #20]
 8006e58:	eba3 0309 	sub.w	r3, r3, r9
 8006e5c:	455b      	cmp	r3, fp
 8006e5e:	dc33      	bgt.n	8006ec8 <_printf_float+0x384>
 8006e60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e64:	429a      	cmp	r2, r3
 8006e66:	db3b      	blt.n	8006ee0 <_printf_float+0x39c>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	07da      	lsls	r2, r3, #31
 8006e6c:	d438      	bmi.n	8006ee0 <_printf_float+0x39c>
 8006e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e70:	9a05      	ldr	r2, [sp, #20]
 8006e72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e74:	1a9a      	subs	r2, r3, r2
 8006e76:	eba3 0901 	sub.w	r9, r3, r1
 8006e7a:	4591      	cmp	r9, r2
 8006e7c:	bfa8      	it	ge
 8006e7e:	4691      	movge	r9, r2
 8006e80:	f1b9 0f00 	cmp.w	r9, #0
 8006e84:	dc35      	bgt.n	8006ef2 <_printf_float+0x3ae>
 8006e86:	f04f 0800 	mov.w	r8, #0
 8006e8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e8e:	f104 0a1a 	add.w	sl, r4, #26
 8006e92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e96:	1a9b      	subs	r3, r3, r2
 8006e98:	eba3 0309 	sub.w	r3, r3, r9
 8006e9c:	4543      	cmp	r3, r8
 8006e9e:	f77f af79 	ble.w	8006d94 <_printf_float+0x250>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	4652      	mov	r2, sl
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b8      	blx	r7
 8006eac:	3001      	adds	r0, #1
 8006eae:	f43f aeaa 	beq.w	8006c06 <_printf_float+0xc2>
 8006eb2:	f108 0801 	add.w	r8, r8, #1
 8006eb6:	e7ec      	b.n	8006e92 <_printf_float+0x34e>
 8006eb8:	4613      	mov	r3, r2
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4642      	mov	r2, r8
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	d1c0      	bne.n	8006e48 <_printf_float+0x304>
 8006ec6:	e69e      	b.n	8006c06 <_printf_float+0xc2>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	4631      	mov	r1, r6
 8006ecc:	4628      	mov	r0, r5
 8006ece:	9205      	str	r2, [sp, #20]
 8006ed0:	47b8      	blx	r7
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	f43f ae97 	beq.w	8006c06 <_printf_float+0xc2>
 8006ed8:	9a05      	ldr	r2, [sp, #20]
 8006eda:	f10b 0b01 	add.w	fp, fp, #1
 8006ede:	e7b9      	b.n	8006e54 <_printf_float+0x310>
 8006ee0:	ee18 3a10 	vmov	r3, s16
 8006ee4:	4652      	mov	r2, sl
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	4628      	mov	r0, r5
 8006eea:	47b8      	blx	r7
 8006eec:	3001      	adds	r0, #1
 8006eee:	d1be      	bne.n	8006e6e <_printf_float+0x32a>
 8006ef0:	e689      	b.n	8006c06 <_printf_float+0xc2>
 8006ef2:	9a05      	ldr	r2, [sp, #20]
 8006ef4:	464b      	mov	r3, r9
 8006ef6:	4442      	add	r2, r8
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4628      	mov	r0, r5
 8006efc:	47b8      	blx	r7
 8006efe:	3001      	adds	r0, #1
 8006f00:	d1c1      	bne.n	8006e86 <_printf_float+0x342>
 8006f02:	e680      	b.n	8006c06 <_printf_float+0xc2>
 8006f04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f06:	2a01      	cmp	r2, #1
 8006f08:	dc01      	bgt.n	8006f0e <_printf_float+0x3ca>
 8006f0a:	07db      	lsls	r3, r3, #31
 8006f0c:	d538      	bpl.n	8006f80 <_printf_float+0x43c>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	4642      	mov	r2, r8
 8006f12:	4631      	mov	r1, r6
 8006f14:	4628      	mov	r0, r5
 8006f16:	47b8      	blx	r7
 8006f18:	3001      	adds	r0, #1
 8006f1a:	f43f ae74 	beq.w	8006c06 <_printf_float+0xc2>
 8006f1e:	ee18 3a10 	vmov	r3, s16
 8006f22:	4652      	mov	r2, sl
 8006f24:	4631      	mov	r1, r6
 8006f26:	4628      	mov	r0, r5
 8006f28:	47b8      	blx	r7
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	f43f ae6b 	beq.w	8006c06 <_printf_float+0xc2>
 8006f30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f34:	2200      	movs	r2, #0
 8006f36:	2300      	movs	r3, #0
 8006f38:	f7f9 fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f3c:	b9d8      	cbnz	r0, 8006f76 <_printf_float+0x432>
 8006f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f40:	f108 0201 	add.w	r2, r8, #1
 8006f44:	3b01      	subs	r3, #1
 8006f46:	4631      	mov	r1, r6
 8006f48:	4628      	mov	r0, r5
 8006f4a:	47b8      	blx	r7
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	d10e      	bne.n	8006f6e <_printf_float+0x42a>
 8006f50:	e659      	b.n	8006c06 <_printf_float+0xc2>
 8006f52:	2301      	movs	r3, #1
 8006f54:	4652      	mov	r2, sl
 8006f56:	4631      	mov	r1, r6
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b8      	blx	r7
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	f43f ae52 	beq.w	8006c06 <_printf_float+0xc2>
 8006f62:	f108 0801 	add.w	r8, r8, #1
 8006f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	4543      	cmp	r3, r8
 8006f6c:	dcf1      	bgt.n	8006f52 <_printf_float+0x40e>
 8006f6e:	464b      	mov	r3, r9
 8006f70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f74:	e6dc      	b.n	8006d30 <_printf_float+0x1ec>
 8006f76:	f04f 0800 	mov.w	r8, #0
 8006f7a:	f104 0a1a 	add.w	sl, r4, #26
 8006f7e:	e7f2      	b.n	8006f66 <_printf_float+0x422>
 8006f80:	2301      	movs	r3, #1
 8006f82:	4642      	mov	r2, r8
 8006f84:	e7df      	b.n	8006f46 <_printf_float+0x402>
 8006f86:	2301      	movs	r3, #1
 8006f88:	464a      	mov	r2, r9
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	47b8      	blx	r7
 8006f90:	3001      	adds	r0, #1
 8006f92:	f43f ae38 	beq.w	8006c06 <_printf_float+0xc2>
 8006f96:	f108 0801 	add.w	r8, r8, #1
 8006f9a:	68e3      	ldr	r3, [r4, #12]
 8006f9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f9e:	1a5b      	subs	r3, r3, r1
 8006fa0:	4543      	cmp	r3, r8
 8006fa2:	dcf0      	bgt.n	8006f86 <_printf_float+0x442>
 8006fa4:	e6fa      	b.n	8006d9c <_printf_float+0x258>
 8006fa6:	f04f 0800 	mov.w	r8, #0
 8006faa:	f104 0919 	add.w	r9, r4, #25
 8006fae:	e7f4      	b.n	8006f9a <_printf_float+0x456>

08006fb0 <_printf_common>:
 8006fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb4:	4616      	mov	r6, r2
 8006fb6:	4699      	mov	r9, r3
 8006fb8:	688a      	ldr	r2, [r1, #8]
 8006fba:	690b      	ldr	r3, [r1, #16]
 8006fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	bfb8      	it	lt
 8006fc4:	4613      	movlt	r3, r2
 8006fc6:	6033      	str	r3, [r6, #0]
 8006fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fcc:	4607      	mov	r7, r0
 8006fce:	460c      	mov	r4, r1
 8006fd0:	b10a      	cbz	r2, 8006fd6 <_printf_common+0x26>
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	6033      	str	r3, [r6, #0]
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	0699      	lsls	r1, r3, #26
 8006fda:	bf42      	ittt	mi
 8006fdc:	6833      	ldrmi	r3, [r6, #0]
 8006fde:	3302      	addmi	r3, #2
 8006fe0:	6033      	strmi	r3, [r6, #0]
 8006fe2:	6825      	ldr	r5, [r4, #0]
 8006fe4:	f015 0506 	ands.w	r5, r5, #6
 8006fe8:	d106      	bne.n	8006ff8 <_printf_common+0x48>
 8006fea:	f104 0a19 	add.w	sl, r4, #25
 8006fee:	68e3      	ldr	r3, [r4, #12]
 8006ff0:	6832      	ldr	r2, [r6, #0]
 8006ff2:	1a9b      	subs	r3, r3, r2
 8006ff4:	42ab      	cmp	r3, r5
 8006ff6:	dc26      	bgt.n	8007046 <_printf_common+0x96>
 8006ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ffc:	1e13      	subs	r3, r2, #0
 8006ffe:	6822      	ldr	r2, [r4, #0]
 8007000:	bf18      	it	ne
 8007002:	2301      	movne	r3, #1
 8007004:	0692      	lsls	r2, r2, #26
 8007006:	d42b      	bmi.n	8007060 <_printf_common+0xb0>
 8007008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800700c:	4649      	mov	r1, r9
 800700e:	4638      	mov	r0, r7
 8007010:	47c0      	blx	r8
 8007012:	3001      	adds	r0, #1
 8007014:	d01e      	beq.n	8007054 <_printf_common+0xa4>
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	68e5      	ldr	r5, [r4, #12]
 800701a:	6832      	ldr	r2, [r6, #0]
 800701c:	f003 0306 	and.w	r3, r3, #6
 8007020:	2b04      	cmp	r3, #4
 8007022:	bf08      	it	eq
 8007024:	1aad      	subeq	r5, r5, r2
 8007026:	68a3      	ldr	r3, [r4, #8]
 8007028:	6922      	ldr	r2, [r4, #16]
 800702a:	bf0c      	ite	eq
 800702c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007030:	2500      	movne	r5, #0
 8007032:	4293      	cmp	r3, r2
 8007034:	bfc4      	itt	gt
 8007036:	1a9b      	subgt	r3, r3, r2
 8007038:	18ed      	addgt	r5, r5, r3
 800703a:	2600      	movs	r6, #0
 800703c:	341a      	adds	r4, #26
 800703e:	42b5      	cmp	r5, r6
 8007040:	d11a      	bne.n	8007078 <_printf_common+0xc8>
 8007042:	2000      	movs	r0, #0
 8007044:	e008      	b.n	8007058 <_printf_common+0xa8>
 8007046:	2301      	movs	r3, #1
 8007048:	4652      	mov	r2, sl
 800704a:	4649      	mov	r1, r9
 800704c:	4638      	mov	r0, r7
 800704e:	47c0      	blx	r8
 8007050:	3001      	adds	r0, #1
 8007052:	d103      	bne.n	800705c <_printf_common+0xac>
 8007054:	f04f 30ff 	mov.w	r0, #4294967295
 8007058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800705c:	3501      	adds	r5, #1
 800705e:	e7c6      	b.n	8006fee <_printf_common+0x3e>
 8007060:	18e1      	adds	r1, r4, r3
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	2030      	movs	r0, #48	; 0x30
 8007066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800706a:	4422      	add	r2, r4
 800706c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007074:	3302      	adds	r3, #2
 8007076:	e7c7      	b.n	8007008 <_printf_common+0x58>
 8007078:	2301      	movs	r3, #1
 800707a:	4622      	mov	r2, r4
 800707c:	4649      	mov	r1, r9
 800707e:	4638      	mov	r0, r7
 8007080:	47c0      	blx	r8
 8007082:	3001      	adds	r0, #1
 8007084:	d0e6      	beq.n	8007054 <_printf_common+0xa4>
 8007086:	3601      	adds	r6, #1
 8007088:	e7d9      	b.n	800703e <_printf_common+0x8e>
	...

0800708c <_printf_i>:
 800708c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007090:	7e0f      	ldrb	r7, [r1, #24]
 8007092:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007094:	2f78      	cmp	r7, #120	; 0x78
 8007096:	4691      	mov	r9, r2
 8007098:	4680      	mov	r8, r0
 800709a:	460c      	mov	r4, r1
 800709c:	469a      	mov	sl, r3
 800709e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070a2:	d807      	bhi.n	80070b4 <_printf_i+0x28>
 80070a4:	2f62      	cmp	r7, #98	; 0x62
 80070a6:	d80a      	bhi.n	80070be <_printf_i+0x32>
 80070a8:	2f00      	cmp	r7, #0
 80070aa:	f000 80d8 	beq.w	800725e <_printf_i+0x1d2>
 80070ae:	2f58      	cmp	r7, #88	; 0x58
 80070b0:	f000 80a3 	beq.w	80071fa <_printf_i+0x16e>
 80070b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070bc:	e03a      	b.n	8007134 <_printf_i+0xa8>
 80070be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070c2:	2b15      	cmp	r3, #21
 80070c4:	d8f6      	bhi.n	80070b4 <_printf_i+0x28>
 80070c6:	a101      	add	r1, pc, #4	; (adr r1, 80070cc <_printf_i+0x40>)
 80070c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070cc:	08007125 	.word	0x08007125
 80070d0:	08007139 	.word	0x08007139
 80070d4:	080070b5 	.word	0x080070b5
 80070d8:	080070b5 	.word	0x080070b5
 80070dc:	080070b5 	.word	0x080070b5
 80070e0:	080070b5 	.word	0x080070b5
 80070e4:	08007139 	.word	0x08007139
 80070e8:	080070b5 	.word	0x080070b5
 80070ec:	080070b5 	.word	0x080070b5
 80070f0:	080070b5 	.word	0x080070b5
 80070f4:	080070b5 	.word	0x080070b5
 80070f8:	08007245 	.word	0x08007245
 80070fc:	08007169 	.word	0x08007169
 8007100:	08007227 	.word	0x08007227
 8007104:	080070b5 	.word	0x080070b5
 8007108:	080070b5 	.word	0x080070b5
 800710c:	08007267 	.word	0x08007267
 8007110:	080070b5 	.word	0x080070b5
 8007114:	08007169 	.word	0x08007169
 8007118:	080070b5 	.word	0x080070b5
 800711c:	080070b5 	.word	0x080070b5
 8007120:	0800722f 	.word	0x0800722f
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	1d1a      	adds	r2, r3, #4
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	602a      	str	r2, [r5, #0]
 800712c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007134:	2301      	movs	r3, #1
 8007136:	e0a3      	b.n	8007280 <_printf_i+0x1f4>
 8007138:	6820      	ldr	r0, [r4, #0]
 800713a:	6829      	ldr	r1, [r5, #0]
 800713c:	0606      	lsls	r6, r0, #24
 800713e:	f101 0304 	add.w	r3, r1, #4
 8007142:	d50a      	bpl.n	800715a <_printf_i+0xce>
 8007144:	680e      	ldr	r6, [r1, #0]
 8007146:	602b      	str	r3, [r5, #0]
 8007148:	2e00      	cmp	r6, #0
 800714a:	da03      	bge.n	8007154 <_printf_i+0xc8>
 800714c:	232d      	movs	r3, #45	; 0x2d
 800714e:	4276      	negs	r6, r6
 8007150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007154:	485e      	ldr	r0, [pc, #376]	; (80072d0 <_printf_i+0x244>)
 8007156:	230a      	movs	r3, #10
 8007158:	e019      	b.n	800718e <_printf_i+0x102>
 800715a:	680e      	ldr	r6, [r1, #0]
 800715c:	602b      	str	r3, [r5, #0]
 800715e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007162:	bf18      	it	ne
 8007164:	b236      	sxthne	r6, r6
 8007166:	e7ef      	b.n	8007148 <_printf_i+0xbc>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	6820      	ldr	r0, [r4, #0]
 800716c:	1d19      	adds	r1, r3, #4
 800716e:	6029      	str	r1, [r5, #0]
 8007170:	0601      	lsls	r1, r0, #24
 8007172:	d501      	bpl.n	8007178 <_printf_i+0xec>
 8007174:	681e      	ldr	r6, [r3, #0]
 8007176:	e002      	b.n	800717e <_printf_i+0xf2>
 8007178:	0646      	lsls	r6, r0, #25
 800717a:	d5fb      	bpl.n	8007174 <_printf_i+0xe8>
 800717c:	881e      	ldrh	r6, [r3, #0]
 800717e:	4854      	ldr	r0, [pc, #336]	; (80072d0 <_printf_i+0x244>)
 8007180:	2f6f      	cmp	r7, #111	; 0x6f
 8007182:	bf0c      	ite	eq
 8007184:	2308      	moveq	r3, #8
 8007186:	230a      	movne	r3, #10
 8007188:	2100      	movs	r1, #0
 800718a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800718e:	6865      	ldr	r5, [r4, #4]
 8007190:	60a5      	str	r5, [r4, #8]
 8007192:	2d00      	cmp	r5, #0
 8007194:	bfa2      	ittt	ge
 8007196:	6821      	ldrge	r1, [r4, #0]
 8007198:	f021 0104 	bicge.w	r1, r1, #4
 800719c:	6021      	strge	r1, [r4, #0]
 800719e:	b90e      	cbnz	r6, 80071a4 <_printf_i+0x118>
 80071a0:	2d00      	cmp	r5, #0
 80071a2:	d04d      	beq.n	8007240 <_printf_i+0x1b4>
 80071a4:	4615      	mov	r5, r2
 80071a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80071aa:	fb03 6711 	mls	r7, r3, r1, r6
 80071ae:	5dc7      	ldrb	r7, [r0, r7]
 80071b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071b4:	4637      	mov	r7, r6
 80071b6:	42bb      	cmp	r3, r7
 80071b8:	460e      	mov	r6, r1
 80071ba:	d9f4      	bls.n	80071a6 <_printf_i+0x11a>
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d10b      	bne.n	80071d8 <_printf_i+0x14c>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	07de      	lsls	r6, r3, #31
 80071c4:	d508      	bpl.n	80071d8 <_printf_i+0x14c>
 80071c6:	6923      	ldr	r3, [r4, #16]
 80071c8:	6861      	ldr	r1, [r4, #4]
 80071ca:	4299      	cmp	r1, r3
 80071cc:	bfde      	ittt	le
 80071ce:	2330      	movle	r3, #48	; 0x30
 80071d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071d8:	1b52      	subs	r2, r2, r5
 80071da:	6122      	str	r2, [r4, #16]
 80071dc:	f8cd a000 	str.w	sl, [sp]
 80071e0:	464b      	mov	r3, r9
 80071e2:	aa03      	add	r2, sp, #12
 80071e4:	4621      	mov	r1, r4
 80071e6:	4640      	mov	r0, r8
 80071e8:	f7ff fee2 	bl	8006fb0 <_printf_common>
 80071ec:	3001      	adds	r0, #1
 80071ee:	d14c      	bne.n	800728a <_printf_i+0x1fe>
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295
 80071f4:	b004      	add	sp, #16
 80071f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fa:	4835      	ldr	r0, [pc, #212]	; (80072d0 <_printf_i+0x244>)
 80071fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007200:	6829      	ldr	r1, [r5, #0]
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	f851 6b04 	ldr.w	r6, [r1], #4
 8007208:	6029      	str	r1, [r5, #0]
 800720a:	061d      	lsls	r5, r3, #24
 800720c:	d514      	bpl.n	8007238 <_printf_i+0x1ac>
 800720e:	07df      	lsls	r7, r3, #31
 8007210:	bf44      	itt	mi
 8007212:	f043 0320 	orrmi.w	r3, r3, #32
 8007216:	6023      	strmi	r3, [r4, #0]
 8007218:	b91e      	cbnz	r6, 8007222 <_printf_i+0x196>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	f023 0320 	bic.w	r3, r3, #32
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	2310      	movs	r3, #16
 8007224:	e7b0      	b.n	8007188 <_printf_i+0xfc>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	f043 0320 	orr.w	r3, r3, #32
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	2378      	movs	r3, #120	; 0x78
 8007230:	4828      	ldr	r0, [pc, #160]	; (80072d4 <_printf_i+0x248>)
 8007232:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007236:	e7e3      	b.n	8007200 <_printf_i+0x174>
 8007238:	0659      	lsls	r1, r3, #25
 800723a:	bf48      	it	mi
 800723c:	b2b6      	uxthmi	r6, r6
 800723e:	e7e6      	b.n	800720e <_printf_i+0x182>
 8007240:	4615      	mov	r5, r2
 8007242:	e7bb      	b.n	80071bc <_printf_i+0x130>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	6826      	ldr	r6, [r4, #0]
 8007248:	6961      	ldr	r1, [r4, #20]
 800724a:	1d18      	adds	r0, r3, #4
 800724c:	6028      	str	r0, [r5, #0]
 800724e:	0635      	lsls	r5, r6, #24
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	d501      	bpl.n	8007258 <_printf_i+0x1cc>
 8007254:	6019      	str	r1, [r3, #0]
 8007256:	e002      	b.n	800725e <_printf_i+0x1d2>
 8007258:	0670      	lsls	r0, r6, #25
 800725a:	d5fb      	bpl.n	8007254 <_printf_i+0x1c8>
 800725c:	8019      	strh	r1, [r3, #0]
 800725e:	2300      	movs	r3, #0
 8007260:	6123      	str	r3, [r4, #16]
 8007262:	4615      	mov	r5, r2
 8007264:	e7ba      	b.n	80071dc <_printf_i+0x150>
 8007266:	682b      	ldr	r3, [r5, #0]
 8007268:	1d1a      	adds	r2, r3, #4
 800726a:	602a      	str	r2, [r5, #0]
 800726c:	681d      	ldr	r5, [r3, #0]
 800726e:	6862      	ldr	r2, [r4, #4]
 8007270:	2100      	movs	r1, #0
 8007272:	4628      	mov	r0, r5
 8007274:	f7f8 ffb4 	bl	80001e0 <memchr>
 8007278:	b108      	cbz	r0, 800727e <_printf_i+0x1f2>
 800727a:	1b40      	subs	r0, r0, r5
 800727c:	6060      	str	r0, [r4, #4]
 800727e:	6863      	ldr	r3, [r4, #4]
 8007280:	6123      	str	r3, [r4, #16]
 8007282:	2300      	movs	r3, #0
 8007284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007288:	e7a8      	b.n	80071dc <_printf_i+0x150>
 800728a:	6923      	ldr	r3, [r4, #16]
 800728c:	462a      	mov	r2, r5
 800728e:	4649      	mov	r1, r9
 8007290:	4640      	mov	r0, r8
 8007292:	47d0      	blx	sl
 8007294:	3001      	adds	r0, #1
 8007296:	d0ab      	beq.n	80071f0 <_printf_i+0x164>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	079b      	lsls	r3, r3, #30
 800729c:	d413      	bmi.n	80072c6 <_printf_i+0x23a>
 800729e:	68e0      	ldr	r0, [r4, #12]
 80072a0:	9b03      	ldr	r3, [sp, #12]
 80072a2:	4298      	cmp	r0, r3
 80072a4:	bfb8      	it	lt
 80072a6:	4618      	movlt	r0, r3
 80072a8:	e7a4      	b.n	80071f4 <_printf_i+0x168>
 80072aa:	2301      	movs	r3, #1
 80072ac:	4632      	mov	r2, r6
 80072ae:	4649      	mov	r1, r9
 80072b0:	4640      	mov	r0, r8
 80072b2:	47d0      	blx	sl
 80072b4:	3001      	adds	r0, #1
 80072b6:	d09b      	beq.n	80071f0 <_printf_i+0x164>
 80072b8:	3501      	adds	r5, #1
 80072ba:	68e3      	ldr	r3, [r4, #12]
 80072bc:	9903      	ldr	r1, [sp, #12]
 80072be:	1a5b      	subs	r3, r3, r1
 80072c0:	42ab      	cmp	r3, r5
 80072c2:	dcf2      	bgt.n	80072aa <_printf_i+0x21e>
 80072c4:	e7eb      	b.n	800729e <_printf_i+0x212>
 80072c6:	2500      	movs	r5, #0
 80072c8:	f104 0619 	add.w	r6, r4, #25
 80072cc:	e7f5      	b.n	80072ba <_printf_i+0x22e>
 80072ce:	bf00      	nop
 80072d0:	0800aa1a 	.word	0x0800aa1a
 80072d4:	0800aa2b 	.word	0x0800aa2b

080072d8 <siprintf>:
 80072d8:	b40e      	push	{r1, r2, r3}
 80072da:	b500      	push	{lr}
 80072dc:	b09c      	sub	sp, #112	; 0x70
 80072de:	ab1d      	add	r3, sp, #116	; 0x74
 80072e0:	9002      	str	r0, [sp, #8]
 80072e2:	9006      	str	r0, [sp, #24]
 80072e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072e8:	4809      	ldr	r0, [pc, #36]	; (8007310 <siprintf+0x38>)
 80072ea:	9107      	str	r1, [sp, #28]
 80072ec:	9104      	str	r1, [sp, #16]
 80072ee:	4909      	ldr	r1, [pc, #36]	; (8007314 <siprintf+0x3c>)
 80072f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80072f4:	9105      	str	r1, [sp, #20]
 80072f6:	6800      	ldr	r0, [r0, #0]
 80072f8:	9301      	str	r3, [sp, #4]
 80072fa:	a902      	add	r1, sp, #8
 80072fc:	f001 fb76 	bl	80089ec <_svfiprintf_r>
 8007300:	9b02      	ldr	r3, [sp, #8]
 8007302:	2200      	movs	r2, #0
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	b01c      	add	sp, #112	; 0x70
 8007308:	f85d eb04 	ldr.w	lr, [sp], #4
 800730c:	b003      	add	sp, #12
 800730e:	4770      	bx	lr
 8007310:	20000240 	.word	0x20000240
 8007314:	ffff0208 	.word	0xffff0208

08007318 <quorem>:
 8007318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	6903      	ldr	r3, [r0, #16]
 800731e:	690c      	ldr	r4, [r1, #16]
 8007320:	42a3      	cmp	r3, r4
 8007322:	4607      	mov	r7, r0
 8007324:	f2c0 8081 	blt.w	800742a <quorem+0x112>
 8007328:	3c01      	subs	r4, #1
 800732a:	f101 0814 	add.w	r8, r1, #20
 800732e:	f100 0514 	add.w	r5, r0, #20
 8007332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007336:	9301      	str	r3, [sp, #4]
 8007338:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800733c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007340:	3301      	adds	r3, #1
 8007342:	429a      	cmp	r2, r3
 8007344:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007348:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800734c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007350:	d331      	bcc.n	80073b6 <quorem+0x9e>
 8007352:	f04f 0e00 	mov.w	lr, #0
 8007356:	4640      	mov	r0, r8
 8007358:	46ac      	mov	ip, r5
 800735a:	46f2      	mov	sl, lr
 800735c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007360:	b293      	uxth	r3, r2
 8007362:	fb06 e303 	mla	r3, r6, r3, lr
 8007366:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800736a:	b29b      	uxth	r3, r3
 800736c:	ebaa 0303 	sub.w	r3, sl, r3
 8007370:	f8dc a000 	ldr.w	sl, [ip]
 8007374:	0c12      	lsrs	r2, r2, #16
 8007376:	fa13 f38a 	uxtah	r3, r3, sl
 800737a:	fb06 e202 	mla	r2, r6, r2, lr
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	9b00      	ldr	r3, [sp, #0]
 8007382:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007386:	b292      	uxth	r2, r2
 8007388:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800738c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007390:	f8bd 3000 	ldrh.w	r3, [sp]
 8007394:	4581      	cmp	r9, r0
 8007396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800739a:	f84c 3b04 	str.w	r3, [ip], #4
 800739e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073a2:	d2db      	bcs.n	800735c <quorem+0x44>
 80073a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80073a8:	b92b      	cbnz	r3, 80073b6 <quorem+0x9e>
 80073aa:	9b01      	ldr	r3, [sp, #4]
 80073ac:	3b04      	subs	r3, #4
 80073ae:	429d      	cmp	r5, r3
 80073b0:	461a      	mov	r2, r3
 80073b2:	d32e      	bcc.n	8007412 <quorem+0xfa>
 80073b4:	613c      	str	r4, [r7, #16]
 80073b6:	4638      	mov	r0, r7
 80073b8:	f001 f8c4 	bl	8008544 <__mcmp>
 80073bc:	2800      	cmp	r0, #0
 80073be:	db24      	blt.n	800740a <quorem+0xf2>
 80073c0:	3601      	adds	r6, #1
 80073c2:	4628      	mov	r0, r5
 80073c4:	f04f 0c00 	mov.w	ip, #0
 80073c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80073cc:	f8d0 e000 	ldr.w	lr, [r0]
 80073d0:	b293      	uxth	r3, r2
 80073d2:	ebac 0303 	sub.w	r3, ip, r3
 80073d6:	0c12      	lsrs	r2, r2, #16
 80073d8:	fa13 f38e 	uxtah	r3, r3, lr
 80073dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80073e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073ea:	45c1      	cmp	r9, r8
 80073ec:	f840 3b04 	str.w	r3, [r0], #4
 80073f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80073f4:	d2e8      	bcs.n	80073c8 <quorem+0xb0>
 80073f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073fe:	b922      	cbnz	r2, 800740a <quorem+0xf2>
 8007400:	3b04      	subs	r3, #4
 8007402:	429d      	cmp	r5, r3
 8007404:	461a      	mov	r2, r3
 8007406:	d30a      	bcc.n	800741e <quorem+0x106>
 8007408:	613c      	str	r4, [r7, #16]
 800740a:	4630      	mov	r0, r6
 800740c:	b003      	add	sp, #12
 800740e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007412:	6812      	ldr	r2, [r2, #0]
 8007414:	3b04      	subs	r3, #4
 8007416:	2a00      	cmp	r2, #0
 8007418:	d1cc      	bne.n	80073b4 <quorem+0x9c>
 800741a:	3c01      	subs	r4, #1
 800741c:	e7c7      	b.n	80073ae <quorem+0x96>
 800741e:	6812      	ldr	r2, [r2, #0]
 8007420:	3b04      	subs	r3, #4
 8007422:	2a00      	cmp	r2, #0
 8007424:	d1f0      	bne.n	8007408 <quorem+0xf0>
 8007426:	3c01      	subs	r4, #1
 8007428:	e7eb      	b.n	8007402 <quorem+0xea>
 800742a:	2000      	movs	r0, #0
 800742c:	e7ee      	b.n	800740c <quorem+0xf4>
	...

08007430 <_dtoa_r>:
 8007430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	ed2d 8b04 	vpush	{d8-d9}
 8007438:	ec57 6b10 	vmov	r6, r7, d0
 800743c:	b093      	sub	sp, #76	; 0x4c
 800743e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007440:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007444:	9106      	str	r1, [sp, #24]
 8007446:	ee10 aa10 	vmov	sl, s0
 800744a:	4604      	mov	r4, r0
 800744c:	9209      	str	r2, [sp, #36]	; 0x24
 800744e:	930c      	str	r3, [sp, #48]	; 0x30
 8007450:	46bb      	mov	fp, r7
 8007452:	b975      	cbnz	r5, 8007472 <_dtoa_r+0x42>
 8007454:	2010      	movs	r0, #16
 8007456:	f000 fddd 	bl	8008014 <malloc>
 800745a:	4602      	mov	r2, r0
 800745c:	6260      	str	r0, [r4, #36]	; 0x24
 800745e:	b920      	cbnz	r0, 800746a <_dtoa_r+0x3a>
 8007460:	4ba7      	ldr	r3, [pc, #668]	; (8007700 <_dtoa_r+0x2d0>)
 8007462:	21ea      	movs	r1, #234	; 0xea
 8007464:	48a7      	ldr	r0, [pc, #668]	; (8007704 <_dtoa_r+0x2d4>)
 8007466:	f001 fbd1 	bl	8008c0c <__assert_func>
 800746a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800746e:	6005      	str	r5, [r0, #0]
 8007470:	60c5      	str	r5, [r0, #12]
 8007472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007474:	6819      	ldr	r1, [r3, #0]
 8007476:	b151      	cbz	r1, 800748e <_dtoa_r+0x5e>
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	604a      	str	r2, [r1, #4]
 800747c:	2301      	movs	r3, #1
 800747e:	4093      	lsls	r3, r2
 8007480:	608b      	str	r3, [r1, #8]
 8007482:	4620      	mov	r0, r4
 8007484:	f000 fe1c 	bl	80080c0 <_Bfree>
 8007488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	1e3b      	subs	r3, r7, #0
 8007490:	bfaa      	itet	ge
 8007492:	2300      	movge	r3, #0
 8007494:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007498:	f8c8 3000 	strge.w	r3, [r8]
 800749c:	4b9a      	ldr	r3, [pc, #616]	; (8007708 <_dtoa_r+0x2d8>)
 800749e:	bfbc      	itt	lt
 80074a0:	2201      	movlt	r2, #1
 80074a2:	f8c8 2000 	strlt.w	r2, [r8]
 80074a6:	ea33 030b 	bics.w	r3, r3, fp
 80074aa:	d11b      	bne.n	80074e4 <_dtoa_r+0xb4>
 80074ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80074b2:	6013      	str	r3, [r2, #0]
 80074b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074b8:	4333      	orrs	r3, r6
 80074ba:	f000 8592 	beq.w	8007fe2 <_dtoa_r+0xbb2>
 80074be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074c0:	b963      	cbnz	r3, 80074dc <_dtoa_r+0xac>
 80074c2:	4b92      	ldr	r3, [pc, #584]	; (800770c <_dtoa_r+0x2dc>)
 80074c4:	e022      	b.n	800750c <_dtoa_r+0xdc>
 80074c6:	4b92      	ldr	r3, [pc, #584]	; (8007710 <_dtoa_r+0x2e0>)
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	3308      	adds	r3, #8
 80074cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	9801      	ldr	r0, [sp, #4]
 80074d2:	b013      	add	sp, #76	; 0x4c
 80074d4:	ecbd 8b04 	vpop	{d8-d9}
 80074d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074dc:	4b8b      	ldr	r3, [pc, #556]	; (800770c <_dtoa_r+0x2dc>)
 80074de:	9301      	str	r3, [sp, #4]
 80074e0:	3303      	adds	r3, #3
 80074e2:	e7f3      	b.n	80074cc <_dtoa_r+0x9c>
 80074e4:	2200      	movs	r2, #0
 80074e6:	2300      	movs	r3, #0
 80074e8:	4650      	mov	r0, sl
 80074ea:	4659      	mov	r1, fp
 80074ec:	f7f9 faec 	bl	8000ac8 <__aeabi_dcmpeq>
 80074f0:	ec4b ab19 	vmov	d9, sl, fp
 80074f4:	4680      	mov	r8, r0
 80074f6:	b158      	cbz	r0, 8007510 <_dtoa_r+0xe0>
 80074f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074fa:	2301      	movs	r3, #1
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 856b 	beq.w	8007fdc <_dtoa_r+0xbac>
 8007506:	4883      	ldr	r0, [pc, #524]	; (8007714 <_dtoa_r+0x2e4>)
 8007508:	6018      	str	r0, [r3, #0]
 800750a:	1e43      	subs	r3, r0, #1
 800750c:	9301      	str	r3, [sp, #4]
 800750e:	e7df      	b.n	80074d0 <_dtoa_r+0xa0>
 8007510:	ec4b ab10 	vmov	d0, sl, fp
 8007514:	aa10      	add	r2, sp, #64	; 0x40
 8007516:	a911      	add	r1, sp, #68	; 0x44
 8007518:	4620      	mov	r0, r4
 800751a:	f001 f8b9 	bl	8008690 <__d2b>
 800751e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007522:	ee08 0a10 	vmov	s16, r0
 8007526:	2d00      	cmp	r5, #0
 8007528:	f000 8084 	beq.w	8007634 <_dtoa_r+0x204>
 800752c:	ee19 3a90 	vmov	r3, s19
 8007530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007534:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007538:	4656      	mov	r6, sl
 800753a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800753e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007542:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007546:	4b74      	ldr	r3, [pc, #464]	; (8007718 <_dtoa_r+0x2e8>)
 8007548:	2200      	movs	r2, #0
 800754a:	4630      	mov	r0, r6
 800754c:	4639      	mov	r1, r7
 800754e:	f7f8 fe9b 	bl	8000288 <__aeabi_dsub>
 8007552:	a365      	add	r3, pc, #404	; (adr r3, 80076e8 <_dtoa_r+0x2b8>)
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f7f9 f84e 	bl	80005f8 <__aeabi_dmul>
 800755c:	a364      	add	r3, pc, #400	; (adr r3, 80076f0 <_dtoa_r+0x2c0>)
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	f7f8 fe93 	bl	800028c <__adddf3>
 8007566:	4606      	mov	r6, r0
 8007568:	4628      	mov	r0, r5
 800756a:	460f      	mov	r7, r1
 800756c:	f7f8 ffda 	bl	8000524 <__aeabi_i2d>
 8007570:	a361      	add	r3, pc, #388	; (adr r3, 80076f8 <_dtoa_r+0x2c8>)
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	f7f9 f83f 	bl	80005f8 <__aeabi_dmul>
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	4630      	mov	r0, r6
 8007580:	4639      	mov	r1, r7
 8007582:	f7f8 fe83 	bl	800028c <__adddf3>
 8007586:	4606      	mov	r6, r0
 8007588:	460f      	mov	r7, r1
 800758a:	f7f9 fae5 	bl	8000b58 <__aeabi_d2iz>
 800758e:	2200      	movs	r2, #0
 8007590:	9000      	str	r0, [sp, #0]
 8007592:	2300      	movs	r3, #0
 8007594:	4630      	mov	r0, r6
 8007596:	4639      	mov	r1, r7
 8007598:	f7f9 faa0 	bl	8000adc <__aeabi_dcmplt>
 800759c:	b150      	cbz	r0, 80075b4 <_dtoa_r+0x184>
 800759e:	9800      	ldr	r0, [sp, #0]
 80075a0:	f7f8 ffc0 	bl	8000524 <__aeabi_i2d>
 80075a4:	4632      	mov	r2, r6
 80075a6:	463b      	mov	r3, r7
 80075a8:	f7f9 fa8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80075ac:	b910      	cbnz	r0, 80075b4 <_dtoa_r+0x184>
 80075ae:	9b00      	ldr	r3, [sp, #0]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	9b00      	ldr	r3, [sp, #0]
 80075b6:	2b16      	cmp	r3, #22
 80075b8:	d85a      	bhi.n	8007670 <_dtoa_r+0x240>
 80075ba:	9a00      	ldr	r2, [sp, #0]
 80075bc:	4b57      	ldr	r3, [pc, #348]	; (800771c <_dtoa_r+0x2ec>)
 80075be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c6:	ec51 0b19 	vmov	r0, r1, d9
 80075ca:	f7f9 fa87 	bl	8000adc <__aeabi_dcmplt>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d050      	beq.n	8007674 <_dtoa_r+0x244>
 80075d2:	9b00      	ldr	r3, [sp, #0]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	2300      	movs	r3, #0
 80075da:	930b      	str	r3, [sp, #44]	; 0x2c
 80075dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075de:	1b5d      	subs	r5, r3, r5
 80075e0:	1e6b      	subs	r3, r5, #1
 80075e2:	9305      	str	r3, [sp, #20]
 80075e4:	bf45      	ittet	mi
 80075e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80075ea:	9304      	strmi	r3, [sp, #16]
 80075ec:	2300      	movpl	r3, #0
 80075ee:	2300      	movmi	r3, #0
 80075f0:	bf4c      	ite	mi
 80075f2:	9305      	strmi	r3, [sp, #20]
 80075f4:	9304      	strpl	r3, [sp, #16]
 80075f6:	9b00      	ldr	r3, [sp, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	db3d      	blt.n	8007678 <_dtoa_r+0x248>
 80075fc:	9b05      	ldr	r3, [sp, #20]
 80075fe:	9a00      	ldr	r2, [sp, #0]
 8007600:	920a      	str	r2, [sp, #40]	; 0x28
 8007602:	4413      	add	r3, r2
 8007604:	9305      	str	r3, [sp, #20]
 8007606:	2300      	movs	r3, #0
 8007608:	9307      	str	r3, [sp, #28]
 800760a:	9b06      	ldr	r3, [sp, #24]
 800760c:	2b09      	cmp	r3, #9
 800760e:	f200 8089 	bhi.w	8007724 <_dtoa_r+0x2f4>
 8007612:	2b05      	cmp	r3, #5
 8007614:	bfc4      	itt	gt
 8007616:	3b04      	subgt	r3, #4
 8007618:	9306      	strgt	r3, [sp, #24]
 800761a:	9b06      	ldr	r3, [sp, #24]
 800761c:	f1a3 0302 	sub.w	r3, r3, #2
 8007620:	bfcc      	ite	gt
 8007622:	2500      	movgt	r5, #0
 8007624:	2501      	movle	r5, #1
 8007626:	2b03      	cmp	r3, #3
 8007628:	f200 8087 	bhi.w	800773a <_dtoa_r+0x30a>
 800762c:	e8df f003 	tbb	[pc, r3]
 8007630:	59383a2d 	.word	0x59383a2d
 8007634:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007638:	441d      	add	r5, r3
 800763a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800763e:	2b20      	cmp	r3, #32
 8007640:	bfc1      	itttt	gt
 8007642:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007646:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800764a:	fa0b f303 	lslgt.w	r3, fp, r3
 800764e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007652:	bfda      	itte	le
 8007654:	f1c3 0320 	rsble	r3, r3, #32
 8007658:	fa06 f003 	lslle.w	r0, r6, r3
 800765c:	4318      	orrgt	r0, r3
 800765e:	f7f8 ff51 	bl	8000504 <__aeabi_ui2d>
 8007662:	2301      	movs	r3, #1
 8007664:	4606      	mov	r6, r0
 8007666:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800766a:	3d01      	subs	r5, #1
 800766c:	930e      	str	r3, [sp, #56]	; 0x38
 800766e:	e76a      	b.n	8007546 <_dtoa_r+0x116>
 8007670:	2301      	movs	r3, #1
 8007672:	e7b2      	b.n	80075da <_dtoa_r+0x1aa>
 8007674:	900b      	str	r0, [sp, #44]	; 0x2c
 8007676:	e7b1      	b.n	80075dc <_dtoa_r+0x1ac>
 8007678:	9b04      	ldr	r3, [sp, #16]
 800767a:	9a00      	ldr	r2, [sp, #0]
 800767c:	1a9b      	subs	r3, r3, r2
 800767e:	9304      	str	r3, [sp, #16]
 8007680:	4253      	negs	r3, r2
 8007682:	9307      	str	r3, [sp, #28]
 8007684:	2300      	movs	r3, #0
 8007686:	930a      	str	r3, [sp, #40]	; 0x28
 8007688:	e7bf      	b.n	800760a <_dtoa_r+0x1da>
 800768a:	2300      	movs	r3, #0
 800768c:	9308      	str	r3, [sp, #32]
 800768e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007690:	2b00      	cmp	r3, #0
 8007692:	dc55      	bgt.n	8007740 <_dtoa_r+0x310>
 8007694:	2301      	movs	r3, #1
 8007696:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800769a:	461a      	mov	r2, r3
 800769c:	9209      	str	r2, [sp, #36]	; 0x24
 800769e:	e00c      	b.n	80076ba <_dtoa_r+0x28a>
 80076a0:	2301      	movs	r3, #1
 80076a2:	e7f3      	b.n	800768c <_dtoa_r+0x25c>
 80076a4:	2300      	movs	r3, #0
 80076a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076a8:	9308      	str	r3, [sp, #32]
 80076aa:	9b00      	ldr	r3, [sp, #0]
 80076ac:	4413      	add	r3, r2
 80076ae:	9302      	str	r3, [sp, #8]
 80076b0:	3301      	adds	r3, #1
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	9303      	str	r3, [sp, #12]
 80076b6:	bfb8      	it	lt
 80076b8:	2301      	movlt	r3, #1
 80076ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80076bc:	2200      	movs	r2, #0
 80076be:	6042      	str	r2, [r0, #4]
 80076c0:	2204      	movs	r2, #4
 80076c2:	f102 0614 	add.w	r6, r2, #20
 80076c6:	429e      	cmp	r6, r3
 80076c8:	6841      	ldr	r1, [r0, #4]
 80076ca:	d93d      	bls.n	8007748 <_dtoa_r+0x318>
 80076cc:	4620      	mov	r0, r4
 80076ce:	f000 fcb7 	bl	8008040 <_Balloc>
 80076d2:	9001      	str	r0, [sp, #4]
 80076d4:	2800      	cmp	r0, #0
 80076d6:	d13b      	bne.n	8007750 <_dtoa_r+0x320>
 80076d8:	4b11      	ldr	r3, [pc, #68]	; (8007720 <_dtoa_r+0x2f0>)
 80076da:	4602      	mov	r2, r0
 80076dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80076e0:	e6c0      	b.n	8007464 <_dtoa_r+0x34>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e7df      	b.n	80076a6 <_dtoa_r+0x276>
 80076e6:	bf00      	nop
 80076e8:	636f4361 	.word	0x636f4361
 80076ec:	3fd287a7 	.word	0x3fd287a7
 80076f0:	8b60c8b3 	.word	0x8b60c8b3
 80076f4:	3fc68a28 	.word	0x3fc68a28
 80076f8:	509f79fb 	.word	0x509f79fb
 80076fc:	3fd34413 	.word	0x3fd34413
 8007700:	0800aa49 	.word	0x0800aa49
 8007704:	0800aa60 	.word	0x0800aa60
 8007708:	7ff00000 	.word	0x7ff00000
 800770c:	0800aa45 	.word	0x0800aa45
 8007710:	0800aa3c 	.word	0x0800aa3c
 8007714:	0800aa19 	.word	0x0800aa19
 8007718:	3ff80000 	.word	0x3ff80000
 800771c:	0800ab50 	.word	0x0800ab50
 8007720:	0800aabb 	.word	0x0800aabb
 8007724:	2501      	movs	r5, #1
 8007726:	2300      	movs	r3, #0
 8007728:	9306      	str	r3, [sp, #24]
 800772a:	9508      	str	r5, [sp, #32]
 800772c:	f04f 33ff 	mov.w	r3, #4294967295
 8007730:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007734:	2200      	movs	r2, #0
 8007736:	2312      	movs	r3, #18
 8007738:	e7b0      	b.n	800769c <_dtoa_r+0x26c>
 800773a:	2301      	movs	r3, #1
 800773c:	9308      	str	r3, [sp, #32]
 800773e:	e7f5      	b.n	800772c <_dtoa_r+0x2fc>
 8007740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007742:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007746:	e7b8      	b.n	80076ba <_dtoa_r+0x28a>
 8007748:	3101      	adds	r1, #1
 800774a:	6041      	str	r1, [r0, #4]
 800774c:	0052      	lsls	r2, r2, #1
 800774e:	e7b8      	b.n	80076c2 <_dtoa_r+0x292>
 8007750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007752:	9a01      	ldr	r2, [sp, #4]
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	2b0e      	cmp	r3, #14
 800775a:	f200 809d 	bhi.w	8007898 <_dtoa_r+0x468>
 800775e:	2d00      	cmp	r5, #0
 8007760:	f000 809a 	beq.w	8007898 <_dtoa_r+0x468>
 8007764:	9b00      	ldr	r3, [sp, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	dd32      	ble.n	80077d0 <_dtoa_r+0x3a0>
 800776a:	4ab7      	ldr	r2, [pc, #732]	; (8007a48 <_dtoa_r+0x618>)
 800776c:	f003 030f 	and.w	r3, r3, #15
 8007770:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007774:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007778:	9b00      	ldr	r3, [sp, #0]
 800777a:	05d8      	lsls	r0, r3, #23
 800777c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007780:	d516      	bpl.n	80077b0 <_dtoa_r+0x380>
 8007782:	4bb2      	ldr	r3, [pc, #712]	; (8007a4c <_dtoa_r+0x61c>)
 8007784:	ec51 0b19 	vmov	r0, r1, d9
 8007788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800778c:	f7f9 f85e 	bl	800084c <__aeabi_ddiv>
 8007790:	f007 070f 	and.w	r7, r7, #15
 8007794:	4682      	mov	sl, r0
 8007796:	468b      	mov	fp, r1
 8007798:	2503      	movs	r5, #3
 800779a:	4eac      	ldr	r6, [pc, #688]	; (8007a4c <_dtoa_r+0x61c>)
 800779c:	b957      	cbnz	r7, 80077b4 <_dtoa_r+0x384>
 800779e:	4642      	mov	r2, r8
 80077a0:	464b      	mov	r3, r9
 80077a2:	4650      	mov	r0, sl
 80077a4:	4659      	mov	r1, fp
 80077a6:	f7f9 f851 	bl	800084c <__aeabi_ddiv>
 80077aa:	4682      	mov	sl, r0
 80077ac:	468b      	mov	fp, r1
 80077ae:	e028      	b.n	8007802 <_dtoa_r+0x3d2>
 80077b0:	2502      	movs	r5, #2
 80077b2:	e7f2      	b.n	800779a <_dtoa_r+0x36a>
 80077b4:	07f9      	lsls	r1, r7, #31
 80077b6:	d508      	bpl.n	80077ca <_dtoa_r+0x39a>
 80077b8:	4640      	mov	r0, r8
 80077ba:	4649      	mov	r1, r9
 80077bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077c0:	f7f8 ff1a 	bl	80005f8 <__aeabi_dmul>
 80077c4:	3501      	adds	r5, #1
 80077c6:	4680      	mov	r8, r0
 80077c8:	4689      	mov	r9, r1
 80077ca:	107f      	asrs	r7, r7, #1
 80077cc:	3608      	adds	r6, #8
 80077ce:	e7e5      	b.n	800779c <_dtoa_r+0x36c>
 80077d0:	f000 809b 	beq.w	800790a <_dtoa_r+0x4da>
 80077d4:	9b00      	ldr	r3, [sp, #0]
 80077d6:	4f9d      	ldr	r7, [pc, #628]	; (8007a4c <_dtoa_r+0x61c>)
 80077d8:	425e      	negs	r6, r3
 80077da:	4b9b      	ldr	r3, [pc, #620]	; (8007a48 <_dtoa_r+0x618>)
 80077dc:	f006 020f 	and.w	r2, r6, #15
 80077e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	ec51 0b19 	vmov	r0, r1, d9
 80077ec:	f7f8 ff04 	bl	80005f8 <__aeabi_dmul>
 80077f0:	1136      	asrs	r6, r6, #4
 80077f2:	4682      	mov	sl, r0
 80077f4:	468b      	mov	fp, r1
 80077f6:	2300      	movs	r3, #0
 80077f8:	2502      	movs	r5, #2
 80077fa:	2e00      	cmp	r6, #0
 80077fc:	d17a      	bne.n	80078f4 <_dtoa_r+0x4c4>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1d3      	bne.n	80077aa <_dtoa_r+0x37a>
 8007802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 8082 	beq.w	800790e <_dtoa_r+0x4de>
 800780a:	4b91      	ldr	r3, [pc, #580]	; (8007a50 <_dtoa_r+0x620>)
 800780c:	2200      	movs	r2, #0
 800780e:	4650      	mov	r0, sl
 8007810:	4659      	mov	r1, fp
 8007812:	f7f9 f963 	bl	8000adc <__aeabi_dcmplt>
 8007816:	2800      	cmp	r0, #0
 8007818:	d079      	beq.n	800790e <_dtoa_r+0x4de>
 800781a:	9b03      	ldr	r3, [sp, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d076      	beq.n	800790e <_dtoa_r+0x4de>
 8007820:	9b02      	ldr	r3, [sp, #8]
 8007822:	2b00      	cmp	r3, #0
 8007824:	dd36      	ble.n	8007894 <_dtoa_r+0x464>
 8007826:	9b00      	ldr	r3, [sp, #0]
 8007828:	4650      	mov	r0, sl
 800782a:	4659      	mov	r1, fp
 800782c:	1e5f      	subs	r7, r3, #1
 800782e:	2200      	movs	r2, #0
 8007830:	4b88      	ldr	r3, [pc, #544]	; (8007a54 <_dtoa_r+0x624>)
 8007832:	f7f8 fee1 	bl	80005f8 <__aeabi_dmul>
 8007836:	9e02      	ldr	r6, [sp, #8]
 8007838:	4682      	mov	sl, r0
 800783a:	468b      	mov	fp, r1
 800783c:	3501      	adds	r5, #1
 800783e:	4628      	mov	r0, r5
 8007840:	f7f8 fe70 	bl	8000524 <__aeabi_i2d>
 8007844:	4652      	mov	r2, sl
 8007846:	465b      	mov	r3, fp
 8007848:	f7f8 fed6 	bl	80005f8 <__aeabi_dmul>
 800784c:	4b82      	ldr	r3, [pc, #520]	; (8007a58 <_dtoa_r+0x628>)
 800784e:	2200      	movs	r2, #0
 8007850:	f7f8 fd1c 	bl	800028c <__adddf3>
 8007854:	46d0      	mov	r8, sl
 8007856:	46d9      	mov	r9, fp
 8007858:	4682      	mov	sl, r0
 800785a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800785e:	2e00      	cmp	r6, #0
 8007860:	d158      	bne.n	8007914 <_dtoa_r+0x4e4>
 8007862:	4b7e      	ldr	r3, [pc, #504]	; (8007a5c <_dtoa_r+0x62c>)
 8007864:	2200      	movs	r2, #0
 8007866:	4640      	mov	r0, r8
 8007868:	4649      	mov	r1, r9
 800786a:	f7f8 fd0d 	bl	8000288 <__aeabi_dsub>
 800786e:	4652      	mov	r2, sl
 8007870:	465b      	mov	r3, fp
 8007872:	4680      	mov	r8, r0
 8007874:	4689      	mov	r9, r1
 8007876:	f7f9 f94f 	bl	8000b18 <__aeabi_dcmpgt>
 800787a:	2800      	cmp	r0, #0
 800787c:	f040 8295 	bne.w	8007daa <_dtoa_r+0x97a>
 8007880:	4652      	mov	r2, sl
 8007882:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007886:	4640      	mov	r0, r8
 8007888:	4649      	mov	r1, r9
 800788a:	f7f9 f927 	bl	8000adc <__aeabi_dcmplt>
 800788e:	2800      	cmp	r0, #0
 8007890:	f040 8289 	bne.w	8007da6 <_dtoa_r+0x976>
 8007894:	ec5b ab19 	vmov	sl, fp, d9
 8007898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800789a:	2b00      	cmp	r3, #0
 800789c:	f2c0 8148 	blt.w	8007b30 <_dtoa_r+0x700>
 80078a0:	9a00      	ldr	r2, [sp, #0]
 80078a2:	2a0e      	cmp	r2, #14
 80078a4:	f300 8144 	bgt.w	8007b30 <_dtoa_r+0x700>
 80078a8:	4b67      	ldr	r3, [pc, #412]	; (8007a48 <_dtoa_r+0x618>)
 80078aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f280 80d5 	bge.w	8007a64 <_dtoa_r+0x634>
 80078ba:	9b03      	ldr	r3, [sp, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f300 80d1 	bgt.w	8007a64 <_dtoa_r+0x634>
 80078c2:	f040 826f 	bne.w	8007da4 <_dtoa_r+0x974>
 80078c6:	4b65      	ldr	r3, [pc, #404]	; (8007a5c <_dtoa_r+0x62c>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	4640      	mov	r0, r8
 80078cc:	4649      	mov	r1, r9
 80078ce:	f7f8 fe93 	bl	80005f8 <__aeabi_dmul>
 80078d2:	4652      	mov	r2, sl
 80078d4:	465b      	mov	r3, fp
 80078d6:	f7f9 f915 	bl	8000b04 <__aeabi_dcmpge>
 80078da:	9e03      	ldr	r6, [sp, #12]
 80078dc:	4637      	mov	r7, r6
 80078de:	2800      	cmp	r0, #0
 80078e0:	f040 8245 	bne.w	8007d6e <_dtoa_r+0x93e>
 80078e4:	9d01      	ldr	r5, [sp, #4]
 80078e6:	2331      	movs	r3, #49	; 0x31
 80078e8:	f805 3b01 	strb.w	r3, [r5], #1
 80078ec:	9b00      	ldr	r3, [sp, #0]
 80078ee:	3301      	adds	r3, #1
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	e240      	b.n	8007d76 <_dtoa_r+0x946>
 80078f4:	07f2      	lsls	r2, r6, #31
 80078f6:	d505      	bpl.n	8007904 <_dtoa_r+0x4d4>
 80078f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078fc:	f7f8 fe7c 	bl	80005f8 <__aeabi_dmul>
 8007900:	3501      	adds	r5, #1
 8007902:	2301      	movs	r3, #1
 8007904:	1076      	asrs	r6, r6, #1
 8007906:	3708      	adds	r7, #8
 8007908:	e777      	b.n	80077fa <_dtoa_r+0x3ca>
 800790a:	2502      	movs	r5, #2
 800790c:	e779      	b.n	8007802 <_dtoa_r+0x3d2>
 800790e:	9f00      	ldr	r7, [sp, #0]
 8007910:	9e03      	ldr	r6, [sp, #12]
 8007912:	e794      	b.n	800783e <_dtoa_r+0x40e>
 8007914:	9901      	ldr	r1, [sp, #4]
 8007916:	4b4c      	ldr	r3, [pc, #304]	; (8007a48 <_dtoa_r+0x618>)
 8007918:	4431      	add	r1, r6
 800791a:	910d      	str	r1, [sp, #52]	; 0x34
 800791c:	9908      	ldr	r1, [sp, #32]
 800791e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007922:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007926:	2900      	cmp	r1, #0
 8007928:	d043      	beq.n	80079b2 <_dtoa_r+0x582>
 800792a:	494d      	ldr	r1, [pc, #308]	; (8007a60 <_dtoa_r+0x630>)
 800792c:	2000      	movs	r0, #0
 800792e:	f7f8 ff8d 	bl	800084c <__aeabi_ddiv>
 8007932:	4652      	mov	r2, sl
 8007934:	465b      	mov	r3, fp
 8007936:	f7f8 fca7 	bl	8000288 <__aeabi_dsub>
 800793a:	9d01      	ldr	r5, [sp, #4]
 800793c:	4682      	mov	sl, r0
 800793e:	468b      	mov	fp, r1
 8007940:	4649      	mov	r1, r9
 8007942:	4640      	mov	r0, r8
 8007944:	f7f9 f908 	bl	8000b58 <__aeabi_d2iz>
 8007948:	4606      	mov	r6, r0
 800794a:	f7f8 fdeb 	bl	8000524 <__aeabi_i2d>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4640      	mov	r0, r8
 8007954:	4649      	mov	r1, r9
 8007956:	f7f8 fc97 	bl	8000288 <__aeabi_dsub>
 800795a:	3630      	adds	r6, #48	; 0x30
 800795c:	f805 6b01 	strb.w	r6, [r5], #1
 8007960:	4652      	mov	r2, sl
 8007962:	465b      	mov	r3, fp
 8007964:	4680      	mov	r8, r0
 8007966:	4689      	mov	r9, r1
 8007968:	f7f9 f8b8 	bl	8000adc <__aeabi_dcmplt>
 800796c:	2800      	cmp	r0, #0
 800796e:	d163      	bne.n	8007a38 <_dtoa_r+0x608>
 8007970:	4642      	mov	r2, r8
 8007972:	464b      	mov	r3, r9
 8007974:	4936      	ldr	r1, [pc, #216]	; (8007a50 <_dtoa_r+0x620>)
 8007976:	2000      	movs	r0, #0
 8007978:	f7f8 fc86 	bl	8000288 <__aeabi_dsub>
 800797c:	4652      	mov	r2, sl
 800797e:	465b      	mov	r3, fp
 8007980:	f7f9 f8ac 	bl	8000adc <__aeabi_dcmplt>
 8007984:	2800      	cmp	r0, #0
 8007986:	f040 80b5 	bne.w	8007af4 <_dtoa_r+0x6c4>
 800798a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800798c:	429d      	cmp	r5, r3
 800798e:	d081      	beq.n	8007894 <_dtoa_r+0x464>
 8007990:	4b30      	ldr	r3, [pc, #192]	; (8007a54 <_dtoa_r+0x624>)
 8007992:	2200      	movs	r2, #0
 8007994:	4650      	mov	r0, sl
 8007996:	4659      	mov	r1, fp
 8007998:	f7f8 fe2e 	bl	80005f8 <__aeabi_dmul>
 800799c:	4b2d      	ldr	r3, [pc, #180]	; (8007a54 <_dtoa_r+0x624>)
 800799e:	4682      	mov	sl, r0
 80079a0:	468b      	mov	fp, r1
 80079a2:	4640      	mov	r0, r8
 80079a4:	4649      	mov	r1, r9
 80079a6:	2200      	movs	r2, #0
 80079a8:	f7f8 fe26 	bl	80005f8 <__aeabi_dmul>
 80079ac:	4680      	mov	r8, r0
 80079ae:	4689      	mov	r9, r1
 80079b0:	e7c6      	b.n	8007940 <_dtoa_r+0x510>
 80079b2:	4650      	mov	r0, sl
 80079b4:	4659      	mov	r1, fp
 80079b6:	f7f8 fe1f 	bl	80005f8 <__aeabi_dmul>
 80079ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079bc:	9d01      	ldr	r5, [sp, #4]
 80079be:	930f      	str	r3, [sp, #60]	; 0x3c
 80079c0:	4682      	mov	sl, r0
 80079c2:	468b      	mov	fp, r1
 80079c4:	4649      	mov	r1, r9
 80079c6:	4640      	mov	r0, r8
 80079c8:	f7f9 f8c6 	bl	8000b58 <__aeabi_d2iz>
 80079cc:	4606      	mov	r6, r0
 80079ce:	f7f8 fda9 	bl	8000524 <__aeabi_i2d>
 80079d2:	3630      	adds	r6, #48	; 0x30
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4640      	mov	r0, r8
 80079da:	4649      	mov	r1, r9
 80079dc:	f7f8 fc54 	bl	8000288 <__aeabi_dsub>
 80079e0:	f805 6b01 	strb.w	r6, [r5], #1
 80079e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079e6:	429d      	cmp	r5, r3
 80079e8:	4680      	mov	r8, r0
 80079ea:	4689      	mov	r9, r1
 80079ec:	f04f 0200 	mov.w	r2, #0
 80079f0:	d124      	bne.n	8007a3c <_dtoa_r+0x60c>
 80079f2:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <_dtoa_r+0x630>)
 80079f4:	4650      	mov	r0, sl
 80079f6:	4659      	mov	r1, fp
 80079f8:	f7f8 fc48 	bl	800028c <__adddf3>
 80079fc:	4602      	mov	r2, r0
 80079fe:	460b      	mov	r3, r1
 8007a00:	4640      	mov	r0, r8
 8007a02:	4649      	mov	r1, r9
 8007a04:	f7f9 f888 	bl	8000b18 <__aeabi_dcmpgt>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d173      	bne.n	8007af4 <_dtoa_r+0x6c4>
 8007a0c:	4652      	mov	r2, sl
 8007a0e:	465b      	mov	r3, fp
 8007a10:	4913      	ldr	r1, [pc, #76]	; (8007a60 <_dtoa_r+0x630>)
 8007a12:	2000      	movs	r0, #0
 8007a14:	f7f8 fc38 	bl	8000288 <__aeabi_dsub>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4640      	mov	r0, r8
 8007a1e:	4649      	mov	r1, r9
 8007a20:	f7f9 f85c 	bl	8000adc <__aeabi_dcmplt>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	f43f af35 	beq.w	8007894 <_dtoa_r+0x464>
 8007a2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a2c:	1e6b      	subs	r3, r5, #1
 8007a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a34:	2b30      	cmp	r3, #48	; 0x30
 8007a36:	d0f8      	beq.n	8007a2a <_dtoa_r+0x5fa>
 8007a38:	9700      	str	r7, [sp, #0]
 8007a3a:	e049      	b.n	8007ad0 <_dtoa_r+0x6a0>
 8007a3c:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <_dtoa_r+0x624>)
 8007a3e:	f7f8 fddb 	bl	80005f8 <__aeabi_dmul>
 8007a42:	4680      	mov	r8, r0
 8007a44:	4689      	mov	r9, r1
 8007a46:	e7bd      	b.n	80079c4 <_dtoa_r+0x594>
 8007a48:	0800ab50 	.word	0x0800ab50
 8007a4c:	0800ab28 	.word	0x0800ab28
 8007a50:	3ff00000 	.word	0x3ff00000
 8007a54:	40240000 	.word	0x40240000
 8007a58:	401c0000 	.word	0x401c0000
 8007a5c:	40140000 	.word	0x40140000
 8007a60:	3fe00000 	.word	0x3fe00000
 8007a64:	9d01      	ldr	r5, [sp, #4]
 8007a66:	4656      	mov	r6, sl
 8007a68:	465f      	mov	r7, fp
 8007a6a:	4642      	mov	r2, r8
 8007a6c:	464b      	mov	r3, r9
 8007a6e:	4630      	mov	r0, r6
 8007a70:	4639      	mov	r1, r7
 8007a72:	f7f8 feeb 	bl	800084c <__aeabi_ddiv>
 8007a76:	f7f9 f86f 	bl	8000b58 <__aeabi_d2iz>
 8007a7a:	4682      	mov	sl, r0
 8007a7c:	f7f8 fd52 	bl	8000524 <__aeabi_i2d>
 8007a80:	4642      	mov	r2, r8
 8007a82:	464b      	mov	r3, r9
 8007a84:	f7f8 fdb8 	bl	80005f8 <__aeabi_dmul>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	4639      	mov	r1, r7
 8007a90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007a94:	f7f8 fbf8 	bl	8000288 <__aeabi_dsub>
 8007a98:	f805 6b01 	strb.w	r6, [r5], #1
 8007a9c:	9e01      	ldr	r6, [sp, #4]
 8007a9e:	9f03      	ldr	r7, [sp, #12]
 8007aa0:	1bae      	subs	r6, r5, r6
 8007aa2:	42b7      	cmp	r7, r6
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	d135      	bne.n	8007b16 <_dtoa_r+0x6e6>
 8007aaa:	f7f8 fbef 	bl	800028c <__adddf3>
 8007aae:	4642      	mov	r2, r8
 8007ab0:	464b      	mov	r3, r9
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	460f      	mov	r7, r1
 8007ab6:	f7f9 f82f 	bl	8000b18 <__aeabi_dcmpgt>
 8007aba:	b9d0      	cbnz	r0, 8007af2 <_dtoa_r+0x6c2>
 8007abc:	4642      	mov	r2, r8
 8007abe:	464b      	mov	r3, r9
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	f7f9 f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ac8:	b110      	cbz	r0, 8007ad0 <_dtoa_r+0x6a0>
 8007aca:	f01a 0f01 	tst.w	sl, #1
 8007ace:	d110      	bne.n	8007af2 <_dtoa_r+0x6c2>
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	ee18 1a10 	vmov	r1, s16
 8007ad6:	f000 faf3 	bl	80080c0 <_Bfree>
 8007ada:	2300      	movs	r3, #0
 8007adc:	9800      	ldr	r0, [sp, #0]
 8007ade:	702b      	strb	r3, [r5, #0]
 8007ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	6018      	str	r0, [r3, #0]
 8007ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f43f acf1 	beq.w	80074d0 <_dtoa_r+0xa0>
 8007aee:	601d      	str	r5, [r3, #0]
 8007af0:	e4ee      	b.n	80074d0 <_dtoa_r+0xa0>
 8007af2:	9f00      	ldr	r7, [sp, #0]
 8007af4:	462b      	mov	r3, r5
 8007af6:	461d      	mov	r5, r3
 8007af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007afc:	2a39      	cmp	r2, #57	; 0x39
 8007afe:	d106      	bne.n	8007b0e <_dtoa_r+0x6de>
 8007b00:	9a01      	ldr	r2, [sp, #4]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d1f7      	bne.n	8007af6 <_dtoa_r+0x6c6>
 8007b06:	9901      	ldr	r1, [sp, #4]
 8007b08:	2230      	movs	r2, #48	; 0x30
 8007b0a:	3701      	adds	r7, #1
 8007b0c:	700a      	strb	r2, [r1, #0]
 8007b0e:	781a      	ldrb	r2, [r3, #0]
 8007b10:	3201      	adds	r2, #1
 8007b12:	701a      	strb	r2, [r3, #0]
 8007b14:	e790      	b.n	8007a38 <_dtoa_r+0x608>
 8007b16:	4ba6      	ldr	r3, [pc, #664]	; (8007db0 <_dtoa_r+0x980>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f7f8 fd6d 	bl	80005f8 <__aeabi_dmul>
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2300      	movs	r3, #0
 8007b22:	4606      	mov	r6, r0
 8007b24:	460f      	mov	r7, r1
 8007b26:	f7f8 ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d09d      	beq.n	8007a6a <_dtoa_r+0x63a>
 8007b2e:	e7cf      	b.n	8007ad0 <_dtoa_r+0x6a0>
 8007b30:	9a08      	ldr	r2, [sp, #32]
 8007b32:	2a00      	cmp	r2, #0
 8007b34:	f000 80d7 	beq.w	8007ce6 <_dtoa_r+0x8b6>
 8007b38:	9a06      	ldr	r2, [sp, #24]
 8007b3a:	2a01      	cmp	r2, #1
 8007b3c:	f300 80ba 	bgt.w	8007cb4 <_dtoa_r+0x884>
 8007b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b42:	2a00      	cmp	r2, #0
 8007b44:	f000 80b2 	beq.w	8007cac <_dtoa_r+0x87c>
 8007b48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b4c:	9e07      	ldr	r6, [sp, #28]
 8007b4e:	9d04      	ldr	r5, [sp, #16]
 8007b50:	9a04      	ldr	r2, [sp, #16]
 8007b52:	441a      	add	r2, r3
 8007b54:	9204      	str	r2, [sp, #16]
 8007b56:	9a05      	ldr	r2, [sp, #20]
 8007b58:	2101      	movs	r1, #1
 8007b5a:	441a      	add	r2, r3
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	9205      	str	r2, [sp, #20]
 8007b60:	f000 fb66 	bl	8008230 <__i2b>
 8007b64:	4607      	mov	r7, r0
 8007b66:	2d00      	cmp	r5, #0
 8007b68:	dd0c      	ble.n	8007b84 <_dtoa_r+0x754>
 8007b6a:	9b05      	ldr	r3, [sp, #20]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	dd09      	ble.n	8007b84 <_dtoa_r+0x754>
 8007b70:	42ab      	cmp	r3, r5
 8007b72:	9a04      	ldr	r2, [sp, #16]
 8007b74:	bfa8      	it	ge
 8007b76:	462b      	movge	r3, r5
 8007b78:	1ad2      	subs	r2, r2, r3
 8007b7a:	9204      	str	r2, [sp, #16]
 8007b7c:	9a05      	ldr	r2, [sp, #20]
 8007b7e:	1aed      	subs	r5, r5, r3
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	9305      	str	r3, [sp, #20]
 8007b84:	9b07      	ldr	r3, [sp, #28]
 8007b86:	b31b      	cbz	r3, 8007bd0 <_dtoa_r+0x7a0>
 8007b88:	9b08      	ldr	r3, [sp, #32]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 80af 	beq.w	8007cee <_dtoa_r+0x8be>
 8007b90:	2e00      	cmp	r6, #0
 8007b92:	dd13      	ble.n	8007bbc <_dtoa_r+0x78c>
 8007b94:	4639      	mov	r1, r7
 8007b96:	4632      	mov	r2, r6
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f000 fc09 	bl	80083b0 <__pow5mult>
 8007b9e:	ee18 2a10 	vmov	r2, s16
 8007ba2:	4601      	mov	r1, r0
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f000 fb58 	bl	800825c <__multiply>
 8007bac:	ee18 1a10 	vmov	r1, s16
 8007bb0:	4680      	mov	r8, r0
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f000 fa84 	bl	80080c0 <_Bfree>
 8007bb8:	ee08 8a10 	vmov	s16, r8
 8007bbc:	9b07      	ldr	r3, [sp, #28]
 8007bbe:	1b9a      	subs	r2, r3, r6
 8007bc0:	d006      	beq.n	8007bd0 <_dtoa_r+0x7a0>
 8007bc2:	ee18 1a10 	vmov	r1, s16
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f000 fbf2 	bl	80083b0 <__pow5mult>
 8007bcc:	ee08 0a10 	vmov	s16, r0
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 fb2c 	bl	8008230 <__i2b>
 8007bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	4606      	mov	r6, r0
 8007bde:	f340 8088 	ble.w	8007cf2 <_dtoa_r+0x8c2>
 8007be2:	461a      	mov	r2, r3
 8007be4:	4601      	mov	r1, r0
 8007be6:	4620      	mov	r0, r4
 8007be8:	f000 fbe2 	bl	80083b0 <__pow5mult>
 8007bec:	9b06      	ldr	r3, [sp, #24]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	4606      	mov	r6, r0
 8007bf2:	f340 8081 	ble.w	8007cf8 <_dtoa_r+0x8c8>
 8007bf6:	f04f 0800 	mov.w	r8, #0
 8007bfa:	6933      	ldr	r3, [r6, #16]
 8007bfc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c00:	6918      	ldr	r0, [r3, #16]
 8007c02:	f000 fac5 	bl	8008190 <__hi0bits>
 8007c06:	f1c0 0020 	rsb	r0, r0, #32
 8007c0a:	9b05      	ldr	r3, [sp, #20]
 8007c0c:	4418      	add	r0, r3
 8007c0e:	f010 001f 	ands.w	r0, r0, #31
 8007c12:	f000 8092 	beq.w	8007d3a <_dtoa_r+0x90a>
 8007c16:	f1c0 0320 	rsb	r3, r0, #32
 8007c1a:	2b04      	cmp	r3, #4
 8007c1c:	f340 808a 	ble.w	8007d34 <_dtoa_r+0x904>
 8007c20:	f1c0 001c 	rsb	r0, r0, #28
 8007c24:	9b04      	ldr	r3, [sp, #16]
 8007c26:	4403      	add	r3, r0
 8007c28:	9304      	str	r3, [sp, #16]
 8007c2a:	9b05      	ldr	r3, [sp, #20]
 8007c2c:	4403      	add	r3, r0
 8007c2e:	4405      	add	r5, r0
 8007c30:	9305      	str	r3, [sp, #20]
 8007c32:	9b04      	ldr	r3, [sp, #16]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	dd07      	ble.n	8007c48 <_dtoa_r+0x818>
 8007c38:	ee18 1a10 	vmov	r1, s16
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 fc10 	bl	8008464 <__lshift>
 8007c44:	ee08 0a10 	vmov	s16, r0
 8007c48:	9b05      	ldr	r3, [sp, #20]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	dd05      	ble.n	8007c5a <_dtoa_r+0x82a>
 8007c4e:	4631      	mov	r1, r6
 8007c50:	461a      	mov	r2, r3
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 fc06 	bl	8008464 <__lshift>
 8007c58:	4606      	mov	r6, r0
 8007c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d06e      	beq.n	8007d3e <_dtoa_r+0x90e>
 8007c60:	ee18 0a10 	vmov	r0, s16
 8007c64:	4631      	mov	r1, r6
 8007c66:	f000 fc6d 	bl	8008544 <__mcmp>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	da67      	bge.n	8007d3e <_dtoa_r+0x90e>
 8007c6e:	9b00      	ldr	r3, [sp, #0]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	ee18 1a10 	vmov	r1, s16
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	220a      	movs	r2, #10
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f000 fa41 	bl	8008104 <__multadd>
 8007c82:	9b08      	ldr	r3, [sp, #32]
 8007c84:	ee08 0a10 	vmov	s16, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 81b1 	beq.w	8007ff0 <_dtoa_r+0xbc0>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	4639      	mov	r1, r7
 8007c92:	220a      	movs	r2, #10
 8007c94:	4620      	mov	r0, r4
 8007c96:	f000 fa35 	bl	8008104 <__multadd>
 8007c9a:	9b02      	ldr	r3, [sp, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	4607      	mov	r7, r0
 8007ca0:	f300 808e 	bgt.w	8007dc0 <_dtoa_r+0x990>
 8007ca4:	9b06      	ldr	r3, [sp, #24]
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	dc51      	bgt.n	8007d4e <_dtoa_r+0x91e>
 8007caa:	e089      	b.n	8007dc0 <_dtoa_r+0x990>
 8007cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cb2:	e74b      	b.n	8007b4c <_dtoa_r+0x71c>
 8007cb4:	9b03      	ldr	r3, [sp, #12]
 8007cb6:	1e5e      	subs	r6, r3, #1
 8007cb8:	9b07      	ldr	r3, [sp, #28]
 8007cba:	42b3      	cmp	r3, r6
 8007cbc:	bfbf      	itttt	lt
 8007cbe:	9b07      	ldrlt	r3, [sp, #28]
 8007cc0:	9607      	strlt	r6, [sp, #28]
 8007cc2:	1af2      	sublt	r2, r6, r3
 8007cc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007cc6:	bfb6      	itet	lt
 8007cc8:	189b      	addlt	r3, r3, r2
 8007cca:	1b9e      	subge	r6, r3, r6
 8007ccc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007cce:	9b03      	ldr	r3, [sp, #12]
 8007cd0:	bfb8      	it	lt
 8007cd2:	2600      	movlt	r6, #0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	bfb7      	itett	lt
 8007cd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007cdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007ce0:	1a9d      	sublt	r5, r3, r2
 8007ce2:	2300      	movlt	r3, #0
 8007ce4:	e734      	b.n	8007b50 <_dtoa_r+0x720>
 8007ce6:	9e07      	ldr	r6, [sp, #28]
 8007ce8:	9d04      	ldr	r5, [sp, #16]
 8007cea:	9f08      	ldr	r7, [sp, #32]
 8007cec:	e73b      	b.n	8007b66 <_dtoa_r+0x736>
 8007cee:	9a07      	ldr	r2, [sp, #28]
 8007cf0:	e767      	b.n	8007bc2 <_dtoa_r+0x792>
 8007cf2:	9b06      	ldr	r3, [sp, #24]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	dc18      	bgt.n	8007d2a <_dtoa_r+0x8fa>
 8007cf8:	f1ba 0f00 	cmp.w	sl, #0
 8007cfc:	d115      	bne.n	8007d2a <_dtoa_r+0x8fa>
 8007cfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d02:	b993      	cbnz	r3, 8007d2a <_dtoa_r+0x8fa>
 8007d04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007d08:	0d1b      	lsrs	r3, r3, #20
 8007d0a:	051b      	lsls	r3, r3, #20
 8007d0c:	b183      	cbz	r3, 8007d30 <_dtoa_r+0x900>
 8007d0e:	9b04      	ldr	r3, [sp, #16]
 8007d10:	3301      	adds	r3, #1
 8007d12:	9304      	str	r3, [sp, #16]
 8007d14:	9b05      	ldr	r3, [sp, #20]
 8007d16:	3301      	adds	r3, #1
 8007d18:	9305      	str	r3, [sp, #20]
 8007d1a:	f04f 0801 	mov.w	r8, #1
 8007d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f47f af6a 	bne.w	8007bfa <_dtoa_r+0x7ca>
 8007d26:	2001      	movs	r0, #1
 8007d28:	e76f      	b.n	8007c0a <_dtoa_r+0x7da>
 8007d2a:	f04f 0800 	mov.w	r8, #0
 8007d2e:	e7f6      	b.n	8007d1e <_dtoa_r+0x8ee>
 8007d30:	4698      	mov	r8, r3
 8007d32:	e7f4      	b.n	8007d1e <_dtoa_r+0x8ee>
 8007d34:	f43f af7d 	beq.w	8007c32 <_dtoa_r+0x802>
 8007d38:	4618      	mov	r0, r3
 8007d3a:	301c      	adds	r0, #28
 8007d3c:	e772      	b.n	8007c24 <_dtoa_r+0x7f4>
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	dc37      	bgt.n	8007db4 <_dtoa_r+0x984>
 8007d44:	9b06      	ldr	r3, [sp, #24]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	dd34      	ble.n	8007db4 <_dtoa_r+0x984>
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	9302      	str	r3, [sp, #8]
 8007d4e:	9b02      	ldr	r3, [sp, #8]
 8007d50:	b96b      	cbnz	r3, 8007d6e <_dtoa_r+0x93e>
 8007d52:	4631      	mov	r1, r6
 8007d54:	2205      	movs	r2, #5
 8007d56:	4620      	mov	r0, r4
 8007d58:	f000 f9d4 	bl	8008104 <__multadd>
 8007d5c:	4601      	mov	r1, r0
 8007d5e:	4606      	mov	r6, r0
 8007d60:	ee18 0a10 	vmov	r0, s16
 8007d64:	f000 fbee 	bl	8008544 <__mcmp>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	f73f adbb 	bgt.w	80078e4 <_dtoa_r+0x4b4>
 8007d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d70:	9d01      	ldr	r5, [sp, #4]
 8007d72:	43db      	mvns	r3, r3
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	f04f 0800 	mov.w	r8, #0
 8007d7a:	4631      	mov	r1, r6
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f000 f99f 	bl	80080c0 <_Bfree>
 8007d82:	2f00      	cmp	r7, #0
 8007d84:	f43f aea4 	beq.w	8007ad0 <_dtoa_r+0x6a0>
 8007d88:	f1b8 0f00 	cmp.w	r8, #0
 8007d8c:	d005      	beq.n	8007d9a <_dtoa_r+0x96a>
 8007d8e:	45b8      	cmp	r8, r7
 8007d90:	d003      	beq.n	8007d9a <_dtoa_r+0x96a>
 8007d92:	4641      	mov	r1, r8
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 f993 	bl	80080c0 <_Bfree>
 8007d9a:	4639      	mov	r1, r7
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f000 f98f 	bl	80080c0 <_Bfree>
 8007da2:	e695      	b.n	8007ad0 <_dtoa_r+0x6a0>
 8007da4:	2600      	movs	r6, #0
 8007da6:	4637      	mov	r7, r6
 8007da8:	e7e1      	b.n	8007d6e <_dtoa_r+0x93e>
 8007daa:	9700      	str	r7, [sp, #0]
 8007dac:	4637      	mov	r7, r6
 8007dae:	e599      	b.n	80078e4 <_dtoa_r+0x4b4>
 8007db0:	40240000 	.word	0x40240000
 8007db4:	9b08      	ldr	r3, [sp, #32]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 80ca 	beq.w	8007f50 <_dtoa_r+0xb20>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	9302      	str	r3, [sp, #8]
 8007dc0:	2d00      	cmp	r5, #0
 8007dc2:	dd05      	ble.n	8007dd0 <_dtoa_r+0x9a0>
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	462a      	mov	r2, r5
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 fb4b 	bl	8008464 <__lshift>
 8007dce:	4607      	mov	r7, r0
 8007dd0:	f1b8 0f00 	cmp.w	r8, #0
 8007dd4:	d05b      	beq.n	8007e8e <_dtoa_r+0xa5e>
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f000 f931 	bl	8008040 <_Balloc>
 8007dde:	4605      	mov	r5, r0
 8007de0:	b928      	cbnz	r0, 8007dee <_dtoa_r+0x9be>
 8007de2:	4b87      	ldr	r3, [pc, #540]	; (8008000 <_dtoa_r+0xbd0>)
 8007de4:	4602      	mov	r2, r0
 8007de6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007dea:	f7ff bb3b 	b.w	8007464 <_dtoa_r+0x34>
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	3202      	adds	r2, #2
 8007df2:	0092      	lsls	r2, r2, #2
 8007df4:	f107 010c 	add.w	r1, r7, #12
 8007df8:	300c      	adds	r0, #12
 8007dfa:	f000 f913 	bl	8008024 <memcpy>
 8007dfe:	2201      	movs	r2, #1
 8007e00:	4629      	mov	r1, r5
 8007e02:	4620      	mov	r0, r4
 8007e04:	f000 fb2e 	bl	8008464 <__lshift>
 8007e08:	9b01      	ldr	r3, [sp, #4]
 8007e0a:	f103 0901 	add.w	r9, r3, #1
 8007e0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007e12:	4413      	add	r3, r2
 8007e14:	9305      	str	r3, [sp, #20]
 8007e16:	f00a 0301 	and.w	r3, sl, #1
 8007e1a:	46b8      	mov	r8, r7
 8007e1c:	9304      	str	r3, [sp, #16]
 8007e1e:	4607      	mov	r7, r0
 8007e20:	4631      	mov	r1, r6
 8007e22:	ee18 0a10 	vmov	r0, s16
 8007e26:	f7ff fa77 	bl	8007318 <quorem>
 8007e2a:	4641      	mov	r1, r8
 8007e2c:	9002      	str	r0, [sp, #8]
 8007e2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007e32:	ee18 0a10 	vmov	r0, s16
 8007e36:	f000 fb85 	bl	8008544 <__mcmp>
 8007e3a:	463a      	mov	r2, r7
 8007e3c:	9003      	str	r0, [sp, #12]
 8007e3e:	4631      	mov	r1, r6
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 fb9b 	bl	800857c <__mdiff>
 8007e46:	68c2      	ldr	r2, [r0, #12]
 8007e48:	f109 3bff 	add.w	fp, r9, #4294967295
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	bb02      	cbnz	r2, 8007e92 <_dtoa_r+0xa62>
 8007e50:	4601      	mov	r1, r0
 8007e52:	ee18 0a10 	vmov	r0, s16
 8007e56:	f000 fb75 	bl	8008544 <__mcmp>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	4620      	mov	r0, r4
 8007e60:	9207      	str	r2, [sp, #28]
 8007e62:	f000 f92d 	bl	80080c0 <_Bfree>
 8007e66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007e6a:	ea43 0102 	orr.w	r1, r3, r2
 8007e6e:	9b04      	ldr	r3, [sp, #16]
 8007e70:	430b      	orrs	r3, r1
 8007e72:	464d      	mov	r5, r9
 8007e74:	d10f      	bne.n	8007e96 <_dtoa_r+0xa66>
 8007e76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e7a:	d02a      	beq.n	8007ed2 <_dtoa_r+0xaa2>
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	dd02      	ble.n	8007e88 <_dtoa_r+0xa58>
 8007e82:	9b02      	ldr	r3, [sp, #8]
 8007e84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007e88:	f88b a000 	strb.w	sl, [fp]
 8007e8c:	e775      	b.n	8007d7a <_dtoa_r+0x94a>
 8007e8e:	4638      	mov	r0, r7
 8007e90:	e7ba      	b.n	8007e08 <_dtoa_r+0x9d8>
 8007e92:	2201      	movs	r2, #1
 8007e94:	e7e2      	b.n	8007e5c <_dtoa_r+0xa2c>
 8007e96:	9b03      	ldr	r3, [sp, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	db04      	blt.n	8007ea6 <_dtoa_r+0xa76>
 8007e9c:	9906      	ldr	r1, [sp, #24]
 8007e9e:	430b      	orrs	r3, r1
 8007ea0:	9904      	ldr	r1, [sp, #16]
 8007ea2:	430b      	orrs	r3, r1
 8007ea4:	d122      	bne.n	8007eec <_dtoa_r+0xabc>
 8007ea6:	2a00      	cmp	r2, #0
 8007ea8:	ddee      	ble.n	8007e88 <_dtoa_r+0xa58>
 8007eaa:	ee18 1a10 	vmov	r1, s16
 8007eae:	2201      	movs	r2, #1
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f000 fad7 	bl	8008464 <__lshift>
 8007eb6:	4631      	mov	r1, r6
 8007eb8:	ee08 0a10 	vmov	s16, r0
 8007ebc:	f000 fb42 	bl	8008544 <__mcmp>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	dc03      	bgt.n	8007ecc <_dtoa_r+0xa9c>
 8007ec4:	d1e0      	bne.n	8007e88 <_dtoa_r+0xa58>
 8007ec6:	f01a 0f01 	tst.w	sl, #1
 8007eca:	d0dd      	beq.n	8007e88 <_dtoa_r+0xa58>
 8007ecc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ed0:	d1d7      	bne.n	8007e82 <_dtoa_r+0xa52>
 8007ed2:	2339      	movs	r3, #57	; 0x39
 8007ed4:	f88b 3000 	strb.w	r3, [fp]
 8007ed8:	462b      	mov	r3, r5
 8007eda:	461d      	mov	r5, r3
 8007edc:	3b01      	subs	r3, #1
 8007ede:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ee2:	2a39      	cmp	r2, #57	; 0x39
 8007ee4:	d071      	beq.n	8007fca <_dtoa_r+0xb9a>
 8007ee6:	3201      	adds	r2, #1
 8007ee8:	701a      	strb	r2, [r3, #0]
 8007eea:	e746      	b.n	8007d7a <_dtoa_r+0x94a>
 8007eec:	2a00      	cmp	r2, #0
 8007eee:	dd07      	ble.n	8007f00 <_dtoa_r+0xad0>
 8007ef0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007ef4:	d0ed      	beq.n	8007ed2 <_dtoa_r+0xaa2>
 8007ef6:	f10a 0301 	add.w	r3, sl, #1
 8007efa:	f88b 3000 	strb.w	r3, [fp]
 8007efe:	e73c      	b.n	8007d7a <_dtoa_r+0x94a>
 8007f00:	9b05      	ldr	r3, [sp, #20]
 8007f02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007f06:	4599      	cmp	r9, r3
 8007f08:	d047      	beq.n	8007f9a <_dtoa_r+0xb6a>
 8007f0a:	ee18 1a10 	vmov	r1, s16
 8007f0e:	2300      	movs	r3, #0
 8007f10:	220a      	movs	r2, #10
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 f8f6 	bl	8008104 <__multadd>
 8007f18:	45b8      	cmp	r8, r7
 8007f1a:	ee08 0a10 	vmov	s16, r0
 8007f1e:	f04f 0300 	mov.w	r3, #0
 8007f22:	f04f 020a 	mov.w	r2, #10
 8007f26:	4641      	mov	r1, r8
 8007f28:	4620      	mov	r0, r4
 8007f2a:	d106      	bne.n	8007f3a <_dtoa_r+0xb0a>
 8007f2c:	f000 f8ea 	bl	8008104 <__multadd>
 8007f30:	4680      	mov	r8, r0
 8007f32:	4607      	mov	r7, r0
 8007f34:	f109 0901 	add.w	r9, r9, #1
 8007f38:	e772      	b.n	8007e20 <_dtoa_r+0x9f0>
 8007f3a:	f000 f8e3 	bl	8008104 <__multadd>
 8007f3e:	4639      	mov	r1, r7
 8007f40:	4680      	mov	r8, r0
 8007f42:	2300      	movs	r3, #0
 8007f44:	220a      	movs	r2, #10
 8007f46:	4620      	mov	r0, r4
 8007f48:	f000 f8dc 	bl	8008104 <__multadd>
 8007f4c:	4607      	mov	r7, r0
 8007f4e:	e7f1      	b.n	8007f34 <_dtoa_r+0xb04>
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	9302      	str	r3, [sp, #8]
 8007f54:	9d01      	ldr	r5, [sp, #4]
 8007f56:	ee18 0a10 	vmov	r0, s16
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	f7ff f9dc 	bl	8007318 <quorem>
 8007f60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007f64:	9b01      	ldr	r3, [sp, #4]
 8007f66:	f805 ab01 	strb.w	sl, [r5], #1
 8007f6a:	1aea      	subs	r2, r5, r3
 8007f6c:	9b02      	ldr	r3, [sp, #8]
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	dd09      	ble.n	8007f86 <_dtoa_r+0xb56>
 8007f72:	ee18 1a10 	vmov	r1, s16
 8007f76:	2300      	movs	r3, #0
 8007f78:	220a      	movs	r2, #10
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 f8c2 	bl	8008104 <__multadd>
 8007f80:	ee08 0a10 	vmov	s16, r0
 8007f84:	e7e7      	b.n	8007f56 <_dtoa_r+0xb26>
 8007f86:	9b02      	ldr	r3, [sp, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bfc8      	it	gt
 8007f8c:	461d      	movgt	r5, r3
 8007f8e:	9b01      	ldr	r3, [sp, #4]
 8007f90:	bfd8      	it	le
 8007f92:	2501      	movle	r5, #1
 8007f94:	441d      	add	r5, r3
 8007f96:	f04f 0800 	mov.w	r8, #0
 8007f9a:	ee18 1a10 	vmov	r1, s16
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 fa5f 	bl	8008464 <__lshift>
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	ee08 0a10 	vmov	s16, r0
 8007fac:	f000 faca 	bl	8008544 <__mcmp>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	dc91      	bgt.n	8007ed8 <_dtoa_r+0xaa8>
 8007fb4:	d102      	bne.n	8007fbc <_dtoa_r+0xb8c>
 8007fb6:	f01a 0f01 	tst.w	sl, #1
 8007fba:	d18d      	bne.n	8007ed8 <_dtoa_r+0xaa8>
 8007fbc:	462b      	mov	r3, r5
 8007fbe:	461d      	mov	r5, r3
 8007fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fc4:	2a30      	cmp	r2, #48	; 0x30
 8007fc6:	d0fa      	beq.n	8007fbe <_dtoa_r+0xb8e>
 8007fc8:	e6d7      	b.n	8007d7a <_dtoa_r+0x94a>
 8007fca:	9a01      	ldr	r2, [sp, #4]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d184      	bne.n	8007eda <_dtoa_r+0xaaa>
 8007fd0:	9b00      	ldr	r3, [sp, #0]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	2331      	movs	r3, #49	; 0x31
 8007fd8:	7013      	strb	r3, [r2, #0]
 8007fda:	e6ce      	b.n	8007d7a <_dtoa_r+0x94a>
 8007fdc:	4b09      	ldr	r3, [pc, #36]	; (8008004 <_dtoa_r+0xbd4>)
 8007fde:	f7ff ba95 	b.w	800750c <_dtoa_r+0xdc>
 8007fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f47f aa6e 	bne.w	80074c6 <_dtoa_r+0x96>
 8007fea:	4b07      	ldr	r3, [pc, #28]	; (8008008 <_dtoa_r+0xbd8>)
 8007fec:	f7ff ba8e 	b.w	800750c <_dtoa_r+0xdc>
 8007ff0:	9b02      	ldr	r3, [sp, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	dcae      	bgt.n	8007f54 <_dtoa_r+0xb24>
 8007ff6:	9b06      	ldr	r3, [sp, #24]
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	f73f aea8 	bgt.w	8007d4e <_dtoa_r+0x91e>
 8007ffe:	e7a9      	b.n	8007f54 <_dtoa_r+0xb24>
 8008000:	0800aabb 	.word	0x0800aabb
 8008004:	0800aa18 	.word	0x0800aa18
 8008008:	0800aa3c 	.word	0x0800aa3c

0800800c <_localeconv_r>:
 800800c:	4800      	ldr	r0, [pc, #0]	; (8008010 <_localeconv_r+0x4>)
 800800e:	4770      	bx	lr
 8008010:	20000394 	.word	0x20000394

08008014 <malloc>:
 8008014:	4b02      	ldr	r3, [pc, #8]	; (8008020 <malloc+0xc>)
 8008016:	4601      	mov	r1, r0
 8008018:	6818      	ldr	r0, [r3, #0]
 800801a:	f000 bc17 	b.w	800884c <_malloc_r>
 800801e:	bf00      	nop
 8008020:	20000240 	.word	0x20000240

08008024 <memcpy>:
 8008024:	440a      	add	r2, r1
 8008026:	4291      	cmp	r1, r2
 8008028:	f100 33ff 	add.w	r3, r0, #4294967295
 800802c:	d100      	bne.n	8008030 <memcpy+0xc>
 800802e:	4770      	bx	lr
 8008030:	b510      	push	{r4, lr}
 8008032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800803a:	4291      	cmp	r1, r2
 800803c:	d1f9      	bne.n	8008032 <memcpy+0xe>
 800803e:	bd10      	pop	{r4, pc}

08008040 <_Balloc>:
 8008040:	b570      	push	{r4, r5, r6, lr}
 8008042:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008044:	4604      	mov	r4, r0
 8008046:	460d      	mov	r5, r1
 8008048:	b976      	cbnz	r6, 8008068 <_Balloc+0x28>
 800804a:	2010      	movs	r0, #16
 800804c:	f7ff ffe2 	bl	8008014 <malloc>
 8008050:	4602      	mov	r2, r0
 8008052:	6260      	str	r0, [r4, #36]	; 0x24
 8008054:	b920      	cbnz	r0, 8008060 <_Balloc+0x20>
 8008056:	4b18      	ldr	r3, [pc, #96]	; (80080b8 <_Balloc+0x78>)
 8008058:	4818      	ldr	r0, [pc, #96]	; (80080bc <_Balloc+0x7c>)
 800805a:	2166      	movs	r1, #102	; 0x66
 800805c:	f000 fdd6 	bl	8008c0c <__assert_func>
 8008060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008064:	6006      	str	r6, [r0, #0]
 8008066:	60c6      	str	r6, [r0, #12]
 8008068:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800806a:	68f3      	ldr	r3, [r6, #12]
 800806c:	b183      	cbz	r3, 8008090 <_Balloc+0x50>
 800806e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008076:	b9b8      	cbnz	r0, 80080a8 <_Balloc+0x68>
 8008078:	2101      	movs	r1, #1
 800807a:	fa01 f605 	lsl.w	r6, r1, r5
 800807e:	1d72      	adds	r2, r6, #5
 8008080:	0092      	lsls	r2, r2, #2
 8008082:	4620      	mov	r0, r4
 8008084:	f000 fb60 	bl	8008748 <_calloc_r>
 8008088:	b160      	cbz	r0, 80080a4 <_Balloc+0x64>
 800808a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800808e:	e00e      	b.n	80080ae <_Balloc+0x6e>
 8008090:	2221      	movs	r2, #33	; 0x21
 8008092:	2104      	movs	r1, #4
 8008094:	4620      	mov	r0, r4
 8008096:	f000 fb57 	bl	8008748 <_calloc_r>
 800809a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800809c:	60f0      	str	r0, [r6, #12]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d1e4      	bne.n	800806e <_Balloc+0x2e>
 80080a4:	2000      	movs	r0, #0
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
 80080a8:	6802      	ldr	r2, [r0, #0]
 80080aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080ae:	2300      	movs	r3, #0
 80080b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080b4:	e7f7      	b.n	80080a6 <_Balloc+0x66>
 80080b6:	bf00      	nop
 80080b8:	0800aa49 	.word	0x0800aa49
 80080bc:	0800aacc 	.word	0x0800aacc

080080c0 <_Bfree>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080c4:	4605      	mov	r5, r0
 80080c6:	460c      	mov	r4, r1
 80080c8:	b976      	cbnz	r6, 80080e8 <_Bfree+0x28>
 80080ca:	2010      	movs	r0, #16
 80080cc:	f7ff ffa2 	bl	8008014 <malloc>
 80080d0:	4602      	mov	r2, r0
 80080d2:	6268      	str	r0, [r5, #36]	; 0x24
 80080d4:	b920      	cbnz	r0, 80080e0 <_Bfree+0x20>
 80080d6:	4b09      	ldr	r3, [pc, #36]	; (80080fc <_Bfree+0x3c>)
 80080d8:	4809      	ldr	r0, [pc, #36]	; (8008100 <_Bfree+0x40>)
 80080da:	218a      	movs	r1, #138	; 0x8a
 80080dc:	f000 fd96 	bl	8008c0c <__assert_func>
 80080e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080e4:	6006      	str	r6, [r0, #0]
 80080e6:	60c6      	str	r6, [r0, #12]
 80080e8:	b13c      	cbz	r4, 80080fa <_Bfree+0x3a>
 80080ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080ec:	6862      	ldr	r2, [r4, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080f4:	6021      	str	r1, [r4, #0]
 80080f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080fa:	bd70      	pop	{r4, r5, r6, pc}
 80080fc:	0800aa49 	.word	0x0800aa49
 8008100:	0800aacc 	.word	0x0800aacc

08008104 <__multadd>:
 8008104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008108:	690d      	ldr	r5, [r1, #16]
 800810a:	4607      	mov	r7, r0
 800810c:	460c      	mov	r4, r1
 800810e:	461e      	mov	r6, r3
 8008110:	f101 0c14 	add.w	ip, r1, #20
 8008114:	2000      	movs	r0, #0
 8008116:	f8dc 3000 	ldr.w	r3, [ip]
 800811a:	b299      	uxth	r1, r3
 800811c:	fb02 6101 	mla	r1, r2, r1, r6
 8008120:	0c1e      	lsrs	r6, r3, #16
 8008122:	0c0b      	lsrs	r3, r1, #16
 8008124:	fb02 3306 	mla	r3, r2, r6, r3
 8008128:	b289      	uxth	r1, r1
 800812a:	3001      	adds	r0, #1
 800812c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008130:	4285      	cmp	r5, r0
 8008132:	f84c 1b04 	str.w	r1, [ip], #4
 8008136:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800813a:	dcec      	bgt.n	8008116 <__multadd+0x12>
 800813c:	b30e      	cbz	r6, 8008182 <__multadd+0x7e>
 800813e:	68a3      	ldr	r3, [r4, #8]
 8008140:	42ab      	cmp	r3, r5
 8008142:	dc19      	bgt.n	8008178 <__multadd+0x74>
 8008144:	6861      	ldr	r1, [r4, #4]
 8008146:	4638      	mov	r0, r7
 8008148:	3101      	adds	r1, #1
 800814a:	f7ff ff79 	bl	8008040 <_Balloc>
 800814e:	4680      	mov	r8, r0
 8008150:	b928      	cbnz	r0, 800815e <__multadd+0x5a>
 8008152:	4602      	mov	r2, r0
 8008154:	4b0c      	ldr	r3, [pc, #48]	; (8008188 <__multadd+0x84>)
 8008156:	480d      	ldr	r0, [pc, #52]	; (800818c <__multadd+0x88>)
 8008158:	21b5      	movs	r1, #181	; 0xb5
 800815a:	f000 fd57 	bl	8008c0c <__assert_func>
 800815e:	6922      	ldr	r2, [r4, #16]
 8008160:	3202      	adds	r2, #2
 8008162:	f104 010c 	add.w	r1, r4, #12
 8008166:	0092      	lsls	r2, r2, #2
 8008168:	300c      	adds	r0, #12
 800816a:	f7ff ff5b 	bl	8008024 <memcpy>
 800816e:	4621      	mov	r1, r4
 8008170:	4638      	mov	r0, r7
 8008172:	f7ff ffa5 	bl	80080c0 <_Bfree>
 8008176:	4644      	mov	r4, r8
 8008178:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800817c:	3501      	adds	r5, #1
 800817e:	615e      	str	r6, [r3, #20]
 8008180:	6125      	str	r5, [r4, #16]
 8008182:	4620      	mov	r0, r4
 8008184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008188:	0800aabb 	.word	0x0800aabb
 800818c:	0800aacc 	.word	0x0800aacc

08008190 <__hi0bits>:
 8008190:	0c03      	lsrs	r3, r0, #16
 8008192:	041b      	lsls	r3, r3, #16
 8008194:	b9d3      	cbnz	r3, 80081cc <__hi0bits+0x3c>
 8008196:	0400      	lsls	r0, r0, #16
 8008198:	2310      	movs	r3, #16
 800819a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800819e:	bf04      	itt	eq
 80081a0:	0200      	lsleq	r0, r0, #8
 80081a2:	3308      	addeq	r3, #8
 80081a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081a8:	bf04      	itt	eq
 80081aa:	0100      	lsleq	r0, r0, #4
 80081ac:	3304      	addeq	r3, #4
 80081ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081b2:	bf04      	itt	eq
 80081b4:	0080      	lsleq	r0, r0, #2
 80081b6:	3302      	addeq	r3, #2
 80081b8:	2800      	cmp	r0, #0
 80081ba:	db05      	blt.n	80081c8 <__hi0bits+0x38>
 80081bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081c0:	f103 0301 	add.w	r3, r3, #1
 80081c4:	bf08      	it	eq
 80081c6:	2320      	moveq	r3, #32
 80081c8:	4618      	mov	r0, r3
 80081ca:	4770      	bx	lr
 80081cc:	2300      	movs	r3, #0
 80081ce:	e7e4      	b.n	800819a <__hi0bits+0xa>

080081d0 <__lo0bits>:
 80081d0:	6803      	ldr	r3, [r0, #0]
 80081d2:	f013 0207 	ands.w	r2, r3, #7
 80081d6:	4601      	mov	r1, r0
 80081d8:	d00b      	beq.n	80081f2 <__lo0bits+0x22>
 80081da:	07da      	lsls	r2, r3, #31
 80081dc:	d423      	bmi.n	8008226 <__lo0bits+0x56>
 80081de:	0798      	lsls	r0, r3, #30
 80081e0:	bf49      	itett	mi
 80081e2:	085b      	lsrmi	r3, r3, #1
 80081e4:	089b      	lsrpl	r3, r3, #2
 80081e6:	2001      	movmi	r0, #1
 80081e8:	600b      	strmi	r3, [r1, #0]
 80081ea:	bf5c      	itt	pl
 80081ec:	600b      	strpl	r3, [r1, #0]
 80081ee:	2002      	movpl	r0, #2
 80081f0:	4770      	bx	lr
 80081f2:	b298      	uxth	r0, r3
 80081f4:	b9a8      	cbnz	r0, 8008222 <__lo0bits+0x52>
 80081f6:	0c1b      	lsrs	r3, r3, #16
 80081f8:	2010      	movs	r0, #16
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	b90a      	cbnz	r2, 8008202 <__lo0bits+0x32>
 80081fe:	3008      	adds	r0, #8
 8008200:	0a1b      	lsrs	r3, r3, #8
 8008202:	071a      	lsls	r2, r3, #28
 8008204:	bf04      	itt	eq
 8008206:	091b      	lsreq	r3, r3, #4
 8008208:	3004      	addeq	r0, #4
 800820a:	079a      	lsls	r2, r3, #30
 800820c:	bf04      	itt	eq
 800820e:	089b      	lsreq	r3, r3, #2
 8008210:	3002      	addeq	r0, #2
 8008212:	07da      	lsls	r2, r3, #31
 8008214:	d403      	bmi.n	800821e <__lo0bits+0x4e>
 8008216:	085b      	lsrs	r3, r3, #1
 8008218:	f100 0001 	add.w	r0, r0, #1
 800821c:	d005      	beq.n	800822a <__lo0bits+0x5a>
 800821e:	600b      	str	r3, [r1, #0]
 8008220:	4770      	bx	lr
 8008222:	4610      	mov	r0, r2
 8008224:	e7e9      	b.n	80081fa <__lo0bits+0x2a>
 8008226:	2000      	movs	r0, #0
 8008228:	4770      	bx	lr
 800822a:	2020      	movs	r0, #32
 800822c:	4770      	bx	lr
	...

08008230 <__i2b>:
 8008230:	b510      	push	{r4, lr}
 8008232:	460c      	mov	r4, r1
 8008234:	2101      	movs	r1, #1
 8008236:	f7ff ff03 	bl	8008040 <_Balloc>
 800823a:	4602      	mov	r2, r0
 800823c:	b928      	cbnz	r0, 800824a <__i2b+0x1a>
 800823e:	4b05      	ldr	r3, [pc, #20]	; (8008254 <__i2b+0x24>)
 8008240:	4805      	ldr	r0, [pc, #20]	; (8008258 <__i2b+0x28>)
 8008242:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008246:	f000 fce1 	bl	8008c0c <__assert_func>
 800824a:	2301      	movs	r3, #1
 800824c:	6144      	str	r4, [r0, #20]
 800824e:	6103      	str	r3, [r0, #16]
 8008250:	bd10      	pop	{r4, pc}
 8008252:	bf00      	nop
 8008254:	0800aabb 	.word	0x0800aabb
 8008258:	0800aacc 	.word	0x0800aacc

0800825c <__multiply>:
 800825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	4691      	mov	r9, r2
 8008262:	690a      	ldr	r2, [r1, #16]
 8008264:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008268:	429a      	cmp	r2, r3
 800826a:	bfb8      	it	lt
 800826c:	460b      	movlt	r3, r1
 800826e:	460c      	mov	r4, r1
 8008270:	bfbc      	itt	lt
 8008272:	464c      	movlt	r4, r9
 8008274:	4699      	movlt	r9, r3
 8008276:	6927      	ldr	r7, [r4, #16]
 8008278:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800827c:	68a3      	ldr	r3, [r4, #8]
 800827e:	6861      	ldr	r1, [r4, #4]
 8008280:	eb07 060a 	add.w	r6, r7, sl
 8008284:	42b3      	cmp	r3, r6
 8008286:	b085      	sub	sp, #20
 8008288:	bfb8      	it	lt
 800828a:	3101      	addlt	r1, #1
 800828c:	f7ff fed8 	bl	8008040 <_Balloc>
 8008290:	b930      	cbnz	r0, 80082a0 <__multiply+0x44>
 8008292:	4602      	mov	r2, r0
 8008294:	4b44      	ldr	r3, [pc, #272]	; (80083a8 <__multiply+0x14c>)
 8008296:	4845      	ldr	r0, [pc, #276]	; (80083ac <__multiply+0x150>)
 8008298:	f240 115d 	movw	r1, #349	; 0x15d
 800829c:	f000 fcb6 	bl	8008c0c <__assert_func>
 80082a0:	f100 0514 	add.w	r5, r0, #20
 80082a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082a8:	462b      	mov	r3, r5
 80082aa:	2200      	movs	r2, #0
 80082ac:	4543      	cmp	r3, r8
 80082ae:	d321      	bcc.n	80082f4 <__multiply+0x98>
 80082b0:	f104 0314 	add.w	r3, r4, #20
 80082b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082b8:	f109 0314 	add.w	r3, r9, #20
 80082bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80082c0:	9202      	str	r2, [sp, #8]
 80082c2:	1b3a      	subs	r2, r7, r4
 80082c4:	3a15      	subs	r2, #21
 80082c6:	f022 0203 	bic.w	r2, r2, #3
 80082ca:	3204      	adds	r2, #4
 80082cc:	f104 0115 	add.w	r1, r4, #21
 80082d0:	428f      	cmp	r7, r1
 80082d2:	bf38      	it	cc
 80082d4:	2204      	movcc	r2, #4
 80082d6:	9201      	str	r2, [sp, #4]
 80082d8:	9a02      	ldr	r2, [sp, #8]
 80082da:	9303      	str	r3, [sp, #12]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d80c      	bhi.n	80082fa <__multiply+0x9e>
 80082e0:	2e00      	cmp	r6, #0
 80082e2:	dd03      	ble.n	80082ec <__multiply+0x90>
 80082e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d05a      	beq.n	80083a2 <__multiply+0x146>
 80082ec:	6106      	str	r6, [r0, #16]
 80082ee:	b005      	add	sp, #20
 80082f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f4:	f843 2b04 	str.w	r2, [r3], #4
 80082f8:	e7d8      	b.n	80082ac <__multiply+0x50>
 80082fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80082fe:	f1ba 0f00 	cmp.w	sl, #0
 8008302:	d024      	beq.n	800834e <__multiply+0xf2>
 8008304:	f104 0e14 	add.w	lr, r4, #20
 8008308:	46a9      	mov	r9, r5
 800830a:	f04f 0c00 	mov.w	ip, #0
 800830e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008312:	f8d9 1000 	ldr.w	r1, [r9]
 8008316:	fa1f fb82 	uxth.w	fp, r2
 800831a:	b289      	uxth	r1, r1
 800831c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008320:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008324:	f8d9 2000 	ldr.w	r2, [r9]
 8008328:	4461      	add	r1, ip
 800832a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800832e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008332:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008336:	b289      	uxth	r1, r1
 8008338:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800833c:	4577      	cmp	r7, lr
 800833e:	f849 1b04 	str.w	r1, [r9], #4
 8008342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008346:	d8e2      	bhi.n	800830e <__multiply+0xb2>
 8008348:	9a01      	ldr	r2, [sp, #4]
 800834a:	f845 c002 	str.w	ip, [r5, r2]
 800834e:	9a03      	ldr	r2, [sp, #12]
 8008350:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008354:	3304      	adds	r3, #4
 8008356:	f1b9 0f00 	cmp.w	r9, #0
 800835a:	d020      	beq.n	800839e <__multiply+0x142>
 800835c:	6829      	ldr	r1, [r5, #0]
 800835e:	f104 0c14 	add.w	ip, r4, #20
 8008362:	46ae      	mov	lr, r5
 8008364:	f04f 0a00 	mov.w	sl, #0
 8008368:	f8bc b000 	ldrh.w	fp, [ip]
 800836c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008370:	fb09 220b 	mla	r2, r9, fp, r2
 8008374:	4492      	add	sl, r2
 8008376:	b289      	uxth	r1, r1
 8008378:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800837c:	f84e 1b04 	str.w	r1, [lr], #4
 8008380:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008384:	f8be 1000 	ldrh.w	r1, [lr]
 8008388:	0c12      	lsrs	r2, r2, #16
 800838a:	fb09 1102 	mla	r1, r9, r2, r1
 800838e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008392:	4567      	cmp	r7, ip
 8008394:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008398:	d8e6      	bhi.n	8008368 <__multiply+0x10c>
 800839a:	9a01      	ldr	r2, [sp, #4]
 800839c:	50a9      	str	r1, [r5, r2]
 800839e:	3504      	adds	r5, #4
 80083a0:	e79a      	b.n	80082d8 <__multiply+0x7c>
 80083a2:	3e01      	subs	r6, #1
 80083a4:	e79c      	b.n	80082e0 <__multiply+0x84>
 80083a6:	bf00      	nop
 80083a8:	0800aabb 	.word	0x0800aabb
 80083ac:	0800aacc 	.word	0x0800aacc

080083b0 <__pow5mult>:
 80083b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b4:	4615      	mov	r5, r2
 80083b6:	f012 0203 	ands.w	r2, r2, #3
 80083ba:	4606      	mov	r6, r0
 80083bc:	460f      	mov	r7, r1
 80083be:	d007      	beq.n	80083d0 <__pow5mult+0x20>
 80083c0:	4c25      	ldr	r4, [pc, #148]	; (8008458 <__pow5mult+0xa8>)
 80083c2:	3a01      	subs	r2, #1
 80083c4:	2300      	movs	r3, #0
 80083c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083ca:	f7ff fe9b 	bl	8008104 <__multadd>
 80083ce:	4607      	mov	r7, r0
 80083d0:	10ad      	asrs	r5, r5, #2
 80083d2:	d03d      	beq.n	8008450 <__pow5mult+0xa0>
 80083d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083d6:	b97c      	cbnz	r4, 80083f8 <__pow5mult+0x48>
 80083d8:	2010      	movs	r0, #16
 80083da:	f7ff fe1b 	bl	8008014 <malloc>
 80083de:	4602      	mov	r2, r0
 80083e0:	6270      	str	r0, [r6, #36]	; 0x24
 80083e2:	b928      	cbnz	r0, 80083f0 <__pow5mult+0x40>
 80083e4:	4b1d      	ldr	r3, [pc, #116]	; (800845c <__pow5mult+0xac>)
 80083e6:	481e      	ldr	r0, [pc, #120]	; (8008460 <__pow5mult+0xb0>)
 80083e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80083ec:	f000 fc0e 	bl	8008c0c <__assert_func>
 80083f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083f4:	6004      	str	r4, [r0, #0]
 80083f6:	60c4      	str	r4, [r0, #12]
 80083f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008400:	b94c      	cbnz	r4, 8008416 <__pow5mult+0x66>
 8008402:	f240 2171 	movw	r1, #625	; 0x271
 8008406:	4630      	mov	r0, r6
 8008408:	f7ff ff12 	bl	8008230 <__i2b>
 800840c:	2300      	movs	r3, #0
 800840e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008412:	4604      	mov	r4, r0
 8008414:	6003      	str	r3, [r0, #0]
 8008416:	f04f 0900 	mov.w	r9, #0
 800841a:	07eb      	lsls	r3, r5, #31
 800841c:	d50a      	bpl.n	8008434 <__pow5mult+0x84>
 800841e:	4639      	mov	r1, r7
 8008420:	4622      	mov	r2, r4
 8008422:	4630      	mov	r0, r6
 8008424:	f7ff ff1a 	bl	800825c <__multiply>
 8008428:	4639      	mov	r1, r7
 800842a:	4680      	mov	r8, r0
 800842c:	4630      	mov	r0, r6
 800842e:	f7ff fe47 	bl	80080c0 <_Bfree>
 8008432:	4647      	mov	r7, r8
 8008434:	106d      	asrs	r5, r5, #1
 8008436:	d00b      	beq.n	8008450 <__pow5mult+0xa0>
 8008438:	6820      	ldr	r0, [r4, #0]
 800843a:	b938      	cbnz	r0, 800844c <__pow5mult+0x9c>
 800843c:	4622      	mov	r2, r4
 800843e:	4621      	mov	r1, r4
 8008440:	4630      	mov	r0, r6
 8008442:	f7ff ff0b 	bl	800825c <__multiply>
 8008446:	6020      	str	r0, [r4, #0]
 8008448:	f8c0 9000 	str.w	r9, [r0]
 800844c:	4604      	mov	r4, r0
 800844e:	e7e4      	b.n	800841a <__pow5mult+0x6a>
 8008450:	4638      	mov	r0, r7
 8008452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008456:	bf00      	nop
 8008458:	0800ac18 	.word	0x0800ac18
 800845c:	0800aa49 	.word	0x0800aa49
 8008460:	0800aacc 	.word	0x0800aacc

08008464 <__lshift>:
 8008464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008468:	460c      	mov	r4, r1
 800846a:	6849      	ldr	r1, [r1, #4]
 800846c:	6923      	ldr	r3, [r4, #16]
 800846e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008472:	68a3      	ldr	r3, [r4, #8]
 8008474:	4607      	mov	r7, r0
 8008476:	4691      	mov	r9, r2
 8008478:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800847c:	f108 0601 	add.w	r6, r8, #1
 8008480:	42b3      	cmp	r3, r6
 8008482:	db0b      	blt.n	800849c <__lshift+0x38>
 8008484:	4638      	mov	r0, r7
 8008486:	f7ff fddb 	bl	8008040 <_Balloc>
 800848a:	4605      	mov	r5, r0
 800848c:	b948      	cbnz	r0, 80084a2 <__lshift+0x3e>
 800848e:	4602      	mov	r2, r0
 8008490:	4b2a      	ldr	r3, [pc, #168]	; (800853c <__lshift+0xd8>)
 8008492:	482b      	ldr	r0, [pc, #172]	; (8008540 <__lshift+0xdc>)
 8008494:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008498:	f000 fbb8 	bl	8008c0c <__assert_func>
 800849c:	3101      	adds	r1, #1
 800849e:	005b      	lsls	r3, r3, #1
 80084a0:	e7ee      	b.n	8008480 <__lshift+0x1c>
 80084a2:	2300      	movs	r3, #0
 80084a4:	f100 0114 	add.w	r1, r0, #20
 80084a8:	f100 0210 	add.w	r2, r0, #16
 80084ac:	4618      	mov	r0, r3
 80084ae:	4553      	cmp	r3, sl
 80084b0:	db37      	blt.n	8008522 <__lshift+0xbe>
 80084b2:	6920      	ldr	r0, [r4, #16]
 80084b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084b8:	f104 0314 	add.w	r3, r4, #20
 80084bc:	f019 091f 	ands.w	r9, r9, #31
 80084c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80084c8:	d02f      	beq.n	800852a <__lshift+0xc6>
 80084ca:	f1c9 0e20 	rsb	lr, r9, #32
 80084ce:	468a      	mov	sl, r1
 80084d0:	f04f 0c00 	mov.w	ip, #0
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	fa02 f209 	lsl.w	r2, r2, r9
 80084da:	ea42 020c 	orr.w	r2, r2, ip
 80084de:	f84a 2b04 	str.w	r2, [sl], #4
 80084e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084e6:	4298      	cmp	r0, r3
 80084e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80084ec:	d8f2      	bhi.n	80084d4 <__lshift+0x70>
 80084ee:	1b03      	subs	r3, r0, r4
 80084f0:	3b15      	subs	r3, #21
 80084f2:	f023 0303 	bic.w	r3, r3, #3
 80084f6:	3304      	adds	r3, #4
 80084f8:	f104 0215 	add.w	r2, r4, #21
 80084fc:	4290      	cmp	r0, r2
 80084fe:	bf38      	it	cc
 8008500:	2304      	movcc	r3, #4
 8008502:	f841 c003 	str.w	ip, [r1, r3]
 8008506:	f1bc 0f00 	cmp.w	ip, #0
 800850a:	d001      	beq.n	8008510 <__lshift+0xac>
 800850c:	f108 0602 	add.w	r6, r8, #2
 8008510:	3e01      	subs	r6, #1
 8008512:	4638      	mov	r0, r7
 8008514:	612e      	str	r6, [r5, #16]
 8008516:	4621      	mov	r1, r4
 8008518:	f7ff fdd2 	bl	80080c0 <_Bfree>
 800851c:	4628      	mov	r0, r5
 800851e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008522:	f842 0f04 	str.w	r0, [r2, #4]!
 8008526:	3301      	adds	r3, #1
 8008528:	e7c1      	b.n	80084ae <__lshift+0x4a>
 800852a:	3904      	subs	r1, #4
 800852c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008530:	f841 2f04 	str.w	r2, [r1, #4]!
 8008534:	4298      	cmp	r0, r3
 8008536:	d8f9      	bhi.n	800852c <__lshift+0xc8>
 8008538:	e7ea      	b.n	8008510 <__lshift+0xac>
 800853a:	bf00      	nop
 800853c:	0800aabb 	.word	0x0800aabb
 8008540:	0800aacc 	.word	0x0800aacc

08008544 <__mcmp>:
 8008544:	b530      	push	{r4, r5, lr}
 8008546:	6902      	ldr	r2, [r0, #16]
 8008548:	690c      	ldr	r4, [r1, #16]
 800854a:	1b12      	subs	r2, r2, r4
 800854c:	d10e      	bne.n	800856c <__mcmp+0x28>
 800854e:	f100 0314 	add.w	r3, r0, #20
 8008552:	3114      	adds	r1, #20
 8008554:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008558:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800855c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008560:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008564:	42a5      	cmp	r5, r4
 8008566:	d003      	beq.n	8008570 <__mcmp+0x2c>
 8008568:	d305      	bcc.n	8008576 <__mcmp+0x32>
 800856a:	2201      	movs	r2, #1
 800856c:	4610      	mov	r0, r2
 800856e:	bd30      	pop	{r4, r5, pc}
 8008570:	4283      	cmp	r3, r0
 8008572:	d3f3      	bcc.n	800855c <__mcmp+0x18>
 8008574:	e7fa      	b.n	800856c <__mcmp+0x28>
 8008576:	f04f 32ff 	mov.w	r2, #4294967295
 800857a:	e7f7      	b.n	800856c <__mcmp+0x28>

0800857c <__mdiff>:
 800857c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008580:	460c      	mov	r4, r1
 8008582:	4606      	mov	r6, r0
 8008584:	4611      	mov	r1, r2
 8008586:	4620      	mov	r0, r4
 8008588:	4690      	mov	r8, r2
 800858a:	f7ff ffdb 	bl	8008544 <__mcmp>
 800858e:	1e05      	subs	r5, r0, #0
 8008590:	d110      	bne.n	80085b4 <__mdiff+0x38>
 8008592:	4629      	mov	r1, r5
 8008594:	4630      	mov	r0, r6
 8008596:	f7ff fd53 	bl	8008040 <_Balloc>
 800859a:	b930      	cbnz	r0, 80085aa <__mdiff+0x2e>
 800859c:	4b3a      	ldr	r3, [pc, #232]	; (8008688 <__mdiff+0x10c>)
 800859e:	4602      	mov	r2, r0
 80085a0:	f240 2132 	movw	r1, #562	; 0x232
 80085a4:	4839      	ldr	r0, [pc, #228]	; (800868c <__mdiff+0x110>)
 80085a6:	f000 fb31 	bl	8008c0c <__assert_func>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b4:	bfa4      	itt	ge
 80085b6:	4643      	movge	r3, r8
 80085b8:	46a0      	movge	r8, r4
 80085ba:	4630      	mov	r0, r6
 80085bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80085c0:	bfa6      	itte	ge
 80085c2:	461c      	movge	r4, r3
 80085c4:	2500      	movge	r5, #0
 80085c6:	2501      	movlt	r5, #1
 80085c8:	f7ff fd3a 	bl	8008040 <_Balloc>
 80085cc:	b920      	cbnz	r0, 80085d8 <__mdiff+0x5c>
 80085ce:	4b2e      	ldr	r3, [pc, #184]	; (8008688 <__mdiff+0x10c>)
 80085d0:	4602      	mov	r2, r0
 80085d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80085d6:	e7e5      	b.n	80085a4 <__mdiff+0x28>
 80085d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085dc:	6926      	ldr	r6, [r4, #16]
 80085de:	60c5      	str	r5, [r0, #12]
 80085e0:	f104 0914 	add.w	r9, r4, #20
 80085e4:	f108 0514 	add.w	r5, r8, #20
 80085e8:	f100 0e14 	add.w	lr, r0, #20
 80085ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80085f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085f4:	f108 0210 	add.w	r2, r8, #16
 80085f8:	46f2      	mov	sl, lr
 80085fa:	2100      	movs	r1, #0
 80085fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008600:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008604:	fa1f f883 	uxth.w	r8, r3
 8008608:	fa11 f18b 	uxtah	r1, r1, fp
 800860c:	0c1b      	lsrs	r3, r3, #16
 800860e:	eba1 0808 	sub.w	r8, r1, r8
 8008612:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008616:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800861a:	fa1f f888 	uxth.w	r8, r8
 800861e:	1419      	asrs	r1, r3, #16
 8008620:	454e      	cmp	r6, r9
 8008622:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008626:	f84a 3b04 	str.w	r3, [sl], #4
 800862a:	d8e7      	bhi.n	80085fc <__mdiff+0x80>
 800862c:	1b33      	subs	r3, r6, r4
 800862e:	3b15      	subs	r3, #21
 8008630:	f023 0303 	bic.w	r3, r3, #3
 8008634:	3304      	adds	r3, #4
 8008636:	3415      	adds	r4, #21
 8008638:	42a6      	cmp	r6, r4
 800863a:	bf38      	it	cc
 800863c:	2304      	movcc	r3, #4
 800863e:	441d      	add	r5, r3
 8008640:	4473      	add	r3, lr
 8008642:	469e      	mov	lr, r3
 8008644:	462e      	mov	r6, r5
 8008646:	4566      	cmp	r6, ip
 8008648:	d30e      	bcc.n	8008668 <__mdiff+0xec>
 800864a:	f10c 0203 	add.w	r2, ip, #3
 800864e:	1b52      	subs	r2, r2, r5
 8008650:	f022 0203 	bic.w	r2, r2, #3
 8008654:	3d03      	subs	r5, #3
 8008656:	45ac      	cmp	ip, r5
 8008658:	bf38      	it	cc
 800865a:	2200      	movcc	r2, #0
 800865c:	441a      	add	r2, r3
 800865e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008662:	b17b      	cbz	r3, 8008684 <__mdiff+0x108>
 8008664:	6107      	str	r7, [r0, #16]
 8008666:	e7a3      	b.n	80085b0 <__mdiff+0x34>
 8008668:	f856 8b04 	ldr.w	r8, [r6], #4
 800866c:	fa11 f288 	uxtah	r2, r1, r8
 8008670:	1414      	asrs	r4, r2, #16
 8008672:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008676:	b292      	uxth	r2, r2
 8008678:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800867c:	f84e 2b04 	str.w	r2, [lr], #4
 8008680:	1421      	asrs	r1, r4, #16
 8008682:	e7e0      	b.n	8008646 <__mdiff+0xca>
 8008684:	3f01      	subs	r7, #1
 8008686:	e7ea      	b.n	800865e <__mdiff+0xe2>
 8008688:	0800aabb 	.word	0x0800aabb
 800868c:	0800aacc 	.word	0x0800aacc

08008690 <__d2b>:
 8008690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008694:	4689      	mov	r9, r1
 8008696:	2101      	movs	r1, #1
 8008698:	ec57 6b10 	vmov	r6, r7, d0
 800869c:	4690      	mov	r8, r2
 800869e:	f7ff fccf 	bl	8008040 <_Balloc>
 80086a2:	4604      	mov	r4, r0
 80086a4:	b930      	cbnz	r0, 80086b4 <__d2b+0x24>
 80086a6:	4602      	mov	r2, r0
 80086a8:	4b25      	ldr	r3, [pc, #148]	; (8008740 <__d2b+0xb0>)
 80086aa:	4826      	ldr	r0, [pc, #152]	; (8008744 <__d2b+0xb4>)
 80086ac:	f240 310a 	movw	r1, #778	; 0x30a
 80086b0:	f000 faac 	bl	8008c0c <__assert_func>
 80086b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086bc:	bb35      	cbnz	r5, 800870c <__d2b+0x7c>
 80086be:	2e00      	cmp	r6, #0
 80086c0:	9301      	str	r3, [sp, #4]
 80086c2:	d028      	beq.n	8008716 <__d2b+0x86>
 80086c4:	4668      	mov	r0, sp
 80086c6:	9600      	str	r6, [sp, #0]
 80086c8:	f7ff fd82 	bl	80081d0 <__lo0bits>
 80086cc:	9900      	ldr	r1, [sp, #0]
 80086ce:	b300      	cbz	r0, 8008712 <__d2b+0x82>
 80086d0:	9a01      	ldr	r2, [sp, #4]
 80086d2:	f1c0 0320 	rsb	r3, r0, #32
 80086d6:	fa02 f303 	lsl.w	r3, r2, r3
 80086da:	430b      	orrs	r3, r1
 80086dc:	40c2      	lsrs	r2, r0
 80086de:	6163      	str	r3, [r4, #20]
 80086e0:	9201      	str	r2, [sp, #4]
 80086e2:	9b01      	ldr	r3, [sp, #4]
 80086e4:	61a3      	str	r3, [r4, #24]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	bf14      	ite	ne
 80086ea:	2202      	movne	r2, #2
 80086ec:	2201      	moveq	r2, #1
 80086ee:	6122      	str	r2, [r4, #16]
 80086f0:	b1d5      	cbz	r5, 8008728 <__d2b+0x98>
 80086f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086f6:	4405      	add	r5, r0
 80086f8:	f8c9 5000 	str.w	r5, [r9]
 80086fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008700:	f8c8 0000 	str.w	r0, [r8]
 8008704:	4620      	mov	r0, r4
 8008706:	b003      	add	sp, #12
 8008708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800870c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008710:	e7d5      	b.n	80086be <__d2b+0x2e>
 8008712:	6161      	str	r1, [r4, #20]
 8008714:	e7e5      	b.n	80086e2 <__d2b+0x52>
 8008716:	a801      	add	r0, sp, #4
 8008718:	f7ff fd5a 	bl	80081d0 <__lo0bits>
 800871c:	9b01      	ldr	r3, [sp, #4]
 800871e:	6163      	str	r3, [r4, #20]
 8008720:	2201      	movs	r2, #1
 8008722:	6122      	str	r2, [r4, #16]
 8008724:	3020      	adds	r0, #32
 8008726:	e7e3      	b.n	80086f0 <__d2b+0x60>
 8008728:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800872c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008730:	f8c9 0000 	str.w	r0, [r9]
 8008734:	6918      	ldr	r0, [r3, #16]
 8008736:	f7ff fd2b 	bl	8008190 <__hi0bits>
 800873a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800873e:	e7df      	b.n	8008700 <__d2b+0x70>
 8008740:	0800aabb 	.word	0x0800aabb
 8008744:	0800aacc 	.word	0x0800aacc

08008748 <_calloc_r>:
 8008748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800874a:	fba1 2402 	umull	r2, r4, r1, r2
 800874e:	b94c      	cbnz	r4, 8008764 <_calloc_r+0x1c>
 8008750:	4611      	mov	r1, r2
 8008752:	9201      	str	r2, [sp, #4]
 8008754:	f000 f87a 	bl	800884c <_malloc_r>
 8008758:	9a01      	ldr	r2, [sp, #4]
 800875a:	4605      	mov	r5, r0
 800875c:	b930      	cbnz	r0, 800876c <_calloc_r+0x24>
 800875e:	4628      	mov	r0, r5
 8008760:	b003      	add	sp, #12
 8008762:	bd30      	pop	{r4, r5, pc}
 8008764:	220c      	movs	r2, #12
 8008766:	6002      	str	r2, [r0, #0]
 8008768:	2500      	movs	r5, #0
 800876a:	e7f8      	b.n	800875e <_calloc_r+0x16>
 800876c:	4621      	mov	r1, r4
 800876e:	f7fe f941 	bl	80069f4 <memset>
 8008772:	e7f4      	b.n	800875e <_calloc_r+0x16>

08008774 <_free_r>:
 8008774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008776:	2900      	cmp	r1, #0
 8008778:	d044      	beq.n	8008804 <_free_r+0x90>
 800877a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800877e:	9001      	str	r0, [sp, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	f1a1 0404 	sub.w	r4, r1, #4
 8008786:	bfb8      	it	lt
 8008788:	18e4      	addlt	r4, r4, r3
 800878a:	f000 fa9b 	bl	8008cc4 <__malloc_lock>
 800878e:	4a1e      	ldr	r2, [pc, #120]	; (8008808 <_free_r+0x94>)
 8008790:	9801      	ldr	r0, [sp, #4]
 8008792:	6813      	ldr	r3, [r2, #0]
 8008794:	b933      	cbnz	r3, 80087a4 <_free_r+0x30>
 8008796:	6063      	str	r3, [r4, #4]
 8008798:	6014      	str	r4, [r2, #0]
 800879a:	b003      	add	sp, #12
 800879c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087a0:	f000 ba96 	b.w	8008cd0 <__malloc_unlock>
 80087a4:	42a3      	cmp	r3, r4
 80087a6:	d908      	bls.n	80087ba <_free_r+0x46>
 80087a8:	6825      	ldr	r5, [r4, #0]
 80087aa:	1961      	adds	r1, r4, r5
 80087ac:	428b      	cmp	r3, r1
 80087ae:	bf01      	itttt	eq
 80087b0:	6819      	ldreq	r1, [r3, #0]
 80087b2:	685b      	ldreq	r3, [r3, #4]
 80087b4:	1949      	addeq	r1, r1, r5
 80087b6:	6021      	streq	r1, [r4, #0]
 80087b8:	e7ed      	b.n	8008796 <_free_r+0x22>
 80087ba:	461a      	mov	r2, r3
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	b10b      	cbz	r3, 80087c4 <_free_r+0x50>
 80087c0:	42a3      	cmp	r3, r4
 80087c2:	d9fa      	bls.n	80087ba <_free_r+0x46>
 80087c4:	6811      	ldr	r1, [r2, #0]
 80087c6:	1855      	adds	r5, r2, r1
 80087c8:	42a5      	cmp	r5, r4
 80087ca:	d10b      	bne.n	80087e4 <_free_r+0x70>
 80087cc:	6824      	ldr	r4, [r4, #0]
 80087ce:	4421      	add	r1, r4
 80087d0:	1854      	adds	r4, r2, r1
 80087d2:	42a3      	cmp	r3, r4
 80087d4:	6011      	str	r1, [r2, #0]
 80087d6:	d1e0      	bne.n	800879a <_free_r+0x26>
 80087d8:	681c      	ldr	r4, [r3, #0]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	6053      	str	r3, [r2, #4]
 80087de:	4421      	add	r1, r4
 80087e0:	6011      	str	r1, [r2, #0]
 80087e2:	e7da      	b.n	800879a <_free_r+0x26>
 80087e4:	d902      	bls.n	80087ec <_free_r+0x78>
 80087e6:	230c      	movs	r3, #12
 80087e8:	6003      	str	r3, [r0, #0]
 80087ea:	e7d6      	b.n	800879a <_free_r+0x26>
 80087ec:	6825      	ldr	r5, [r4, #0]
 80087ee:	1961      	adds	r1, r4, r5
 80087f0:	428b      	cmp	r3, r1
 80087f2:	bf04      	itt	eq
 80087f4:	6819      	ldreq	r1, [r3, #0]
 80087f6:	685b      	ldreq	r3, [r3, #4]
 80087f8:	6063      	str	r3, [r4, #4]
 80087fa:	bf04      	itt	eq
 80087fc:	1949      	addeq	r1, r1, r5
 80087fe:	6021      	streq	r1, [r4, #0]
 8008800:	6054      	str	r4, [r2, #4]
 8008802:	e7ca      	b.n	800879a <_free_r+0x26>
 8008804:	b003      	add	sp, #12
 8008806:	bd30      	pop	{r4, r5, pc}
 8008808:	200008e0 	.word	0x200008e0

0800880c <sbrk_aligned>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	4e0e      	ldr	r6, [pc, #56]	; (8008848 <sbrk_aligned+0x3c>)
 8008810:	460c      	mov	r4, r1
 8008812:	6831      	ldr	r1, [r6, #0]
 8008814:	4605      	mov	r5, r0
 8008816:	b911      	cbnz	r1, 800881e <sbrk_aligned+0x12>
 8008818:	f000 f9e8 	bl	8008bec <_sbrk_r>
 800881c:	6030      	str	r0, [r6, #0]
 800881e:	4621      	mov	r1, r4
 8008820:	4628      	mov	r0, r5
 8008822:	f000 f9e3 	bl	8008bec <_sbrk_r>
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	d00a      	beq.n	8008840 <sbrk_aligned+0x34>
 800882a:	1cc4      	adds	r4, r0, #3
 800882c:	f024 0403 	bic.w	r4, r4, #3
 8008830:	42a0      	cmp	r0, r4
 8008832:	d007      	beq.n	8008844 <sbrk_aligned+0x38>
 8008834:	1a21      	subs	r1, r4, r0
 8008836:	4628      	mov	r0, r5
 8008838:	f000 f9d8 	bl	8008bec <_sbrk_r>
 800883c:	3001      	adds	r0, #1
 800883e:	d101      	bne.n	8008844 <sbrk_aligned+0x38>
 8008840:	f04f 34ff 	mov.w	r4, #4294967295
 8008844:	4620      	mov	r0, r4
 8008846:	bd70      	pop	{r4, r5, r6, pc}
 8008848:	200008e4 	.word	0x200008e4

0800884c <_malloc_r>:
 800884c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008850:	1ccd      	adds	r5, r1, #3
 8008852:	f025 0503 	bic.w	r5, r5, #3
 8008856:	3508      	adds	r5, #8
 8008858:	2d0c      	cmp	r5, #12
 800885a:	bf38      	it	cc
 800885c:	250c      	movcc	r5, #12
 800885e:	2d00      	cmp	r5, #0
 8008860:	4607      	mov	r7, r0
 8008862:	db01      	blt.n	8008868 <_malloc_r+0x1c>
 8008864:	42a9      	cmp	r1, r5
 8008866:	d905      	bls.n	8008874 <_malloc_r+0x28>
 8008868:	230c      	movs	r3, #12
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	2600      	movs	r6, #0
 800886e:	4630      	mov	r0, r6
 8008870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008874:	4e2e      	ldr	r6, [pc, #184]	; (8008930 <_malloc_r+0xe4>)
 8008876:	f000 fa25 	bl	8008cc4 <__malloc_lock>
 800887a:	6833      	ldr	r3, [r6, #0]
 800887c:	461c      	mov	r4, r3
 800887e:	bb34      	cbnz	r4, 80088ce <_malloc_r+0x82>
 8008880:	4629      	mov	r1, r5
 8008882:	4638      	mov	r0, r7
 8008884:	f7ff ffc2 	bl	800880c <sbrk_aligned>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	4604      	mov	r4, r0
 800888c:	d14d      	bne.n	800892a <_malloc_r+0xde>
 800888e:	6834      	ldr	r4, [r6, #0]
 8008890:	4626      	mov	r6, r4
 8008892:	2e00      	cmp	r6, #0
 8008894:	d140      	bne.n	8008918 <_malloc_r+0xcc>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	4631      	mov	r1, r6
 800889a:	4638      	mov	r0, r7
 800889c:	eb04 0803 	add.w	r8, r4, r3
 80088a0:	f000 f9a4 	bl	8008bec <_sbrk_r>
 80088a4:	4580      	cmp	r8, r0
 80088a6:	d13a      	bne.n	800891e <_malloc_r+0xd2>
 80088a8:	6821      	ldr	r1, [r4, #0]
 80088aa:	3503      	adds	r5, #3
 80088ac:	1a6d      	subs	r5, r5, r1
 80088ae:	f025 0503 	bic.w	r5, r5, #3
 80088b2:	3508      	adds	r5, #8
 80088b4:	2d0c      	cmp	r5, #12
 80088b6:	bf38      	it	cc
 80088b8:	250c      	movcc	r5, #12
 80088ba:	4629      	mov	r1, r5
 80088bc:	4638      	mov	r0, r7
 80088be:	f7ff ffa5 	bl	800880c <sbrk_aligned>
 80088c2:	3001      	adds	r0, #1
 80088c4:	d02b      	beq.n	800891e <_malloc_r+0xd2>
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	442b      	add	r3, r5
 80088ca:	6023      	str	r3, [r4, #0]
 80088cc:	e00e      	b.n	80088ec <_malloc_r+0xa0>
 80088ce:	6822      	ldr	r2, [r4, #0]
 80088d0:	1b52      	subs	r2, r2, r5
 80088d2:	d41e      	bmi.n	8008912 <_malloc_r+0xc6>
 80088d4:	2a0b      	cmp	r2, #11
 80088d6:	d916      	bls.n	8008906 <_malloc_r+0xba>
 80088d8:	1961      	adds	r1, r4, r5
 80088da:	42a3      	cmp	r3, r4
 80088dc:	6025      	str	r5, [r4, #0]
 80088de:	bf18      	it	ne
 80088e0:	6059      	strne	r1, [r3, #4]
 80088e2:	6863      	ldr	r3, [r4, #4]
 80088e4:	bf08      	it	eq
 80088e6:	6031      	streq	r1, [r6, #0]
 80088e8:	5162      	str	r2, [r4, r5]
 80088ea:	604b      	str	r3, [r1, #4]
 80088ec:	4638      	mov	r0, r7
 80088ee:	f104 060b 	add.w	r6, r4, #11
 80088f2:	f000 f9ed 	bl	8008cd0 <__malloc_unlock>
 80088f6:	f026 0607 	bic.w	r6, r6, #7
 80088fa:	1d23      	adds	r3, r4, #4
 80088fc:	1af2      	subs	r2, r6, r3
 80088fe:	d0b6      	beq.n	800886e <_malloc_r+0x22>
 8008900:	1b9b      	subs	r3, r3, r6
 8008902:	50a3      	str	r3, [r4, r2]
 8008904:	e7b3      	b.n	800886e <_malloc_r+0x22>
 8008906:	6862      	ldr	r2, [r4, #4]
 8008908:	42a3      	cmp	r3, r4
 800890a:	bf0c      	ite	eq
 800890c:	6032      	streq	r2, [r6, #0]
 800890e:	605a      	strne	r2, [r3, #4]
 8008910:	e7ec      	b.n	80088ec <_malloc_r+0xa0>
 8008912:	4623      	mov	r3, r4
 8008914:	6864      	ldr	r4, [r4, #4]
 8008916:	e7b2      	b.n	800887e <_malloc_r+0x32>
 8008918:	4634      	mov	r4, r6
 800891a:	6876      	ldr	r6, [r6, #4]
 800891c:	e7b9      	b.n	8008892 <_malloc_r+0x46>
 800891e:	230c      	movs	r3, #12
 8008920:	603b      	str	r3, [r7, #0]
 8008922:	4638      	mov	r0, r7
 8008924:	f000 f9d4 	bl	8008cd0 <__malloc_unlock>
 8008928:	e7a1      	b.n	800886e <_malloc_r+0x22>
 800892a:	6025      	str	r5, [r4, #0]
 800892c:	e7de      	b.n	80088ec <_malloc_r+0xa0>
 800892e:	bf00      	nop
 8008930:	200008e0 	.word	0x200008e0

08008934 <__ssputs_r>:
 8008934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008938:	688e      	ldr	r6, [r1, #8]
 800893a:	429e      	cmp	r6, r3
 800893c:	4682      	mov	sl, r0
 800893e:	460c      	mov	r4, r1
 8008940:	4690      	mov	r8, r2
 8008942:	461f      	mov	r7, r3
 8008944:	d838      	bhi.n	80089b8 <__ssputs_r+0x84>
 8008946:	898a      	ldrh	r2, [r1, #12]
 8008948:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800894c:	d032      	beq.n	80089b4 <__ssputs_r+0x80>
 800894e:	6825      	ldr	r5, [r4, #0]
 8008950:	6909      	ldr	r1, [r1, #16]
 8008952:	eba5 0901 	sub.w	r9, r5, r1
 8008956:	6965      	ldr	r5, [r4, #20]
 8008958:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800895c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008960:	3301      	adds	r3, #1
 8008962:	444b      	add	r3, r9
 8008964:	106d      	asrs	r5, r5, #1
 8008966:	429d      	cmp	r5, r3
 8008968:	bf38      	it	cc
 800896a:	461d      	movcc	r5, r3
 800896c:	0553      	lsls	r3, r2, #21
 800896e:	d531      	bpl.n	80089d4 <__ssputs_r+0xa0>
 8008970:	4629      	mov	r1, r5
 8008972:	f7ff ff6b 	bl	800884c <_malloc_r>
 8008976:	4606      	mov	r6, r0
 8008978:	b950      	cbnz	r0, 8008990 <__ssputs_r+0x5c>
 800897a:	230c      	movs	r3, #12
 800897c:	f8ca 3000 	str.w	r3, [sl]
 8008980:	89a3      	ldrh	r3, [r4, #12]
 8008982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008986:	81a3      	strh	r3, [r4, #12]
 8008988:	f04f 30ff 	mov.w	r0, #4294967295
 800898c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008990:	6921      	ldr	r1, [r4, #16]
 8008992:	464a      	mov	r2, r9
 8008994:	f7ff fb46 	bl	8008024 <memcpy>
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800899e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089a2:	81a3      	strh	r3, [r4, #12]
 80089a4:	6126      	str	r6, [r4, #16]
 80089a6:	6165      	str	r5, [r4, #20]
 80089a8:	444e      	add	r6, r9
 80089aa:	eba5 0509 	sub.w	r5, r5, r9
 80089ae:	6026      	str	r6, [r4, #0]
 80089b0:	60a5      	str	r5, [r4, #8]
 80089b2:	463e      	mov	r6, r7
 80089b4:	42be      	cmp	r6, r7
 80089b6:	d900      	bls.n	80089ba <__ssputs_r+0x86>
 80089b8:	463e      	mov	r6, r7
 80089ba:	6820      	ldr	r0, [r4, #0]
 80089bc:	4632      	mov	r2, r6
 80089be:	4641      	mov	r1, r8
 80089c0:	f000 f966 	bl	8008c90 <memmove>
 80089c4:	68a3      	ldr	r3, [r4, #8]
 80089c6:	1b9b      	subs	r3, r3, r6
 80089c8:	60a3      	str	r3, [r4, #8]
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	4433      	add	r3, r6
 80089ce:	6023      	str	r3, [r4, #0]
 80089d0:	2000      	movs	r0, #0
 80089d2:	e7db      	b.n	800898c <__ssputs_r+0x58>
 80089d4:	462a      	mov	r2, r5
 80089d6:	f000 f981 	bl	8008cdc <_realloc_r>
 80089da:	4606      	mov	r6, r0
 80089dc:	2800      	cmp	r0, #0
 80089de:	d1e1      	bne.n	80089a4 <__ssputs_r+0x70>
 80089e0:	6921      	ldr	r1, [r4, #16]
 80089e2:	4650      	mov	r0, sl
 80089e4:	f7ff fec6 	bl	8008774 <_free_r>
 80089e8:	e7c7      	b.n	800897a <__ssputs_r+0x46>
	...

080089ec <_svfiprintf_r>:
 80089ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f0:	4698      	mov	r8, r3
 80089f2:	898b      	ldrh	r3, [r1, #12]
 80089f4:	061b      	lsls	r3, r3, #24
 80089f6:	b09d      	sub	sp, #116	; 0x74
 80089f8:	4607      	mov	r7, r0
 80089fa:	460d      	mov	r5, r1
 80089fc:	4614      	mov	r4, r2
 80089fe:	d50e      	bpl.n	8008a1e <_svfiprintf_r+0x32>
 8008a00:	690b      	ldr	r3, [r1, #16]
 8008a02:	b963      	cbnz	r3, 8008a1e <_svfiprintf_r+0x32>
 8008a04:	2140      	movs	r1, #64	; 0x40
 8008a06:	f7ff ff21 	bl	800884c <_malloc_r>
 8008a0a:	6028      	str	r0, [r5, #0]
 8008a0c:	6128      	str	r0, [r5, #16]
 8008a0e:	b920      	cbnz	r0, 8008a1a <_svfiprintf_r+0x2e>
 8008a10:	230c      	movs	r3, #12
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	f04f 30ff 	mov.w	r0, #4294967295
 8008a18:	e0d1      	b.n	8008bbe <_svfiprintf_r+0x1d2>
 8008a1a:	2340      	movs	r3, #64	; 0x40
 8008a1c:	616b      	str	r3, [r5, #20]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	9309      	str	r3, [sp, #36]	; 0x24
 8008a22:	2320      	movs	r3, #32
 8008a24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a28:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a2c:	2330      	movs	r3, #48	; 0x30
 8008a2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008bd8 <_svfiprintf_r+0x1ec>
 8008a32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a36:	f04f 0901 	mov.w	r9, #1
 8008a3a:	4623      	mov	r3, r4
 8008a3c:	469a      	mov	sl, r3
 8008a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a42:	b10a      	cbz	r2, 8008a48 <_svfiprintf_r+0x5c>
 8008a44:	2a25      	cmp	r2, #37	; 0x25
 8008a46:	d1f9      	bne.n	8008a3c <_svfiprintf_r+0x50>
 8008a48:	ebba 0b04 	subs.w	fp, sl, r4
 8008a4c:	d00b      	beq.n	8008a66 <_svfiprintf_r+0x7a>
 8008a4e:	465b      	mov	r3, fp
 8008a50:	4622      	mov	r2, r4
 8008a52:	4629      	mov	r1, r5
 8008a54:	4638      	mov	r0, r7
 8008a56:	f7ff ff6d 	bl	8008934 <__ssputs_r>
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	f000 80aa 	beq.w	8008bb4 <_svfiprintf_r+0x1c8>
 8008a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a62:	445a      	add	r2, fp
 8008a64:	9209      	str	r2, [sp, #36]	; 0x24
 8008a66:	f89a 3000 	ldrb.w	r3, [sl]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 80a2 	beq.w	8008bb4 <_svfiprintf_r+0x1c8>
 8008a70:	2300      	movs	r3, #0
 8008a72:	f04f 32ff 	mov.w	r2, #4294967295
 8008a76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a7a:	f10a 0a01 	add.w	sl, sl, #1
 8008a7e:	9304      	str	r3, [sp, #16]
 8008a80:	9307      	str	r3, [sp, #28]
 8008a82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a86:	931a      	str	r3, [sp, #104]	; 0x68
 8008a88:	4654      	mov	r4, sl
 8008a8a:	2205      	movs	r2, #5
 8008a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a90:	4851      	ldr	r0, [pc, #324]	; (8008bd8 <_svfiprintf_r+0x1ec>)
 8008a92:	f7f7 fba5 	bl	80001e0 <memchr>
 8008a96:	9a04      	ldr	r2, [sp, #16]
 8008a98:	b9d8      	cbnz	r0, 8008ad2 <_svfiprintf_r+0xe6>
 8008a9a:	06d0      	lsls	r0, r2, #27
 8008a9c:	bf44      	itt	mi
 8008a9e:	2320      	movmi	r3, #32
 8008aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aa4:	0711      	lsls	r1, r2, #28
 8008aa6:	bf44      	itt	mi
 8008aa8:	232b      	movmi	r3, #43	; 0x2b
 8008aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aae:	f89a 3000 	ldrb.w	r3, [sl]
 8008ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ab4:	d015      	beq.n	8008ae2 <_svfiprintf_r+0xf6>
 8008ab6:	9a07      	ldr	r2, [sp, #28]
 8008ab8:	4654      	mov	r4, sl
 8008aba:	2000      	movs	r0, #0
 8008abc:	f04f 0c0a 	mov.w	ip, #10
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ac6:	3b30      	subs	r3, #48	; 0x30
 8008ac8:	2b09      	cmp	r3, #9
 8008aca:	d94e      	bls.n	8008b6a <_svfiprintf_r+0x17e>
 8008acc:	b1b0      	cbz	r0, 8008afc <_svfiprintf_r+0x110>
 8008ace:	9207      	str	r2, [sp, #28]
 8008ad0:	e014      	b.n	8008afc <_svfiprintf_r+0x110>
 8008ad2:	eba0 0308 	sub.w	r3, r0, r8
 8008ad6:	fa09 f303 	lsl.w	r3, r9, r3
 8008ada:	4313      	orrs	r3, r2
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	46a2      	mov	sl, r4
 8008ae0:	e7d2      	b.n	8008a88 <_svfiprintf_r+0x9c>
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	1d19      	adds	r1, r3, #4
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	9103      	str	r1, [sp, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	bfbb      	ittet	lt
 8008aee:	425b      	neglt	r3, r3
 8008af0:	f042 0202 	orrlt.w	r2, r2, #2
 8008af4:	9307      	strge	r3, [sp, #28]
 8008af6:	9307      	strlt	r3, [sp, #28]
 8008af8:	bfb8      	it	lt
 8008afa:	9204      	strlt	r2, [sp, #16]
 8008afc:	7823      	ldrb	r3, [r4, #0]
 8008afe:	2b2e      	cmp	r3, #46	; 0x2e
 8008b00:	d10c      	bne.n	8008b1c <_svfiprintf_r+0x130>
 8008b02:	7863      	ldrb	r3, [r4, #1]
 8008b04:	2b2a      	cmp	r3, #42	; 0x2a
 8008b06:	d135      	bne.n	8008b74 <_svfiprintf_r+0x188>
 8008b08:	9b03      	ldr	r3, [sp, #12]
 8008b0a:	1d1a      	adds	r2, r3, #4
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	9203      	str	r2, [sp, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	bfb8      	it	lt
 8008b14:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b18:	3402      	adds	r4, #2
 8008b1a:	9305      	str	r3, [sp, #20]
 8008b1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008be8 <_svfiprintf_r+0x1fc>
 8008b20:	7821      	ldrb	r1, [r4, #0]
 8008b22:	2203      	movs	r2, #3
 8008b24:	4650      	mov	r0, sl
 8008b26:	f7f7 fb5b 	bl	80001e0 <memchr>
 8008b2a:	b140      	cbz	r0, 8008b3e <_svfiprintf_r+0x152>
 8008b2c:	2340      	movs	r3, #64	; 0x40
 8008b2e:	eba0 000a 	sub.w	r0, r0, sl
 8008b32:	fa03 f000 	lsl.w	r0, r3, r0
 8008b36:	9b04      	ldr	r3, [sp, #16]
 8008b38:	4303      	orrs	r3, r0
 8008b3a:	3401      	adds	r4, #1
 8008b3c:	9304      	str	r3, [sp, #16]
 8008b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b42:	4826      	ldr	r0, [pc, #152]	; (8008bdc <_svfiprintf_r+0x1f0>)
 8008b44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b48:	2206      	movs	r2, #6
 8008b4a:	f7f7 fb49 	bl	80001e0 <memchr>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d038      	beq.n	8008bc4 <_svfiprintf_r+0x1d8>
 8008b52:	4b23      	ldr	r3, [pc, #140]	; (8008be0 <_svfiprintf_r+0x1f4>)
 8008b54:	bb1b      	cbnz	r3, 8008b9e <_svfiprintf_r+0x1b2>
 8008b56:	9b03      	ldr	r3, [sp, #12]
 8008b58:	3307      	adds	r3, #7
 8008b5a:	f023 0307 	bic.w	r3, r3, #7
 8008b5e:	3308      	adds	r3, #8
 8008b60:	9303      	str	r3, [sp, #12]
 8008b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b64:	4433      	add	r3, r6
 8008b66:	9309      	str	r3, [sp, #36]	; 0x24
 8008b68:	e767      	b.n	8008a3a <_svfiprintf_r+0x4e>
 8008b6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b6e:	460c      	mov	r4, r1
 8008b70:	2001      	movs	r0, #1
 8008b72:	e7a5      	b.n	8008ac0 <_svfiprintf_r+0xd4>
 8008b74:	2300      	movs	r3, #0
 8008b76:	3401      	adds	r4, #1
 8008b78:	9305      	str	r3, [sp, #20]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	f04f 0c0a 	mov.w	ip, #10
 8008b80:	4620      	mov	r0, r4
 8008b82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b86:	3a30      	subs	r2, #48	; 0x30
 8008b88:	2a09      	cmp	r2, #9
 8008b8a:	d903      	bls.n	8008b94 <_svfiprintf_r+0x1a8>
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d0c5      	beq.n	8008b1c <_svfiprintf_r+0x130>
 8008b90:	9105      	str	r1, [sp, #20]
 8008b92:	e7c3      	b.n	8008b1c <_svfiprintf_r+0x130>
 8008b94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b98:	4604      	mov	r4, r0
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e7f0      	b.n	8008b80 <_svfiprintf_r+0x194>
 8008b9e:	ab03      	add	r3, sp, #12
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	462a      	mov	r2, r5
 8008ba4:	4b0f      	ldr	r3, [pc, #60]	; (8008be4 <_svfiprintf_r+0x1f8>)
 8008ba6:	a904      	add	r1, sp, #16
 8008ba8:	4638      	mov	r0, r7
 8008baa:	f7fd ffcb 	bl	8006b44 <_printf_float>
 8008bae:	1c42      	adds	r2, r0, #1
 8008bb0:	4606      	mov	r6, r0
 8008bb2:	d1d6      	bne.n	8008b62 <_svfiprintf_r+0x176>
 8008bb4:	89ab      	ldrh	r3, [r5, #12]
 8008bb6:	065b      	lsls	r3, r3, #25
 8008bb8:	f53f af2c 	bmi.w	8008a14 <_svfiprintf_r+0x28>
 8008bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bbe:	b01d      	add	sp, #116	; 0x74
 8008bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc4:	ab03      	add	r3, sp, #12
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	462a      	mov	r2, r5
 8008bca:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <_svfiprintf_r+0x1f8>)
 8008bcc:	a904      	add	r1, sp, #16
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f7fe fa5c 	bl	800708c <_printf_i>
 8008bd4:	e7eb      	b.n	8008bae <_svfiprintf_r+0x1c2>
 8008bd6:	bf00      	nop
 8008bd8:	0800ac24 	.word	0x0800ac24
 8008bdc:	0800ac2e 	.word	0x0800ac2e
 8008be0:	08006b45 	.word	0x08006b45
 8008be4:	08008935 	.word	0x08008935
 8008be8:	0800ac2a 	.word	0x0800ac2a

08008bec <_sbrk_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4d06      	ldr	r5, [pc, #24]	; (8008c08 <_sbrk_r+0x1c>)
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	4608      	mov	r0, r1
 8008bf6:	602b      	str	r3, [r5, #0]
 8008bf8:	f7f9 fe12 	bl	8002820 <_sbrk>
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	d102      	bne.n	8008c06 <_sbrk_r+0x1a>
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	b103      	cbz	r3, 8008c06 <_sbrk_r+0x1a>
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	bd38      	pop	{r3, r4, r5, pc}
 8008c08:	200008e8 	.word	0x200008e8

08008c0c <__assert_func>:
 8008c0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c0e:	4614      	mov	r4, r2
 8008c10:	461a      	mov	r2, r3
 8008c12:	4b09      	ldr	r3, [pc, #36]	; (8008c38 <__assert_func+0x2c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4605      	mov	r5, r0
 8008c18:	68d8      	ldr	r0, [r3, #12]
 8008c1a:	b14c      	cbz	r4, 8008c30 <__assert_func+0x24>
 8008c1c:	4b07      	ldr	r3, [pc, #28]	; (8008c3c <__assert_func+0x30>)
 8008c1e:	9100      	str	r1, [sp, #0]
 8008c20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c24:	4906      	ldr	r1, [pc, #24]	; (8008c40 <__assert_func+0x34>)
 8008c26:	462b      	mov	r3, r5
 8008c28:	f000 f80e 	bl	8008c48 <fiprintf>
 8008c2c:	f000 faac 	bl	8009188 <abort>
 8008c30:	4b04      	ldr	r3, [pc, #16]	; (8008c44 <__assert_func+0x38>)
 8008c32:	461c      	mov	r4, r3
 8008c34:	e7f3      	b.n	8008c1e <__assert_func+0x12>
 8008c36:	bf00      	nop
 8008c38:	20000240 	.word	0x20000240
 8008c3c:	0800ac35 	.word	0x0800ac35
 8008c40:	0800ac42 	.word	0x0800ac42
 8008c44:	0800ac70 	.word	0x0800ac70

08008c48 <fiprintf>:
 8008c48:	b40e      	push	{r1, r2, r3}
 8008c4a:	b503      	push	{r0, r1, lr}
 8008c4c:	4601      	mov	r1, r0
 8008c4e:	ab03      	add	r3, sp, #12
 8008c50:	4805      	ldr	r0, [pc, #20]	; (8008c68 <fiprintf+0x20>)
 8008c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c56:	6800      	ldr	r0, [r0, #0]
 8008c58:	9301      	str	r3, [sp, #4]
 8008c5a:	f000 f897 	bl	8008d8c <_vfiprintf_r>
 8008c5e:	b002      	add	sp, #8
 8008c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c64:	b003      	add	sp, #12
 8008c66:	4770      	bx	lr
 8008c68:	20000240 	.word	0x20000240

08008c6c <__ascii_mbtowc>:
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	b901      	cbnz	r1, 8008c72 <__ascii_mbtowc+0x6>
 8008c70:	a901      	add	r1, sp, #4
 8008c72:	b142      	cbz	r2, 8008c86 <__ascii_mbtowc+0x1a>
 8008c74:	b14b      	cbz	r3, 8008c8a <__ascii_mbtowc+0x1e>
 8008c76:	7813      	ldrb	r3, [r2, #0]
 8008c78:	600b      	str	r3, [r1, #0]
 8008c7a:	7812      	ldrb	r2, [r2, #0]
 8008c7c:	1e10      	subs	r0, r2, #0
 8008c7e:	bf18      	it	ne
 8008c80:	2001      	movne	r0, #1
 8008c82:	b002      	add	sp, #8
 8008c84:	4770      	bx	lr
 8008c86:	4610      	mov	r0, r2
 8008c88:	e7fb      	b.n	8008c82 <__ascii_mbtowc+0x16>
 8008c8a:	f06f 0001 	mvn.w	r0, #1
 8008c8e:	e7f8      	b.n	8008c82 <__ascii_mbtowc+0x16>

08008c90 <memmove>:
 8008c90:	4288      	cmp	r0, r1
 8008c92:	b510      	push	{r4, lr}
 8008c94:	eb01 0402 	add.w	r4, r1, r2
 8008c98:	d902      	bls.n	8008ca0 <memmove+0x10>
 8008c9a:	4284      	cmp	r4, r0
 8008c9c:	4623      	mov	r3, r4
 8008c9e:	d807      	bhi.n	8008cb0 <memmove+0x20>
 8008ca0:	1e43      	subs	r3, r0, #1
 8008ca2:	42a1      	cmp	r1, r4
 8008ca4:	d008      	beq.n	8008cb8 <memmove+0x28>
 8008ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cae:	e7f8      	b.n	8008ca2 <memmove+0x12>
 8008cb0:	4402      	add	r2, r0
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	428a      	cmp	r2, r1
 8008cb6:	d100      	bne.n	8008cba <memmove+0x2a>
 8008cb8:	bd10      	pop	{r4, pc}
 8008cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cc2:	e7f7      	b.n	8008cb4 <memmove+0x24>

08008cc4 <__malloc_lock>:
 8008cc4:	4801      	ldr	r0, [pc, #4]	; (8008ccc <__malloc_lock+0x8>)
 8008cc6:	f000 bc1f 	b.w	8009508 <__retarget_lock_acquire_recursive>
 8008cca:	bf00      	nop
 8008ccc:	200008ec 	.word	0x200008ec

08008cd0 <__malloc_unlock>:
 8008cd0:	4801      	ldr	r0, [pc, #4]	; (8008cd8 <__malloc_unlock+0x8>)
 8008cd2:	f000 bc1a 	b.w	800950a <__retarget_lock_release_recursive>
 8008cd6:	bf00      	nop
 8008cd8:	200008ec 	.word	0x200008ec

08008cdc <_realloc_r>:
 8008cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce0:	4680      	mov	r8, r0
 8008ce2:	4614      	mov	r4, r2
 8008ce4:	460e      	mov	r6, r1
 8008ce6:	b921      	cbnz	r1, 8008cf2 <_realloc_r+0x16>
 8008ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cec:	4611      	mov	r1, r2
 8008cee:	f7ff bdad 	b.w	800884c <_malloc_r>
 8008cf2:	b92a      	cbnz	r2, 8008d00 <_realloc_r+0x24>
 8008cf4:	f7ff fd3e 	bl	8008774 <_free_r>
 8008cf8:	4625      	mov	r5, r4
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d00:	f000 fc6a 	bl	80095d8 <_malloc_usable_size_r>
 8008d04:	4284      	cmp	r4, r0
 8008d06:	4607      	mov	r7, r0
 8008d08:	d802      	bhi.n	8008d10 <_realloc_r+0x34>
 8008d0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d0e:	d812      	bhi.n	8008d36 <_realloc_r+0x5a>
 8008d10:	4621      	mov	r1, r4
 8008d12:	4640      	mov	r0, r8
 8008d14:	f7ff fd9a 	bl	800884c <_malloc_r>
 8008d18:	4605      	mov	r5, r0
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d0ed      	beq.n	8008cfa <_realloc_r+0x1e>
 8008d1e:	42bc      	cmp	r4, r7
 8008d20:	4622      	mov	r2, r4
 8008d22:	4631      	mov	r1, r6
 8008d24:	bf28      	it	cs
 8008d26:	463a      	movcs	r2, r7
 8008d28:	f7ff f97c 	bl	8008024 <memcpy>
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4640      	mov	r0, r8
 8008d30:	f7ff fd20 	bl	8008774 <_free_r>
 8008d34:	e7e1      	b.n	8008cfa <_realloc_r+0x1e>
 8008d36:	4635      	mov	r5, r6
 8008d38:	e7df      	b.n	8008cfa <_realloc_r+0x1e>

08008d3a <__sfputc_r>:
 8008d3a:	6893      	ldr	r3, [r2, #8]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	b410      	push	{r4}
 8008d42:	6093      	str	r3, [r2, #8]
 8008d44:	da08      	bge.n	8008d58 <__sfputc_r+0x1e>
 8008d46:	6994      	ldr	r4, [r2, #24]
 8008d48:	42a3      	cmp	r3, r4
 8008d4a:	db01      	blt.n	8008d50 <__sfputc_r+0x16>
 8008d4c:	290a      	cmp	r1, #10
 8008d4e:	d103      	bne.n	8008d58 <__sfputc_r+0x1e>
 8008d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d54:	f000 b94a 	b.w	8008fec <__swbuf_r>
 8008d58:	6813      	ldr	r3, [r2, #0]
 8008d5a:	1c58      	adds	r0, r3, #1
 8008d5c:	6010      	str	r0, [r2, #0]
 8008d5e:	7019      	strb	r1, [r3, #0]
 8008d60:	4608      	mov	r0, r1
 8008d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <__sfputs_r>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	460f      	mov	r7, r1
 8008d6e:	4614      	mov	r4, r2
 8008d70:	18d5      	adds	r5, r2, r3
 8008d72:	42ac      	cmp	r4, r5
 8008d74:	d101      	bne.n	8008d7a <__sfputs_r+0x12>
 8008d76:	2000      	movs	r0, #0
 8008d78:	e007      	b.n	8008d8a <__sfputs_r+0x22>
 8008d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d7e:	463a      	mov	r2, r7
 8008d80:	4630      	mov	r0, r6
 8008d82:	f7ff ffda 	bl	8008d3a <__sfputc_r>
 8008d86:	1c43      	adds	r3, r0, #1
 8008d88:	d1f3      	bne.n	8008d72 <__sfputs_r+0xa>
 8008d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d8c <_vfiprintf_r>:
 8008d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d90:	460d      	mov	r5, r1
 8008d92:	b09d      	sub	sp, #116	; 0x74
 8008d94:	4614      	mov	r4, r2
 8008d96:	4698      	mov	r8, r3
 8008d98:	4606      	mov	r6, r0
 8008d9a:	b118      	cbz	r0, 8008da4 <_vfiprintf_r+0x18>
 8008d9c:	6983      	ldr	r3, [r0, #24]
 8008d9e:	b90b      	cbnz	r3, 8008da4 <_vfiprintf_r+0x18>
 8008da0:	f000 fb14 	bl	80093cc <__sinit>
 8008da4:	4b89      	ldr	r3, [pc, #548]	; (8008fcc <_vfiprintf_r+0x240>)
 8008da6:	429d      	cmp	r5, r3
 8008da8:	d11b      	bne.n	8008de2 <_vfiprintf_r+0x56>
 8008daa:	6875      	ldr	r5, [r6, #4]
 8008dac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dae:	07d9      	lsls	r1, r3, #31
 8008db0:	d405      	bmi.n	8008dbe <_vfiprintf_r+0x32>
 8008db2:	89ab      	ldrh	r3, [r5, #12]
 8008db4:	059a      	lsls	r2, r3, #22
 8008db6:	d402      	bmi.n	8008dbe <_vfiprintf_r+0x32>
 8008db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dba:	f000 fba5 	bl	8009508 <__retarget_lock_acquire_recursive>
 8008dbe:	89ab      	ldrh	r3, [r5, #12]
 8008dc0:	071b      	lsls	r3, r3, #28
 8008dc2:	d501      	bpl.n	8008dc8 <_vfiprintf_r+0x3c>
 8008dc4:	692b      	ldr	r3, [r5, #16]
 8008dc6:	b9eb      	cbnz	r3, 8008e04 <_vfiprintf_r+0x78>
 8008dc8:	4629      	mov	r1, r5
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f000 f96e 	bl	80090ac <__swsetup_r>
 8008dd0:	b1c0      	cbz	r0, 8008e04 <_vfiprintf_r+0x78>
 8008dd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dd4:	07dc      	lsls	r4, r3, #31
 8008dd6:	d50e      	bpl.n	8008df6 <_vfiprintf_r+0x6a>
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	b01d      	add	sp, #116	; 0x74
 8008dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de2:	4b7b      	ldr	r3, [pc, #492]	; (8008fd0 <_vfiprintf_r+0x244>)
 8008de4:	429d      	cmp	r5, r3
 8008de6:	d101      	bne.n	8008dec <_vfiprintf_r+0x60>
 8008de8:	68b5      	ldr	r5, [r6, #8]
 8008dea:	e7df      	b.n	8008dac <_vfiprintf_r+0x20>
 8008dec:	4b79      	ldr	r3, [pc, #484]	; (8008fd4 <_vfiprintf_r+0x248>)
 8008dee:	429d      	cmp	r5, r3
 8008df0:	bf08      	it	eq
 8008df2:	68f5      	ldreq	r5, [r6, #12]
 8008df4:	e7da      	b.n	8008dac <_vfiprintf_r+0x20>
 8008df6:	89ab      	ldrh	r3, [r5, #12]
 8008df8:	0598      	lsls	r0, r3, #22
 8008dfa:	d4ed      	bmi.n	8008dd8 <_vfiprintf_r+0x4c>
 8008dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dfe:	f000 fb84 	bl	800950a <__retarget_lock_release_recursive>
 8008e02:	e7e9      	b.n	8008dd8 <_vfiprintf_r+0x4c>
 8008e04:	2300      	movs	r3, #0
 8008e06:	9309      	str	r3, [sp, #36]	; 0x24
 8008e08:	2320      	movs	r3, #32
 8008e0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e12:	2330      	movs	r3, #48	; 0x30
 8008e14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008fd8 <_vfiprintf_r+0x24c>
 8008e18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e1c:	f04f 0901 	mov.w	r9, #1
 8008e20:	4623      	mov	r3, r4
 8008e22:	469a      	mov	sl, r3
 8008e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e28:	b10a      	cbz	r2, 8008e2e <_vfiprintf_r+0xa2>
 8008e2a:	2a25      	cmp	r2, #37	; 0x25
 8008e2c:	d1f9      	bne.n	8008e22 <_vfiprintf_r+0x96>
 8008e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e32:	d00b      	beq.n	8008e4c <_vfiprintf_r+0xc0>
 8008e34:	465b      	mov	r3, fp
 8008e36:	4622      	mov	r2, r4
 8008e38:	4629      	mov	r1, r5
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f7ff ff94 	bl	8008d68 <__sfputs_r>
 8008e40:	3001      	adds	r0, #1
 8008e42:	f000 80aa 	beq.w	8008f9a <_vfiprintf_r+0x20e>
 8008e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e48:	445a      	add	r2, fp
 8008e4a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 80a2 	beq.w	8008f9a <_vfiprintf_r+0x20e>
 8008e56:	2300      	movs	r3, #0
 8008e58:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e60:	f10a 0a01 	add.w	sl, sl, #1
 8008e64:	9304      	str	r3, [sp, #16]
 8008e66:	9307      	str	r3, [sp, #28]
 8008e68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e6c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e6e:	4654      	mov	r4, sl
 8008e70:	2205      	movs	r2, #5
 8008e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e76:	4858      	ldr	r0, [pc, #352]	; (8008fd8 <_vfiprintf_r+0x24c>)
 8008e78:	f7f7 f9b2 	bl	80001e0 <memchr>
 8008e7c:	9a04      	ldr	r2, [sp, #16]
 8008e7e:	b9d8      	cbnz	r0, 8008eb8 <_vfiprintf_r+0x12c>
 8008e80:	06d1      	lsls	r1, r2, #27
 8008e82:	bf44      	itt	mi
 8008e84:	2320      	movmi	r3, #32
 8008e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e8a:	0713      	lsls	r3, r2, #28
 8008e8c:	bf44      	itt	mi
 8008e8e:	232b      	movmi	r3, #43	; 0x2b
 8008e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e94:	f89a 3000 	ldrb.w	r3, [sl]
 8008e98:	2b2a      	cmp	r3, #42	; 0x2a
 8008e9a:	d015      	beq.n	8008ec8 <_vfiprintf_r+0x13c>
 8008e9c:	9a07      	ldr	r2, [sp, #28]
 8008e9e:	4654      	mov	r4, sl
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	f04f 0c0a 	mov.w	ip, #10
 8008ea6:	4621      	mov	r1, r4
 8008ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eac:	3b30      	subs	r3, #48	; 0x30
 8008eae:	2b09      	cmp	r3, #9
 8008eb0:	d94e      	bls.n	8008f50 <_vfiprintf_r+0x1c4>
 8008eb2:	b1b0      	cbz	r0, 8008ee2 <_vfiprintf_r+0x156>
 8008eb4:	9207      	str	r2, [sp, #28]
 8008eb6:	e014      	b.n	8008ee2 <_vfiprintf_r+0x156>
 8008eb8:	eba0 0308 	sub.w	r3, r0, r8
 8008ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	9304      	str	r3, [sp, #16]
 8008ec4:	46a2      	mov	sl, r4
 8008ec6:	e7d2      	b.n	8008e6e <_vfiprintf_r+0xe2>
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	1d19      	adds	r1, r3, #4
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	9103      	str	r1, [sp, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	bfbb      	ittet	lt
 8008ed4:	425b      	neglt	r3, r3
 8008ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8008eda:	9307      	strge	r3, [sp, #28]
 8008edc:	9307      	strlt	r3, [sp, #28]
 8008ede:	bfb8      	it	lt
 8008ee0:	9204      	strlt	r2, [sp, #16]
 8008ee2:	7823      	ldrb	r3, [r4, #0]
 8008ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ee6:	d10c      	bne.n	8008f02 <_vfiprintf_r+0x176>
 8008ee8:	7863      	ldrb	r3, [r4, #1]
 8008eea:	2b2a      	cmp	r3, #42	; 0x2a
 8008eec:	d135      	bne.n	8008f5a <_vfiprintf_r+0x1ce>
 8008eee:	9b03      	ldr	r3, [sp, #12]
 8008ef0:	1d1a      	adds	r2, r3, #4
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	9203      	str	r2, [sp, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	bfb8      	it	lt
 8008efa:	f04f 33ff 	movlt.w	r3, #4294967295
 8008efe:	3402      	adds	r4, #2
 8008f00:	9305      	str	r3, [sp, #20]
 8008f02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008fe8 <_vfiprintf_r+0x25c>
 8008f06:	7821      	ldrb	r1, [r4, #0]
 8008f08:	2203      	movs	r2, #3
 8008f0a:	4650      	mov	r0, sl
 8008f0c:	f7f7 f968 	bl	80001e0 <memchr>
 8008f10:	b140      	cbz	r0, 8008f24 <_vfiprintf_r+0x198>
 8008f12:	2340      	movs	r3, #64	; 0x40
 8008f14:	eba0 000a 	sub.w	r0, r0, sl
 8008f18:	fa03 f000 	lsl.w	r0, r3, r0
 8008f1c:	9b04      	ldr	r3, [sp, #16]
 8008f1e:	4303      	orrs	r3, r0
 8008f20:	3401      	adds	r4, #1
 8008f22:	9304      	str	r3, [sp, #16]
 8008f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f28:	482c      	ldr	r0, [pc, #176]	; (8008fdc <_vfiprintf_r+0x250>)
 8008f2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f2e:	2206      	movs	r2, #6
 8008f30:	f7f7 f956 	bl	80001e0 <memchr>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d03f      	beq.n	8008fb8 <_vfiprintf_r+0x22c>
 8008f38:	4b29      	ldr	r3, [pc, #164]	; (8008fe0 <_vfiprintf_r+0x254>)
 8008f3a:	bb1b      	cbnz	r3, 8008f84 <_vfiprintf_r+0x1f8>
 8008f3c:	9b03      	ldr	r3, [sp, #12]
 8008f3e:	3307      	adds	r3, #7
 8008f40:	f023 0307 	bic.w	r3, r3, #7
 8008f44:	3308      	adds	r3, #8
 8008f46:	9303      	str	r3, [sp, #12]
 8008f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f4a:	443b      	add	r3, r7
 8008f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f4e:	e767      	b.n	8008e20 <_vfiprintf_r+0x94>
 8008f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f54:	460c      	mov	r4, r1
 8008f56:	2001      	movs	r0, #1
 8008f58:	e7a5      	b.n	8008ea6 <_vfiprintf_r+0x11a>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	3401      	adds	r4, #1
 8008f5e:	9305      	str	r3, [sp, #20]
 8008f60:	4619      	mov	r1, r3
 8008f62:	f04f 0c0a 	mov.w	ip, #10
 8008f66:	4620      	mov	r0, r4
 8008f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f6c:	3a30      	subs	r2, #48	; 0x30
 8008f6e:	2a09      	cmp	r2, #9
 8008f70:	d903      	bls.n	8008f7a <_vfiprintf_r+0x1ee>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d0c5      	beq.n	8008f02 <_vfiprintf_r+0x176>
 8008f76:	9105      	str	r1, [sp, #20]
 8008f78:	e7c3      	b.n	8008f02 <_vfiprintf_r+0x176>
 8008f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f7e:	4604      	mov	r4, r0
 8008f80:	2301      	movs	r3, #1
 8008f82:	e7f0      	b.n	8008f66 <_vfiprintf_r+0x1da>
 8008f84:	ab03      	add	r3, sp, #12
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	462a      	mov	r2, r5
 8008f8a:	4b16      	ldr	r3, [pc, #88]	; (8008fe4 <_vfiprintf_r+0x258>)
 8008f8c:	a904      	add	r1, sp, #16
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f7fd fdd8 	bl	8006b44 <_printf_float>
 8008f94:	4607      	mov	r7, r0
 8008f96:	1c78      	adds	r0, r7, #1
 8008f98:	d1d6      	bne.n	8008f48 <_vfiprintf_r+0x1bc>
 8008f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f9c:	07d9      	lsls	r1, r3, #31
 8008f9e:	d405      	bmi.n	8008fac <_vfiprintf_r+0x220>
 8008fa0:	89ab      	ldrh	r3, [r5, #12]
 8008fa2:	059a      	lsls	r2, r3, #22
 8008fa4:	d402      	bmi.n	8008fac <_vfiprintf_r+0x220>
 8008fa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fa8:	f000 faaf 	bl	800950a <__retarget_lock_release_recursive>
 8008fac:	89ab      	ldrh	r3, [r5, #12]
 8008fae:	065b      	lsls	r3, r3, #25
 8008fb0:	f53f af12 	bmi.w	8008dd8 <_vfiprintf_r+0x4c>
 8008fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fb6:	e711      	b.n	8008ddc <_vfiprintf_r+0x50>
 8008fb8:	ab03      	add	r3, sp, #12
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	462a      	mov	r2, r5
 8008fbe:	4b09      	ldr	r3, [pc, #36]	; (8008fe4 <_vfiprintf_r+0x258>)
 8008fc0:	a904      	add	r1, sp, #16
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	f7fe f862 	bl	800708c <_printf_i>
 8008fc8:	e7e4      	b.n	8008f94 <_vfiprintf_r+0x208>
 8008fca:	bf00      	nop
 8008fcc:	0800ad9c 	.word	0x0800ad9c
 8008fd0:	0800adbc 	.word	0x0800adbc
 8008fd4:	0800ad7c 	.word	0x0800ad7c
 8008fd8:	0800ac24 	.word	0x0800ac24
 8008fdc:	0800ac2e 	.word	0x0800ac2e
 8008fe0:	08006b45 	.word	0x08006b45
 8008fe4:	08008d69 	.word	0x08008d69
 8008fe8:	0800ac2a 	.word	0x0800ac2a

08008fec <__swbuf_r>:
 8008fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fee:	460e      	mov	r6, r1
 8008ff0:	4614      	mov	r4, r2
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	b118      	cbz	r0, 8008ffe <__swbuf_r+0x12>
 8008ff6:	6983      	ldr	r3, [r0, #24]
 8008ff8:	b90b      	cbnz	r3, 8008ffe <__swbuf_r+0x12>
 8008ffa:	f000 f9e7 	bl	80093cc <__sinit>
 8008ffe:	4b21      	ldr	r3, [pc, #132]	; (8009084 <__swbuf_r+0x98>)
 8009000:	429c      	cmp	r4, r3
 8009002:	d12b      	bne.n	800905c <__swbuf_r+0x70>
 8009004:	686c      	ldr	r4, [r5, #4]
 8009006:	69a3      	ldr	r3, [r4, #24]
 8009008:	60a3      	str	r3, [r4, #8]
 800900a:	89a3      	ldrh	r3, [r4, #12]
 800900c:	071a      	lsls	r2, r3, #28
 800900e:	d52f      	bpl.n	8009070 <__swbuf_r+0x84>
 8009010:	6923      	ldr	r3, [r4, #16]
 8009012:	b36b      	cbz	r3, 8009070 <__swbuf_r+0x84>
 8009014:	6923      	ldr	r3, [r4, #16]
 8009016:	6820      	ldr	r0, [r4, #0]
 8009018:	1ac0      	subs	r0, r0, r3
 800901a:	6963      	ldr	r3, [r4, #20]
 800901c:	b2f6      	uxtb	r6, r6
 800901e:	4283      	cmp	r3, r0
 8009020:	4637      	mov	r7, r6
 8009022:	dc04      	bgt.n	800902e <__swbuf_r+0x42>
 8009024:	4621      	mov	r1, r4
 8009026:	4628      	mov	r0, r5
 8009028:	f000 f93c 	bl	80092a4 <_fflush_r>
 800902c:	bb30      	cbnz	r0, 800907c <__swbuf_r+0x90>
 800902e:	68a3      	ldr	r3, [r4, #8]
 8009030:	3b01      	subs	r3, #1
 8009032:	60a3      	str	r3, [r4, #8]
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	1c5a      	adds	r2, r3, #1
 8009038:	6022      	str	r2, [r4, #0]
 800903a:	701e      	strb	r6, [r3, #0]
 800903c:	6963      	ldr	r3, [r4, #20]
 800903e:	3001      	adds	r0, #1
 8009040:	4283      	cmp	r3, r0
 8009042:	d004      	beq.n	800904e <__swbuf_r+0x62>
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	07db      	lsls	r3, r3, #31
 8009048:	d506      	bpl.n	8009058 <__swbuf_r+0x6c>
 800904a:	2e0a      	cmp	r6, #10
 800904c:	d104      	bne.n	8009058 <__swbuf_r+0x6c>
 800904e:	4621      	mov	r1, r4
 8009050:	4628      	mov	r0, r5
 8009052:	f000 f927 	bl	80092a4 <_fflush_r>
 8009056:	b988      	cbnz	r0, 800907c <__swbuf_r+0x90>
 8009058:	4638      	mov	r0, r7
 800905a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800905c:	4b0a      	ldr	r3, [pc, #40]	; (8009088 <__swbuf_r+0x9c>)
 800905e:	429c      	cmp	r4, r3
 8009060:	d101      	bne.n	8009066 <__swbuf_r+0x7a>
 8009062:	68ac      	ldr	r4, [r5, #8]
 8009064:	e7cf      	b.n	8009006 <__swbuf_r+0x1a>
 8009066:	4b09      	ldr	r3, [pc, #36]	; (800908c <__swbuf_r+0xa0>)
 8009068:	429c      	cmp	r4, r3
 800906a:	bf08      	it	eq
 800906c:	68ec      	ldreq	r4, [r5, #12]
 800906e:	e7ca      	b.n	8009006 <__swbuf_r+0x1a>
 8009070:	4621      	mov	r1, r4
 8009072:	4628      	mov	r0, r5
 8009074:	f000 f81a 	bl	80090ac <__swsetup_r>
 8009078:	2800      	cmp	r0, #0
 800907a:	d0cb      	beq.n	8009014 <__swbuf_r+0x28>
 800907c:	f04f 37ff 	mov.w	r7, #4294967295
 8009080:	e7ea      	b.n	8009058 <__swbuf_r+0x6c>
 8009082:	bf00      	nop
 8009084:	0800ad9c 	.word	0x0800ad9c
 8009088:	0800adbc 	.word	0x0800adbc
 800908c:	0800ad7c 	.word	0x0800ad7c

08009090 <__ascii_wctomb>:
 8009090:	b149      	cbz	r1, 80090a6 <__ascii_wctomb+0x16>
 8009092:	2aff      	cmp	r2, #255	; 0xff
 8009094:	bf85      	ittet	hi
 8009096:	238a      	movhi	r3, #138	; 0x8a
 8009098:	6003      	strhi	r3, [r0, #0]
 800909a:	700a      	strbls	r2, [r1, #0]
 800909c:	f04f 30ff 	movhi.w	r0, #4294967295
 80090a0:	bf98      	it	ls
 80090a2:	2001      	movls	r0, #1
 80090a4:	4770      	bx	lr
 80090a6:	4608      	mov	r0, r1
 80090a8:	4770      	bx	lr
	...

080090ac <__swsetup_r>:
 80090ac:	4b32      	ldr	r3, [pc, #200]	; (8009178 <__swsetup_r+0xcc>)
 80090ae:	b570      	push	{r4, r5, r6, lr}
 80090b0:	681d      	ldr	r5, [r3, #0]
 80090b2:	4606      	mov	r6, r0
 80090b4:	460c      	mov	r4, r1
 80090b6:	b125      	cbz	r5, 80090c2 <__swsetup_r+0x16>
 80090b8:	69ab      	ldr	r3, [r5, #24]
 80090ba:	b913      	cbnz	r3, 80090c2 <__swsetup_r+0x16>
 80090bc:	4628      	mov	r0, r5
 80090be:	f000 f985 	bl	80093cc <__sinit>
 80090c2:	4b2e      	ldr	r3, [pc, #184]	; (800917c <__swsetup_r+0xd0>)
 80090c4:	429c      	cmp	r4, r3
 80090c6:	d10f      	bne.n	80090e8 <__swsetup_r+0x3c>
 80090c8:	686c      	ldr	r4, [r5, #4]
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090d0:	0719      	lsls	r1, r3, #28
 80090d2:	d42c      	bmi.n	800912e <__swsetup_r+0x82>
 80090d4:	06dd      	lsls	r5, r3, #27
 80090d6:	d411      	bmi.n	80090fc <__swsetup_r+0x50>
 80090d8:	2309      	movs	r3, #9
 80090da:	6033      	str	r3, [r6, #0]
 80090dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090e0:	81a3      	strh	r3, [r4, #12]
 80090e2:	f04f 30ff 	mov.w	r0, #4294967295
 80090e6:	e03e      	b.n	8009166 <__swsetup_r+0xba>
 80090e8:	4b25      	ldr	r3, [pc, #148]	; (8009180 <__swsetup_r+0xd4>)
 80090ea:	429c      	cmp	r4, r3
 80090ec:	d101      	bne.n	80090f2 <__swsetup_r+0x46>
 80090ee:	68ac      	ldr	r4, [r5, #8]
 80090f0:	e7eb      	b.n	80090ca <__swsetup_r+0x1e>
 80090f2:	4b24      	ldr	r3, [pc, #144]	; (8009184 <__swsetup_r+0xd8>)
 80090f4:	429c      	cmp	r4, r3
 80090f6:	bf08      	it	eq
 80090f8:	68ec      	ldreq	r4, [r5, #12]
 80090fa:	e7e6      	b.n	80090ca <__swsetup_r+0x1e>
 80090fc:	0758      	lsls	r0, r3, #29
 80090fe:	d512      	bpl.n	8009126 <__swsetup_r+0x7a>
 8009100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009102:	b141      	cbz	r1, 8009116 <__swsetup_r+0x6a>
 8009104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009108:	4299      	cmp	r1, r3
 800910a:	d002      	beq.n	8009112 <__swsetup_r+0x66>
 800910c:	4630      	mov	r0, r6
 800910e:	f7ff fb31 	bl	8008774 <_free_r>
 8009112:	2300      	movs	r3, #0
 8009114:	6363      	str	r3, [r4, #52]	; 0x34
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800911c:	81a3      	strh	r3, [r4, #12]
 800911e:	2300      	movs	r3, #0
 8009120:	6063      	str	r3, [r4, #4]
 8009122:	6923      	ldr	r3, [r4, #16]
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	89a3      	ldrh	r3, [r4, #12]
 8009128:	f043 0308 	orr.w	r3, r3, #8
 800912c:	81a3      	strh	r3, [r4, #12]
 800912e:	6923      	ldr	r3, [r4, #16]
 8009130:	b94b      	cbnz	r3, 8009146 <__swsetup_r+0x9a>
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800913c:	d003      	beq.n	8009146 <__swsetup_r+0x9a>
 800913e:	4621      	mov	r1, r4
 8009140:	4630      	mov	r0, r6
 8009142:	f000 fa09 	bl	8009558 <__smakebuf_r>
 8009146:	89a0      	ldrh	r0, [r4, #12]
 8009148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800914c:	f010 0301 	ands.w	r3, r0, #1
 8009150:	d00a      	beq.n	8009168 <__swsetup_r+0xbc>
 8009152:	2300      	movs	r3, #0
 8009154:	60a3      	str	r3, [r4, #8]
 8009156:	6963      	ldr	r3, [r4, #20]
 8009158:	425b      	negs	r3, r3
 800915a:	61a3      	str	r3, [r4, #24]
 800915c:	6923      	ldr	r3, [r4, #16]
 800915e:	b943      	cbnz	r3, 8009172 <__swsetup_r+0xc6>
 8009160:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009164:	d1ba      	bne.n	80090dc <__swsetup_r+0x30>
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	0781      	lsls	r1, r0, #30
 800916a:	bf58      	it	pl
 800916c:	6963      	ldrpl	r3, [r4, #20]
 800916e:	60a3      	str	r3, [r4, #8]
 8009170:	e7f4      	b.n	800915c <__swsetup_r+0xb0>
 8009172:	2000      	movs	r0, #0
 8009174:	e7f7      	b.n	8009166 <__swsetup_r+0xba>
 8009176:	bf00      	nop
 8009178:	20000240 	.word	0x20000240
 800917c:	0800ad9c 	.word	0x0800ad9c
 8009180:	0800adbc 	.word	0x0800adbc
 8009184:	0800ad7c 	.word	0x0800ad7c

08009188 <abort>:
 8009188:	b508      	push	{r3, lr}
 800918a:	2006      	movs	r0, #6
 800918c:	f000 fa54 	bl	8009638 <raise>
 8009190:	2001      	movs	r0, #1
 8009192:	f7f9 facd 	bl	8002730 <_exit>
	...

08009198 <__sflush_r>:
 8009198:	898a      	ldrh	r2, [r1, #12]
 800919a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800919e:	4605      	mov	r5, r0
 80091a0:	0710      	lsls	r0, r2, #28
 80091a2:	460c      	mov	r4, r1
 80091a4:	d458      	bmi.n	8009258 <__sflush_r+0xc0>
 80091a6:	684b      	ldr	r3, [r1, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	dc05      	bgt.n	80091b8 <__sflush_r+0x20>
 80091ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	dc02      	bgt.n	80091b8 <__sflush_r+0x20>
 80091b2:	2000      	movs	r0, #0
 80091b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091ba:	2e00      	cmp	r6, #0
 80091bc:	d0f9      	beq.n	80091b2 <__sflush_r+0x1a>
 80091be:	2300      	movs	r3, #0
 80091c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091c4:	682f      	ldr	r7, [r5, #0]
 80091c6:	602b      	str	r3, [r5, #0]
 80091c8:	d032      	beq.n	8009230 <__sflush_r+0x98>
 80091ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	075a      	lsls	r2, r3, #29
 80091d0:	d505      	bpl.n	80091de <__sflush_r+0x46>
 80091d2:	6863      	ldr	r3, [r4, #4]
 80091d4:	1ac0      	subs	r0, r0, r3
 80091d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091d8:	b10b      	cbz	r3, 80091de <__sflush_r+0x46>
 80091da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091dc:	1ac0      	subs	r0, r0, r3
 80091de:	2300      	movs	r3, #0
 80091e0:	4602      	mov	r2, r0
 80091e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091e4:	6a21      	ldr	r1, [r4, #32]
 80091e6:	4628      	mov	r0, r5
 80091e8:	47b0      	blx	r6
 80091ea:	1c43      	adds	r3, r0, #1
 80091ec:	89a3      	ldrh	r3, [r4, #12]
 80091ee:	d106      	bne.n	80091fe <__sflush_r+0x66>
 80091f0:	6829      	ldr	r1, [r5, #0]
 80091f2:	291d      	cmp	r1, #29
 80091f4:	d82c      	bhi.n	8009250 <__sflush_r+0xb8>
 80091f6:	4a2a      	ldr	r2, [pc, #168]	; (80092a0 <__sflush_r+0x108>)
 80091f8:	40ca      	lsrs	r2, r1
 80091fa:	07d6      	lsls	r6, r2, #31
 80091fc:	d528      	bpl.n	8009250 <__sflush_r+0xb8>
 80091fe:	2200      	movs	r2, #0
 8009200:	6062      	str	r2, [r4, #4]
 8009202:	04d9      	lsls	r1, r3, #19
 8009204:	6922      	ldr	r2, [r4, #16]
 8009206:	6022      	str	r2, [r4, #0]
 8009208:	d504      	bpl.n	8009214 <__sflush_r+0x7c>
 800920a:	1c42      	adds	r2, r0, #1
 800920c:	d101      	bne.n	8009212 <__sflush_r+0x7a>
 800920e:	682b      	ldr	r3, [r5, #0]
 8009210:	b903      	cbnz	r3, 8009214 <__sflush_r+0x7c>
 8009212:	6560      	str	r0, [r4, #84]	; 0x54
 8009214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009216:	602f      	str	r7, [r5, #0]
 8009218:	2900      	cmp	r1, #0
 800921a:	d0ca      	beq.n	80091b2 <__sflush_r+0x1a>
 800921c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009220:	4299      	cmp	r1, r3
 8009222:	d002      	beq.n	800922a <__sflush_r+0x92>
 8009224:	4628      	mov	r0, r5
 8009226:	f7ff faa5 	bl	8008774 <_free_r>
 800922a:	2000      	movs	r0, #0
 800922c:	6360      	str	r0, [r4, #52]	; 0x34
 800922e:	e7c1      	b.n	80091b4 <__sflush_r+0x1c>
 8009230:	6a21      	ldr	r1, [r4, #32]
 8009232:	2301      	movs	r3, #1
 8009234:	4628      	mov	r0, r5
 8009236:	47b0      	blx	r6
 8009238:	1c41      	adds	r1, r0, #1
 800923a:	d1c7      	bne.n	80091cc <__sflush_r+0x34>
 800923c:	682b      	ldr	r3, [r5, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0c4      	beq.n	80091cc <__sflush_r+0x34>
 8009242:	2b1d      	cmp	r3, #29
 8009244:	d001      	beq.n	800924a <__sflush_r+0xb2>
 8009246:	2b16      	cmp	r3, #22
 8009248:	d101      	bne.n	800924e <__sflush_r+0xb6>
 800924a:	602f      	str	r7, [r5, #0]
 800924c:	e7b1      	b.n	80091b2 <__sflush_r+0x1a>
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009254:	81a3      	strh	r3, [r4, #12]
 8009256:	e7ad      	b.n	80091b4 <__sflush_r+0x1c>
 8009258:	690f      	ldr	r7, [r1, #16]
 800925a:	2f00      	cmp	r7, #0
 800925c:	d0a9      	beq.n	80091b2 <__sflush_r+0x1a>
 800925e:	0793      	lsls	r3, r2, #30
 8009260:	680e      	ldr	r6, [r1, #0]
 8009262:	bf08      	it	eq
 8009264:	694b      	ldreq	r3, [r1, #20]
 8009266:	600f      	str	r7, [r1, #0]
 8009268:	bf18      	it	ne
 800926a:	2300      	movne	r3, #0
 800926c:	eba6 0807 	sub.w	r8, r6, r7
 8009270:	608b      	str	r3, [r1, #8]
 8009272:	f1b8 0f00 	cmp.w	r8, #0
 8009276:	dd9c      	ble.n	80091b2 <__sflush_r+0x1a>
 8009278:	6a21      	ldr	r1, [r4, #32]
 800927a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800927c:	4643      	mov	r3, r8
 800927e:	463a      	mov	r2, r7
 8009280:	4628      	mov	r0, r5
 8009282:	47b0      	blx	r6
 8009284:	2800      	cmp	r0, #0
 8009286:	dc06      	bgt.n	8009296 <__sflush_r+0xfe>
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800928e:	81a3      	strh	r3, [r4, #12]
 8009290:	f04f 30ff 	mov.w	r0, #4294967295
 8009294:	e78e      	b.n	80091b4 <__sflush_r+0x1c>
 8009296:	4407      	add	r7, r0
 8009298:	eba8 0800 	sub.w	r8, r8, r0
 800929c:	e7e9      	b.n	8009272 <__sflush_r+0xda>
 800929e:	bf00      	nop
 80092a0:	20400001 	.word	0x20400001

080092a4 <_fflush_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	690b      	ldr	r3, [r1, #16]
 80092a8:	4605      	mov	r5, r0
 80092aa:	460c      	mov	r4, r1
 80092ac:	b913      	cbnz	r3, 80092b4 <_fflush_r+0x10>
 80092ae:	2500      	movs	r5, #0
 80092b0:	4628      	mov	r0, r5
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
 80092b4:	b118      	cbz	r0, 80092be <_fflush_r+0x1a>
 80092b6:	6983      	ldr	r3, [r0, #24]
 80092b8:	b90b      	cbnz	r3, 80092be <_fflush_r+0x1a>
 80092ba:	f000 f887 	bl	80093cc <__sinit>
 80092be:	4b14      	ldr	r3, [pc, #80]	; (8009310 <_fflush_r+0x6c>)
 80092c0:	429c      	cmp	r4, r3
 80092c2:	d11b      	bne.n	80092fc <_fflush_r+0x58>
 80092c4:	686c      	ldr	r4, [r5, #4]
 80092c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0ef      	beq.n	80092ae <_fflush_r+0xa>
 80092ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092d0:	07d0      	lsls	r0, r2, #31
 80092d2:	d404      	bmi.n	80092de <_fflush_r+0x3a>
 80092d4:	0599      	lsls	r1, r3, #22
 80092d6:	d402      	bmi.n	80092de <_fflush_r+0x3a>
 80092d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092da:	f000 f915 	bl	8009508 <__retarget_lock_acquire_recursive>
 80092de:	4628      	mov	r0, r5
 80092e0:	4621      	mov	r1, r4
 80092e2:	f7ff ff59 	bl	8009198 <__sflush_r>
 80092e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092e8:	07da      	lsls	r2, r3, #31
 80092ea:	4605      	mov	r5, r0
 80092ec:	d4e0      	bmi.n	80092b0 <_fflush_r+0xc>
 80092ee:	89a3      	ldrh	r3, [r4, #12]
 80092f0:	059b      	lsls	r3, r3, #22
 80092f2:	d4dd      	bmi.n	80092b0 <_fflush_r+0xc>
 80092f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092f6:	f000 f908 	bl	800950a <__retarget_lock_release_recursive>
 80092fa:	e7d9      	b.n	80092b0 <_fflush_r+0xc>
 80092fc:	4b05      	ldr	r3, [pc, #20]	; (8009314 <_fflush_r+0x70>)
 80092fe:	429c      	cmp	r4, r3
 8009300:	d101      	bne.n	8009306 <_fflush_r+0x62>
 8009302:	68ac      	ldr	r4, [r5, #8]
 8009304:	e7df      	b.n	80092c6 <_fflush_r+0x22>
 8009306:	4b04      	ldr	r3, [pc, #16]	; (8009318 <_fflush_r+0x74>)
 8009308:	429c      	cmp	r4, r3
 800930a:	bf08      	it	eq
 800930c:	68ec      	ldreq	r4, [r5, #12]
 800930e:	e7da      	b.n	80092c6 <_fflush_r+0x22>
 8009310:	0800ad9c 	.word	0x0800ad9c
 8009314:	0800adbc 	.word	0x0800adbc
 8009318:	0800ad7c 	.word	0x0800ad7c

0800931c <std>:
 800931c:	2300      	movs	r3, #0
 800931e:	b510      	push	{r4, lr}
 8009320:	4604      	mov	r4, r0
 8009322:	e9c0 3300 	strd	r3, r3, [r0]
 8009326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800932a:	6083      	str	r3, [r0, #8]
 800932c:	8181      	strh	r1, [r0, #12]
 800932e:	6643      	str	r3, [r0, #100]	; 0x64
 8009330:	81c2      	strh	r2, [r0, #14]
 8009332:	6183      	str	r3, [r0, #24]
 8009334:	4619      	mov	r1, r3
 8009336:	2208      	movs	r2, #8
 8009338:	305c      	adds	r0, #92	; 0x5c
 800933a:	f7fd fb5b 	bl	80069f4 <memset>
 800933e:	4b05      	ldr	r3, [pc, #20]	; (8009354 <std+0x38>)
 8009340:	6263      	str	r3, [r4, #36]	; 0x24
 8009342:	4b05      	ldr	r3, [pc, #20]	; (8009358 <std+0x3c>)
 8009344:	62a3      	str	r3, [r4, #40]	; 0x28
 8009346:	4b05      	ldr	r3, [pc, #20]	; (800935c <std+0x40>)
 8009348:	62e3      	str	r3, [r4, #44]	; 0x2c
 800934a:	4b05      	ldr	r3, [pc, #20]	; (8009360 <std+0x44>)
 800934c:	6224      	str	r4, [r4, #32]
 800934e:	6323      	str	r3, [r4, #48]	; 0x30
 8009350:	bd10      	pop	{r4, pc}
 8009352:	bf00      	nop
 8009354:	08009671 	.word	0x08009671
 8009358:	08009693 	.word	0x08009693
 800935c:	080096cb 	.word	0x080096cb
 8009360:	080096ef 	.word	0x080096ef

08009364 <_cleanup_r>:
 8009364:	4901      	ldr	r1, [pc, #4]	; (800936c <_cleanup_r+0x8>)
 8009366:	f000 b8af 	b.w	80094c8 <_fwalk_reent>
 800936a:	bf00      	nop
 800936c:	080092a5 	.word	0x080092a5

08009370 <__sfmoreglue>:
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	2268      	movs	r2, #104	; 0x68
 8009374:	1e4d      	subs	r5, r1, #1
 8009376:	4355      	muls	r5, r2
 8009378:	460e      	mov	r6, r1
 800937a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800937e:	f7ff fa65 	bl	800884c <_malloc_r>
 8009382:	4604      	mov	r4, r0
 8009384:	b140      	cbz	r0, 8009398 <__sfmoreglue+0x28>
 8009386:	2100      	movs	r1, #0
 8009388:	e9c0 1600 	strd	r1, r6, [r0]
 800938c:	300c      	adds	r0, #12
 800938e:	60a0      	str	r0, [r4, #8]
 8009390:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009394:	f7fd fb2e 	bl	80069f4 <memset>
 8009398:	4620      	mov	r0, r4
 800939a:	bd70      	pop	{r4, r5, r6, pc}

0800939c <__sfp_lock_acquire>:
 800939c:	4801      	ldr	r0, [pc, #4]	; (80093a4 <__sfp_lock_acquire+0x8>)
 800939e:	f000 b8b3 	b.w	8009508 <__retarget_lock_acquire_recursive>
 80093a2:	bf00      	nop
 80093a4:	200008ed 	.word	0x200008ed

080093a8 <__sfp_lock_release>:
 80093a8:	4801      	ldr	r0, [pc, #4]	; (80093b0 <__sfp_lock_release+0x8>)
 80093aa:	f000 b8ae 	b.w	800950a <__retarget_lock_release_recursive>
 80093ae:	bf00      	nop
 80093b0:	200008ed 	.word	0x200008ed

080093b4 <__sinit_lock_acquire>:
 80093b4:	4801      	ldr	r0, [pc, #4]	; (80093bc <__sinit_lock_acquire+0x8>)
 80093b6:	f000 b8a7 	b.w	8009508 <__retarget_lock_acquire_recursive>
 80093ba:	bf00      	nop
 80093bc:	200008ee 	.word	0x200008ee

080093c0 <__sinit_lock_release>:
 80093c0:	4801      	ldr	r0, [pc, #4]	; (80093c8 <__sinit_lock_release+0x8>)
 80093c2:	f000 b8a2 	b.w	800950a <__retarget_lock_release_recursive>
 80093c6:	bf00      	nop
 80093c8:	200008ee 	.word	0x200008ee

080093cc <__sinit>:
 80093cc:	b510      	push	{r4, lr}
 80093ce:	4604      	mov	r4, r0
 80093d0:	f7ff fff0 	bl	80093b4 <__sinit_lock_acquire>
 80093d4:	69a3      	ldr	r3, [r4, #24]
 80093d6:	b11b      	cbz	r3, 80093e0 <__sinit+0x14>
 80093d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093dc:	f7ff bff0 	b.w	80093c0 <__sinit_lock_release>
 80093e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80093e4:	6523      	str	r3, [r4, #80]	; 0x50
 80093e6:	4b13      	ldr	r3, [pc, #76]	; (8009434 <__sinit+0x68>)
 80093e8:	4a13      	ldr	r2, [pc, #76]	; (8009438 <__sinit+0x6c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80093ee:	42a3      	cmp	r3, r4
 80093f0:	bf04      	itt	eq
 80093f2:	2301      	moveq	r3, #1
 80093f4:	61a3      	streq	r3, [r4, #24]
 80093f6:	4620      	mov	r0, r4
 80093f8:	f000 f820 	bl	800943c <__sfp>
 80093fc:	6060      	str	r0, [r4, #4]
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 f81c 	bl	800943c <__sfp>
 8009404:	60a0      	str	r0, [r4, #8]
 8009406:	4620      	mov	r0, r4
 8009408:	f000 f818 	bl	800943c <__sfp>
 800940c:	2200      	movs	r2, #0
 800940e:	60e0      	str	r0, [r4, #12]
 8009410:	2104      	movs	r1, #4
 8009412:	6860      	ldr	r0, [r4, #4]
 8009414:	f7ff ff82 	bl	800931c <std>
 8009418:	68a0      	ldr	r0, [r4, #8]
 800941a:	2201      	movs	r2, #1
 800941c:	2109      	movs	r1, #9
 800941e:	f7ff ff7d 	bl	800931c <std>
 8009422:	68e0      	ldr	r0, [r4, #12]
 8009424:	2202      	movs	r2, #2
 8009426:	2112      	movs	r1, #18
 8009428:	f7ff ff78 	bl	800931c <std>
 800942c:	2301      	movs	r3, #1
 800942e:	61a3      	str	r3, [r4, #24]
 8009430:	e7d2      	b.n	80093d8 <__sinit+0xc>
 8009432:	bf00      	nop
 8009434:	0800aa04 	.word	0x0800aa04
 8009438:	08009365 	.word	0x08009365

0800943c <__sfp>:
 800943c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800943e:	4607      	mov	r7, r0
 8009440:	f7ff ffac 	bl	800939c <__sfp_lock_acquire>
 8009444:	4b1e      	ldr	r3, [pc, #120]	; (80094c0 <__sfp+0x84>)
 8009446:	681e      	ldr	r6, [r3, #0]
 8009448:	69b3      	ldr	r3, [r6, #24]
 800944a:	b913      	cbnz	r3, 8009452 <__sfp+0x16>
 800944c:	4630      	mov	r0, r6
 800944e:	f7ff ffbd 	bl	80093cc <__sinit>
 8009452:	3648      	adds	r6, #72	; 0x48
 8009454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009458:	3b01      	subs	r3, #1
 800945a:	d503      	bpl.n	8009464 <__sfp+0x28>
 800945c:	6833      	ldr	r3, [r6, #0]
 800945e:	b30b      	cbz	r3, 80094a4 <__sfp+0x68>
 8009460:	6836      	ldr	r6, [r6, #0]
 8009462:	e7f7      	b.n	8009454 <__sfp+0x18>
 8009464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009468:	b9d5      	cbnz	r5, 80094a0 <__sfp+0x64>
 800946a:	4b16      	ldr	r3, [pc, #88]	; (80094c4 <__sfp+0x88>)
 800946c:	60e3      	str	r3, [r4, #12]
 800946e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009472:	6665      	str	r5, [r4, #100]	; 0x64
 8009474:	f000 f847 	bl	8009506 <__retarget_lock_init_recursive>
 8009478:	f7ff ff96 	bl	80093a8 <__sfp_lock_release>
 800947c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009480:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009484:	6025      	str	r5, [r4, #0]
 8009486:	61a5      	str	r5, [r4, #24]
 8009488:	2208      	movs	r2, #8
 800948a:	4629      	mov	r1, r5
 800948c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009490:	f7fd fab0 	bl	80069f4 <memset>
 8009494:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009498:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800949c:	4620      	mov	r0, r4
 800949e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094a0:	3468      	adds	r4, #104	; 0x68
 80094a2:	e7d9      	b.n	8009458 <__sfp+0x1c>
 80094a4:	2104      	movs	r1, #4
 80094a6:	4638      	mov	r0, r7
 80094a8:	f7ff ff62 	bl	8009370 <__sfmoreglue>
 80094ac:	4604      	mov	r4, r0
 80094ae:	6030      	str	r0, [r6, #0]
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d1d5      	bne.n	8009460 <__sfp+0x24>
 80094b4:	f7ff ff78 	bl	80093a8 <__sfp_lock_release>
 80094b8:	230c      	movs	r3, #12
 80094ba:	603b      	str	r3, [r7, #0]
 80094bc:	e7ee      	b.n	800949c <__sfp+0x60>
 80094be:	bf00      	nop
 80094c0:	0800aa04 	.word	0x0800aa04
 80094c4:	ffff0001 	.word	0xffff0001

080094c8 <_fwalk_reent>:
 80094c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094cc:	4606      	mov	r6, r0
 80094ce:	4688      	mov	r8, r1
 80094d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094d4:	2700      	movs	r7, #0
 80094d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094da:	f1b9 0901 	subs.w	r9, r9, #1
 80094de:	d505      	bpl.n	80094ec <_fwalk_reent+0x24>
 80094e0:	6824      	ldr	r4, [r4, #0]
 80094e2:	2c00      	cmp	r4, #0
 80094e4:	d1f7      	bne.n	80094d6 <_fwalk_reent+0xe>
 80094e6:	4638      	mov	r0, r7
 80094e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ec:	89ab      	ldrh	r3, [r5, #12]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d907      	bls.n	8009502 <_fwalk_reent+0x3a>
 80094f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094f6:	3301      	adds	r3, #1
 80094f8:	d003      	beq.n	8009502 <_fwalk_reent+0x3a>
 80094fa:	4629      	mov	r1, r5
 80094fc:	4630      	mov	r0, r6
 80094fe:	47c0      	blx	r8
 8009500:	4307      	orrs	r7, r0
 8009502:	3568      	adds	r5, #104	; 0x68
 8009504:	e7e9      	b.n	80094da <_fwalk_reent+0x12>

08009506 <__retarget_lock_init_recursive>:
 8009506:	4770      	bx	lr

08009508 <__retarget_lock_acquire_recursive>:
 8009508:	4770      	bx	lr

0800950a <__retarget_lock_release_recursive>:
 800950a:	4770      	bx	lr

0800950c <__swhatbuf_r>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	460e      	mov	r6, r1
 8009510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009514:	2900      	cmp	r1, #0
 8009516:	b096      	sub	sp, #88	; 0x58
 8009518:	4614      	mov	r4, r2
 800951a:	461d      	mov	r5, r3
 800951c:	da08      	bge.n	8009530 <__swhatbuf_r+0x24>
 800951e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	602a      	str	r2, [r5, #0]
 8009526:	061a      	lsls	r2, r3, #24
 8009528:	d410      	bmi.n	800954c <__swhatbuf_r+0x40>
 800952a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800952e:	e00e      	b.n	800954e <__swhatbuf_r+0x42>
 8009530:	466a      	mov	r2, sp
 8009532:	f000 f903 	bl	800973c <_fstat_r>
 8009536:	2800      	cmp	r0, #0
 8009538:	dbf1      	blt.n	800951e <__swhatbuf_r+0x12>
 800953a:	9a01      	ldr	r2, [sp, #4]
 800953c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009540:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009544:	425a      	negs	r2, r3
 8009546:	415a      	adcs	r2, r3
 8009548:	602a      	str	r2, [r5, #0]
 800954a:	e7ee      	b.n	800952a <__swhatbuf_r+0x1e>
 800954c:	2340      	movs	r3, #64	; 0x40
 800954e:	2000      	movs	r0, #0
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	b016      	add	sp, #88	; 0x58
 8009554:	bd70      	pop	{r4, r5, r6, pc}
	...

08009558 <__smakebuf_r>:
 8009558:	898b      	ldrh	r3, [r1, #12]
 800955a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800955c:	079d      	lsls	r5, r3, #30
 800955e:	4606      	mov	r6, r0
 8009560:	460c      	mov	r4, r1
 8009562:	d507      	bpl.n	8009574 <__smakebuf_r+0x1c>
 8009564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	6123      	str	r3, [r4, #16]
 800956c:	2301      	movs	r3, #1
 800956e:	6163      	str	r3, [r4, #20]
 8009570:	b002      	add	sp, #8
 8009572:	bd70      	pop	{r4, r5, r6, pc}
 8009574:	ab01      	add	r3, sp, #4
 8009576:	466a      	mov	r2, sp
 8009578:	f7ff ffc8 	bl	800950c <__swhatbuf_r>
 800957c:	9900      	ldr	r1, [sp, #0]
 800957e:	4605      	mov	r5, r0
 8009580:	4630      	mov	r0, r6
 8009582:	f7ff f963 	bl	800884c <_malloc_r>
 8009586:	b948      	cbnz	r0, 800959c <__smakebuf_r+0x44>
 8009588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800958c:	059a      	lsls	r2, r3, #22
 800958e:	d4ef      	bmi.n	8009570 <__smakebuf_r+0x18>
 8009590:	f023 0303 	bic.w	r3, r3, #3
 8009594:	f043 0302 	orr.w	r3, r3, #2
 8009598:	81a3      	strh	r3, [r4, #12]
 800959a:	e7e3      	b.n	8009564 <__smakebuf_r+0xc>
 800959c:	4b0d      	ldr	r3, [pc, #52]	; (80095d4 <__smakebuf_r+0x7c>)
 800959e:	62b3      	str	r3, [r6, #40]	; 0x28
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	6020      	str	r0, [r4, #0]
 80095a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a8:	81a3      	strh	r3, [r4, #12]
 80095aa:	9b00      	ldr	r3, [sp, #0]
 80095ac:	6163      	str	r3, [r4, #20]
 80095ae:	9b01      	ldr	r3, [sp, #4]
 80095b0:	6120      	str	r0, [r4, #16]
 80095b2:	b15b      	cbz	r3, 80095cc <__smakebuf_r+0x74>
 80095b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095b8:	4630      	mov	r0, r6
 80095ba:	f000 f8d1 	bl	8009760 <_isatty_r>
 80095be:	b128      	cbz	r0, 80095cc <__smakebuf_r+0x74>
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	f023 0303 	bic.w	r3, r3, #3
 80095c6:	f043 0301 	orr.w	r3, r3, #1
 80095ca:	81a3      	strh	r3, [r4, #12]
 80095cc:	89a0      	ldrh	r0, [r4, #12]
 80095ce:	4305      	orrs	r5, r0
 80095d0:	81a5      	strh	r5, [r4, #12]
 80095d2:	e7cd      	b.n	8009570 <__smakebuf_r+0x18>
 80095d4:	08009365 	.word	0x08009365

080095d8 <_malloc_usable_size_r>:
 80095d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095dc:	1f18      	subs	r0, r3, #4
 80095de:	2b00      	cmp	r3, #0
 80095e0:	bfbc      	itt	lt
 80095e2:	580b      	ldrlt	r3, [r1, r0]
 80095e4:	18c0      	addlt	r0, r0, r3
 80095e6:	4770      	bx	lr

080095e8 <_raise_r>:
 80095e8:	291f      	cmp	r1, #31
 80095ea:	b538      	push	{r3, r4, r5, lr}
 80095ec:	4604      	mov	r4, r0
 80095ee:	460d      	mov	r5, r1
 80095f0:	d904      	bls.n	80095fc <_raise_r+0x14>
 80095f2:	2316      	movs	r3, #22
 80095f4:	6003      	str	r3, [r0, #0]
 80095f6:	f04f 30ff 	mov.w	r0, #4294967295
 80095fa:	bd38      	pop	{r3, r4, r5, pc}
 80095fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80095fe:	b112      	cbz	r2, 8009606 <_raise_r+0x1e>
 8009600:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009604:	b94b      	cbnz	r3, 800961a <_raise_r+0x32>
 8009606:	4620      	mov	r0, r4
 8009608:	f000 f830 	bl	800966c <_getpid_r>
 800960c:	462a      	mov	r2, r5
 800960e:	4601      	mov	r1, r0
 8009610:	4620      	mov	r0, r4
 8009612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009616:	f000 b817 	b.w	8009648 <_kill_r>
 800961a:	2b01      	cmp	r3, #1
 800961c:	d00a      	beq.n	8009634 <_raise_r+0x4c>
 800961e:	1c59      	adds	r1, r3, #1
 8009620:	d103      	bne.n	800962a <_raise_r+0x42>
 8009622:	2316      	movs	r3, #22
 8009624:	6003      	str	r3, [r0, #0]
 8009626:	2001      	movs	r0, #1
 8009628:	e7e7      	b.n	80095fa <_raise_r+0x12>
 800962a:	2400      	movs	r4, #0
 800962c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009630:	4628      	mov	r0, r5
 8009632:	4798      	blx	r3
 8009634:	2000      	movs	r0, #0
 8009636:	e7e0      	b.n	80095fa <_raise_r+0x12>

08009638 <raise>:
 8009638:	4b02      	ldr	r3, [pc, #8]	; (8009644 <raise+0xc>)
 800963a:	4601      	mov	r1, r0
 800963c:	6818      	ldr	r0, [r3, #0]
 800963e:	f7ff bfd3 	b.w	80095e8 <_raise_r>
 8009642:	bf00      	nop
 8009644:	20000240 	.word	0x20000240

08009648 <_kill_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4d07      	ldr	r5, [pc, #28]	; (8009668 <_kill_r+0x20>)
 800964c:	2300      	movs	r3, #0
 800964e:	4604      	mov	r4, r0
 8009650:	4608      	mov	r0, r1
 8009652:	4611      	mov	r1, r2
 8009654:	602b      	str	r3, [r5, #0]
 8009656:	f7f9 f85b 	bl	8002710 <_kill>
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	d102      	bne.n	8009664 <_kill_r+0x1c>
 800965e:	682b      	ldr	r3, [r5, #0]
 8009660:	b103      	cbz	r3, 8009664 <_kill_r+0x1c>
 8009662:	6023      	str	r3, [r4, #0]
 8009664:	bd38      	pop	{r3, r4, r5, pc}
 8009666:	bf00      	nop
 8009668:	200008e8 	.word	0x200008e8

0800966c <_getpid_r>:
 800966c:	f7f9 b848 	b.w	8002700 <_getpid>

08009670 <__sread>:
 8009670:	b510      	push	{r4, lr}
 8009672:	460c      	mov	r4, r1
 8009674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009678:	f000 f894 	bl	80097a4 <_read_r>
 800967c:	2800      	cmp	r0, #0
 800967e:	bfab      	itete	ge
 8009680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009682:	89a3      	ldrhlt	r3, [r4, #12]
 8009684:	181b      	addge	r3, r3, r0
 8009686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800968a:	bfac      	ite	ge
 800968c:	6563      	strge	r3, [r4, #84]	; 0x54
 800968e:	81a3      	strhlt	r3, [r4, #12]
 8009690:	bd10      	pop	{r4, pc}

08009692 <__swrite>:
 8009692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009696:	461f      	mov	r7, r3
 8009698:	898b      	ldrh	r3, [r1, #12]
 800969a:	05db      	lsls	r3, r3, #23
 800969c:	4605      	mov	r5, r0
 800969e:	460c      	mov	r4, r1
 80096a0:	4616      	mov	r6, r2
 80096a2:	d505      	bpl.n	80096b0 <__swrite+0x1e>
 80096a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096a8:	2302      	movs	r3, #2
 80096aa:	2200      	movs	r2, #0
 80096ac:	f000 f868 	bl	8009780 <_lseek_r>
 80096b0:	89a3      	ldrh	r3, [r4, #12]
 80096b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096ba:	81a3      	strh	r3, [r4, #12]
 80096bc:	4632      	mov	r2, r6
 80096be:	463b      	mov	r3, r7
 80096c0:	4628      	mov	r0, r5
 80096c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096c6:	f000 b817 	b.w	80096f8 <_write_r>

080096ca <__sseek>:
 80096ca:	b510      	push	{r4, lr}
 80096cc:	460c      	mov	r4, r1
 80096ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d2:	f000 f855 	bl	8009780 <_lseek_r>
 80096d6:	1c43      	adds	r3, r0, #1
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	bf15      	itete	ne
 80096dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80096de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096e6:	81a3      	strheq	r3, [r4, #12]
 80096e8:	bf18      	it	ne
 80096ea:	81a3      	strhne	r3, [r4, #12]
 80096ec:	bd10      	pop	{r4, pc}

080096ee <__sclose>:
 80096ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f2:	f000 b813 	b.w	800971c <_close_r>
	...

080096f8 <_write_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d07      	ldr	r5, [pc, #28]	; (8009718 <_write_r+0x20>)
 80096fc:	4604      	mov	r4, r0
 80096fe:	4608      	mov	r0, r1
 8009700:	4611      	mov	r1, r2
 8009702:	2200      	movs	r2, #0
 8009704:	602a      	str	r2, [r5, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	f7f9 f839 	bl	800277e <_write>
 800970c:	1c43      	adds	r3, r0, #1
 800970e:	d102      	bne.n	8009716 <_write_r+0x1e>
 8009710:	682b      	ldr	r3, [r5, #0]
 8009712:	b103      	cbz	r3, 8009716 <_write_r+0x1e>
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	bd38      	pop	{r3, r4, r5, pc}
 8009718:	200008e8 	.word	0x200008e8

0800971c <_close_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	4d06      	ldr	r5, [pc, #24]	; (8009738 <_close_r+0x1c>)
 8009720:	2300      	movs	r3, #0
 8009722:	4604      	mov	r4, r0
 8009724:	4608      	mov	r0, r1
 8009726:	602b      	str	r3, [r5, #0]
 8009728:	f7f9 f845 	bl	80027b6 <_close>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d102      	bne.n	8009736 <_close_r+0x1a>
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	b103      	cbz	r3, 8009736 <_close_r+0x1a>
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	bd38      	pop	{r3, r4, r5, pc}
 8009738:	200008e8 	.word	0x200008e8

0800973c <_fstat_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4d07      	ldr	r5, [pc, #28]	; (800975c <_fstat_r+0x20>)
 8009740:	2300      	movs	r3, #0
 8009742:	4604      	mov	r4, r0
 8009744:	4608      	mov	r0, r1
 8009746:	4611      	mov	r1, r2
 8009748:	602b      	str	r3, [r5, #0]
 800974a:	f7f9 f840 	bl	80027ce <_fstat>
 800974e:	1c43      	adds	r3, r0, #1
 8009750:	d102      	bne.n	8009758 <_fstat_r+0x1c>
 8009752:	682b      	ldr	r3, [r5, #0]
 8009754:	b103      	cbz	r3, 8009758 <_fstat_r+0x1c>
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	bd38      	pop	{r3, r4, r5, pc}
 800975a:	bf00      	nop
 800975c:	200008e8 	.word	0x200008e8

08009760 <_isatty_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d06      	ldr	r5, [pc, #24]	; (800977c <_isatty_r+0x1c>)
 8009764:	2300      	movs	r3, #0
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	602b      	str	r3, [r5, #0]
 800976c:	f7f9 f83f 	bl	80027ee <_isatty>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d102      	bne.n	800977a <_isatty_r+0x1a>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	b103      	cbz	r3, 800977a <_isatty_r+0x1a>
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	200008e8 	.word	0x200008e8

08009780 <_lseek_r>:
 8009780:	b538      	push	{r3, r4, r5, lr}
 8009782:	4d07      	ldr	r5, [pc, #28]	; (80097a0 <_lseek_r+0x20>)
 8009784:	4604      	mov	r4, r0
 8009786:	4608      	mov	r0, r1
 8009788:	4611      	mov	r1, r2
 800978a:	2200      	movs	r2, #0
 800978c:	602a      	str	r2, [r5, #0]
 800978e:	461a      	mov	r2, r3
 8009790:	f7f9 f838 	bl	8002804 <_lseek>
 8009794:	1c43      	adds	r3, r0, #1
 8009796:	d102      	bne.n	800979e <_lseek_r+0x1e>
 8009798:	682b      	ldr	r3, [r5, #0]
 800979a:	b103      	cbz	r3, 800979e <_lseek_r+0x1e>
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	bd38      	pop	{r3, r4, r5, pc}
 80097a0:	200008e8 	.word	0x200008e8

080097a4 <_read_r>:
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	4d07      	ldr	r5, [pc, #28]	; (80097c4 <_read_r+0x20>)
 80097a8:	4604      	mov	r4, r0
 80097aa:	4608      	mov	r0, r1
 80097ac:	4611      	mov	r1, r2
 80097ae:	2200      	movs	r2, #0
 80097b0:	602a      	str	r2, [r5, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	f7f8 ffc6 	bl	8002744 <_read>
 80097b8:	1c43      	adds	r3, r0, #1
 80097ba:	d102      	bne.n	80097c2 <_read_r+0x1e>
 80097bc:	682b      	ldr	r3, [r5, #0]
 80097be:	b103      	cbz	r3, 80097c2 <_read_r+0x1e>
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	bd38      	pop	{r3, r4, r5, pc}
 80097c4:	200008e8 	.word	0x200008e8

080097c8 <atan>:
 80097c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	ec55 4b10 	vmov	r4, r5, d0
 80097d0:	4bc3      	ldr	r3, [pc, #780]	; (8009ae0 <atan+0x318>)
 80097d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80097d6:	429e      	cmp	r6, r3
 80097d8:	46ab      	mov	fp, r5
 80097da:	dd18      	ble.n	800980e <atan+0x46>
 80097dc:	4bc1      	ldr	r3, [pc, #772]	; (8009ae4 <atan+0x31c>)
 80097de:	429e      	cmp	r6, r3
 80097e0:	dc01      	bgt.n	80097e6 <atan+0x1e>
 80097e2:	d109      	bne.n	80097f8 <atan+0x30>
 80097e4:	b144      	cbz	r4, 80097f8 <atan+0x30>
 80097e6:	4622      	mov	r2, r4
 80097e8:	462b      	mov	r3, r5
 80097ea:	4620      	mov	r0, r4
 80097ec:	4629      	mov	r1, r5
 80097ee:	f7f6 fd4d 	bl	800028c <__adddf3>
 80097f2:	4604      	mov	r4, r0
 80097f4:	460d      	mov	r5, r1
 80097f6:	e006      	b.n	8009806 <atan+0x3e>
 80097f8:	f1bb 0f00 	cmp.w	fp, #0
 80097fc:	f300 8131 	bgt.w	8009a62 <atan+0x29a>
 8009800:	a59b      	add	r5, pc, #620	; (adr r5, 8009a70 <atan+0x2a8>)
 8009802:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009806:	ec45 4b10 	vmov	d0, r4, r5
 800980a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980e:	4bb6      	ldr	r3, [pc, #728]	; (8009ae8 <atan+0x320>)
 8009810:	429e      	cmp	r6, r3
 8009812:	dc14      	bgt.n	800983e <atan+0x76>
 8009814:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009818:	429e      	cmp	r6, r3
 800981a:	dc0d      	bgt.n	8009838 <atan+0x70>
 800981c:	a396      	add	r3, pc, #600	; (adr r3, 8009a78 <atan+0x2b0>)
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	ee10 0a10 	vmov	r0, s0
 8009826:	4629      	mov	r1, r5
 8009828:	f7f6 fd30 	bl	800028c <__adddf3>
 800982c:	4baf      	ldr	r3, [pc, #700]	; (8009aec <atan+0x324>)
 800982e:	2200      	movs	r2, #0
 8009830:	f7f7 f972 	bl	8000b18 <__aeabi_dcmpgt>
 8009834:	2800      	cmp	r0, #0
 8009836:	d1e6      	bne.n	8009806 <atan+0x3e>
 8009838:	f04f 3aff 	mov.w	sl, #4294967295
 800983c:	e02b      	b.n	8009896 <atan+0xce>
 800983e:	f000 f963 	bl	8009b08 <fabs>
 8009842:	4bab      	ldr	r3, [pc, #684]	; (8009af0 <atan+0x328>)
 8009844:	429e      	cmp	r6, r3
 8009846:	ec55 4b10 	vmov	r4, r5, d0
 800984a:	f300 80bf 	bgt.w	80099cc <atan+0x204>
 800984e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009852:	429e      	cmp	r6, r3
 8009854:	f300 80a0 	bgt.w	8009998 <atan+0x1d0>
 8009858:	ee10 2a10 	vmov	r2, s0
 800985c:	ee10 0a10 	vmov	r0, s0
 8009860:	462b      	mov	r3, r5
 8009862:	4629      	mov	r1, r5
 8009864:	f7f6 fd12 	bl	800028c <__adddf3>
 8009868:	4ba0      	ldr	r3, [pc, #640]	; (8009aec <atan+0x324>)
 800986a:	2200      	movs	r2, #0
 800986c:	f7f6 fd0c 	bl	8000288 <__aeabi_dsub>
 8009870:	2200      	movs	r2, #0
 8009872:	4606      	mov	r6, r0
 8009874:	460f      	mov	r7, r1
 8009876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800987a:	4620      	mov	r0, r4
 800987c:	4629      	mov	r1, r5
 800987e:	f7f6 fd05 	bl	800028c <__adddf3>
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	4630      	mov	r0, r6
 8009888:	4639      	mov	r1, r7
 800988a:	f7f6 ffdf 	bl	800084c <__aeabi_ddiv>
 800988e:	f04f 0a00 	mov.w	sl, #0
 8009892:	4604      	mov	r4, r0
 8009894:	460d      	mov	r5, r1
 8009896:	4622      	mov	r2, r4
 8009898:	462b      	mov	r3, r5
 800989a:	4620      	mov	r0, r4
 800989c:	4629      	mov	r1, r5
 800989e:	f7f6 feab 	bl	80005f8 <__aeabi_dmul>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	4680      	mov	r8, r0
 80098a8:	4689      	mov	r9, r1
 80098aa:	f7f6 fea5 	bl	80005f8 <__aeabi_dmul>
 80098ae:	a374      	add	r3, pc, #464	; (adr r3, 8009a80 <atan+0x2b8>)
 80098b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b4:	4606      	mov	r6, r0
 80098b6:	460f      	mov	r7, r1
 80098b8:	f7f6 fe9e 	bl	80005f8 <__aeabi_dmul>
 80098bc:	a372      	add	r3, pc, #456	; (adr r3, 8009a88 <atan+0x2c0>)
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	f7f6 fce3 	bl	800028c <__adddf3>
 80098c6:	4632      	mov	r2, r6
 80098c8:	463b      	mov	r3, r7
 80098ca:	f7f6 fe95 	bl	80005f8 <__aeabi_dmul>
 80098ce:	a370      	add	r3, pc, #448	; (adr r3, 8009a90 <atan+0x2c8>)
 80098d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d4:	f7f6 fcda 	bl	800028c <__adddf3>
 80098d8:	4632      	mov	r2, r6
 80098da:	463b      	mov	r3, r7
 80098dc:	f7f6 fe8c 	bl	80005f8 <__aeabi_dmul>
 80098e0:	a36d      	add	r3, pc, #436	; (adr r3, 8009a98 <atan+0x2d0>)
 80098e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e6:	f7f6 fcd1 	bl	800028c <__adddf3>
 80098ea:	4632      	mov	r2, r6
 80098ec:	463b      	mov	r3, r7
 80098ee:	f7f6 fe83 	bl	80005f8 <__aeabi_dmul>
 80098f2:	a36b      	add	r3, pc, #428	; (adr r3, 8009aa0 <atan+0x2d8>)
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f7f6 fcc8 	bl	800028c <__adddf3>
 80098fc:	4632      	mov	r2, r6
 80098fe:	463b      	mov	r3, r7
 8009900:	f7f6 fe7a 	bl	80005f8 <__aeabi_dmul>
 8009904:	a368      	add	r3, pc, #416	; (adr r3, 8009aa8 <atan+0x2e0>)
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	f7f6 fcbf 	bl	800028c <__adddf3>
 800990e:	4642      	mov	r2, r8
 8009910:	464b      	mov	r3, r9
 8009912:	f7f6 fe71 	bl	80005f8 <__aeabi_dmul>
 8009916:	a366      	add	r3, pc, #408	; (adr r3, 8009ab0 <atan+0x2e8>)
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	4680      	mov	r8, r0
 800991e:	4689      	mov	r9, r1
 8009920:	4630      	mov	r0, r6
 8009922:	4639      	mov	r1, r7
 8009924:	f7f6 fe68 	bl	80005f8 <__aeabi_dmul>
 8009928:	a363      	add	r3, pc, #396	; (adr r3, 8009ab8 <atan+0x2f0>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	f7f6 fcab 	bl	8000288 <__aeabi_dsub>
 8009932:	4632      	mov	r2, r6
 8009934:	463b      	mov	r3, r7
 8009936:	f7f6 fe5f 	bl	80005f8 <__aeabi_dmul>
 800993a:	a361      	add	r3, pc, #388	; (adr r3, 8009ac0 <atan+0x2f8>)
 800993c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009940:	f7f6 fca2 	bl	8000288 <__aeabi_dsub>
 8009944:	4632      	mov	r2, r6
 8009946:	463b      	mov	r3, r7
 8009948:	f7f6 fe56 	bl	80005f8 <__aeabi_dmul>
 800994c:	a35e      	add	r3, pc, #376	; (adr r3, 8009ac8 <atan+0x300>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f7f6 fc99 	bl	8000288 <__aeabi_dsub>
 8009956:	4632      	mov	r2, r6
 8009958:	463b      	mov	r3, r7
 800995a:	f7f6 fe4d 	bl	80005f8 <__aeabi_dmul>
 800995e:	a35c      	add	r3, pc, #368	; (adr r3, 8009ad0 <atan+0x308>)
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	f7f6 fc90 	bl	8000288 <__aeabi_dsub>
 8009968:	4632      	mov	r2, r6
 800996a:	463b      	mov	r3, r7
 800996c:	f7f6 fe44 	bl	80005f8 <__aeabi_dmul>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	4640      	mov	r0, r8
 8009976:	4649      	mov	r1, r9
 8009978:	f7f6 fc88 	bl	800028c <__adddf3>
 800997c:	4622      	mov	r2, r4
 800997e:	462b      	mov	r3, r5
 8009980:	f7f6 fe3a 	bl	80005f8 <__aeabi_dmul>
 8009984:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	d14b      	bne.n	8009a26 <atan+0x25e>
 800998e:	4620      	mov	r0, r4
 8009990:	4629      	mov	r1, r5
 8009992:	f7f6 fc79 	bl	8000288 <__aeabi_dsub>
 8009996:	e72c      	b.n	80097f2 <atan+0x2a>
 8009998:	ee10 0a10 	vmov	r0, s0
 800999c:	4b53      	ldr	r3, [pc, #332]	; (8009aec <atan+0x324>)
 800999e:	2200      	movs	r2, #0
 80099a0:	4629      	mov	r1, r5
 80099a2:	f7f6 fc71 	bl	8000288 <__aeabi_dsub>
 80099a6:	4b51      	ldr	r3, [pc, #324]	; (8009aec <atan+0x324>)
 80099a8:	4606      	mov	r6, r0
 80099aa:	460f      	mov	r7, r1
 80099ac:	2200      	movs	r2, #0
 80099ae:	4620      	mov	r0, r4
 80099b0:	4629      	mov	r1, r5
 80099b2:	f7f6 fc6b 	bl	800028c <__adddf3>
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4630      	mov	r0, r6
 80099bc:	4639      	mov	r1, r7
 80099be:	f7f6 ff45 	bl	800084c <__aeabi_ddiv>
 80099c2:	f04f 0a01 	mov.w	sl, #1
 80099c6:	4604      	mov	r4, r0
 80099c8:	460d      	mov	r5, r1
 80099ca:	e764      	b.n	8009896 <atan+0xce>
 80099cc:	4b49      	ldr	r3, [pc, #292]	; (8009af4 <atan+0x32c>)
 80099ce:	429e      	cmp	r6, r3
 80099d0:	da1d      	bge.n	8009a0e <atan+0x246>
 80099d2:	ee10 0a10 	vmov	r0, s0
 80099d6:	4b48      	ldr	r3, [pc, #288]	; (8009af8 <atan+0x330>)
 80099d8:	2200      	movs	r2, #0
 80099da:	4629      	mov	r1, r5
 80099dc:	f7f6 fc54 	bl	8000288 <__aeabi_dsub>
 80099e0:	4b45      	ldr	r3, [pc, #276]	; (8009af8 <atan+0x330>)
 80099e2:	4606      	mov	r6, r0
 80099e4:	460f      	mov	r7, r1
 80099e6:	2200      	movs	r2, #0
 80099e8:	4620      	mov	r0, r4
 80099ea:	4629      	mov	r1, r5
 80099ec:	f7f6 fe04 	bl	80005f8 <__aeabi_dmul>
 80099f0:	4b3e      	ldr	r3, [pc, #248]	; (8009aec <atan+0x324>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	f7f6 fc4a 	bl	800028c <__adddf3>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4630      	mov	r0, r6
 80099fe:	4639      	mov	r1, r7
 8009a00:	f7f6 ff24 	bl	800084c <__aeabi_ddiv>
 8009a04:	f04f 0a02 	mov.w	sl, #2
 8009a08:	4604      	mov	r4, r0
 8009a0a:	460d      	mov	r5, r1
 8009a0c:	e743      	b.n	8009896 <atan+0xce>
 8009a0e:	462b      	mov	r3, r5
 8009a10:	ee10 2a10 	vmov	r2, s0
 8009a14:	4939      	ldr	r1, [pc, #228]	; (8009afc <atan+0x334>)
 8009a16:	2000      	movs	r0, #0
 8009a18:	f7f6 ff18 	bl	800084c <__aeabi_ddiv>
 8009a1c:	f04f 0a03 	mov.w	sl, #3
 8009a20:	4604      	mov	r4, r0
 8009a22:	460d      	mov	r5, r1
 8009a24:	e737      	b.n	8009896 <atan+0xce>
 8009a26:	4b36      	ldr	r3, [pc, #216]	; (8009b00 <atan+0x338>)
 8009a28:	4e36      	ldr	r6, [pc, #216]	; (8009b04 <atan+0x33c>)
 8009a2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009a2e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009a32:	e9da 2300 	ldrd	r2, r3, [sl]
 8009a36:	f7f6 fc27 	bl	8000288 <__aeabi_dsub>
 8009a3a:	4622      	mov	r2, r4
 8009a3c:	462b      	mov	r3, r5
 8009a3e:	f7f6 fc23 	bl	8000288 <__aeabi_dsub>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009a4a:	f7f6 fc1d 	bl	8000288 <__aeabi_dsub>
 8009a4e:	f1bb 0f00 	cmp.w	fp, #0
 8009a52:	4604      	mov	r4, r0
 8009a54:	460d      	mov	r5, r1
 8009a56:	f6bf aed6 	bge.w	8009806 <atan+0x3e>
 8009a5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a5e:	461d      	mov	r5, r3
 8009a60:	e6d1      	b.n	8009806 <atan+0x3e>
 8009a62:	a51d      	add	r5, pc, #116	; (adr r5, 8009ad8 <atan+0x310>)
 8009a64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009a68:	e6cd      	b.n	8009806 <atan+0x3e>
 8009a6a:	bf00      	nop
 8009a6c:	f3af 8000 	nop.w
 8009a70:	54442d18 	.word	0x54442d18
 8009a74:	bff921fb 	.word	0xbff921fb
 8009a78:	8800759c 	.word	0x8800759c
 8009a7c:	7e37e43c 	.word	0x7e37e43c
 8009a80:	e322da11 	.word	0xe322da11
 8009a84:	3f90ad3a 	.word	0x3f90ad3a
 8009a88:	24760deb 	.word	0x24760deb
 8009a8c:	3fa97b4b 	.word	0x3fa97b4b
 8009a90:	a0d03d51 	.word	0xa0d03d51
 8009a94:	3fb10d66 	.word	0x3fb10d66
 8009a98:	c54c206e 	.word	0xc54c206e
 8009a9c:	3fb745cd 	.word	0x3fb745cd
 8009aa0:	920083ff 	.word	0x920083ff
 8009aa4:	3fc24924 	.word	0x3fc24924
 8009aa8:	5555550d 	.word	0x5555550d
 8009aac:	3fd55555 	.word	0x3fd55555
 8009ab0:	2c6a6c2f 	.word	0x2c6a6c2f
 8009ab4:	bfa2b444 	.word	0xbfa2b444
 8009ab8:	52defd9a 	.word	0x52defd9a
 8009abc:	3fadde2d 	.word	0x3fadde2d
 8009ac0:	af749a6d 	.word	0xaf749a6d
 8009ac4:	3fb3b0f2 	.word	0x3fb3b0f2
 8009ac8:	fe231671 	.word	0xfe231671
 8009acc:	3fbc71c6 	.word	0x3fbc71c6
 8009ad0:	9998ebc4 	.word	0x9998ebc4
 8009ad4:	3fc99999 	.word	0x3fc99999
 8009ad8:	54442d18 	.word	0x54442d18
 8009adc:	3ff921fb 	.word	0x3ff921fb
 8009ae0:	440fffff 	.word	0x440fffff
 8009ae4:	7ff00000 	.word	0x7ff00000
 8009ae8:	3fdbffff 	.word	0x3fdbffff
 8009aec:	3ff00000 	.word	0x3ff00000
 8009af0:	3ff2ffff 	.word	0x3ff2ffff
 8009af4:	40038000 	.word	0x40038000
 8009af8:	3ff80000 	.word	0x3ff80000
 8009afc:	bff00000 	.word	0xbff00000
 8009b00:	0800ae00 	.word	0x0800ae00
 8009b04:	0800ade0 	.word	0x0800ade0

08009b08 <fabs>:
 8009b08:	ec51 0b10 	vmov	r0, r1, d0
 8009b0c:	ee10 2a10 	vmov	r2, s0
 8009b10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009b14:	ec43 2b10 	vmov	d0, r2, r3
 8009b18:	4770      	bx	lr
	...

08009b1c <pow>:
 8009b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1e:	ed2d 8b02 	vpush	{d8}
 8009b22:	eeb0 8a40 	vmov.f32	s16, s0
 8009b26:	eef0 8a60 	vmov.f32	s17, s1
 8009b2a:	ec55 4b11 	vmov	r4, r5, d1
 8009b2e:	f000 f893 	bl	8009c58 <__ieee754_pow>
 8009b32:	4622      	mov	r2, r4
 8009b34:	462b      	mov	r3, r5
 8009b36:	4620      	mov	r0, r4
 8009b38:	4629      	mov	r1, r5
 8009b3a:	ec57 6b10 	vmov	r6, r7, d0
 8009b3e:	f7f6 fff5 	bl	8000b2c <__aeabi_dcmpun>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d13b      	bne.n	8009bbe <pow+0xa2>
 8009b46:	ec51 0b18 	vmov	r0, r1, d8
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f7f6 ffbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b52:	b1b8      	cbz	r0, 8009b84 <pow+0x68>
 8009b54:	2200      	movs	r2, #0
 8009b56:	2300      	movs	r3, #0
 8009b58:	4620      	mov	r0, r4
 8009b5a:	4629      	mov	r1, r5
 8009b5c:	f7f6 ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d146      	bne.n	8009bf2 <pow+0xd6>
 8009b64:	ec45 4b10 	vmov	d0, r4, r5
 8009b68:	f000 fe86 	bl	800a878 <finite>
 8009b6c:	b338      	cbz	r0, 8009bbe <pow+0xa2>
 8009b6e:	2200      	movs	r2, #0
 8009b70:	2300      	movs	r3, #0
 8009b72:	4620      	mov	r0, r4
 8009b74:	4629      	mov	r1, r5
 8009b76:	f7f6 ffb1 	bl	8000adc <__aeabi_dcmplt>
 8009b7a:	b300      	cbz	r0, 8009bbe <pow+0xa2>
 8009b7c:	f7fc ff10 	bl	80069a0 <__errno>
 8009b80:	2322      	movs	r3, #34	; 0x22
 8009b82:	e01b      	b.n	8009bbc <pow+0xa0>
 8009b84:	ec47 6b10 	vmov	d0, r6, r7
 8009b88:	f000 fe76 	bl	800a878 <finite>
 8009b8c:	b9e0      	cbnz	r0, 8009bc8 <pow+0xac>
 8009b8e:	eeb0 0a48 	vmov.f32	s0, s16
 8009b92:	eef0 0a68 	vmov.f32	s1, s17
 8009b96:	f000 fe6f 	bl	800a878 <finite>
 8009b9a:	b1a8      	cbz	r0, 8009bc8 <pow+0xac>
 8009b9c:	ec45 4b10 	vmov	d0, r4, r5
 8009ba0:	f000 fe6a 	bl	800a878 <finite>
 8009ba4:	b180      	cbz	r0, 8009bc8 <pow+0xac>
 8009ba6:	4632      	mov	r2, r6
 8009ba8:	463b      	mov	r3, r7
 8009baa:	4630      	mov	r0, r6
 8009bac:	4639      	mov	r1, r7
 8009bae:	f7f6 ffbd 	bl	8000b2c <__aeabi_dcmpun>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d0e2      	beq.n	8009b7c <pow+0x60>
 8009bb6:	f7fc fef3 	bl	80069a0 <__errno>
 8009bba:	2321      	movs	r3, #33	; 0x21
 8009bbc:	6003      	str	r3, [r0, #0]
 8009bbe:	ecbd 8b02 	vpop	{d8}
 8009bc2:	ec47 6b10 	vmov	d0, r6, r7
 8009bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2300      	movs	r3, #0
 8009bcc:	4630      	mov	r0, r6
 8009bce:	4639      	mov	r1, r7
 8009bd0:	f7f6 ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	d0f2      	beq.n	8009bbe <pow+0xa2>
 8009bd8:	eeb0 0a48 	vmov.f32	s0, s16
 8009bdc:	eef0 0a68 	vmov.f32	s1, s17
 8009be0:	f000 fe4a 	bl	800a878 <finite>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d0ea      	beq.n	8009bbe <pow+0xa2>
 8009be8:	ec45 4b10 	vmov	d0, r4, r5
 8009bec:	f000 fe44 	bl	800a878 <finite>
 8009bf0:	e7c3      	b.n	8009b7a <pow+0x5e>
 8009bf2:	4f01      	ldr	r7, [pc, #4]	; (8009bf8 <pow+0xdc>)
 8009bf4:	2600      	movs	r6, #0
 8009bf6:	e7e2      	b.n	8009bbe <pow+0xa2>
 8009bf8:	3ff00000 	.word	0x3ff00000

08009bfc <sqrt>:
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	ed2d 8b02 	vpush	{d8}
 8009c02:	ec55 4b10 	vmov	r4, r5, d0
 8009c06:	f000 fd55 	bl	800a6b4 <__ieee754_sqrt>
 8009c0a:	4622      	mov	r2, r4
 8009c0c:	462b      	mov	r3, r5
 8009c0e:	4620      	mov	r0, r4
 8009c10:	4629      	mov	r1, r5
 8009c12:	eeb0 8a40 	vmov.f32	s16, s0
 8009c16:	eef0 8a60 	vmov.f32	s17, s1
 8009c1a:	f7f6 ff87 	bl	8000b2c <__aeabi_dcmpun>
 8009c1e:	b990      	cbnz	r0, 8009c46 <sqrt+0x4a>
 8009c20:	2200      	movs	r2, #0
 8009c22:	2300      	movs	r3, #0
 8009c24:	4620      	mov	r0, r4
 8009c26:	4629      	mov	r1, r5
 8009c28:	f7f6 ff58 	bl	8000adc <__aeabi_dcmplt>
 8009c2c:	b158      	cbz	r0, 8009c46 <sqrt+0x4a>
 8009c2e:	f7fc feb7 	bl	80069a0 <__errno>
 8009c32:	2321      	movs	r3, #33	; 0x21
 8009c34:	6003      	str	r3, [r0, #0]
 8009c36:	2200      	movs	r2, #0
 8009c38:	2300      	movs	r3, #0
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	f7f6 fe05 	bl	800084c <__aeabi_ddiv>
 8009c42:	ec41 0b18 	vmov	d8, r0, r1
 8009c46:	eeb0 0a48 	vmov.f32	s0, s16
 8009c4a:	eef0 0a68 	vmov.f32	s1, s17
 8009c4e:	ecbd 8b02 	vpop	{d8}
 8009c52:	bd38      	pop	{r3, r4, r5, pc}
 8009c54:	0000      	movs	r0, r0
	...

08009c58 <__ieee754_pow>:
 8009c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	ed2d 8b06 	vpush	{d8-d10}
 8009c60:	b089      	sub	sp, #36	; 0x24
 8009c62:	ed8d 1b00 	vstr	d1, [sp]
 8009c66:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009c6a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009c6e:	ea58 0102 	orrs.w	r1, r8, r2
 8009c72:	ec57 6b10 	vmov	r6, r7, d0
 8009c76:	d115      	bne.n	8009ca4 <__ieee754_pow+0x4c>
 8009c78:	19b3      	adds	r3, r6, r6
 8009c7a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009c7e:	4152      	adcs	r2, r2
 8009c80:	4299      	cmp	r1, r3
 8009c82:	4b89      	ldr	r3, [pc, #548]	; (8009ea8 <__ieee754_pow+0x250>)
 8009c84:	4193      	sbcs	r3, r2
 8009c86:	f080 84d2 	bcs.w	800a62e <__ieee754_pow+0x9d6>
 8009c8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c8e:	4630      	mov	r0, r6
 8009c90:	4639      	mov	r1, r7
 8009c92:	f7f6 fafb 	bl	800028c <__adddf3>
 8009c96:	ec41 0b10 	vmov	d0, r0, r1
 8009c9a:	b009      	add	sp, #36	; 0x24
 8009c9c:	ecbd 8b06 	vpop	{d8-d10}
 8009ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca4:	4b81      	ldr	r3, [pc, #516]	; (8009eac <__ieee754_pow+0x254>)
 8009ca6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009caa:	429c      	cmp	r4, r3
 8009cac:	ee10 aa10 	vmov	sl, s0
 8009cb0:	463d      	mov	r5, r7
 8009cb2:	dc06      	bgt.n	8009cc2 <__ieee754_pow+0x6a>
 8009cb4:	d101      	bne.n	8009cba <__ieee754_pow+0x62>
 8009cb6:	2e00      	cmp	r6, #0
 8009cb8:	d1e7      	bne.n	8009c8a <__ieee754_pow+0x32>
 8009cba:	4598      	cmp	r8, r3
 8009cbc:	dc01      	bgt.n	8009cc2 <__ieee754_pow+0x6a>
 8009cbe:	d10f      	bne.n	8009ce0 <__ieee754_pow+0x88>
 8009cc0:	b172      	cbz	r2, 8009ce0 <__ieee754_pow+0x88>
 8009cc2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009cc6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009cca:	ea55 050a 	orrs.w	r5, r5, sl
 8009cce:	d1dc      	bne.n	8009c8a <__ieee754_pow+0x32>
 8009cd0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009cd4:	18db      	adds	r3, r3, r3
 8009cd6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009cda:	4152      	adcs	r2, r2
 8009cdc:	429d      	cmp	r5, r3
 8009cde:	e7d0      	b.n	8009c82 <__ieee754_pow+0x2a>
 8009ce0:	2d00      	cmp	r5, #0
 8009ce2:	da3b      	bge.n	8009d5c <__ieee754_pow+0x104>
 8009ce4:	4b72      	ldr	r3, [pc, #456]	; (8009eb0 <__ieee754_pow+0x258>)
 8009ce6:	4598      	cmp	r8, r3
 8009ce8:	dc51      	bgt.n	8009d8e <__ieee754_pow+0x136>
 8009cea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009cee:	4598      	cmp	r8, r3
 8009cf0:	f340 84ac 	ble.w	800a64c <__ieee754_pow+0x9f4>
 8009cf4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009cf8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009cfc:	2b14      	cmp	r3, #20
 8009cfe:	dd0f      	ble.n	8009d20 <__ieee754_pow+0xc8>
 8009d00:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009d04:	fa22 f103 	lsr.w	r1, r2, r3
 8009d08:	fa01 f303 	lsl.w	r3, r1, r3
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	f040 849d 	bne.w	800a64c <__ieee754_pow+0x9f4>
 8009d12:	f001 0101 	and.w	r1, r1, #1
 8009d16:	f1c1 0302 	rsb	r3, r1, #2
 8009d1a:	9304      	str	r3, [sp, #16]
 8009d1c:	b182      	cbz	r2, 8009d40 <__ieee754_pow+0xe8>
 8009d1e:	e05f      	b.n	8009de0 <__ieee754_pow+0x188>
 8009d20:	2a00      	cmp	r2, #0
 8009d22:	d15b      	bne.n	8009ddc <__ieee754_pow+0x184>
 8009d24:	f1c3 0314 	rsb	r3, r3, #20
 8009d28:	fa48 f103 	asr.w	r1, r8, r3
 8009d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d30:	4543      	cmp	r3, r8
 8009d32:	f040 8488 	bne.w	800a646 <__ieee754_pow+0x9ee>
 8009d36:	f001 0101 	and.w	r1, r1, #1
 8009d3a:	f1c1 0302 	rsb	r3, r1, #2
 8009d3e:	9304      	str	r3, [sp, #16]
 8009d40:	4b5c      	ldr	r3, [pc, #368]	; (8009eb4 <__ieee754_pow+0x25c>)
 8009d42:	4598      	cmp	r8, r3
 8009d44:	d132      	bne.n	8009dac <__ieee754_pow+0x154>
 8009d46:	f1b9 0f00 	cmp.w	r9, #0
 8009d4a:	f280 8478 	bge.w	800a63e <__ieee754_pow+0x9e6>
 8009d4e:	4959      	ldr	r1, [pc, #356]	; (8009eb4 <__ieee754_pow+0x25c>)
 8009d50:	4632      	mov	r2, r6
 8009d52:	463b      	mov	r3, r7
 8009d54:	2000      	movs	r0, #0
 8009d56:	f7f6 fd79 	bl	800084c <__aeabi_ddiv>
 8009d5a:	e79c      	b.n	8009c96 <__ieee754_pow+0x3e>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	9304      	str	r3, [sp, #16]
 8009d60:	2a00      	cmp	r2, #0
 8009d62:	d13d      	bne.n	8009de0 <__ieee754_pow+0x188>
 8009d64:	4b51      	ldr	r3, [pc, #324]	; (8009eac <__ieee754_pow+0x254>)
 8009d66:	4598      	cmp	r8, r3
 8009d68:	d1ea      	bne.n	8009d40 <__ieee754_pow+0xe8>
 8009d6a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009d6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009d72:	ea53 030a 	orrs.w	r3, r3, sl
 8009d76:	f000 845a 	beq.w	800a62e <__ieee754_pow+0x9d6>
 8009d7a:	4b4f      	ldr	r3, [pc, #316]	; (8009eb8 <__ieee754_pow+0x260>)
 8009d7c:	429c      	cmp	r4, r3
 8009d7e:	dd08      	ble.n	8009d92 <__ieee754_pow+0x13a>
 8009d80:	f1b9 0f00 	cmp.w	r9, #0
 8009d84:	f2c0 8457 	blt.w	800a636 <__ieee754_pow+0x9de>
 8009d88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d8c:	e783      	b.n	8009c96 <__ieee754_pow+0x3e>
 8009d8e:	2302      	movs	r3, #2
 8009d90:	e7e5      	b.n	8009d5e <__ieee754_pow+0x106>
 8009d92:	f1b9 0f00 	cmp.w	r9, #0
 8009d96:	f04f 0000 	mov.w	r0, #0
 8009d9a:	f04f 0100 	mov.w	r1, #0
 8009d9e:	f6bf af7a 	bge.w	8009c96 <__ieee754_pow+0x3e>
 8009da2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009da6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009daa:	e774      	b.n	8009c96 <__ieee754_pow+0x3e>
 8009dac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009db0:	d106      	bne.n	8009dc0 <__ieee754_pow+0x168>
 8009db2:	4632      	mov	r2, r6
 8009db4:	463b      	mov	r3, r7
 8009db6:	4630      	mov	r0, r6
 8009db8:	4639      	mov	r1, r7
 8009dba:	f7f6 fc1d 	bl	80005f8 <__aeabi_dmul>
 8009dbe:	e76a      	b.n	8009c96 <__ieee754_pow+0x3e>
 8009dc0:	4b3e      	ldr	r3, [pc, #248]	; (8009ebc <__ieee754_pow+0x264>)
 8009dc2:	4599      	cmp	r9, r3
 8009dc4:	d10c      	bne.n	8009de0 <__ieee754_pow+0x188>
 8009dc6:	2d00      	cmp	r5, #0
 8009dc8:	db0a      	blt.n	8009de0 <__ieee754_pow+0x188>
 8009dca:	ec47 6b10 	vmov	d0, r6, r7
 8009dce:	b009      	add	sp, #36	; 0x24
 8009dd0:	ecbd 8b06 	vpop	{d8-d10}
 8009dd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd8:	f000 bc6c 	b.w	800a6b4 <__ieee754_sqrt>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	9304      	str	r3, [sp, #16]
 8009de0:	ec47 6b10 	vmov	d0, r6, r7
 8009de4:	f7ff fe90 	bl	8009b08 <fabs>
 8009de8:	ec51 0b10 	vmov	r0, r1, d0
 8009dec:	f1ba 0f00 	cmp.w	sl, #0
 8009df0:	d129      	bne.n	8009e46 <__ieee754_pow+0x1ee>
 8009df2:	b124      	cbz	r4, 8009dfe <__ieee754_pow+0x1a6>
 8009df4:	4b2f      	ldr	r3, [pc, #188]	; (8009eb4 <__ieee754_pow+0x25c>)
 8009df6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d123      	bne.n	8009e46 <__ieee754_pow+0x1ee>
 8009dfe:	f1b9 0f00 	cmp.w	r9, #0
 8009e02:	da05      	bge.n	8009e10 <__ieee754_pow+0x1b8>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	2000      	movs	r0, #0
 8009e0a:	492a      	ldr	r1, [pc, #168]	; (8009eb4 <__ieee754_pow+0x25c>)
 8009e0c:	f7f6 fd1e 	bl	800084c <__aeabi_ddiv>
 8009e10:	2d00      	cmp	r5, #0
 8009e12:	f6bf af40 	bge.w	8009c96 <__ieee754_pow+0x3e>
 8009e16:	9b04      	ldr	r3, [sp, #16]
 8009e18:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009e1c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009e20:	4323      	orrs	r3, r4
 8009e22:	d108      	bne.n	8009e36 <__ieee754_pow+0x1de>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4610      	mov	r0, r2
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	f7f6 fa2c 	bl	8000288 <__aeabi_dsub>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	e78f      	b.n	8009d56 <__ieee754_pow+0xfe>
 8009e36:	9b04      	ldr	r3, [sp, #16]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	f47f af2c 	bne.w	8009c96 <__ieee754_pow+0x3e>
 8009e3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e42:	4619      	mov	r1, r3
 8009e44:	e727      	b.n	8009c96 <__ieee754_pow+0x3e>
 8009e46:	0feb      	lsrs	r3, r5, #31
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	9306      	str	r3, [sp, #24]
 8009e4c:	9a06      	ldr	r2, [sp, #24]
 8009e4e:	9b04      	ldr	r3, [sp, #16]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	d102      	bne.n	8009e5a <__ieee754_pow+0x202>
 8009e54:	4632      	mov	r2, r6
 8009e56:	463b      	mov	r3, r7
 8009e58:	e7e6      	b.n	8009e28 <__ieee754_pow+0x1d0>
 8009e5a:	4b19      	ldr	r3, [pc, #100]	; (8009ec0 <__ieee754_pow+0x268>)
 8009e5c:	4598      	cmp	r8, r3
 8009e5e:	f340 80fb 	ble.w	800a058 <__ieee754_pow+0x400>
 8009e62:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009e66:	4598      	cmp	r8, r3
 8009e68:	4b13      	ldr	r3, [pc, #76]	; (8009eb8 <__ieee754_pow+0x260>)
 8009e6a:	dd0c      	ble.n	8009e86 <__ieee754_pow+0x22e>
 8009e6c:	429c      	cmp	r4, r3
 8009e6e:	dc0f      	bgt.n	8009e90 <__ieee754_pow+0x238>
 8009e70:	f1b9 0f00 	cmp.w	r9, #0
 8009e74:	da0f      	bge.n	8009e96 <__ieee754_pow+0x23e>
 8009e76:	2000      	movs	r0, #0
 8009e78:	b009      	add	sp, #36	; 0x24
 8009e7a:	ecbd 8b06 	vpop	{d8-d10}
 8009e7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e82:	f000 bcf0 	b.w	800a866 <__math_oflow>
 8009e86:	429c      	cmp	r4, r3
 8009e88:	dbf2      	blt.n	8009e70 <__ieee754_pow+0x218>
 8009e8a:	4b0a      	ldr	r3, [pc, #40]	; (8009eb4 <__ieee754_pow+0x25c>)
 8009e8c:	429c      	cmp	r4, r3
 8009e8e:	dd19      	ble.n	8009ec4 <__ieee754_pow+0x26c>
 8009e90:	f1b9 0f00 	cmp.w	r9, #0
 8009e94:	dcef      	bgt.n	8009e76 <__ieee754_pow+0x21e>
 8009e96:	2000      	movs	r0, #0
 8009e98:	b009      	add	sp, #36	; 0x24
 8009e9a:	ecbd 8b06 	vpop	{d8-d10}
 8009e9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea2:	f000 bcd7 	b.w	800a854 <__math_uflow>
 8009ea6:	bf00      	nop
 8009ea8:	fff00000 	.word	0xfff00000
 8009eac:	7ff00000 	.word	0x7ff00000
 8009eb0:	433fffff 	.word	0x433fffff
 8009eb4:	3ff00000 	.word	0x3ff00000
 8009eb8:	3fefffff 	.word	0x3fefffff
 8009ebc:	3fe00000 	.word	0x3fe00000
 8009ec0:	41e00000 	.word	0x41e00000
 8009ec4:	4b60      	ldr	r3, [pc, #384]	; (800a048 <__ieee754_pow+0x3f0>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f7f6 f9de 	bl	8000288 <__aeabi_dsub>
 8009ecc:	a354      	add	r3, pc, #336	; (adr r3, 800a020 <__ieee754_pow+0x3c8>)
 8009ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	460d      	mov	r5, r1
 8009ed6:	f7f6 fb8f 	bl	80005f8 <__aeabi_dmul>
 8009eda:	a353      	add	r3, pc, #332	; (adr r3, 800a028 <__ieee754_pow+0x3d0>)
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	4606      	mov	r6, r0
 8009ee2:	460f      	mov	r7, r1
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	f7f6 fb86 	bl	80005f8 <__aeabi_dmul>
 8009eec:	4b57      	ldr	r3, [pc, #348]	; (800a04c <__ieee754_pow+0x3f4>)
 8009eee:	4682      	mov	sl, r0
 8009ef0:	468b      	mov	fp, r1
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	f7f6 fb7e 	bl	80005f8 <__aeabi_dmul>
 8009efc:	4602      	mov	r2, r0
 8009efe:	460b      	mov	r3, r1
 8009f00:	a14b      	add	r1, pc, #300	; (adr r1, 800a030 <__ieee754_pow+0x3d8>)
 8009f02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f06:	f7f6 f9bf 	bl	8000288 <__aeabi_dsub>
 8009f0a:	4622      	mov	r2, r4
 8009f0c:	462b      	mov	r3, r5
 8009f0e:	f7f6 fb73 	bl	80005f8 <__aeabi_dmul>
 8009f12:	4602      	mov	r2, r0
 8009f14:	460b      	mov	r3, r1
 8009f16:	2000      	movs	r0, #0
 8009f18:	494d      	ldr	r1, [pc, #308]	; (800a050 <__ieee754_pow+0x3f8>)
 8009f1a:	f7f6 f9b5 	bl	8000288 <__aeabi_dsub>
 8009f1e:	4622      	mov	r2, r4
 8009f20:	4680      	mov	r8, r0
 8009f22:	4689      	mov	r9, r1
 8009f24:	462b      	mov	r3, r5
 8009f26:	4620      	mov	r0, r4
 8009f28:	4629      	mov	r1, r5
 8009f2a:	f7f6 fb65 	bl	80005f8 <__aeabi_dmul>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	460b      	mov	r3, r1
 8009f32:	4640      	mov	r0, r8
 8009f34:	4649      	mov	r1, r9
 8009f36:	f7f6 fb5f 	bl	80005f8 <__aeabi_dmul>
 8009f3a:	a33f      	add	r3, pc, #252	; (adr r3, 800a038 <__ieee754_pow+0x3e0>)
 8009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f40:	f7f6 fb5a 	bl	80005f8 <__aeabi_dmul>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	4650      	mov	r0, sl
 8009f4a:	4659      	mov	r1, fp
 8009f4c:	f7f6 f99c 	bl	8000288 <__aeabi_dsub>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4680      	mov	r8, r0
 8009f56:	4689      	mov	r9, r1
 8009f58:	4630      	mov	r0, r6
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	f7f6 f996 	bl	800028c <__adddf3>
 8009f60:	2000      	movs	r0, #0
 8009f62:	4632      	mov	r2, r6
 8009f64:	463b      	mov	r3, r7
 8009f66:	4604      	mov	r4, r0
 8009f68:	460d      	mov	r5, r1
 8009f6a:	f7f6 f98d 	bl	8000288 <__aeabi_dsub>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	4640      	mov	r0, r8
 8009f74:	4649      	mov	r1, r9
 8009f76:	f7f6 f987 	bl	8000288 <__aeabi_dsub>
 8009f7a:	9b04      	ldr	r3, [sp, #16]
 8009f7c:	9a06      	ldr	r2, [sp, #24]
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	4313      	orrs	r3, r2
 8009f82:	4682      	mov	sl, r0
 8009f84:	468b      	mov	fp, r1
 8009f86:	f040 81e7 	bne.w	800a358 <__ieee754_pow+0x700>
 8009f8a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a040 <__ieee754_pow+0x3e8>
 8009f8e:	eeb0 8a47 	vmov.f32	s16, s14
 8009f92:	eef0 8a67 	vmov.f32	s17, s15
 8009f96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009f9a:	2600      	movs	r6, #0
 8009f9c:	4632      	mov	r2, r6
 8009f9e:	463b      	mov	r3, r7
 8009fa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fa4:	f7f6 f970 	bl	8000288 <__aeabi_dsub>
 8009fa8:	4622      	mov	r2, r4
 8009faa:	462b      	mov	r3, r5
 8009fac:	f7f6 fb24 	bl	80005f8 <__aeabi_dmul>
 8009fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fb4:	4680      	mov	r8, r0
 8009fb6:	4689      	mov	r9, r1
 8009fb8:	4650      	mov	r0, sl
 8009fba:	4659      	mov	r1, fp
 8009fbc:	f7f6 fb1c 	bl	80005f8 <__aeabi_dmul>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4640      	mov	r0, r8
 8009fc6:	4649      	mov	r1, r9
 8009fc8:	f7f6 f960 	bl	800028c <__adddf3>
 8009fcc:	4632      	mov	r2, r6
 8009fce:	463b      	mov	r3, r7
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	4689      	mov	r9, r1
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	f7f6 fb0e 	bl	80005f8 <__aeabi_dmul>
 8009fdc:	460b      	mov	r3, r1
 8009fde:	4604      	mov	r4, r0
 8009fe0:	460d      	mov	r5, r1
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	4649      	mov	r1, r9
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	f7f6 f950 	bl	800028c <__adddf3>
 8009fec:	4b19      	ldr	r3, [pc, #100]	; (800a054 <__ieee754_pow+0x3fc>)
 8009fee:	4299      	cmp	r1, r3
 8009ff0:	ec45 4b19 	vmov	d9, r4, r5
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	460f      	mov	r7, r1
 8009ff8:	468b      	mov	fp, r1
 8009ffa:	f340 82f1 	ble.w	800a5e0 <__ieee754_pow+0x988>
 8009ffe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a002:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a006:	4303      	orrs	r3, r0
 800a008:	f000 81e4 	beq.w	800a3d4 <__ieee754_pow+0x77c>
 800a00c:	ec51 0b18 	vmov	r0, r1, d8
 800a010:	2200      	movs	r2, #0
 800a012:	2300      	movs	r3, #0
 800a014:	f7f6 fd62 	bl	8000adc <__aeabi_dcmplt>
 800a018:	3800      	subs	r0, #0
 800a01a:	bf18      	it	ne
 800a01c:	2001      	movne	r0, #1
 800a01e:	e72b      	b.n	8009e78 <__ieee754_pow+0x220>
 800a020:	60000000 	.word	0x60000000
 800a024:	3ff71547 	.word	0x3ff71547
 800a028:	f85ddf44 	.word	0xf85ddf44
 800a02c:	3e54ae0b 	.word	0x3e54ae0b
 800a030:	55555555 	.word	0x55555555
 800a034:	3fd55555 	.word	0x3fd55555
 800a038:	652b82fe 	.word	0x652b82fe
 800a03c:	3ff71547 	.word	0x3ff71547
 800a040:	00000000 	.word	0x00000000
 800a044:	bff00000 	.word	0xbff00000
 800a048:	3ff00000 	.word	0x3ff00000
 800a04c:	3fd00000 	.word	0x3fd00000
 800a050:	3fe00000 	.word	0x3fe00000
 800a054:	408fffff 	.word	0x408fffff
 800a058:	4bd5      	ldr	r3, [pc, #852]	; (800a3b0 <__ieee754_pow+0x758>)
 800a05a:	402b      	ands	r3, r5
 800a05c:	2200      	movs	r2, #0
 800a05e:	b92b      	cbnz	r3, 800a06c <__ieee754_pow+0x414>
 800a060:	4bd4      	ldr	r3, [pc, #848]	; (800a3b4 <__ieee754_pow+0x75c>)
 800a062:	f7f6 fac9 	bl	80005f8 <__aeabi_dmul>
 800a066:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a06a:	460c      	mov	r4, r1
 800a06c:	1523      	asrs	r3, r4, #20
 800a06e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a072:	4413      	add	r3, r2
 800a074:	9305      	str	r3, [sp, #20]
 800a076:	4bd0      	ldr	r3, [pc, #832]	; (800a3b8 <__ieee754_pow+0x760>)
 800a078:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a07c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a080:	429c      	cmp	r4, r3
 800a082:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a086:	dd08      	ble.n	800a09a <__ieee754_pow+0x442>
 800a088:	4bcc      	ldr	r3, [pc, #816]	; (800a3bc <__ieee754_pow+0x764>)
 800a08a:	429c      	cmp	r4, r3
 800a08c:	f340 8162 	ble.w	800a354 <__ieee754_pow+0x6fc>
 800a090:	9b05      	ldr	r3, [sp, #20]
 800a092:	3301      	adds	r3, #1
 800a094:	9305      	str	r3, [sp, #20]
 800a096:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a09a:	2400      	movs	r4, #0
 800a09c:	00e3      	lsls	r3, r4, #3
 800a09e:	9307      	str	r3, [sp, #28]
 800a0a0:	4bc7      	ldr	r3, [pc, #796]	; (800a3c0 <__ieee754_pow+0x768>)
 800a0a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0a6:	ed93 7b00 	vldr	d7, [r3]
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	ec53 2b17 	vmov	r2, r3, d7
 800a0b0:	eeb0 9a47 	vmov.f32	s18, s14
 800a0b4:	eef0 9a67 	vmov.f32	s19, s15
 800a0b8:	4682      	mov	sl, r0
 800a0ba:	f7f6 f8e5 	bl	8000288 <__aeabi_dsub>
 800a0be:	4652      	mov	r2, sl
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	460f      	mov	r7, r1
 800a0c4:	462b      	mov	r3, r5
 800a0c6:	ec51 0b19 	vmov	r0, r1, d9
 800a0ca:	f7f6 f8df 	bl	800028c <__adddf3>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	49bb      	ldr	r1, [pc, #748]	; (800a3c4 <__ieee754_pow+0x76c>)
 800a0d6:	f7f6 fbb9 	bl	800084c <__aeabi_ddiv>
 800a0da:	ec41 0b1a 	vmov	d10, r0, r1
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	4639      	mov	r1, r7
 800a0e6:	f7f6 fa87 	bl	80005f8 <__aeabi_dmul>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0f0:	9302      	str	r3, [sp, #8]
 800a0f2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a0f6:	46ab      	mov	fp, r5
 800a0f8:	106d      	asrs	r5, r5, #1
 800a0fa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a0fe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a102:	ec41 0b18 	vmov	d8, r0, r1
 800a106:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a10a:	2200      	movs	r2, #0
 800a10c:	4640      	mov	r0, r8
 800a10e:	4649      	mov	r1, r9
 800a110:	4614      	mov	r4, r2
 800a112:	461d      	mov	r5, r3
 800a114:	f7f6 fa70 	bl	80005f8 <__aeabi_dmul>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4630      	mov	r0, r6
 800a11e:	4639      	mov	r1, r7
 800a120:	f7f6 f8b2 	bl	8000288 <__aeabi_dsub>
 800a124:	ec53 2b19 	vmov	r2, r3, d9
 800a128:	4606      	mov	r6, r0
 800a12a:	460f      	mov	r7, r1
 800a12c:	4620      	mov	r0, r4
 800a12e:	4629      	mov	r1, r5
 800a130:	f7f6 f8aa 	bl	8000288 <__aeabi_dsub>
 800a134:	4602      	mov	r2, r0
 800a136:	460b      	mov	r3, r1
 800a138:	4650      	mov	r0, sl
 800a13a:	4659      	mov	r1, fp
 800a13c:	f7f6 f8a4 	bl	8000288 <__aeabi_dsub>
 800a140:	4642      	mov	r2, r8
 800a142:	464b      	mov	r3, r9
 800a144:	f7f6 fa58 	bl	80005f8 <__aeabi_dmul>
 800a148:	4602      	mov	r2, r0
 800a14a:	460b      	mov	r3, r1
 800a14c:	4630      	mov	r0, r6
 800a14e:	4639      	mov	r1, r7
 800a150:	f7f6 f89a 	bl	8000288 <__aeabi_dsub>
 800a154:	ec53 2b1a 	vmov	r2, r3, d10
 800a158:	f7f6 fa4e 	bl	80005f8 <__aeabi_dmul>
 800a15c:	ec53 2b18 	vmov	r2, r3, d8
 800a160:	ec41 0b19 	vmov	d9, r0, r1
 800a164:	ec51 0b18 	vmov	r0, r1, d8
 800a168:	f7f6 fa46 	bl	80005f8 <__aeabi_dmul>
 800a16c:	a37c      	add	r3, pc, #496	; (adr r3, 800a360 <__ieee754_pow+0x708>)
 800a16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a172:	4604      	mov	r4, r0
 800a174:	460d      	mov	r5, r1
 800a176:	f7f6 fa3f 	bl	80005f8 <__aeabi_dmul>
 800a17a:	a37b      	add	r3, pc, #492	; (adr r3, 800a368 <__ieee754_pow+0x710>)
 800a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a180:	f7f6 f884 	bl	800028c <__adddf3>
 800a184:	4622      	mov	r2, r4
 800a186:	462b      	mov	r3, r5
 800a188:	f7f6 fa36 	bl	80005f8 <__aeabi_dmul>
 800a18c:	a378      	add	r3, pc, #480	; (adr r3, 800a370 <__ieee754_pow+0x718>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	f7f6 f87b 	bl	800028c <__adddf3>
 800a196:	4622      	mov	r2, r4
 800a198:	462b      	mov	r3, r5
 800a19a:	f7f6 fa2d 	bl	80005f8 <__aeabi_dmul>
 800a19e:	a376      	add	r3, pc, #472	; (adr r3, 800a378 <__ieee754_pow+0x720>)
 800a1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a4:	f7f6 f872 	bl	800028c <__adddf3>
 800a1a8:	4622      	mov	r2, r4
 800a1aa:	462b      	mov	r3, r5
 800a1ac:	f7f6 fa24 	bl	80005f8 <__aeabi_dmul>
 800a1b0:	a373      	add	r3, pc, #460	; (adr r3, 800a380 <__ieee754_pow+0x728>)
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	f7f6 f869 	bl	800028c <__adddf3>
 800a1ba:	4622      	mov	r2, r4
 800a1bc:	462b      	mov	r3, r5
 800a1be:	f7f6 fa1b 	bl	80005f8 <__aeabi_dmul>
 800a1c2:	a371      	add	r3, pc, #452	; (adr r3, 800a388 <__ieee754_pow+0x730>)
 800a1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c8:	f7f6 f860 	bl	800028c <__adddf3>
 800a1cc:	4622      	mov	r2, r4
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	460f      	mov	r7, r1
 800a1d2:	462b      	mov	r3, r5
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	f7f6 fa0e 	bl	80005f8 <__aeabi_dmul>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	f7f6 fa08 	bl	80005f8 <__aeabi_dmul>
 800a1e8:	4642      	mov	r2, r8
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	460d      	mov	r5, r1
 800a1ee:	464b      	mov	r3, r9
 800a1f0:	ec51 0b18 	vmov	r0, r1, d8
 800a1f4:	f7f6 f84a 	bl	800028c <__adddf3>
 800a1f8:	ec53 2b19 	vmov	r2, r3, d9
 800a1fc:	f7f6 f9fc 	bl	80005f8 <__aeabi_dmul>
 800a200:	4622      	mov	r2, r4
 800a202:	462b      	mov	r3, r5
 800a204:	f7f6 f842 	bl	800028c <__adddf3>
 800a208:	4642      	mov	r2, r8
 800a20a:	4682      	mov	sl, r0
 800a20c:	468b      	mov	fp, r1
 800a20e:	464b      	mov	r3, r9
 800a210:	4640      	mov	r0, r8
 800a212:	4649      	mov	r1, r9
 800a214:	f7f6 f9f0 	bl	80005f8 <__aeabi_dmul>
 800a218:	4b6b      	ldr	r3, [pc, #428]	; (800a3c8 <__ieee754_pow+0x770>)
 800a21a:	2200      	movs	r2, #0
 800a21c:	4606      	mov	r6, r0
 800a21e:	460f      	mov	r7, r1
 800a220:	f7f6 f834 	bl	800028c <__adddf3>
 800a224:	4652      	mov	r2, sl
 800a226:	465b      	mov	r3, fp
 800a228:	f7f6 f830 	bl	800028c <__adddf3>
 800a22c:	2000      	movs	r0, #0
 800a22e:	4604      	mov	r4, r0
 800a230:	460d      	mov	r5, r1
 800a232:	4602      	mov	r2, r0
 800a234:	460b      	mov	r3, r1
 800a236:	4640      	mov	r0, r8
 800a238:	4649      	mov	r1, r9
 800a23a:	f7f6 f9dd 	bl	80005f8 <__aeabi_dmul>
 800a23e:	4b62      	ldr	r3, [pc, #392]	; (800a3c8 <__ieee754_pow+0x770>)
 800a240:	4680      	mov	r8, r0
 800a242:	4689      	mov	r9, r1
 800a244:	2200      	movs	r2, #0
 800a246:	4620      	mov	r0, r4
 800a248:	4629      	mov	r1, r5
 800a24a:	f7f6 f81d 	bl	8000288 <__aeabi_dsub>
 800a24e:	4632      	mov	r2, r6
 800a250:	463b      	mov	r3, r7
 800a252:	f7f6 f819 	bl	8000288 <__aeabi_dsub>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	4650      	mov	r0, sl
 800a25c:	4659      	mov	r1, fp
 800a25e:	f7f6 f813 	bl	8000288 <__aeabi_dsub>
 800a262:	ec53 2b18 	vmov	r2, r3, d8
 800a266:	f7f6 f9c7 	bl	80005f8 <__aeabi_dmul>
 800a26a:	4622      	mov	r2, r4
 800a26c:	4606      	mov	r6, r0
 800a26e:	460f      	mov	r7, r1
 800a270:	462b      	mov	r3, r5
 800a272:	ec51 0b19 	vmov	r0, r1, d9
 800a276:	f7f6 f9bf 	bl	80005f8 <__aeabi_dmul>
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	4630      	mov	r0, r6
 800a280:	4639      	mov	r1, r7
 800a282:	f7f6 f803 	bl	800028c <__adddf3>
 800a286:	4606      	mov	r6, r0
 800a288:	460f      	mov	r7, r1
 800a28a:	4602      	mov	r2, r0
 800a28c:	460b      	mov	r3, r1
 800a28e:	4640      	mov	r0, r8
 800a290:	4649      	mov	r1, r9
 800a292:	f7f5 fffb 	bl	800028c <__adddf3>
 800a296:	a33e      	add	r3, pc, #248	; (adr r3, 800a390 <__ieee754_pow+0x738>)
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	2000      	movs	r0, #0
 800a29e:	4604      	mov	r4, r0
 800a2a0:	460d      	mov	r5, r1
 800a2a2:	f7f6 f9a9 	bl	80005f8 <__aeabi_dmul>
 800a2a6:	4642      	mov	r2, r8
 800a2a8:	ec41 0b18 	vmov	d8, r0, r1
 800a2ac:	464b      	mov	r3, r9
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	f7f5 ffe9 	bl	8000288 <__aeabi_dsub>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	4639      	mov	r1, r7
 800a2be:	f7f5 ffe3 	bl	8000288 <__aeabi_dsub>
 800a2c2:	a335      	add	r3, pc, #212	; (adr r3, 800a398 <__ieee754_pow+0x740>)
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	f7f6 f996 	bl	80005f8 <__aeabi_dmul>
 800a2cc:	a334      	add	r3, pc, #208	; (adr r3, 800a3a0 <__ieee754_pow+0x748>)
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	460f      	mov	r7, r1
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	4629      	mov	r1, r5
 800a2da:	f7f6 f98d 	bl	80005f8 <__aeabi_dmul>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	4639      	mov	r1, r7
 800a2e6:	f7f5 ffd1 	bl	800028c <__adddf3>
 800a2ea:	9a07      	ldr	r2, [sp, #28]
 800a2ec:	4b37      	ldr	r3, [pc, #220]	; (800a3cc <__ieee754_pow+0x774>)
 800a2ee:	4413      	add	r3, r2
 800a2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f4:	f7f5 ffca 	bl	800028c <__adddf3>
 800a2f8:	4682      	mov	sl, r0
 800a2fa:	9805      	ldr	r0, [sp, #20]
 800a2fc:	468b      	mov	fp, r1
 800a2fe:	f7f6 f911 	bl	8000524 <__aeabi_i2d>
 800a302:	9a07      	ldr	r2, [sp, #28]
 800a304:	4b32      	ldr	r3, [pc, #200]	; (800a3d0 <__ieee754_pow+0x778>)
 800a306:	4413      	add	r3, r2
 800a308:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a30c:	4606      	mov	r6, r0
 800a30e:	460f      	mov	r7, r1
 800a310:	4652      	mov	r2, sl
 800a312:	465b      	mov	r3, fp
 800a314:	ec51 0b18 	vmov	r0, r1, d8
 800a318:	f7f5 ffb8 	bl	800028c <__adddf3>
 800a31c:	4642      	mov	r2, r8
 800a31e:	464b      	mov	r3, r9
 800a320:	f7f5 ffb4 	bl	800028c <__adddf3>
 800a324:	4632      	mov	r2, r6
 800a326:	463b      	mov	r3, r7
 800a328:	f7f5 ffb0 	bl	800028c <__adddf3>
 800a32c:	2000      	movs	r0, #0
 800a32e:	4632      	mov	r2, r6
 800a330:	463b      	mov	r3, r7
 800a332:	4604      	mov	r4, r0
 800a334:	460d      	mov	r5, r1
 800a336:	f7f5 ffa7 	bl	8000288 <__aeabi_dsub>
 800a33a:	4642      	mov	r2, r8
 800a33c:	464b      	mov	r3, r9
 800a33e:	f7f5 ffa3 	bl	8000288 <__aeabi_dsub>
 800a342:	ec53 2b18 	vmov	r2, r3, d8
 800a346:	f7f5 ff9f 	bl	8000288 <__aeabi_dsub>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	4650      	mov	r0, sl
 800a350:	4659      	mov	r1, fp
 800a352:	e610      	b.n	8009f76 <__ieee754_pow+0x31e>
 800a354:	2401      	movs	r4, #1
 800a356:	e6a1      	b.n	800a09c <__ieee754_pow+0x444>
 800a358:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a3a8 <__ieee754_pow+0x750>
 800a35c:	e617      	b.n	8009f8e <__ieee754_pow+0x336>
 800a35e:	bf00      	nop
 800a360:	4a454eef 	.word	0x4a454eef
 800a364:	3fca7e28 	.word	0x3fca7e28
 800a368:	93c9db65 	.word	0x93c9db65
 800a36c:	3fcd864a 	.word	0x3fcd864a
 800a370:	a91d4101 	.word	0xa91d4101
 800a374:	3fd17460 	.word	0x3fd17460
 800a378:	518f264d 	.word	0x518f264d
 800a37c:	3fd55555 	.word	0x3fd55555
 800a380:	db6fabff 	.word	0xdb6fabff
 800a384:	3fdb6db6 	.word	0x3fdb6db6
 800a388:	33333303 	.word	0x33333303
 800a38c:	3fe33333 	.word	0x3fe33333
 800a390:	e0000000 	.word	0xe0000000
 800a394:	3feec709 	.word	0x3feec709
 800a398:	dc3a03fd 	.word	0xdc3a03fd
 800a39c:	3feec709 	.word	0x3feec709
 800a3a0:	145b01f5 	.word	0x145b01f5
 800a3a4:	be3e2fe0 	.word	0xbe3e2fe0
 800a3a8:	00000000 	.word	0x00000000
 800a3ac:	3ff00000 	.word	0x3ff00000
 800a3b0:	7ff00000 	.word	0x7ff00000
 800a3b4:	43400000 	.word	0x43400000
 800a3b8:	0003988e 	.word	0x0003988e
 800a3bc:	000bb679 	.word	0x000bb679
 800a3c0:	0800ae20 	.word	0x0800ae20
 800a3c4:	3ff00000 	.word	0x3ff00000
 800a3c8:	40080000 	.word	0x40080000
 800a3cc:	0800ae40 	.word	0x0800ae40
 800a3d0:	0800ae30 	.word	0x0800ae30
 800a3d4:	a3b5      	add	r3, pc, #724	; (adr r3, 800a6ac <__ieee754_pow+0xa54>)
 800a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3da:	4640      	mov	r0, r8
 800a3dc:	4649      	mov	r1, r9
 800a3de:	f7f5 ff55 	bl	800028c <__adddf3>
 800a3e2:	4622      	mov	r2, r4
 800a3e4:	ec41 0b1a 	vmov	d10, r0, r1
 800a3e8:	462b      	mov	r3, r5
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	4639      	mov	r1, r7
 800a3ee:	f7f5 ff4b 	bl	8000288 <__aeabi_dsub>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	ec51 0b1a 	vmov	r0, r1, d10
 800a3fa:	f7f6 fb8d 	bl	8000b18 <__aeabi_dcmpgt>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	f47f ae04 	bne.w	800a00c <__ieee754_pow+0x3b4>
 800a404:	4aa4      	ldr	r2, [pc, #656]	; (800a698 <__ieee754_pow+0xa40>)
 800a406:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a40a:	4293      	cmp	r3, r2
 800a40c:	f340 8108 	ble.w	800a620 <__ieee754_pow+0x9c8>
 800a410:	151b      	asrs	r3, r3, #20
 800a412:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a416:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a41a:	fa4a f303 	asr.w	r3, sl, r3
 800a41e:	445b      	add	r3, fp
 800a420:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a424:	4e9d      	ldr	r6, [pc, #628]	; (800a69c <__ieee754_pow+0xa44>)
 800a426:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a42a:	4116      	asrs	r6, r2
 800a42c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a430:	2000      	movs	r0, #0
 800a432:	ea23 0106 	bic.w	r1, r3, r6
 800a436:	f1c2 0214 	rsb	r2, r2, #20
 800a43a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a43e:	fa4a fa02 	asr.w	sl, sl, r2
 800a442:	f1bb 0f00 	cmp.w	fp, #0
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4620      	mov	r0, r4
 800a44c:	4629      	mov	r1, r5
 800a44e:	bfb8      	it	lt
 800a450:	f1ca 0a00 	rsblt	sl, sl, #0
 800a454:	f7f5 ff18 	bl	8000288 <__aeabi_dsub>
 800a458:	ec41 0b19 	vmov	d9, r0, r1
 800a45c:	4642      	mov	r2, r8
 800a45e:	464b      	mov	r3, r9
 800a460:	ec51 0b19 	vmov	r0, r1, d9
 800a464:	f7f5 ff12 	bl	800028c <__adddf3>
 800a468:	a37b      	add	r3, pc, #492	; (adr r3, 800a658 <__ieee754_pow+0xa00>)
 800a46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46e:	2000      	movs	r0, #0
 800a470:	4604      	mov	r4, r0
 800a472:	460d      	mov	r5, r1
 800a474:	f7f6 f8c0 	bl	80005f8 <__aeabi_dmul>
 800a478:	ec53 2b19 	vmov	r2, r3, d9
 800a47c:	4606      	mov	r6, r0
 800a47e:	460f      	mov	r7, r1
 800a480:	4620      	mov	r0, r4
 800a482:	4629      	mov	r1, r5
 800a484:	f7f5 ff00 	bl	8000288 <__aeabi_dsub>
 800a488:	4602      	mov	r2, r0
 800a48a:	460b      	mov	r3, r1
 800a48c:	4640      	mov	r0, r8
 800a48e:	4649      	mov	r1, r9
 800a490:	f7f5 fefa 	bl	8000288 <__aeabi_dsub>
 800a494:	a372      	add	r3, pc, #456	; (adr r3, 800a660 <__ieee754_pow+0xa08>)
 800a496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49a:	f7f6 f8ad 	bl	80005f8 <__aeabi_dmul>
 800a49e:	a372      	add	r3, pc, #456	; (adr r3, 800a668 <__ieee754_pow+0xa10>)
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	4680      	mov	r8, r0
 800a4a6:	4689      	mov	r9, r1
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	f7f6 f8a4 	bl	80005f8 <__aeabi_dmul>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4640      	mov	r0, r8
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	f7f5 fee8 	bl	800028c <__adddf3>
 800a4bc:	4604      	mov	r4, r0
 800a4be:	460d      	mov	r5, r1
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	f7f5 fee0 	bl	800028c <__adddf3>
 800a4cc:	4632      	mov	r2, r6
 800a4ce:	463b      	mov	r3, r7
 800a4d0:	4680      	mov	r8, r0
 800a4d2:	4689      	mov	r9, r1
 800a4d4:	f7f5 fed8 	bl	8000288 <__aeabi_dsub>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4620      	mov	r0, r4
 800a4de:	4629      	mov	r1, r5
 800a4e0:	f7f5 fed2 	bl	8000288 <__aeabi_dsub>
 800a4e4:	4642      	mov	r2, r8
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	460f      	mov	r7, r1
 800a4ea:	464b      	mov	r3, r9
 800a4ec:	4640      	mov	r0, r8
 800a4ee:	4649      	mov	r1, r9
 800a4f0:	f7f6 f882 	bl	80005f8 <__aeabi_dmul>
 800a4f4:	a35e      	add	r3, pc, #376	; (adr r3, 800a670 <__ieee754_pow+0xa18>)
 800a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	460d      	mov	r5, r1
 800a4fe:	f7f6 f87b 	bl	80005f8 <__aeabi_dmul>
 800a502:	a35d      	add	r3, pc, #372	; (adr r3, 800a678 <__ieee754_pow+0xa20>)
 800a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a508:	f7f5 febe 	bl	8000288 <__aeabi_dsub>
 800a50c:	4622      	mov	r2, r4
 800a50e:	462b      	mov	r3, r5
 800a510:	f7f6 f872 	bl	80005f8 <__aeabi_dmul>
 800a514:	a35a      	add	r3, pc, #360	; (adr r3, 800a680 <__ieee754_pow+0xa28>)
 800a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51a:	f7f5 feb7 	bl	800028c <__adddf3>
 800a51e:	4622      	mov	r2, r4
 800a520:	462b      	mov	r3, r5
 800a522:	f7f6 f869 	bl	80005f8 <__aeabi_dmul>
 800a526:	a358      	add	r3, pc, #352	; (adr r3, 800a688 <__ieee754_pow+0xa30>)
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	f7f5 feac 	bl	8000288 <__aeabi_dsub>
 800a530:	4622      	mov	r2, r4
 800a532:	462b      	mov	r3, r5
 800a534:	f7f6 f860 	bl	80005f8 <__aeabi_dmul>
 800a538:	a355      	add	r3, pc, #340	; (adr r3, 800a690 <__ieee754_pow+0xa38>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	f7f5 fea5 	bl	800028c <__adddf3>
 800a542:	4622      	mov	r2, r4
 800a544:	462b      	mov	r3, r5
 800a546:	f7f6 f857 	bl	80005f8 <__aeabi_dmul>
 800a54a:	4602      	mov	r2, r0
 800a54c:	460b      	mov	r3, r1
 800a54e:	4640      	mov	r0, r8
 800a550:	4649      	mov	r1, r9
 800a552:	f7f5 fe99 	bl	8000288 <__aeabi_dsub>
 800a556:	4604      	mov	r4, r0
 800a558:	460d      	mov	r5, r1
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	4640      	mov	r0, r8
 800a560:	4649      	mov	r1, r9
 800a562:	f7f6 f849 	bl	80005f8 <__aeabi_dmul>
 800a566:	2200      	movs	r2, #0
 800a568:	ec41 0b19 	vmov	d9, r0, r1
 800a56c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a570:	4620      	mov	r0, r4
 800a572:	4629      	mov	r1, r5
 800a574:	f7f5 fe88 	bl	8000288 <__aeabi_dsub>
 800a578:	4602      	mov	r2, r0
 800a57a:	460b      	mov	r3, r1
 800a57c:	ec51 0b19 	vmov	r0, r1, d9
 800a580:	f7f6 f964 	bl	800084c <__aeabi_ddiv>
 800a584:	4632      	mov	r2, r6
 800a586:	4604      	mov	r4, r0
 800a588:	460d      	mov	r5, r1
 800a58a:	463b      	mov	r3, r7
 800a58c:	4640      	mov	r0, r8
 800a58e:	4649      	mov	r1, r9
 800a590:	f7f6 f832 	bl	80005f8 <__aeabi_dmul>
 800a594:	4632      	mov	r2, r6
 800a596:	463b      	mov	r3, r7
 800a598:	f7f5 fe78 	bl	800028c <__adddf3>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	f7f5 fe70 	bl	8000288 <__aeabi_dsub>
 800a5a8:	4642      	mov	r2, r8
 800a5aa:	464b      	mov	r3, r9
 800a5ac:	f7f5 fe6c 	bl	8000288 <__aeabi_dsub>
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	493a      	ldr	r1, [pc, #232]	; (800a6a0 <__ieee754_pow+0xa48>)
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	f7f5 fe66 	bl	8000288 <__aeabi_dsub>
 800a5bc:	ec41 0b10 	vmov	d0, r0, r1
 800a5c0:	ee10 3a90 	vmov	r3, s1
 800a5c4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a5c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5cc:	da2b      	bge.n	800a626 <__ieee754_pow+0x9ce>
 800a5ce:	4650      	mov	r0, sl
 800a5d0:	f000 f95e 	bl	800a890 <scalbn>
 800a5d4:	ec51 0b10 	vmov	r0, r1, d0
 800a5d8:	ec53 2b18 	vmov	r2, r3, d8
 800a5dc:	f7ff bbed 	b.w	8009dba <__ieee754_pow+0x162>
 800a5e0:	4b30      	ldr	r3, [pc, #192]	; (800a6a4 <__ieee754_pow+0xa4c>)
 800a5e2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a5e6:	429e      	cmp	r6, r3
 800a5e8:	f77f af0c 	ble.w	800a404 <__ieee754_pow+0x7ac>
 800a5ec:	4b2e      	ldr	r3, [pc, #184]	; (800a6a8 <__ieee754_pow+0xa50>)
 800a5ee:	440b      	add	r3, r1
 800a5f0:	4303      	orrs	r3, r0
 800a5f2:	d009      	beq.n	800a608 <__ieee754_pow+0x9b0>
 800a5f4:	ec51 0b18 	vmov	r0, r1, d8
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f7f6 fa6e 	bl	8000adc <__aeabi_dcmplt>
 800a600:	3800      	subs	r0, #0
 800a602:	bf18      	it	ne
 800a604:	2001      	movne	r0, #1
 800a606:	e447      	b.n	8009e98 <__ieee754_pow+0x240>
 800a608:	4622      	mov	r2, r4
 800a60a:	462b      	mov	r3, r5
 800a60c:	f7f5 fe3c 	bl	8000288 <__aeabi_dsub>
 800a610:	4642      	mov	r2, r8
 800a612:	464b      	mov	r3, r9
 800a614:	f7f6 fa76 	bl	8000b04 <__aeabi_dcmpge>
 800a618:	2800      	cmp	r0, #0
 800a61a:	f43f aef3 	beq.w	800a404 <__ieee754_pow+0x7ac>
 800a61e:	e7e9      	b.n	800a5f4 <__ieee754_pow+0x99c>
 800a620:	f04f 0a00 	mov.w	sl, #0
 800a624:	e71a      	b.n	800a45c <__ieee754_pow+0x804>
 800a626:	ec51 0b10 	vmov	r0, r1, d0
 800a62a:	4619      	mov	r1, r3
 800a62c:	e7d4      	b.n	800a5d8 <__ieee754_pow+0x980>
 800a62e:	491c      	ldr	r1, [pc, #112]	; (800a6a0 <__ieee754_pow+0xa48>)
 800a630:	2000      	movs	r0, #0
 800a632:	f7ff bb30 	b.w	8009c96 <__ieee754_pow+0x3e>
 800a636:	2000      	movs	r0, #0
 800a638:	2100      	movs	r1, #0
 800a63a:	f7ff bb2c 	b.w	8009c96 <__ieee754_pow+0x3e>
 800a63e:	4630      	mov	r0, r6
 800a640:	4639      	mov	r1, r7
 800a642:	f7ff bb28 	b.w	8009c96 <__ieee754_pow+0x3e>
 800a646:	9204      	str	r2, [sp, #16]
 800a648:	f7ff bb7a 	b.w	8009d40 <__ieee754_pow+0xe8>
 800a64c:	2300      	movs	r3, #0
 800a64e:	f7ff bb64 	b.w	8009d1a <__ieee754_pow+0xc2>
 800a652:	bf00      	nop
 800a654:	f3af 8000 	nop.w
 800a658:	00000000 	.word	0x00000000
 800a65c:	3fe62e43 	.word	0x3fe62e43
 800a660:	fefa39ef 	.word	0xfefa39ef
 800a664:	3fe62e42 	.word	0x3fe62e42
 800a668:	0ca86c39 	.word	0x0ca86c39
 800a66c:	be205c61 	.word	0xbe205c61
 800a670:	72bea4d0 	.word	0x72bea4d0
 800a674:	3e663769 	.word	0x3e663769
 800a678:	c5d26bf1 	.word	0xc5d26bf1
 800a67c:	3ebbbd41 	.word	0x3ebbbd41
 800a680:	af25de2c 	.word	0xaf25de2c
 800a684:	3f11566a 	.word	0x3f11566a
 800a688:	16bebd93 	.word	0x16bebd93
 800a68c:	3f66c16c 	.word	0x3f66c16c
 800a690:	5555553e 	.word	0x5555553e
 800a694:	3fc55555 	.word	0x3fc55555
 800a698:	3fe00000 	.word	0x3fe00000
 800a69c:	000fffff 	.word	0x000fffff
 800a6a0:	3ff00000 	.word	0x3ff00000
 800a6a4:	4090cbff 	.word	0x4090cbff
 800a6a8:	3f6f3400 	.word	0x3f6f3400
 800a6ac:	652b82fe 	.word	0x652b82fe
 800a6b0:	3c971547 	.word	0x3c971547

0800a6b4 <__ieee754_sqrt>:
 800a6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b8:	ec55 4b10 	vmov	r4, r5, d0
 800a6bc:	4e55      	ldr	r6, [pc, #340]	; (800a814 <__ieee754_sqrt+0x160>)
 800a6be:	43ae      	bics	r6, r5
 800a6c0:	ee10 0a10 	vmov	r0, s0
 800a6c4:	ee10 3a10 	vmov	r3, s0
 800a6c8:	462a      	mov	r2, r5
 800a6ca:	4629      	mov	r1, r5
 800a6cc:	d110      	bne.n	800a6f0 <__ieee754_sqrt+0x3c>
 800a6ce:	ee10 2a10 	vmov	r2, s0
 800a6d2:	462b      	mov	r3, r5
 800a6d4:	f7f5 ff90 	bl	80005f8 <__aeabi_dmul>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4620      	mov	r0, r4
 800a6de:	4629      	mov	r1, r5
 800a6e0:	f7f5 fdd4 	bl	800028c <__adddf3>
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	ec45 4b10 	vmov	d0, r4, r5
 800a6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f0:	2d00      	cmp	r5, #0
 800a6f2:	dc10      	bgt.n	800a716 <__ieee754_sqrt+0x62>
 800a6f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a6f8:	4330      	orrs	r0, r6
 800a6fa:	d0f5      	beq.n	800a6e8 <__ieee754_sqrt+0x34>
 800a6fc:	b15d      	cbz	r5, 800a716 <__ieee754_sqrt+0x62>
 800a6fe:	ee10 2a10 	vmov	r2, s0
 800a702:	462b      	mov	r3, r5
 800a704:	ee10 0a10 	vmov	r0, s0
 800a708:	f7f5 fdbe 	bl	8000288 <__aeabi_dsub>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	f7f6 f89c 	bl	800084c <__aeabi_ddiv>
 800a714:	e7e6      	b.n	800a6e4 <__ieee754_sqrt+0x30>
 800a716:	1512      	asrs	r2, r2, #20
 800a718:	d074      	beq.n	800a804 <__ieee754_sqrt+0x150>
 800a71a:	07d4      	lsls	r4, r2, #31
 800a71c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a720:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a728:	bf5e      	ittt	pl
 800a72a:	0fda      	lsrpl	r2, r3, #31
 800a72c:	005b      	lslpl	r3, r3, #1
 800a72e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a732:	2400      	movs	r4, #0
 800a734:	0fda      	lsrs	r2, r3, #31
 800a736:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a73a:	107f      	asrs	r7, r7, #1
 800a73c:	005b      	lsls	r3, r3, #1
 800a73e:	2516      	movs	r5, #22
 800a740:	4620      	mov	r0, r4
 800a742:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a746:	1886      	adds	r6, r0, r2
 800a748:	428e      	cmp	r6, r1
 800a74a:	bfde      	ittt	le
 800a74c:	1b89      	suble	r1, r1, r6
 800a74e:	18b0      	addle	r0, r6, r2
 800a750:	18a4      	addle	r4, r4, r2
 800a752:	0049      	lsls	r1, r1, #1
 800a754:	3d01      	subs	r5, #1
 800a756:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a75a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a75e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a762:	d1f0      	bne.n	800a746 <__ieee754_sqrt+0x92>
 800a764:	462a      	mov	r2, r5
 800a766:	f04f 0e20 	mov.w	lr, #32
 800a76a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a76e:	4281      	cmp	r1, r0
 800a770:	eb06 0c05 	add.w	ip, r6, r5
 800a774:	dc02      	bgt.n	800a77c <__ieee754_sqrt+0xc8>
 800a776:	d113      	bne.n	800a7a0 <__ieee754_sqrt+0xec>
 800a778:	459c      	cmp	ip, r3
 800a77a:	d811      	bhi.n	800a7a0 <__ieee754_sqrt+0xec>
 800a77c:	f1bc 0f00 	cmp.w	ip, #0
 800a780:	eb0c 0506 	add.w	r5, ip, r6
 800a784:	da43      	bge.n	800a80e <__ieee754_sqrt+0x15a>
 800a786:	2d00      	cmp	r5, #0
 800a788:	db41      	blt.n	800a80e <__ieee754_sqrt+0x15a>
 800a78a:	f100 0801 	add.w	r8, r0, #1
 800a78e:	1a09      	subs	r1, r1, r0
 800a790:	459c      	cmp	ip, r3
 800a792:	bf88      	it	hi
 800a794:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a798:	eba3 030c 	sub.w	r3, r3, ip
 800a79c:	4432      	add	r2, r6
 800a79e:	4640      	mov	r0, r8
 800a7a0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a7a4:	f1be 0e01 	subs.w	lr, lr, #1
 800a7a8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a7ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a7b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a7b4:	d1db      	bne.n	800a76e <__ieee754_sqrt+0xba>
 800a7b6:	430b      	orrs	r3, r1
 800a7b8:	d006      	beq.n	800a7c8 <__ieee754_sqrt+0x114>
 800a7ba:	1c50      	adds	r0, r2, #1
 800a7bc:	bf13      	iteet	ne
 800a7be:	3201      	addne	r2, #1
 800a7c0:	3401      	addeq	r4, #1
 800a7c2:	4672      	moveq	r2, lr
 800a7c4:	f022 0201 	bicne.w	r2, r2, #1
 800a7c8:	1063      	asrs	r3, r4, #1
 800a7ca:	0852      	lsrs	r2, r2, #1
 800a7cc:	07e1      	lsls	r1, r4, #31
 800a7ce:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a7d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a7d6:	bf48      	it	mi
 800a7d8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a7dc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a7e0:	4614      	mov	r4, r2
 800a7e2:	e781      	b.n	800a6e8 <__ieee754_sqrt+0x34>
 800a7e4:	0ad9      	lsrs	r1, r3, #11
 800a7e6:	3815      	subs	r0, #21
 800a7e8:	055b      	lsls	r3, r3, #21
 800a7ea:	2900      	cmp	r1, #0
 800a7ec:	d0fa      	beq.n	800a7e4 <__ieee754_sqrt+0x130>
 800a7ee:	02cd      	lsls	r5, r1, #11
 800a7f0:	d50a      	bpl.n	800a808 <__ieee754_sqrt+0x154>
 800a7f2:	f1c2 0420 	rsb	r4, r2, #32
 800a7f6:	fa23 f404 	lsr.w	r4, r3, r4
 800a7fa:	1e55      	subs	r5, r2, #1
 800a7fc:	4093      	lsls	r3, r2
 800a7fe:	4321      	orrs	r1, r4
 800a800:	1b42      	subs	r2, r0, r5
 800a802:	e78a      	b.n	800a71a <__ieee754_sqrt+0x66>
 800a804:	4610      	mov	r0, r2
 800a806:	e7f0      	b.n	800a7ea <__ieee754_sqrt+0x136>
 800a808:	0049      	lsls	r1, r1, #1
 800a80a:	3201      	adds	r2, #1
 800a80c:	e7ef      	b.n	800a7ee <__ieee754_sqrt+0x13a>
 800a80e:	4680      	mov	r8, r0
 800a810:	e7bd      	b.n	800a78e <__ieee754_sqrt+0xda>
 800a812:	bf00      	nop
 800a814:	7ff00000 	.word	0x7ff00000

0800a818 <with_errno>:
 800a818:	b570      	push	{r4, r5, r6, lr}
 800a81a:	4604      	mov	r4, r0
 800a81c:	460d      	mov	r5, r1
 800a81e:	4616      	mov	r6, r2
 800a820:	f7fc f8be 	bl	80069a0 <__errno>
 800a824:	4629      	mov	r1, r5
 800a826:	6006      	str	r6, [r0, #0]
 800a828:	4620      	mov	r0, r4
 800a82a:	bd70      	pop	{r4, r5, r6, pc}

0800a82c <xflow>:
 800a82c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a82e:	4614      	mov	r4, r2
 800a830:	461d      	mov	r5, r3
 800a832:	b108      	cbz	r0, 800a838 <xflow+0xc>
 800a834:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a838:	e9cd 2300 	strd	r2, r3, [sp]
 800a83c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a840:	4620      	mov	r0, r4
 800a842:	4629      	mov	r1, r5
 800a844:	f7f5 fed8 	bl	80005f8 <__aeabi_dmul>
 800a848:	2222      	movs	r2, #34	; 0x22
 800a84a:	b003      	add	sp, #12
 800a84c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a850:	f7ff bfe2 	b.w	800a818 <with_errno>

0800a854 <__math_uflow>:
 800a854:	b508      	push	{r3, lr}
 800a856:	2200      	movs	r2, #0
 800a858:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a85c:	f7ff ffe6 	bl	800a82c <xflow>
 800a860:	ec41 0b10 	vmov	d0, r0, r1
 800a864:	bd08      	pop	{r3, pc}

0800a866 <__math_oflow>:
 800a866:	b508      	push	{r3, lr}
 800a868:	2200      	movs	r2, #0
 800a86a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a86e:	f7ff ffdd 	bl	800a82c <xflow>
 800a872:	ec41 0b10 	vmov	d0, r0, r1
 800a876:	bd08      	pop	{r3, pc}

0800a878 <finite>:
 800a878:	b082      	sub	sp, #8
 800a87a:	ed8d 0b00 	vstr	d0, [sp]
 800a87e:	9801      	ldr	r0, [sp, #4]
 800a880:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a884:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a888:	0fc0      	lsrs	r0, r0, #31
 800a88a:	b002      	add	sp, #8
 800a88c:	4770      	bx	lr
	...

0800a890 <scalbn>:
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	ec55 4b10 	vmov	r4, r5, d0
 800a896:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a89a:	4606      	mov	r6, r0
 800a89c:	462b      	mov	r3, r5
 800a89e:	b99a      	cbnz	r2, 800a8c8 <scalbn+0x38>
 800a8a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a8a4:	4323      	orrs	r3, r4
 800a8a6:	d036      	beq.n	800a916 <scalbn+0x86>
 800a8a8:	4b39      	ldr	r3, [pc, #228]	; (800a990 <scalbn+0x100>)
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	ee10 0a10 	vmov	r0, s0
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f7f5 fea1 	bl	80005f8 <__aeabi_dmul>
 800a8b6:	4b37      	ldr	r3, [pc, #220]	; (800a994 <scalbn+0x104>)
 800a8b8:	429e      	cmp	r6, r3
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	460d      	mov	r5, r1
 800a8be:	da10      	bge.n	800a8e2 <scalbn+0x52>
 800a8c0:	a32b      	add	r3, pc, #172	; (adr r3, 800a970 <scalbn+0xe0>)
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	e03a      	b.n	800a93e <scalbn+0xae>
 800a8c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a8cc:	428a      	cmp	r2, r1
 800a8ce:	d10c      	bne.n	800a8ea <scalbn+0x5a>
 800a8d0:	ee10 2a10 	vmov	r2, s0
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	f7f5 fcd8 	bl	800028c <__adddf3>
 800a8dc:	4604      	mov	r4, r0
 800a8de:	460d      	mov	r5, r1
 800a8e0:	e019      	b.n	800a916 <scalbn+0x86>
 800a8e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	3a36      	subs	r2, #54	; 0x36
 800a8ea:	4432      	add	r2, r6
 800a8ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a8f0:	428a      	cmp	r2, r1
 800a8f2:	dd08      	ble.n	800a906 <scalbn+0x76>
 800a8f4:	2d00      	cmp	r5, #0
 800a8f6:	a120      	add	r1, pc, #128	; (adr r1, 800a978 <scalbn+0xe8>)
 800a8f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8fc:	da1c      	bge.n	800a938 <scalbn+0xa8>
 800a8fe:	a120      	add	r1, pc, #128	; (adr r1, 800a980 <scalbn+0xf0>)
 800a900:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a904:	e018      	b.n	800a938 <scalbn+0xa8>
 800a906:	2a00      	cmp	r2, #0
 800a908:	dd08      	ble.n	800a91c <scalbn+0x8c>
 800a90a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a90e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a912:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a916:	ec45 4b10 	vmov	d0, r4, r5
 800a91a:	bd70      	pop	{r4, r5, r6, pc}
 800a91c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a920:	da19      	bge.n	800a956 <scalbn+0xc6>
 800a922:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a926:	429e      	cmp	r6, r3
 800a928:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a92c:	dd0a      	ble.n	800a944 <scalbn+0xb4>
 800a92e:	a112      	add	r1, pc, #72	; (adr r1, 800a978 <scalbn+0xe8>)
 800a930:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1e2      	bne.n	800a8fe <scalbn+0x6e>
 800a938:	a30f      	add	r3, pc, #60	; (adr r3, 800a978 <scalbn+0xe8>)
 800a93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93e:	f7f5 fe5b 	bl	80005f8 <__aeabi_dmul>
 800a942:	e7cb      	b.n	800a8dc <scalbn+0x4c>
 800a944:	a10a      	add	r1, pc, #40	; (adr r1, 800a970 <scalbn+0xe0>)
 800a946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d0b8      	beq.n	800a8c0 <scalbn+0x30>
 800a94e:	a10e      	add	r1, pc, #56	; (adr r1, 800a988 <scalbn+0xf8>)
 800a950:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a954:	e7b4      	b.n	800a8c0 <scalbn+0x30>
 800a956:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a95a:	3236      	adds	r2, #54	; 0x36
 800a95c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a960:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a964:	4620      	mov	r0, r4
 800a966:	4b0c      	ldr	r3, [pc, #48]	; (800a998 <scalbn+0x108>)
 800a968:	2200      	movs	r2, #0
 800a96a:	e7e8      	b.n	800a93e <scalbn+0xae>
 800a96c:	f3af 8000 	nop.w
 800a970:	c2f8f359 	.word	0xc2f8f359
 800a974:	01a56e1f 	.word	0x01a56e1f
 800a978:	8800759c 	.word	0x8800759c
 800a97c:	7e37e43c 	.word	0x7e37e43c
 800a980:	8800759c 	.word	0x8800759c
 800a984:	fe37e43c 	.word	0xfe37e43c
 800a988:	c2f8f359 	.word	0xc2f8f359
 800a98c:	81a56e1f 	.word	0x81a56e1f
 800a990:	43500000 	.word	0x43500000
 800a994:	ffff3cb0 	.word	0xffff3cb0
 800a998:	3c900000 	.word	0x3c900000

0800a99c <_init>:
 800a99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99e:	bf00      	nop
 800a9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9a2:	bc08      	pop	{r3}
 800a9a4:	469e      	mov	lr, r3
 800a9a6:	4770      	bx	lr

0800a9a8 <_fini>:
 800a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9aa:	bf00      	nop
 800a9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ae:	bc08      	pop	{r3}
 800a9b0:	469e      	mov	lr, r3
 800a9b2:	4770      	bx	lr
