
serial_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003198  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003320  08003320  00013320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003410  08003410  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08003410  08003410  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003410  08003410  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003410  08003410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003414  08003414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08003418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00000424  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004cc  200004cc  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec12  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ee  00000000  00000000  0002ecea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  00030fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ae8  00000000  00000000  00031bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ffee  00000000  00000000  00032698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f887  00000000  00000000  00062686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae316  00000000  00000000  00071f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00120223  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030b0  00000000  00000000  00120274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003308 	.word	0x08003308

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	08003308 	.word	0x08003308

080001c8 <enable_clocks>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <enable_clocks+0x28>)
 80001ce:	695b      	ldr	r3, [r3, #20]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <enable_clocks+0x28>)
 80001d2:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80001d6:	6153      	str	r3, [r2, #20]

	// store a 1 in bit for the TIM2 enable flag
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <enable_clocks+0x28>)
 80001da:	69db      	ldr	r3, [r3, #28]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <enable_clocks+0x28>)
 80001de:	f043 0302 	orr.w	r3, r3, #2
 80001e2:	61d3      	str	r3, [r2, #28]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40021000 	.word	0x40021000

080001f4 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001fa:	4b06      	ldr	r3, [pc, #24]	; (8000214 <initialise_board+0x20>)
 80001fc:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f245 5255 	movw	r2, #21845	; 0x5555
 8000204:	801a      	strh	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	48001002 	.word	0x48001002

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fead 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f82d 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f92d 	bl	8000484 <MX_GPIO_Init>
  MX_I2C1_Init();
 800022a:	f000 f88b 	bl	8000344 <MX_I2C1_Init>
  MX_SPI1_Init();
 800022e:	f000 f8c9 	bl	80003c4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000232:	f000 f905 	bl	8000440 <MX_USB_PCD_Init>

  /* USER CODE BEGIN 2 */
  enable_clocks();
 8000236:	f7ff ffc7 	bl	80001c8 <enable_clocks>
  initialise_board();
 800023a:	f7ff ffdb 	bl	80001f4 <initialise_board>



  SerialInitialise(BAUD_115200, &USART2_PORT);
 800023e:	490e      	ldr	r1, [pc, #56]	; (8000278 <main+0x60>)
 8000240:	2000      	movs	r0, #0
 8000242:	f000 fc1d 	bl	8000a80 <SerialInitialise>
  uint8_t message[32] = "Test\n";
 8000246:	4a0d      	ldr	r2, [pc, #52]	; (800027c <main+0x64>)
 8000248:	463b      	mov	r3, r7
 800024a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800024e:	6018      	str	r0, [r3, #0]
 8000250:	3304      	adds	r3, #4
 8000252:	8019      	strh	r1, [r3, #0]
 8000254:	1dbb      	adds	r3, r7, #6
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]
 8000262:	615a      	str	r2, [r3, #20]
 8000264:	831a      	strh	r2, [r3, #24]
  SerialOutputString(message, &USART2_PORT);
 8000266:	463b      	mov	r3, r7
 8000268:	4903      	ldr	r1, [pc, #12]	; (8000278 <main+0x60>)
 800026a:	4618      	mov	r0, r3
 800026c:	f000 fca7 	bl	8000bbe <SerialOutputString>

  Stage2();
 8000270:	f000 fa4a 	bl	8000708 <Stage2>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000274:	e7fe      	b.n	8000274 <main+0x5c>
 8000276:	bf00      	nop
 8000278:	2000005c 	.word	0x2000005c
 800027c:	08003320 	.word	0x08003320

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b09e      	sub	sp, #120	; 0x78
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f003 f82a 	bl	80032e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a4:	463b      	mov	r3, r7
 80002a6:	223c      	movs	r2, #60	; 0x3c
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f003 f81c 	bl	80032e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002b0:	2303      	movs	r3, #3
 80002b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002be:	2301      	movs	r3, #1
 80002c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c2:	2310      	movs	r3, #16
 80002c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	2302      	movs	r3, #2
 80002c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002d4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fb24 	bl	8001928 <HAL_RCC_OscConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002e6:	f000 f94b 	bl	8000580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	230f      	movs	r3, #15
 80002ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ee:	2302      	movs	r3, #2
 80002f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000300:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000304:	2101      	movs	r1, #1
 8000306:	4618      	mov	r0, r3
 8000308:	f002 fb4c 	bl	80029a4 <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000312:	f000 f935 	bl	8000580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <SystemClock_Config+0xc0>)
 8000318:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800031a:	2300      	movs	r3, #0
 800031c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800031e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000322:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000324:	463b      	mov	r3, r7
 8000326:	4618      	mov	r0, r3
 8000328:	f002 fd22 	bl	8002d70 <HAL_RCCEx_PeriphCLKConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000332:	f000 f925 	bl	8000580 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3778      	adds	r7, #120	; 0x78
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	00020020 	.word	0x00020020

08000344 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000348:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MX_I2C1_Init+0x74>)
 800034a:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <MX_I2C1_Init+0x78>)
 800034c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800034e:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <MX_I2C1_Init+0x74>)
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <MX_I2C1_Init+0x7c>)
 8000352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000354:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <MX_I2C1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <MX_I2C1_Init+0x74>)
 800035c:	2201      	movs	r2, #1
 800035e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <MX_I2C1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_I2C1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <MX_I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_I2C1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_I2C1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800037e:	480e      	ldr	r0, [pc, #56]	; (80003b8 <MX_I2C1_Init+0x74>)
 8000380:	f001 f8da 	bl	8001538 <HAL_I2C_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800038a:	f000 f8f9 	bl	8000580 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800038e:	2100      	movs	r1, #0
 8000390:	4809      	ldr	r0, [pc, #36]	; (80003b8 <MX_I2C1_Init+0x74>)
 8000392:	f001 f960 	bl	8001656 <HAL_I2CEx_ConfigAnalogFilter>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800039c:	f000 f8f0 	bl	8000580 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003a0:	2100      	movs	r1, #0
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_I2C1_Init+0x74>)
 80003a4:	f001 f9a2 	bl	80016ec <HAL_I2CEx_ConfigDigitalFilter>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003ae:	f000 f8e7 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200000c4 	.word	0x200000c4
 80003bc:	40005400 	.word	0x40005400
 80003c0:	2000090e 	.word	0x2000090e

080003c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <MX_SPI1_Init+0x74>)
 80003ca:	4a1c      	ldr	r2, [pc, #112]	; (800043c <MX_SPI1_Init+0x78>)
 80003cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <MX_SPI1_Init+0x74>)
 80003d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003d6:	4b18      	ldr	r3, [pc, #96]	; (8000438 <MX_SPI1_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003dc:	4b16      	ldr	r3, [pc, #88]	; (8000438 <MX_SPI1_Init+0x74>)
 80003de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <MX_SPI1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <MX_SPI1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <MX_SPI1_Init+0x74>)
 80003f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <MX_SPI1_Init+0x74>)
 80003fa:	2208      	movs	r2, #8
 80003fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_SPI1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_SPI1_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <MX_SPI1_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_SPI1_Init+0x74>)
 8000412:	2207      	movs	r2, #7
 8000414:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <MX_SPI1_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_SPI1_Init+0x74>)
 800041e:	2208      	movs	r2, #8
 8000420:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <MX_SPI1_Init+0x74>)
 8000424:	f002 fe54 	bl	80030d0 <HAL_SPI_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800042e:	f000 f8a7 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000118 	.word	0x20000118
 800043c:	40013000 	.word	0x40013000

08000440 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000444:	4b0d      	ldr	r3, [pc, #52]	; (800047c <MX_USB_PCD_Init+0x3c>)
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <MX_USB_PCD_Init+0x40>)
 8000448:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_USB_PCD_Init+0x3c>)
 800044c:	2208      	movs	r2, #8
 800044e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000450:	4b0a      	ldr	r3, [pc, #40]	; (800047c <MX_USB_PCD_Init+0x3c>)
 8000452:	2202      	movs	r2, #2
 8000454:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_USB_PCD_Init+0x3c>)
 8000458:	2202      	movs	r2, #2
 800045a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <MX_USB_PCD_Init+0x3c>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_USB_PCD_Init+0x3c>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <MX_USB_PCD_Init+0x3c>)
 800046a:	f001 f98b 	bl	8001784 <HAL_PCD_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000474:	f000 f884 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	2000017c 	.word	0x2000017c
 8000480:	40005c00 	.word	0x40005c00

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800049a:	4b37      	ldr	r3, [pc, #220]	; (8000578 <MX_GPIO_Init+0xf4>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a36      	ldr	r2, [pc, #216]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004a4:	6153      	str	r3, [r2, #20]
 80004a6:	4b34      	ldr	r3, [pc, #208]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b2:	4b31      	ldr	r3, [pc, #196]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a30      	ldr	r2, [pc, #192]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b2e      	ldr	r3, [pc, #184]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ca:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a2a      	ldr	r2, [pc, #168]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b28      	ldr	r3, [pc, #160]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	4b25      	ldr	r3, [pc, #148]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a24      	ldr	r2, [pc, #144]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b22      	ldr	r3, [pc, #136]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fa:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <MX_GPIO_Init+0xf4>)
 8000500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <MX_GPIO_Init+0xf4>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000512:	2200      	movs	r2, #0
 8000514:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000518:	4818      	ldr	r0, [pc, #96]	; (800057c <MX_GPIO_Init+0xf8>)
 800051a:	f000 fff5 	bl	8001508 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800051e:	2337      	movs	r3, #55	; 0x37
 8000520:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000522:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	4619      	mov	r1, r3
 8000532:	4812      	ldr	r0, [pc, #72]	; (800057c <MX_GPIO_Init+0xf8>)
 8000534:	f000 fe6e 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000538:	f64f 7308 	movw	r3, #65288	; 0xff08
 800053c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	480a      	ldr	r0, [pc, #40]	; (800057c <MX_GPIO_Init+0xf8>)
 8000552:	f000 fe5f 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000556:	2301      	movs	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	4619      	mov	r1, r3
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f000 fe52 	bl	8001214 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	; 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40021000 	.word	0x40021000
 800057c:	48001000 	.word	0x48001000

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000588:	e7fe      	b.n	8000588 <Error_Handler+0x8>
	...

0800058c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	db0b      	blt.n	80005b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 021f 	and.w	r2, r3, #31
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <__NVIC_EnableIRQ+0x38>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	095b      	lsrs	r3, r3, #5
 80005ac:	2001      	movs	r0, #1
 80005ae:	fa00 f202 	lsl.w	r2, r0, r2
 80005b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100

080005c8 <CheckSequence>:
volatile int nest = 0;
volatile int timer_expired = 0; // Timer expiration flag
volatile int first_timer = 0;
volatile int timer_initialised = 0;

void CheckSequence(uint8_t *input){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b096      	sub	sp, #88	; 0x58
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	char seq[7];
	int i;
	if (count == 1){
 80005d0:	4b43      	ldr	r3, [pc, #268]	; (80006e0 <CheckSequence+0x118>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d106      	bne.n	80005e6 <CheckSequence+0x1e>
		strcpy(seq, seq1);
 80005d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005dc:	4941      	ldr	r1, [pc, #260]	; (80006e4 <CheckSequence+0x11c>)
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fe8a 	bl	80032f8 <strcpy>
 80005e4:	e01f      	b.n	8000626 <CheckSequence+0x5e>
	}
	else if (count == 2){
 80005e6:	4b3e      	ldr	r3, [pc, #248]	; (80006e0 <CheckSequence+0x118>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d106      	bne.n	80005fc <CheckSequence+0x34>
		strcpy(seq, seq2);
 80005ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005f2:	493d      	ldr	r1, [pc, #244]	; (80006e8 <CheckSequence+0x120>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 fe7f 	bl	80032f8 <strcpy>
 80005fa:	e014      	b.n	8000626 <CheckSequence+0x5e>
	}
	else if (count == 3){
 80005fc:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <CheckSequence+0x118>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b03      	cmp	r3, #3
 8000602:	d106      	bne.n	8000612 <CheckSequence+0x4a>
		strcpy(seq, seq3);
 8000604:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000608:	4938      	ldr	r1, [pc, #224]	; (80006ec <CheckSequence+0x124>)
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fe74 	bl	80032f8 <strcpy>
 8000610:	e009      	b.n	8000626 <CheckSequence+0x5e>
	}
	else if (count == 4){
 8000612:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <CheckSequence+0x118>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b04      	cmp	r3, #4
 8000618:	d105      	bne.n	8000626 <CheckSequence+0x5e>
		strcpy(seq, seq4);
 800061a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800061e:	4934      	ldr	r1, [pc, #208]	; (80006f0 <CheckSequence+0x128>)
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fe69 	bl	80032f8 <strcpy>
	}

	uint8_t fail_message[32] = "Fail\n";
 8000626:	4a33      	ldr	r2, [pc, #204]	; (80006f4 <CheckSequence+0x12c>)
 8000628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800062c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000630:	6018      	str	r0, [r3, #0]
 8000632:	3304      	adds	r3, #4
 8000634:	8019      	strh	r1, [r3, #0]
 8000636:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	831a      	strh	r2, [r3, #24]
	uint8_t pass_message[32] = "Success\n";
 800064a:	4a2b      	ldr	r2, [pc, #172]	; (80006f8 <CheckSequence+0x130>)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	ca07      	ldmia	r2, {r0, r1, r2}
 8000652:	c303      	stmia	r3!, {r0, r1}
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	f107 0315 	add.w	r3, r7, #21
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
 8000666:	f8c3 2013 	str.w	r2, [r3, #19]

	char current_char;
	for (i = 0; i < count; i++){
 800066a:	2300      	movs	r3, #0
 800066c:	657b      	str	r3, [r7, #84]	; 0x54
 800066e:	e01b      	b.n	80006a8 <CheckSequence+0xe0>
		current_char = (char)input[i];
 8000670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		if (current_char != seq[i]){
 800067c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800068a:	429a      	cmp	r2, r3
 800068c:	d009      	beq.n	80006a2 <CheckSequence+0xda>
			SerialOutputString(fail_message, &USART1_PORT);
 800068e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000692:	491a      	ldr	r1, [pc, #104]	; (80006fc <CheckSequence+0x134>)
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fa92 	bl	8000bbe <SerialOutputString>
			substage_state = 0;
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <CheckSequence+0x138>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
			break;
 80006a0:	e007      	b.n	80006b2 <CheckSequence+0xea>
	for (i = 0; i < count; i++){
 80006a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006a4:	3301      	adds	r3, #1
 80006a6:	657b      	str	r3, [r7, #84]	; 0x54
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <CheckSequence+0x118>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80006ae:	429a      	cmp	r2, r3
 80006b0:	dbde      	blt.n	8000670 <CheckSequence+0xa8>
		}
	}

	if (substage_state == 1){
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <CheckSequence+0x138>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d10d      	bne.n	80006d6 <CheckSequence+0x10e>
		SerialOutputString(pass_message, &USART1_PORT);
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	490f      	ldr	r1, [pc, #60]	; (80006fc <CheckSequence+0x134>)
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fa7c 	bl	8000bbe <SerialOutputString>
		count ++;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <CheckSequence+0x118>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <CheckSequence+0x118>)
 80006ce:	6013      	str	r3, [r2, #0]
		next_stage = 1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <CheckSequence+0x13c>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
	}
}
 80006d6:	bf00      	nop
 80006d8:	3758      	adds	r7, #88	; 0x58
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000046c 	.word	0x2000046c
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000004 	.word	0x20000004
 80006ec:	2000000c 	.word	0x2000000c
 80006f0:	20000014 	.word	0x20000014
 80006f4:	08003340 	.word	0x08003340
 80006f8:	08003360 	.word	0x08003360
 80006fc:	2000001c 	.word	0x2000001c
 8000700:	20000468 	.word	0x20000468
 8000704:	20000470 	.word	0x20000470

08000708 <Stage2>:

void Stage2(){
 8000708:	b5b0      	push	{r4, r5, r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
	substage_state = 1;
 800070e:	4b46      	ldr	r3, [pc, #280]	; (8000828 <Stage2+0x120>)
 8000710:	2201      	movs	r2, #1
 8000712:	601a      	str	r2, [r3, #0]
	count = 1;
 8000714:	4b45      	ldr	r3, [pc, #276]	; (800082c <Stage2+0x124>)
 8000716:	2201      	movs	r2, #1
 8000718:	601a      	str	r2, [r3, #0]

	while (count < 5){
 800071a:	e05a      	b.n	80007d2 <Stage2+0xca>
		next_stage = 0;
 800071c:	4b44      	ldr	r3, [pc, #272]	; (8000830 <Stage2+0x128>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]

		//put LED function here
		Display_LED();
 8000722:	f000 f8bd 	bl	80008a0 <Display_LED>

		//enable serial receive interrupt
		SerialInitialise(BAUD_115200, &USART1_PORT);
 8000726:	4943      	ldr	r1, [pc, #268]	; (8000834 <Stage2+0x12c>)
 8000728:	2000      	movs	r0, #0
 800072a:	f000 f9a9 	bl	8000a80 <SerialInitialise>
		EnableSerialInterrupt(&USART1_PORT);
 800072e:	4841      	ldr	r0, [pc, #260]	; (8000834 <Stage2+0x12c>)
 8000730:	f000 f9f8 	bl	8000b24 <EnableSerialInterrupt>

		//enable timer polling here
		init_timer();
 8000734:	f000 f91a 	bl	800096c <init_timer>

		//add timer polling condition when integrating
		while(next_stage == 0 && substage_state == 1 && timer_expired == 0){
 8000738:	bf00      	nop
 800073a:	4b3d      	ldr	r3, [pc, #244]	; (8000830 <Stage2+0x128>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d107      	bne.n	8000752 <Stage2+0x4a>
 8000742:	4b39      	ldr	r3, [pc, #228]	; (8000828 <Stage2+0x120>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d103      	bne.n	8000752 <Stage2+0x4a>
 800074a:	4b3b      	ldr	r3, [pc, #236]	; (8000838 <Stage2+0x130>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f3      	beq.n	800073a <Stage2+0x32>
		}

		if(substage_state == 0 ){
 8000752:	4b35      	ldr	r3, [pc, #212]	; (8000828 <Stage2+0x120>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d119      	bne.n	800078e <Stage2+0x86>
			uint8_t restart_message[32] = "Restarting Stage 2\n";
 800075a:	4b38      	ldr	r3, [pc, #224]	; (800083c <Stage2+0x134>)
 800075c:	463c      	mov	r4, r7
 800075e:	461d      	mov	r5, r3
 8000760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000764:	682b      	ldr	r3, [r5, #0]
 8000766:	6023      	str	r3, [r4, #0]
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
			SerialOutputString(restart_message, &USART1_PORT);
 8000774:	463b      	mov	r3, r7
 8000776:	492f      	ldr	r1, [pc, #188]	; (8000834 <Stage2+0x12c>)
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fa20 	bl	8000bbe <SerialOutputString>

			nest ++;
 800077e:	4b30      	ldr	r3, [pc, #192]	; (8000840 <Stage2+0x138>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	3301      	adds	r3, #1
 8000784:	4a2e      	ldr	r2, [pc, #184]	; (8000840 <Stage2+0x138>)
 8000786:	6013      	str	r3, [r2, #0]
			Stage2();
 8000788:	f7ff ffbe 	bl	8000708 <Stage2>
			break;
 800078c:	e025      	b.n	80007da <Stage2+0xd2>
		}

		else if (timer_expired != 0){
 800078e:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <Stage2+0x130>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d01d      	beq.n	80007d2 <Stage2+0xca>
			timer_expired = 0;
 8000796:	4b28      	ldr	r3, [pc, #160]	; (8000838 <Stage2+0x130>)
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
			uint8_t message[32] = "Time's up, restarting stage 2\n";
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <Stage2+0x13c>)
 800079e:	463c      	mov	r4, r7
 80007a0:	461d      	mov	r5, r3
 80007a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007aa:	c407      	stmia	r4!, {r0, r1, r2}
 80007ac:	8023      	strh	r3, [r4, #0]
 80007ae:	3402      	adds	r4, #2
 80007b0:	0c1b      	lsrs	r3, r3, #16
 80007b2:	7023      	strb	r3, [r4, #0]
 80007b4:	2300      	movs	r3, #0
 80007b6:	77fb      	strb	r3, [r7, #31]
			SerialOutputString(message, &USART1_PORT);
 80007b8:	463b      	mov	r3, r7
 80007ba:	491e      	ldr	r1, [pc, #120]	; (8000834 <Stage2+0x12c>)
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f9fe 	bl	8000bbe <SerialOutputString>

			nest ++;
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <Stage2+0x138>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <Stage2+0x138>)
 80007ca:	6013      	str	r3, [r2, #0]
			Stage2();
 80007cc:	f7ff ff9c 	bl	8000708 <Stage2>
			break;
 80007d0:	e003      	b.n	80007da <Stage2+0xd2>
	while (count < 5){
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <Stage2+0x124>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	dda0      	ble.n	800071c <Stage2+0x14>
		}
	}

	if (nest == 0){
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <Stage2+0x138>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d118      	bne.n	8000814 <Stage2+0x10c>
		uint8_t progress_message[32] = "You've passed Stage 2\n";
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <Stage2+0x140>)
 80007e4:	463c      	mov	r4, r7
 80007e6:	461d      	mov	r5, r3
 80007e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007f0:	6020      	str	r0, [r4, #0]
 80007f2:	3404      	adds	r4, #4
 80007f4:	8021      	strh	r1, [r4, #0]
 80007f6:	3402      	adds	r4, #2
 80007f8:	0c0b      	lsrs	r3, r1, #16
 80007fa:	7023      	strb	r3, [r4, #0]
 80007fc:	f107 0317 	add.w	r3, r7, #23
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	721a      	strb	r2, [r3, #8]
		SerialOutputString(progress_message, &USART1_PORT);
 8000808:	463b      	mov	r3, r7
 800080a:	490a      	ldr	r1, [pc, #40]	; (8000834 <Stage2+0x12c>)
 800080c:	4618      	mov	r0, r3
 800080e:	f000 f9d6 	bl	8000bbe <SerialOutputString>
		//call next stage
	}
	else{
		nest --;
	}
}
 8000812:	e004      	b.n	800081e <Stage2+0x116>
		nest --;
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <Stage2+0x138>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3b01      	subs	r3, #1
 800081a:	4a09      	ldr	r2, [pc, #36]	; (8000840 <Stage2+0x138>)
 800081c:	6013      	str	r3, [r2, #0]
}
 800081e:	bf00      	nop
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bdb0      	pop	{r4, r5, r7, pc}
 8000826:	bf00      	nop
 8000828:	20000468 	.word	0x20000468
 800082c:	2000046c 	.word	0x2000046c
 8000830:	20000470 	.word	0x20000470
 8000834:	2000001c 	.word	0x2000001c
 8000838:	20000478 	.word	0x20000478
 800083c:	08003380 	.word	0x08003380
 8000840:	20000474 	.word	0x20000474
 8000844:	080033a0 	.word	0x080033a0
 8000848:	080033c0 	.word	0x080033c0

0800084c <Current_LED>:

void Current_LED(uint8_t current){
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	// turn on NWSE LED based on WASD
	// Function to control LEDs based on the input direction (current)
	// This implementation assumes there are four LEDs (N, W, S, E)
	// Replace the following code with the appropriate hardware-specific calls or API functions

	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <Current_LED+0x50>)
 8000858:	60fb      	str	r3, [r7, #12]

	if (current == 'W') {
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b57      	cmp	r3, #87	; 0x57
 800085e:	d103      	bne.n	8000868 <Current_LED+0x1c>
		// Turn on North LED
		*led_register = 0b00000010; // Set the bit for the desired LED
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2202      	movs	r2, #2
 8000864:	701a      	strb	r2, [r3, #0]
	else if (current == 'D') {
		// Turn on East LED
		*led_register = 0b00001000; // Set the bit for the desired LED
	}

}
 8000866:	e013      	b.n	8000890 <Current_LED+0x44>
	else if (current == 'A') {
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b41      	cmp	r3, #65	; 0x41
 800086c:	d103      	bne.n	8000876 <Current_LED+0x2a>
		*led_register = 0b10000000; // Set the bit for the desired LED
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	701a      	strb	r2, [r3, #0]
}
 8000874:	e00c      	b.n	8000890 <Current_LED+0x44>
	else if (current == 'S') {
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b53      	cmp	r3, #83	; 0x53
 800087a:	d103      	bne.n	8000884 <Current_LED+0x38>
		*led_register = 0b00100000; // Set the bit for the desired LED
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2220      	movs	r2, #32
 8000880:	701a      	strb	r2, [r3, #0]
}
 8000882:	e005      	b.n	8000890 <Current_LED+0x44>
	else if (current == 'D') {
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b44      	cmp	r3, #68	; 0x44
 8000888:	d102      	bne.n	8000890 <Current_LED+0x44>
		*led_register = 0b00001000; // Set the bit for the desired LED
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	2208      	movs	r2, #8
 800088e:	701a      	strb	r2, [r3, #0]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	48001015 	.word	0x48001015

080008a0 <Display_LED>:

void Display_LED(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
	char seq[7];
	int i;
	if (count == 1){
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <Display_LED+0xac>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d105      	bne.n	80008ba <Display_LED+0x1a>
		strcpy(seq, seq1);
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4927      	ldr	r1, [pc, #156]	; (8000950 <Display_LED+0xb0>)
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 fd20 	bl	80032f8 <strcpy>
 80008b8:	e01c      	b.n	80008f4 <Display_LED+0x54>
	}
	else if (count == 2){
 80008ba:	4b24      	ldr	r3, [pc, #144]	; (800094c <Display_LED+0xac>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d105      	bne.n	80008ce <Display_LED+0x2e>
		strcpy(seq, seq2);
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4923      	ldr	r1, [pc, #140]	; (8000954 <Display_LED+0xb4>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f002 fd16 	bl	80032f8 <strcpy>
 80008cc:	e012      	b.n	80008f4 <Display_LED+0x54>
	}
	else if (count == 3){
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <Display_LED+0xac>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d105      	bne.n	80008e2 <Display_LED+0x42>
		strcpy(seq, seq3);
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	491f      	ldr	r1, [pc, #124]	; (8000958 <Display_LED+0xb8>)
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fd0c 	bl	80032f8 <strcpy>
 80008e0:	e008      	b.n	80008f4 <Display_LED+0x54>
	}
	else if (count == 4){
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <Display_LED+0xac>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d104      	bne.n	80008f4 <Display_LED+0x54>
		strcpy(seq, seq4);
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	491b      	ldr	r1, [pc, #108]	; (800095c <Display_LED+0xbc>)
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fd02 	bl	80032f8 <strcpy>
	}

	uint8_t current_char;
	for (i = 0; i < count+3; i++){
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e015      	b.n	8000926 <Display_LED+0x86>
		current_char =  seq[i];
 80008fa:	1d3a      	adds	r2, r7, #4
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	72fb      	strb	r3, [r7, #11]
		Current_LED(current_char);
 8000904:	7afb      	ldrb	r3, [r7, #11]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ffa0 	bl	800084c <Current_LED>

		//delay
		for (int i = 0; i < 5000000; ++i) {
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	e002      	b.n	8000918 <Display_LED+0x78>
 8000912:	693b      	ldr	r3, [r7, #16]
 8000914:	3301      	adds	r3, #1
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <Display_LED+0xc0>)
 800091c:	4293      	cmp	r3, r2
 800091e:	ddf8      	ble.n	8000912 <Display_LED+0x72>
	for (i = 0; i < count+3; i++){
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	3301      	adds	r3, #1
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <Display_LED+0xac>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	3302      	adds	r3, #2
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	429a      	cmp	r2, r3
 8000930:	dde3      	ble.n	80008fa <Display_LED+0x5a>
			// Do nothing
		}
	}

	//turn off LED
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <Display_LED+0xc4>)
 8000934:	60fb      	str	r3, [r7, #12]
	*led_register = 0b00000000;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]

    // Reset the timer counter
    TIM3->CNT = 0;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <Display_LED+0xc8>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000046c 	.word	0x2000046c
 8000950:	20000000 	.word	0x20000000
 8000954:	20000004 	.word	0x20000004
 8000958:	2000000c 	.word	0x2000000c
 800095c:	20000014 	.word	0x20000014
 8000960:	004c4b3f 	.word	0x004c4b3f
 8000964:	48001015 	.word	0x48001015
 8000968:	40000400 	.word	0x40000400

0800096c <init_timer>:

void init_timer(){
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
    if (timer_initialised == 0) { // Check if the timer is not already initialized
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <init_timer+0x68>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d11d      	bne.n	80009b4 <init_timer+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
        __disable_irq();
        TIM3->PSC = 8000;
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <init_timer+0x6c>)
 800097e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
        TIM3->ARR = 65000;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <init_timer+0x6c>)
 8000986:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800098a:	62da      	str	r2, [r3, #44]	; 0x2c
        TIM3->DIER |= TIM_DIER_UIE;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <init_timer+0x6c>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	4a11      	ldr	r2, [pc, #68]	; (80009d8 <init_timer+0x6c>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	60d3      	str	r3, [r2, #12]
        TIM3->CR1 |= TIM_CR1_CEN;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <init_timer+0x6c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <init_timer+0x6c>)
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	6013      	str	r3, [r2, #0]
        NVIC_EnableIRQ(TIM3_IRQn);
 80009a4:	201d      	movs	r0, #29
 80009a6:	f7ff fdf1 	bl	800058c <__NVIC_EnableIRQ>
        timer_initialised = 1; // Mark the timer as initialized
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <init_timer+0x68>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80009b0:	b662      	cpsie	i
}
 80009b2:	e00c      	b.n	80009ce <init_timer+0x62>
        __enable_irq();
    }
    else{
    	TIM3->DIER |= TIM_DIER_UIE;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <init_timer+0x6c>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <init_timer+0x6c>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	60d3      	str	r3, [r2, #12]
    	TIM3->CR1 |= TIM_CR1_CEN;
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <init_timer+0x6c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <init_timer+0x6c>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6013      	str	r3, [r2, #0]
    }

}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000480 	.word	0x20000480
 80009d8:	40000400 	.word	0x40000400

080009dc <TIM3_IRQHandler>:

void TIM3_IRQHandler() {
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
	if (first_timer == 0) {
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <TIM3_IRQHandler+0x5c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d109      	bne.n	80009fc <TIM3_IRQHandler+0x20>
		first_timer = 1;
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <TIM3_IRQHandler+0x5c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
		TIM3->SR &= ~TIM_SR_UIF; // Put down the overflow flag
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <TIM3_IRQHandler+0x60>)
 80009f0:	691b      	ldr	r3, [r3, #16]
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <TIM3_IRQHandler+0x60>)
 80009f4:	f023 0301 	bic.w	r3, r3, #1
 80009f8:	6113      	str	r3, [r2, #16]
		TIM3->SR &= ~TIM_SR_UIF; // Put down the overflow flag
		TIM3->CR1 &= ~TIM_CR1_CEN; // Disable the timer
		TIM3->CNT = 0; // Reset the timer counter
		timer_expired = 1;
	}
}
 80009fa:	e017      	b.n	8000a2c <TIM3_IRQHandler+0x50>
	else if ((TIM3->SR & TIM_SR_UIF) != 0) {
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <TIM3_IRQHandler+0x60>)
 80009fe:	691b      	ldr	r3, [r3, #16]
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d011      	beq.n	8000a2c <TIM3_IRQHandler+0x50>
		TIM3->SR &= ~TIM_SR_UIF; // Put down the overflow flag
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <TIM3_IRQHandler+0x60>)
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <TIM3_IRQHandler+0x60>)
 8000a0e:	f023 0301 	bic.w	r3, r3, #1
 8000a12:	6113      	str	r3, [r2, #16]
		TIM3->CR1 &= ~TIM_CR1_CEN; // Disable the timer
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <TIM3_IRQHandler+0x60>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <TIM3_IRQHandler+0x60>)
 8000a1a:	f023 0301 	bic.w	r3, r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]
		TIM3->CNT = 0; // Reset the timer counter
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <TIM3_IRQHandler+0x60>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
		timer_expired = 1;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <TIM3_IRQHandler+0x64>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	2000047c 	.word	0x2000047c
 8000a3c:	40000400 	.word	0x40000400
 8000a40:	20000478 	.word	0x20000478

08000a44 <__NVIC_EnableIRQ>:
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0b      	blt.n	8000a6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 021f 	and.w	r2, r3, #31
 8000a5c:	4907      	ldr	r1, [pc, #28]	; (8000a7c <__NVIC_EnableIRQ+0x38>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <SerialInitialise>:



// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port) {
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a8a:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <SerialInitialise+0xa0>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a24      	ldr	r2, [pc, #144]	; (8000b20 <SerialInitialise+0xa0>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <SerialInitialise+0xa0>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a21      	ldr	r2, [pc, #132]	; (8000b20 <SerialInitialise+0xa0>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	6a1b      	ldr	r3, [r3, #32]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d106      	bne.n	8000ab8 <SerialInitialise+0x38>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <SerialInitialise+0xa0>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <SerialInitialise+0xa0>)
 8000ab0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ab4:	6153      	str	r3, [r2, #20]
		break;
 8000ab6:	e000      	b.n	8000aba <SerialInitialise+0x3a>
	default:
		break;
 8000ab8:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abe:	683a      	ldr	r2, [r7, #0]
 8000ac0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000ac2:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000acc:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	69d9      	ldr	r1, [r3, #28]
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	60fb      	str	r3, [r7, #12]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d104      	bne.n	8000b04 <SerialInitialise+0x84>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000b00:	801a      	strh	r2, [r3, #0]
		break;
 8000b02:	bf00      	nop
	}

	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f042 020d 	orr.w	r2, r2, #13
 8000b12:	601a      	str	r2, [r3, #0]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000

08000b24 <EnableSerialInterrupt>:

void EnableSerialInterrupt(SerialPort *serial_port) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
	__disable_irq(); // Disable the interrupts while editing settings.

	*(serial_port->ControlRegister1) |= USART_CR1_RXNEIE;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f042 0220 	orr.w	r2, r2, #32
 8000b3e:	601a      	str	r2, [r3, #0]

    // Enable the system configuration controller (SYSCFG in RCC).
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <EnableSerialInterrupt+0x5c>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <EnableSerialInterrupt+0x5c>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6193      	str	r3, [r2, #24]

	// Configure EXTI line for USART1.
	SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR2_EXTI5_Msk; // Clear EXTI5, remove previous settings.
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <EnableSerialInterrupt+0x60>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	4a0c      	ldr	r2, [pc, #48]	; (8000b84 <EnableSerialInterrupt+0x60>)
 8000b52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b56:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PA; // Set EXTI5 bits to PA for  (USART1)
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <EnableSerialInterrupt+0x60>)
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <EnableSerialInterrupt+0x60>)
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	60d3      	str	r3, [r2, #12]

	// Enable EXTI5 interrupt (corresponding to USART1).
	EXTI->IMR |= EXTI_IMR_MR5; // Enable interrupt on EXTI line 5 (corresponding to PA5/USART1).
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <EnableSerialInterrupt+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <EnableSerialInterrupt+0x64>)
 8000b66:	f043 0320 	orr.w	r3, r3, #32
 8000b6a:	6013      	str	r3, [r2, #0]

    NVIC_EnableIRQ(USART1_IRQn);
 8000b6c:	2025      	movs	r0, #37	; 0x25
 8000b6e:	f7ff ff69 	bl	8000a44 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b72:	b662      	cpsie	i
}
 8000b74:	bf00      	nop

    __enable_irq(); // Re-enable all interrupts now that we are finished editing settings.
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010000 	.word	0x40010000
 8000b88:	40010400 	.word	0x40010400

08000b8c <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8000b98:	bf00      	nop
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0f8      	beq.n	8000b9a <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	79fa      	ldrb	r2, [r7, #7]
 8000bae:	b292      	uxth	r2, r2
 8000bb0:	801a      	strh	r2, [r3, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <SerialOutputString>:

void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b084      	sub	sp, #16
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000bcc:	e00b      	b.n	8000be6 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ffd9 	bl	8000b8c <SerialOutputChar>
		counter++;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
		pt++;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3301      	adds	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1ef      	bne.n	8000bce <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bfa:	68f8      	ldr	r0, [r7, #12]
 8000bfc:	4798      	blx	r3
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <SerialInputSequence>:



void SerialInputSequence(SerialPort *serial_port) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
		if (rx_index < 32) {
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <SerialInputSequence+0x9c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b1f      	cmp	r3, #31
 8000c18:	d82d      	bhi.n	8000c76 <SerialInputSequence+0x6e>
			uint8_t rx_data = *(serial_port->DataInputRegister);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	73fb      	strb	r3, [r7, #15]

			// exit if new line is detected
			if (rx_data == CARRIAGE_RETURN) {
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	2b0d      	cmp	r3, #13
 8000c28:	d113      	bne.n	8000c52 <SerialInputSequence+0x4a>
				// disable receive interrupt
				*(serial_port->ControlRegister1) &= ~USART_CR1_RXNEIE;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f022 0220 	bic.w	r2, r2, #32
 8000c38:	601a      	str	r2, [r3, #0]

				CheckSequence(rx_buffer);
 8000c3a:	481b      	ldr	r0, [pc, #108]	; (8000ca8 <SerialInputSequence+0xa0>)
 8000c3c:	f7ff fcc4 	bl	80005c8 <CheckSequence>

				// reset index & buffer
				rx_index = 0;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <SerialInputSequence+0x9c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
				memset(rx_buffer, 0, sizeof(rx_buffer));
 8000c46:	2240      	movs	r2, #64	; 0x40
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <SerialInputSequence+0xa0>)
 8000c4c:	f002 fb4c 	bl	80032e8 <memset>

			// reset index & buffer
			rx_index = 0;
			memset(rx_buffer, 0, sizeof(rx_buffer));
		}
}
 8000c50:	e024      	b.n	8000c9c <SerialInputSequence+0x94>
			else if (rx_data == LINE_FEED){
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	2b0a      	cmp	r3, #10
 8000c56:	d021      	beq.n	8000c9c <SerialInputSequence+0x94>
				rx_buffer[rx_index]= rx_data;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <SerialInputSequence+0x9c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <SerialInputSequence+0xa0>)
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	5453      	strb	r3, [r2, r1]
				rx_index++;
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <SerialInputSequence+0x9c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <SerialInputSequence+0x9c>)
 8000c72:	701a      	strb	r2, [r3, #0]
}
 8000c74:	e012      	b.n	8000c9c <SerialInputSequence+0x94>
			*(serial_port->ControlRegister1) &= ~USART_CR1_RXNEIE;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f022 0220 	bic.w	r2, r2, #32
 8000c84:	601a      	str	r2, [r3, #0]
			CheckSequence(rx_buffer);
 8000c86:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <SerialInputSequence+0xa0>)
 8000c88:	f7ff fc9e 	bl	80005c8 <CheckSequence>
			rx_index = 0;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <SerialInputSequence+0x9c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8000c92:	2240      	movs	r2, #64	; 0x40
 8000c94:	2100      	movs	r1, #0
 8000c96:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <SerialInputSequence+0xa0>)
 8000c98:	f002 fb26 	bl	80032e8 <memset>
}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200004c4 	.word	0x200004c4
 8000ca8:	20000484 	.word	0x20000484

08000cac <USART1_IRQHandler>:
		rx_index++;
	}
}

void USART1_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	TIM3->CR1 &= ~TIM_CR1_CEN; // Disable the timer
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <USART1_IRQHandler+0x20>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <USART1_IRQHandler+0x20>)
 8000cb6:	f023 0301 	bic.w	r3, r3, #1
 8000cba:	6013      	str	r3, [r2, #0]
	TIM3->CNT = 0; // Reset the timer counter
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <USART1_IRQHandler+0x20>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
	SerialInputSequence(&USART1_PORT);
 8000cc2:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <USART1_IRQHandler+0x24>)
 8000cc4:	f7ff ffa0 	bl	8000c08 <SerialInputSequence>
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40000400 	.word	0x40000400
 8000cd0:	2000001c 	.word	0x2000001c

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <HAL_MspInit+0x44>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <HAL_MspInit+0x44>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_MspInit+0x44>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_MspInit+0x44>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_MspInit+0x44>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	61d3      	str	r3, [r2, #28]
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_MspInit+0x44>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d0a:	2007      	movs	r0, #7
 8000d0c:	f000 fa4e 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_I2C_MspInit+0x7c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d127      	bne.n	8000d8e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_I2C_MspInit+0x80>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <HAL_I2C_MspInit+0x80>)
 8000d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d48:	6153      	str	r3, [r2, #20]
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_I2C_MspInit+0x80>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d56:	23c0      	movs	r3, #192	; 0xc0
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5a:	2312      	movs	r3, #18
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d66:	2304      	movs	r3, #4
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <HAL_I2C_MspInit+0x84>)
 8000d72:	f000 fa4f 	bl	8001214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_I2C_MspInit+0x80>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_I2C_MspInit+0x80>)
 8000d7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d80:	61d3      	str	r3, [r2, #28]
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_I2C_MspInit+0x80>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40005400 	.word	0x40005400
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	48000400 	.word	0x48000400

08000da4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a17      	ldr	r2, [pc, #92]	; (8000e20 <HAL_SPI_MspInit+0x7c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d128      	bne.n	8000e18 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_SPI_MspInit+0x80>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	4a16      	ldr	r2, [pc, #88]	; (8000e24 <HAL_SPI_MspInit+0x80>)
 8000dcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd0:	6193      	str	r3, [r2, #24]
 8000dd2:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <HAL_SPI_MspInit+0x80>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_SPI_MspInit+0x80>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_SPI_MspInit+0x80>)
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	6153      	str	r3, [r2, #20]
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_SPI_MspInit+0x80>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000df6:	23e0      	movs	r3, #224	; 0xe0
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e06:	2305      	movs	r3, #5
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f000 f9fe 	bl	8001214 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	3728      	adds	r7, #40	; 0x28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40013000 	.word	0x40013000
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a18      	ldr	r2, [pc, #96]	; (8000ea8 <HAL_PCD_MspInit+0x80>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d129      	bne.n	8000e9e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <HAL_PCD_MspInit+0x84>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	4a17      	ldr	r2, [pc, #92]	; (8000eac <HAL_PCD_MspInit+0x84>)
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	6153      	str	r3, [r2, #20]
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_PCD_MspInit+0x84>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000e62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000e74:	230e      	movs	r3, #14
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e82:	f000 f9c7 	bl	8001214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_PCD_MspInit+0x84>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a08      	ldr	r2, [pc, #32]	; (8000eac <HAL_PCD_MspInit+0x84>)
 8000e8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_PCD_MspInit+0x84>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40005c00 	.word	0x40005c00
 8000eac:	40021000 	.word	0x40021000

08000eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <NMI_Handler+0x4>

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 f884 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <Reset_Handler>:
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f60 <LoopForever+0x2>
 8000f2c:	f7ff ffea 	bl	8000f04 <SystemInit>
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <LoopForever+0x6>)
 8000f32:	490d      	ldr	r1, [pc, #52]	; (8000f68 <LoopForever+0xa>)
 8000f34:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <LoopForever+0xe>)
 8000f36:	2300      	movs	r3, #0
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:
 8000f3a:	58d4      	ldr	r4, [r2, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:
 8000f40:	18c4      	adds	r4, r0, r3
 8000f42:	428c      	cmp	r4, r1
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <LoopForever+0x12>)
 8000f48:	4c0a      	ldr	r4, [pc, #40]	; (8000f74 <LoopForever+0x16>)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:
 8000f52:	42a2      	cmp	r2, r4
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>
 8000f56:	f002 f9a3 	bl	80032a0 <__libc_init_array>
 8000f5a:	f7ff f95d 	bl	8000218 <main>

08000f5e <LoopForever>:
 8000f5e:	e7fe      	b.n	8000f5e <LoopForever>
 8000f60:	2000a000 	.word	0x2000a000
 8000f64:	20000000 	.word	0x20000000
 8000f68:	200000a8 	.word	0x200000a8
 8000f6c:	08003418 	.word	0x08003418
 8000f70:	200000a8 	.word	0x200000a8
 8000f74:	200004cc 	.word	0x200004cc

08000f78 <ADC1_2_IRQHandler>:
 8000f78:	e7fe      	b.n	8000f78 <ADC1_2_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <HAL_Init+0x28>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_Init+0x28>)
 8000f86:	f043 0310 	orr.w	r3, r3, #16
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 f90d 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f000 f808 	bl	8000fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f98:	f7ff fe9c 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40022000 	.word	0x40022000

08000fa8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x54>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x58>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f917 	bl	80011fa <HAL_SYSTICK_Config>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00e      	b.n	8000ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d80a      	bhi.n	8000ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fe4:	f000 f8ed 	bl	80011c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <HAL_InitTick+0x5c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2000009c 	.word	0x2000009c
 8001000:	200000a4 	.word	0x200000a4
 8001004:	200000a0 	.word	0x200000a0

08001008 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	200000a4 	.word	0x200000a4
 800102c:	200004c8 	.word	0x200004c8

08001030 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;  
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200004c8 	.word	0x200004c8

08001048 <__NVIC_SetPriorityGrouping>:
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff47 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff5c 	bl	8001090 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffb0 	bl	8001168 <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001222:	e154      	b.n	80014ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2101      	movs	r1, #1
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8146 	beq.w	80014c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b01      	cmp	r3, #1
 8001246:	d005      	beq.n	8001254 <HAL_GPIO_Init+0x40>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d130      	bne.n	80012b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128a:	2201      	movs	r2, #1
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	091b      	lsrs	r3, r3, #4
 80012a0:	f003 0201 	and.w	r2, r3, #1
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d017      	beq.n	80012f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	2203      	movs	r2, #3
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d123      	bne.n	8001346 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3208      	adds	r2, #8
 8001306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	220f      	movs	r2, #15
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	691a      	ldr	r2, [r3, #16]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	08da      	lsrs	r2, r3, #3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3208      	adds	r2, #8
 8001340:	6939      	ldr	r1, [r7, #16]
 8001342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0203 	and.w	r2, r3, #3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 80a0 	beq.w	80014c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001388:	4b58      	ldr	r3, [pc, #352]	; (80014ec <HAL_GPIO_Init+0x2d8>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a57      	ldr	r2, [pc, #348]	; (80014ec <HAL_GPIO_Init+0x2d8>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b55      	ldr	r3, [pc, #340]	; (80014ec <HAL_GPIO_Init+0x2d8>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013a0:	4a53      	ldr	r2, [pc, #332]	; (80014f0 <HAL_GPIO_Init+0x2dc>)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	220f      	movs	r2, #15
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4013      	ands	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ca:	d019      	beq.n	8001400 <HAL_GPIO_Init+0x1ec>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a49      	ldr	r2, [pc, #292]	; (80014f4 <HAL_GPIO_Init+0x2e0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d013      	beq.n	80013fc <HAL_GPIO_Init+0x1e8>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a48      	ldr	r2, [pc, #288]	; (80014f8 <HAL_GPIO_Init+0x2e4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d00d      	beq.n	80013f8 <HAL_GPIO_Init+0x1e4>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a47      	ldr	r2, [pc, #284]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d007      	beq.n	80013f4 <HAL_GPIO_Init+0x1e0>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a46      	ldr	r2, [pc, #280]	; (8001500 <HAL_GPIO_Init+0x2ec>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d101      	bne.n	80013f0 <HAL_GPIO_Init+0x1dc>
 80013ec:	2304      	movs	r3, #4
 80013ee:	e008      	b.n	8001402 <HAL_GPIO_Init+0x1ee>
 80013f0:	2305      	movs	r3, #5
 80013f2:	e006      	b.n	8001402 <HAL_GPIO_Init+0x1ee>
 80013f4:	2303      	movs	r3, #3
 80013f6:	e004      	b.n	8001402 <HAL_GPIO_Init+0x1ee>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e002      	b.n	8001402 <HAL_GPIO_Init+0x1ee>
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <HAL_GPIO_Init+0x1ee>
 8001400:	2300      	movs	r3, #0
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	f002 0203 	and.w	r2, r2, #3
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	4093      	lsls	r3, r2
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001412:	4937      	ldr	r1, [pc, #220]	; (80014f0 <HAL_GPIO_Init+0x2dc>)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001420:	4b38      	ldr	r3, [pc, #224]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001444:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800144a:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800146e:	4a25      	ldr	r2, [pc, #148]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001498:	4a1a      	ldr	r2, [pc, #104]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4313      	orrs	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f47f aea3 	bne.w	8001224 <HAL_GPIO_Init+0x10>
  }
}
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
 80014e2:	371c      	adds	r7, #28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000
 80014f4:	48000400 	.word	0x48000400
 80014f8:	48000800 	.word	0x48000800
 80014fc:	48000c00 	.word	0x48000c00
 8001500:	48001000 	.word	0x48001000
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001524:	e002      	b.n	800152c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e081      	b.n	800164e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fbdc 	bl	8000d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2224      	movs	r2, #36	; 0x24
 8001568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001588:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001598:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d107      	bne.n	80015b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	e006      	b.n	80015c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d104      	bne.n	80015d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69d9      	ldr	r1, [r3, #28]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1a      	ldr	r2, [r3, #32]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0201 	orr.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2220      	movs	r2, #32
 800163a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b20      	cmp	r3, #32
 800166a:	d138      	bne.n	80016de <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001676:	2302      	movs	r3, #2
 8001678:	e032      	b.n	80016e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2224      	movs	r2, #36	; 0x24
 8001686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0201 	bic.w	r2, r2, #1
 8001698:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6819      	ldr	r1, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0201 	orr.w	r2, r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2220      	movs	r2, #32
 80016ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e000      	b.n	80016e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016de:	2302      	movs	r3, #2
  }
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b20      	cmp	r3, #32
 8001700:	d139      	bne.n	8001776 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800170c:	2302      	movs	r3, #2
 800170e:	e033      	b.n	8001778 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2224      	movs	r2, #36	; 0x24
 800171c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800173e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0201 	orr.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2220      	movs	r2, #32
 8001766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001776:	2302      	movs	r3, #2
  }
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001786:	b08b      	sub	sp, #44	; 0x2c
 8001788:	af06      	add	r7, sp, #24
 800178a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0c4      	b.n	8001920 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d106      	bne.n	80017b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fb3c 	bl	8000e28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2203      	movs	r2, #3
 80017b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f001 fd32 	bl	8003226 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	73fb      	strb	r3, [r7, #15]
 80017c6:	e040      	b.n	800184a <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	440b      	add	r3, r1
 80017d8:	3301      	adds	r3, #1
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	7bfa      	ldrb	r2, [r7, #15]
 80017f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	3303      	adds	r3, #3
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	440b      	add	r3, r1
 8001816:	3338      	adds	r3, #56	; 0x38
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800181c:	7bfa      	ldrb	r2, [r7, #15]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	440b      	add	r3, r1
 800182a:	333c      	adds	r3, #60	; 0x3c
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	440b      	add	r3, r1
 800183e:	3340      	adds	r3, #64	; 0x40
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	3301      	adds	r3, #1
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	d3b9      	bcc.n	80017c8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
 8001858:	e044      	b.n	80018e4 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800185a:	7bfa      	ldrb	r2, [r7, #15]
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	f203 1369 	addw	r3, r3, #361	; 0x169
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001870:	7bfa      	ldrb	r2, [r7, #15]
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001882:	7bfa      	ldrb	r2, [r7, #15]
 8001884:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	440b      	add	r3, r1
 8001894:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	440b      	add	r3, r1
 80018d6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	3301      	adds	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d3b5      	bcc.n	800185a <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	687e      	ldr	r6, [r7, #4]
 80018f6:	466d      	mov	r5, sp
 80018f8:	f106 0410 	add.w	r4, r6, #16
 80018fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	602b      	str	r3, [r5, #0]
 8001904:	1d33      	adds	r3, r6, #4
 8001906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001908:	6838      	ldr	r0, [r7, #0]
 800190a:	f001 fca7 	bl	800325c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800192e:	af00      	add	r7, sp, #0
 8001930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001934:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001938:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800193a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	f001 b823 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 817d 	beq.w	8001c5e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001964:	4bbc      	ldr	r3, [pc, #752]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b04      	cmp	r3, #4
 800196e:	d00c      	beq.n	800198a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001970:	4bb9      	ldr	r3, [pc, #740]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b08      	cmp	r3, #8
 800197a:	d15c      	bne.n	8001a36 <HAL_RCC_OscConfig+0x10e>
 800197c:	4bb6      	ldr	r3, [pc, #728]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001988:	d155      	bne.n	8001a36 <HAL_RCC_OscConfig+0x10e>
 800198a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800199e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a2:	fab3 f383 	clz	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	095b      	lsrs	r3, r3, #5
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d102      	bne.n	80019bc <HAL_RCC_OscConfig+0x94>
 80019b6:	4ba8      	ldr	r3, [pc, #672]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	e015      	b.n	80019e8 <HAL_RCC_OscConfig+0xc0>
 80019bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80019d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80019d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80019dc:	fa93 f3a3 	rbit	r3, r3
 80019e0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80019e4:	4b9c      	ldr	r3, [pc, #624]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80019f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80019f4:	fa92 f2a2 	rbit	r2, r2
 80019f8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80019fc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001a00:	fab2 f282 	clz	r2, r2
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	f002 021f 	and.w	r2, r2, #31
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f202 	lsl.w	r2, r1, r2
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 811f 	beq.w	8001c5c <HAL_RCC_OscConfig+0x334>
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f040 8116 	bne.w	8001c5c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	f000 bfaf 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12e>
 8001a48:	4b83      	ldr	r3, [pc, #524]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a82      	ldr	r2, [pc, #520]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e036      	b.n	8001ac4 <HAL_RCC_OscConfig+0x19c>
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x158>
 8001a66:	4b7c      	ldr	r3, [pc, #496]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a7b      	ldr	r2, [pc, #492]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a78      	ldr	r2, [pc, #480]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e021      	b.n	8001ac4 <HAL_RCC_OscConfig+0x19c>
 8001a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0x184>
 8001a92:	4b71      	ldr	r3, [pc, #452]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a70      	ldr	r2, [pc, #448]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	4b6e      	ldr	r3, [pc, #440]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6d      	ldr	r2, [pc, #436]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x19c>
 8001aac:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a69      	ldr	r2, [pc, #420]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a66      	ldr	r2, [pc, #408]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ac4:	4b64      	ldr	r3, [pc, #400]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	f023 020f 	bic.w	r2, r3, #15
 8001acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	495f      	ldr	r1, [pc, #380]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d059      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff fa9f 	bl	8001030 <HAL_GetTick>
 8001af2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff fa9a 	bl	8001030 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b64      	cmp	r3, #100	; 0x64
 8001b06:	d902      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	f000 bf43 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
 8001b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b12:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001b22:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	095b      	lsrs	r3, r3, #5
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d102      	bne.n	8001b40 <HAL_RCC_OscConfig+0x218>
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	e015      	b.n	8001b6c <HAL_RCC_OscConfig+0x244>
 8001b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b44:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b58:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b5c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b68:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b70:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b74:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b78:	fa92 f2a2 	rbit	r2, r2
 8001b7c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b80:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	f042 0220 	orr.w	r2, r2, #32
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f002 021f 	and.w	r2, r2, #31
 8001b94:	2101      	movs	r1, #1
 8001b96:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ab      	beq.n	8001af8 <HAL_RCC_OscConfig+0x1d0>
 8001ba0:	e05d      	b.n	8001c5e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fa45 	bl	8001030 <HAL_GetTick>
 8001ba6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fa40 	bl	8001030 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b64      	cmp	r3, #100	; 0x64
 8001bba:	d902      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	f000 bee9 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
 8001bc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bc6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001bd6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	095b      	lsrs	r3, r3, #5
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d102      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x2cc>
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	e015      	b.n	8001c20 <HAL_RCC_OscConfig+0x2f8>
 8001bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c0c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c10:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_RCC_OscConfig+0x330>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c24:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001c28:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c2c:	fa92 f2a2 	rbit	r2, r2
 8001c30:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c34:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c38:	fab2 f282 	clz	r2, r2
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	f042 0220 	orr.w	r2, r2, #32
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	f002 021f 	and.w	r2, r2, #31
 8001c48:	2101      	movs	r1, #1
 8001c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ab      	bne.n	8001bac <HAL_RCC_OscConfig+0x284>
 8001c54:	e003      	b.n	8001c5e <HAL_RCC_OscConfig+0x336>
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 817d 	beq.w	8001f6e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c74:	4ba6      	ldr	r3, [pc, #664]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00b      	beq.n	8001c98 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c80:	4ba3      	ldr	r3, [pc, #652]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d172      	bne.n	8001d72 <HAL_RCC_OscConfig+0x44a>
 8001c8c:	4ba0      	ldr	r3, [pc, #640]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d16c      	bne.n	8001d72 <HAL_RCC_OscConfig+0x44a>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001caa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x3a0>
 8001cc2:	4b93      	ldr	r3, [pc, #588]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	e013      	b.n	8001cf0 <HAL_RCC_OscConfig+0x3c8>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001cda:	2302      	movs	r3, #2
 8001cdc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ce0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001cec:	4b88      	ldr	r3, [pc, #544]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001cf6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001cfa:	fa92 f2a2 	rbit	r2, r2
 8001cfe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d02:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d06:	fab2 f282 	clz	r2, r2
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	f042 0220 	orr.w	r2, r2, #32
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	f002 021f 	and.w	r2, r2, #31
 8001d16:	2101      	movs	r1, #1
 8001d18:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00a      	beq.n	8001d38 <HAL_RCC_OscConfig+0x410>
 8001d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d002      	beq.n	8001d38 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f000 be2e 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d38:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	21f8      	movs	r1, #248	; 0xf8
 8001d4e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d56:	fa91 f1a1 	rbit	r1, r1
 8001d5a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001d5e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001d62:	fab1 f181 	clz	r1, r1
 8001d66:	b2c9      	uxtb	r1, r1
 8001d68:	408b      	lsls	r3, r1
 8001d6a:	4969      	ldr	r1, [pc, #420]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d70:	e0fd      	b.n	8001f6e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8088 	beq.w	8001e94 <HAL_RCC_OscConfig+0x56c>
 8001d84:	2301      	movs	r3, #1
 8001d86:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9a:	fab3 f383 	clz	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001da4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	461a      	mov	r2, r3
 8001dac:	2301      	movs	r3, #1
 8001dae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff f93e 	bl	8001030 <HAL_GetTick>
 8001db4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff f939 	bl	8001030 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d902      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	f000 bde2 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001de2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d102      	bne.n	8001e00 <HAL_RCC_OscConfig+0x4d8>
 8001dfa:	4b45      	ldr	r3, [pc, #276]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	e013      	b.n	8001e28 <HAL_RCC_OscConfig+0x500>
 8001e00:	2302      	movs	r3, #2
 8001e02:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e12:	2302      	movs	r3, #2
 8001e14:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e18:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e24:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	2202      	movs	r2, #2
 8001e2a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e2e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e32:	fa92 f2a2 	rbit	r2, r2
 8001e36:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001e3a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001e3e:	fab2 f282 	clz	r2, r2
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	f042 0220 	orr.w	r2, r2, #32
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f002 021f 	and.w	r2, r2, #31
 8001e4e:	2101      	movs	r1, #1
 8001e50:	fa01 f202 	lsl.w	r2, r1, r2
 8001e54:	4013      	ands	r3, r2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0af      	beq.n	8001dba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	21f8      	movs	r1, #248	; 0xf8
 8001e70:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e78:	fa91 f1a1 	rbit	r1, r1
 8001e7c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e80:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e84:	fab1 f181 	clz	r1, r1
 8001e88:	b2c9      	uxtb	r1, r1
 8001e8a:	408b      	lsls	r3, r1
 8001e8c:	4920      	ldr	r1, [pc, #128]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x646>
 8001e94:	2301      	movs	r3, #1
 8001e96:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ea6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f8b6 	bl	8001030 <HAL_GetTick>
 8001ec4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff f8b1 	bl	8001030 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d902      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	f000 bd5a 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d104      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5ec>
 8001f0a:	4b01      	ldr	r3, [pc, #4]	; (8001f10 <HAL_RCC_OscConfig+0x5e8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	e015      	b.n	8001f3c <HAL_RCC_OscConfig+0x614>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	2302      	movs	r3, #2
 8001f16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f26:	2302      	movs	r3, #2
 8001f28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f38:	4bc8      	ldr	r3, [pc, #800]	; (800225c <HAL_RCC_OscConfig+0x934>)
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001f42:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f46:	fa92 f2a2 	rbit	r2, r2
 8001f4a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f4e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f52:	fab2 f282 	clz	r2, r2
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	f042 0220 	orr.w	r2, r2, #32
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	f002 021f 	and.w	r2, r2, #31
 8001f62:	2101      	movs	r1, #1
 8001f64:	fa01 f202 	lsl.w	r2, r1, r2
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ad      	bne.n	8001eca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8110 	beq.w	80021a4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d079      	beq.n	8002088 <HAL_RCC_OscConfig+0x760>
 8001f94:	2301      	movs	r3, #1
 8001f96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4bab      	ldr	r3, [pc, #684]	; (8002260 <HAL_RCC_OscConfig+0x938>)
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2301      	movs	r3, #1
 8001fbc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f837 	bl	8001030 <HAL_GetTick>
 8001fc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff f832 	bl	8001030 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d902      	bls.n	8001fde <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	f000 bcdb 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001fe8:	fa93 f3a3 	rbit	r3, r3
 8001fec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002000:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	fa93 f2a3 	rbit	r2, r3
 800200a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800201c:	2202      	movs	r2, #2
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f2a3 	rbit	r2, r3
 800202e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002032:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002036:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002038:	4b88      	ldr	r3, [pc, #544]	; (800225c <HAL_RCC_OscConfig+0x934>)
 800203a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800203c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002040:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002044:	2102      	movs	r1, #2
 8002046:	6019      	str	r1, [r3, #0]
 8002048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	fa93 f1a3 	rbit	r1, r3
 8002056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800205e:	6019      	str	r1, [r3, #0]
  return result;
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0a0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x6a0>
 8002086:	e08d      	b.n	80021a4 <HAL_RCC_OscConfig+0x87c>
 8002088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002098:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	fa93 f2a3 	rbit	r2, r3
 80020a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020aa:	601a      	str	r2, [r3, #0]
  return result;
 80020ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80020b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	4b68      	ldr	r3, [pc, #416]	; (8002260 <HAL_RCC_OscConfig+0x938>)
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	461a      	mov	r2, r3
 80020c6:	2300      	movs	r3, #0
 80020c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7fe ffb1 	bl	8001030 <HAL_GetTick>
 80020ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d4:	f7fe ffac 	bl	8001030 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d902      	bls.n	80020ea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	f000 bc55 	b.w	8002994 <HAL_RCC_OscConfig+0x106c>
 80020ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80020f2:	2202      	movs	r2, #2
 80020f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f2a3 	rbit	r2, r3
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002112:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002116:	2202      	movs	r2, #2
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002136:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800213a:	2202      	movs	r2, #2
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	fa93 f2a3 	rbit	r2, r3
 800214c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002150:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002154:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_RCC_OscConfig+0x934>)
 8002158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002162:	2102      	movs	r1, #2
 8002164:	6019      	str	r1, [r3, #0]
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f1a3 	rbit	r1, r3
 8002174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002178:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800217c:	6019      	str	r1, [r3, #0]
  return result;
 800217e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002182:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2101      	movs	r1, #1
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d197      	bne.n	80020d4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 81a1 	beq.w	80024fc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c0:	4b26      	ldr	r3, [pc, #152]	; (800225c <HAL_RCC_OscConfig+0x934>)
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d116      	bne.n	80021fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_RCC_OscConfig+0x934>)
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	4a22      	ldr	r2, [pc, #136]	; (800225c <HAL_RCC_OscConfig+0x934>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	61d3      	str	r3, [r2, #28]
 80021d8:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_RCC_OscConfig+0x934>)
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80021e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ee:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80021f2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fa:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <HAL_RCC_OscConfig+0x93c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d11a      	bne.n	800223c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <HAL_RCC_OscConfig+0x93c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a16      	ldr	r2, [pc, #88]	; (8002264 <HAL_RCC_OscConfig+0x93c>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7fe ff0d 	bl	8001030 <HAL_GetTick>
 8002216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	e009      	b.n	8002230 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221c:	f7fe ff08 	bl	8001030 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	; 0x64
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e3b1      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_RCC_OscConfig+0x93c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ef      	beq.n	800221c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d10d      	bne.n	8002268 <HAL_RCC_OscConfig+0x940>
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_RCC_OscConfig+0x934>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4a02      	ldr	r2, [pc, #8]	; (800225c <HAL_RCC_OscConfig+0x934>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6213      	str	r3, [r2, #32]
 8002258:	e03c      	b.n	80022d4 <HAL_RCC_OscConfig+0x9ac>
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	10908120 	.word	0x10908120
 8002264:	40007000 	.word	0x40007000
 8002268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10c      	bne.n	8002292 <HAL_RCC_OscConfig+0x96a>
 8002278:	4bc1      	ldr	r3, [pc, #772]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4ac0      	ldr	r2, [pc, #768]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	4bbe      	ldr	r3, [pc, #760]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4abd      	ldr	r2, [pc, #756]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 800228a:	f023 0304 	bic.w	r3, r3, #4
 800228e:	6213      	str	r3, [r2, #32]
 8002290:	e020      	b.n	80022d4 <HAL_RCC_OscConfig+0x9ac>
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x994>
 80022a2:	4bb7      	ldr	r3, [pc, #732]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4ab6      	ldr	r2, [pc, #728]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022a8:	f043 0304 	orr.w	r3, r3, #4
 80022ac:	6213      	str	r3, [r2, #32]
 80022ae:	4bb4      	ldr	r3, [pc, #720]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4ab3      	ldr	r2, [pc, #716]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6213      	str	r3, [r2, #32]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0x9ac>
 80022bc:	4bb0      	ldr	r3, [pc, #704]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4aaf      	ldr	r2, [pc, #700]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	4bad      	ldr	r3, [pc, #692]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4aac      	ldr	r2, [pc, #688]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80022ce:	f023 0304 	bic.w	r3, r3, #4
 80022d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8081 	beq.w	80023e8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e6:	f7fe fea3 	bl	8001030 <HAL_GetTick>
 80022ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f7fe fe9e 	bl	8001030 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e345      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
 8002308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002310:	2202      	movs	r2, #2
 8002312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002318:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	fa93 f2a3 	rbit	r2, r3
 8002322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002326:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002330:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002334:	2202      	movs	r2, #2
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	fa93 f2a3 	rbit	r2, r3
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800234e:	601a      	str	r2, [r3, #0]
  return result;
 8002350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002354:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002358:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	095b      	lsrs	r3, r3, #5
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d102      	bne.n	8002374 <HAL_RCC_OscConfig+0xa4c>
 800236e:	4b84      	ldr	r3, [pc, #528]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	e013      	b.n	800239c <HAL_RCC_OscConfig+0xa74>
 8002374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002378:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800237c:	2202      	movs	r2, #2
 800237e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002384:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	fa93 f2a3 	rbit	r2, r3
 800238e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002392:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	4b79      	ldr	r3, [pc, #484]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023a4:	2102      	movs	r1, #2
 80023a6:	6011      	str	r1, [r2, #0]
 80023a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	fa92 f1a2 	rbit	r1, r2
 80023b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80023be:	6011      	str	r1, [r2, #0]
  return result;
 80023c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023c4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	fab2 f282 	clz	r2, r2
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	f002 021f 	and.w	r2, r2, #31
 80023da:	2101      	movs	r1, #1
 80023dc:	fa01 f202 	lsl.w	r2, r1, r2
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d084      	beq.n	80022f0 <HAL_RCC_OscConfig+0x9c8>
 80023e6:	e07f      	b.n	80024e8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e8:	f7fe fe22 	bl	8001030 <HAL_GetTick>
 80023ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f0:	e00b      	b.n	800240a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe fe1d 	bl	8001030 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e2c4      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002412:	2202      	movs	r2, #2
 8002414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002428:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002432:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002436:	2202      	movs	r2, #2
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	fa93 f2a3 	rbit	r2, r3
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002450:	601a      	str	r2, [r3, #0]
  return result;
 8002452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002456:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800245a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d102      	bne.n	8002476 <HAL_RCC_OscConfig+0xb4e>
 8002470:	4b43      	ldr	r3, [pc, #268]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	e013      	b.n	800249e <HAL_RCC_OscConfig+0xb76>
 8002476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800247e:	2202      	movs	r2, #2
 8002480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002486:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	fa93 f2a3 	rbit	r2, r3
 8002490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002494:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	4b39      	ldr	r3, [pc, #228]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024a6:	2102      	movs	r1, #2
 80024a8:	6011      	str	r1, [r2, #0]
 80024aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	fa92 f1a2 	rbit	r1, r2
 80024b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024bc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80024c0:	6011      	str	r1, [r2, #0]
  return result;
 80024c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024c6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	fab2 f282 	clz	r2, r2
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	f002 021f 	and.w	r2, r2, #31
 80024dc:	2101      	movs	r1, #1
 80024de:	fa01 f202 	lsl.w	r2, r1, r2
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d184      	bne.n	80023f2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d105      	bne.n	80024fc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f0:	4b23      	ldr	r3, [pc, #140]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	4a22      	ldr	r2, [pc, #136]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 80024f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002500:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8242 	beq.w	8002992 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800250e:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <HAL_RCC_OscConfig+0xc58>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b08      	cmp	r3, #8
 8002518:	f000 8213 	beq.w	8002942 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800251c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002520:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	2b02      	cmp	r3, #2
 800252a:	f040 8162 	bne.w	80027f2 <HAL_RCC_OscConfig+0xeca>
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002536:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800253a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002540:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	fa93 f2a3 	rbit	r2, r3
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002552:	601a      	str	r2, [r3, #0]
  return result;
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800255c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002568:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	461a      	mov	r2, r3
 8002570:	2300      	movs	r3, #0
 8002572:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7fe fd5c 	bl	8001030 <HAL_GetTick>
 8002578:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257c:	e00c      	b.n	8002598 <HAL_RCC_OscConfig+0xc70>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe fd54 	bl	8001030 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e1fd      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
 8002598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	fa93 f2a3 	rbit	r2, r3
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80025bc:	601a      	str	r2, [r3, #0]
  return result;
 80025be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80025c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f043 0301 	orr.w	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d102      	bne.n	80025e2 <HAL_RCC_OscConfig+0xcba>
 80025dc:	4bb0      	ldr	r3, [pc, #704]	; (80028a0 <HAL_RCC_OscConfig+0xf78>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	e027      	b.n	8002632 <HAL_RCC_OscConfig+0xd0a>
 80025e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80025ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	fa93 f2a3 	rbit	r2, r3
 80025fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002602:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	fa93 f2a3 	rbit	r2, r3
 8002624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002628:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	4b9c      	ldr	r3, [pc, #624]	; (80028a0 <HAL_RCC_OscConfig+0xf78>)
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002636:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800263a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800263e:	6011      	str	r1, [r2, #0]
 8002640:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002644:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	fa92 f1a2 	rbit	r1, r2
 800264e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002652:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002656:	6011      	str	r1, [r2, #0]
  return result;
 8002658:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800265c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	fab2 f282 	clz	r2, r2
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	f042 0220 	orr.w	r2, r2, #32
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	f002 021f 	and.w	r2, r2, #31
 8002672:	2101      	movs	r1, #1
 8002674:	fa01 f202 	lsl.w	r2, r1, r2
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d182      	bne.n	8002584 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800267e:	4b88      	ldr	r3, [pc, #544]	; (80028a0 <HAL_RCC_OscConfig+0xf78>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	430b      	orrs	r3, r1
 80026a0:	497f      	ldr	r1, [pc, #508]	; (80028a0 <HAL_RCC_OscConfig+0xf78>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
 80026a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026aa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80026ca:	601a      	str	r2, [r3, #0]
  return result;
 80026cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80026d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	461a      	mov	r2, r3
 80026e8:	2301      	movs	r3, #1
 80026ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fca0 	bl	8001030 <HAL_GetTick>
 80026f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f4:	e009      	b.n	800270a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f6:	f7fe fc9b 	bl	8001030 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e144      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002712:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002716:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	fa93 f2a3 	rbit	r2, r3
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800272e:	601a      	str	r2, [r3, #0]
  return result;
 8002730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002734:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002738:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d102      	bne.n	8002754 <HAL_RCC_OscConfig+0xe2c>
 800274e:	4b54      	ldr	r3, [pc, #336]	; (80028a0 <HAL_RCC_OscConfig+0xf78>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	e027      	b.n	80027a4 <HAL_RCC_OscConfig+0xe7c>
 8002754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002758:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800275c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	fa93 f2a3 	rbit	r2, r3
 8002770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002774:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002782:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	4b3f      	ldr	r3, [pc, #252]	; (80028a0 <HAL_RCC_OscConfig+0xf78>)
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027a8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027b0:	6011      	str	r1, [r2, #0]
 80027b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027b6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	fa92 f1a2 	rbit	r1, r2
 80027c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027c4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80027c8:	6011      	str	r1, [r2, #0]
  return result;
 80027ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	fab2 f282 	clz	r2, r2
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f042 0220 	orr.w	r2, r2, #32
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f002 021f 	and.w	r2, r2, #31
 80027e4:	2101      	movs	r1, #1
 80027e6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d082      	beq.n	80026f6 <HAL_RCC_OscConfig+0xdce>
 80027f0:	e0cf      	b.n	8002992 <HAL_RCC_OscConfig+0x106a>
 80027f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80027fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002816:	601a      	str	r2, [r3, #0]
  return result;
 8002818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002820:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800282c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	461a      	mov	r2, r3
 8002834:	2300      	movs	r3, #0
 8002836:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7fe fbfa 	bl	8001030 <HAL_GetTick>
 800283c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002840:	e009      	b.n	8002856 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe fbf5 	bl	8001030 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e09e      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
 8002856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800285e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002868:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	fa93 f2a3 	rbit	r2, r3
 8002872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002876:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800287a:	601a      	str	r2, [r3, #0]
  return result;
 800287c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002880:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002884:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d104      	bne.n	80028a4 <HAL_RCC_OscConfig+0xf7c>
 800289a:	4b01      	ldr	r3, [pc, #4]	; (80028a0 <HAL_RCC_OscConfig+0xf78>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e029      	b.n	80028f4 <HAL_RCC_OscConfig+0xfcc>
 80028a0:	40021000 	.word	0x40021000
 80028a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80028d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028dc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	fa93 f2a3 	rbit	r2, r3
 80028e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_RCC_OscConfig+0x1078>)
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028f8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80028fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002900:	6011      	str	r1, [r2, #0]
 8002902:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002906:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	fa92 f1a2 	rbit	r1, r2
 8002910:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002914:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002918:	6011      	str	r1, [r2, #0]
  return result;
 800291a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800291e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	fab2 f282 	clz	r2, r2
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	f042 0220 	orr.w	r2, r2, #32
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	f002 021f 	and.w	r2, r2, #31
 8002934:	2101      	movs	r1, #1
 8002936:	fa01 f202 	lsl.w	r2, r1, r2
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d180      	bne.n	8002842 <HAL_RCC_OscConfig+0xf1a>
 8002940:	e027      	b.n	8002992 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e01e      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_OscConfig+0x1078>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800295e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002962:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	429a      	cmp	r2, r3
 8002974:	d10b      	bne.n	800298e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002976:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800297a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800297e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002982:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800298a:	429a      	cmp	r2, r3
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b09e      	sub	sp, #120	; 0x78
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e162      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b90      	ldr	r3, [pc, #576]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d910      	bls.n	80029ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b8d      	ldr	r3, [pc, #564]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 0207 	bic.w	r2, r3, #7
 80029d2:	498b      	ldr	r1, [pc, #556]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b89      	ldr	r3, [pc, #548]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e14a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b82      	ldr	r3, [pc, #520]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	497f      	ldr	r1, [pc, #508]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80dc 	beq.w	8002bd0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d13c      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xf6>
 8002a20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d102      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xa6>
 8002a44:	4b6f      	ldr	r3, [pc, #444]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	e00f      	b.n	8002a6a <HAL_RCC_ClockConfig+0xc6>
 8002a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	667b      	str	r3, [r7, #100]	; 0x64
 8002a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a66:	4b67      	ldr	r3, [pc, #412]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a72:	fa92 f2a2 	rbit	r2, r2
 8002a76:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a7a:	fab2 f282 	clz	r2, r2
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	f042 0220 	orr.w	r2, r2, #32
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	f002 021f 	and.w	r2, r2, #31
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d17b      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0f3      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d13c      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x178>
 8002aa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aa6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	fab3 f383 	clz	r3, r3
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d102      	bne.n	8002acc <HAL_RCC_ClockConfig+0x128>
 8002ac6:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	e00f      	b.n	8002aec <HAL_RCC_ClockConfig+0x148>
 8002acc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8002ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ade:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae8:	4b46      	ldr	r3, [pc, #280]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af0:	63ba      	str	r2, [r7, #56]	; 0x38
 8002af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002af4:	fa92 f2a2 	rbit	r2, r2
 8002af8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002afc:	fab2 f282 	clz	r2, r2
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	f042 0220 	orr.w	r2, r2, #32
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	f002 021f 	and.w	r2, r2, #31
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d13a      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b2      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d102      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x1a0>
 8002b3e:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	e00d      	b.n	8002b60 <HAL_RCC_ClockConfig+0x1bc>
 8002b44:	2302      	movs	r3, #2
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b50:	2302      	movs	r3, #2
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2202      	movs	r2, #2
 8002b62:	61ba      	str	r2, [r7, #24]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	fa92 f2a2 	rbit	r2, r2
 8002b6a:	617a      	str	r2, [r7, #20]
  return result;
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	fab2 f282 	clz	r2, r2
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	f042 0220 	orr.w	r2, r2, #32
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f002 021f 	and.w	r2, r2, #31
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f202 	lsl.w	r2, r1, r2
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e079      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f023 0203 	bic.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	491a      	ldr	r1, [pc, #104]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ba0:	f7fe fa46 	bl	8001030 <HAL_GetTick>
 8002ba4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba8:	f7fe fa42 	bl	8001030 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e061      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <HAL_RCC_ClockConfig+0x260>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 020c 	and.w	r2, r3, #12
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d1eb      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d214      	bcs.n	8002c08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 0207 	bic.w	r2, r3, #7
 8002be6:	4906      	ldr	r1, [pc, #24]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <HAL_RCC_ClockConfig+0x25c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e040      	b.n	8002c82 <HAL_RCC_ClockConfig+0x2de>
 8002c00:	40022000 	.word	0x40022000
 8002c04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	491a      	ldr	r1, [pc, #104]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4912      	ldr	r1, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c46:	f000 f829 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_RCC_ClockConfig+0x2e8>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c54:	22f0      	movs	r2, #240	; 0xf0
 8002c56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	fa92 f2a2 	rbit	r2, r2
 8002c5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	fab2 f282 	clz	r2, r2
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	40d3      	lsrs	r3, r2
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x2ec>)
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c72:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <HAL_RCC_ClockConfig+0x2f0>)
 8002c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_RCC_ClockConfig+0x2f4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe f994 	bl	8000fa8 <HAL_InitTick>
  
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3778      	adds	r7, #120	; 0x78
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	080033e0 	.word	0x080033e0
 8002c94:	2000009c 	.word	0x2000009c
 8002c98:	200000a0 	.word	0x200000a0

08002c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b08b      	sub	sp, #44	; 0x2c
 8002ca0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002cb6:	4b29      	ldr	r3, [pc, #164]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x30>
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x36>
 8002cca:	e03c      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ccc:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cce:	623b      	str	r3, [r7, #32]
      break;
 8002cd0:	e03c      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002cd8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002cdc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	fa92 f2a2 	rbit	r2, r2
 8002ce4:	607a      	str	r2, [r7, #4]
  return result;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	fab2 f282 	clz	r2, r2
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	40d3      	lsrs	r3, r2
 8002cf0:	4a1c      	ldr	r2, [pc, #112]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	220f      	movs	r2, #15
 8002d00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	fa92 f2a2 	rbit	r2, r2
 8002d08:	60fa      	str	r2, [r7, #12]
  return result;
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	40d3      	lsrs	r3, r2
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d24:	4a0e      	ldr	r2, [pc, #56]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
 8002d34:	e004      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	4a0c      	ldr	r2, [pc, #48]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	623b      	str	r3, [r7, #32]
      break;
 8002d44:	e002      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d48:	623b      	str	r3, [r7, #32]
      break;
 8002d4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	372c      	adds	r7, #44	; 0x2c
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	007a1200 	.word	0x007a1200
 8002d64:	080033f0 	.word	0x080033f0
 8002d68:	08003400 	.word	0x08003400
 8002d6c:	003d0900 	.word	0x003d0900

08002d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b092      	sub	sp, #72	; 0x48
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80d4 	beq.w	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d94:	4b4e      	ldr	r3, [pc, #312]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10e      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da0:	4b4b      	ldr	r3, [pc, #300]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	4a4a      	ldr	r2, [pc, #296]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002daa:	61d3      	str	r3, [r2, #28]
 8002dac:	4b48      	ldr	r3, [pc, #288]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbe:	4b45      	ldr	r3, [pc, #276]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d118      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dca:	4b42      	ldr	r3, [pc, #264]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a41      	ldr	r2, [pc, #260]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd6:	f7fe f92b 	bl	8001030 <HAL_GetTick>
 8002dda:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ddc:	e008      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dde:	f7fe f927 	bl	8001030 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b64      	cmp	r3, #100	; 0x64
 8002dea:	d901      	bls.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e169      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df0:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dfc:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e04:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8084 	beq.w	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d07c      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	461a      	mov	r2, r3
 8002e46:	2301      	movs	r3, #1
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e6e:	4a18      	ldr	r2, [pc, #96]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e72:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d04b      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7fe f8d7 	bl	8001030 <HAL_GetTick>
 8002e82:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e84:	e00a      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f7fe f8d3 	bl	8001030 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e113      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	623b      	str	r3, [r7, #32]
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	61fb      	str	r3, [r7, #28]
  return result;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d108      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002eca:	4b01      	ldr	r3, [pc, #4]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	e00d      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	10908100 	.word	0x10908100
 8002edc:	2302      	movs	r3, #2
 8002ede:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	4b78      	ldr	r3, [pc, #480]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	2202      	movs	r2, #2
 8002eee:	613a      	str	r2, [r7, #16]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	fa92 f2a2 	rbit	r2, r2
 8002ef6:	60fa      	str	r2, [r7, #12]
  return result;
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	fab2 f282 	clz	r2, r2
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	f002 021f 	and.w	r2, r2, #31
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0b7      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f16:	4b6d      	ldr	r3, [pc, #436]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	496a      	ldr	r1, [pc, #424]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f30:	4b66      	ldr	r3, [pc, #408]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	4a65      	ldr	r2, [pc, #404]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d008      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f48:	4b60      	ldr	r3, [pc, #384]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f023 0203 	bic.w	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	495d      	ldr	r1, [pc, #372]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d008      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f66:	4b59      	ldr	r3, [pc, #356]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4956      	ldr	r1, [pc, #344]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f84:	4b51      	ldr	r3, [pc, #324]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	494e      	ldr	r1, [pc, #312]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fa2:	4b4a      	ldr	r3, [pc, #296]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f023 0210 	bic.w	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	4947      	ldr	r1, [pc, #284]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002fc0:	4b42      	ldr	r3, [pc, #264]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	493f      	ldr	r1, [pc, #252]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fde:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f023 0220 	bic.w	r2, r3, #32
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	4938      	ldr	r1, [pc, #224]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ffc:	4b33      	ldr	r3, [pc, #204]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	4930      	ldr	r1, [pc, #192]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800300a:	4313      	orrs	r3, r2
 800300c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800301a:	4b2c      	ldr	r3, [pc, #176]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	4929      	ldr	r1, [pc, #164]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003028:	4313      	orrs	r3, r2
 800302a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003038:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	4921      	ldr	r1, [pc, #132]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003052:	2b00      	cmp	r3, #0
 8003054:	d008      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003056:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	491a      	ldr	r1, [pc, #104]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003064:	4313      	orrs	r3, r2
 8003066:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	4912      	ldr	r1, [pc, #72]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003082:	4313      	orrs	r3, r2
 8003084:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	490b      	ldr	r1, [pc, #44]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	4903      	ldr	r1, [pc, #12]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3748      	adds	r7, #72	; 0x48
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000

080030d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e09d      	b.n	800321e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d108      	bne.n	80030fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030f2:	d009      	beq.n	8003108 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	61da      	str	r2, [r3, #28]
 80030fa:	e005      	b.n	8003108 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fd fe3e 	bl	8000da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800313e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003148:	d902      	bls.n	8003150 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	e002      	b.n	8003156 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003154:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800315e:	d007      	beq.n	8003170 <HAL_SPI_Init+0xa0>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003168:	d002      	beq.n	8003170 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b2:	ea42 0103 	orr.w	r1, r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	0c1b      	lsrs	r3, r3, #16
 80031cc:	f003 0204 	and.w	r2, r3, #4
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031ec:	ea42 0103 	orr.w	r1, r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800320c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800322e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003232:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	b29b      	uxth	r3, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	b29b      	uxth	r3, r3
 8003244:	4013      	ands	r3, r2
 8003246:	b29a      	uxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800325c:	b084      	sub	sp, #16
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	f107 0014 	add.w	r0, r7, #20
 800326a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	b004      	add	sp, #16
 800329c:	4770      	bx	lr
	...

080032a0 <__libc_init_array>:
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	4d0d      	ldr	r5, [pc, #52]	; (80032d8 <__libc_init_array+0x38>)
 80032a4:	4c0d      	ldr	r4, [pc, #52]	; (80032dc <__libc_init_array+0x3c>)
 80032a6:	1b64      	subs	r4, r4, r5
 80032a8:	10a4      	asrs	r4, r4, #2
 80032aa:	2600      	movs	r6, #0
 80032ac:	42a6      	cmp	r6, r4
 80032ae:	d109      	bne.n	80032c4 <__libc_init_array+0x24>
 80032b0:	4d0b      	ldr	r5, [pc, #44]	; (80032e0 <__libc_init_array+0x40>)
 80032b2:	4c0c      	ldr	r4, [pc, #48]	; (80032e4 <__libc_init_array+0x44>)
 80032b4:	f000 f828 	bl	8003308 <_init>
 80032b8:	1b64      	subs	r4, r4, r5
 80032ba:	10a4      	asrs	r4, r4, #2
 80032bc:	2600      	movs	r6, #0
 80032be:	42a6      	cmp	r6, r4
 80032c0:	d105      	bne.n	80032ce <__libc_init_array+0x2e>
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c8:	4798      	blx	r3
 80032ca:	3601      	adds	r6, #1
 80032cc:	e7ee      	b.n	80032ac <__libc_init_array+0xc>
 80032ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d2:	4798      	blx	r3
 80032d4:	3601      	adds	r6, #1
 80032d6:	e7f2      	b.n	80032be <__libc_init_array+0x1e>
 80032d8:	08003410 	.word	0x08003410
 80032dc:	08003410 	.word	0x08003410
 80032e0:	08003410 	.word	0x08003410
 80032e4:	08003414 	.word	0x08003414

080032e8 <memset>:
 80032e8:	4402      	add	r2, r0
 80032ea:	4603      	mov	r3, r0
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d100      	bne.n	80032f2 <memset+0xa>
 80032f0:	4770      	bx	lr
 80032f2:	f803 1b01 	strb.w	r1, [r3], #1
 80032f6:	e7f9      	b.n	80032ec <memset+0x4>

080032f8 <strcpy>:
 80032f8:	4603      	mov	r3, r0
 80032fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032fe:	f803 2b01 	strb.w	r2, [r3], #1
 8003302:	2a00      	cmp	r2, #0
 8003304:	d1f9      	bne.n	80032fa <strcpy+0x2>
 8003306:	4770      	bx	lr

08003308 <_init>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	bf00      	nop
 800330c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330e:	bc08      	pop	{r3}
 8003310:	469e      	mov	lr, r3
 8003312:	4770      	bx	lr

08003314 <_fini>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	bf00      	nop
 8003318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331a:	bc08      	pop	{r3}
 800331c:	469e      	mov	lr, r3
 800331e:	4770      	bx	lr
