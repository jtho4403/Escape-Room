
serial_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002be8  08002be8  00012be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c20  08002c20  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002c20  08002c20  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c20  08002c20  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c24  08002c24  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000003c4  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d8  200003d8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d5f3  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ea0  00000000  00000000  0002d637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  0002f4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a50  00000000  00000000  00030020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f628  00000000  00000000  00030a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ec2b  00000000  00000000  00060098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab0bf  00000000  00000000  0006ecc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00119d82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e64  00000000  00000000  00119dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002bd0 	.word	0x08002bd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002bd0 	.word	0x08002bd0

080001c8 <enable_clocks>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// enable the clocks for desired peripherals (GPIOA, C and E)

void enable_clocks() {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <enable_clocks+0x1c>)
 80001ce:	695b      	ldr	r3, [r3, #20]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <enable_clocks+0x1c>)
 80001d2:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80001d6:	6153      	str	r3, [r2, #20]
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	40021000 	.word	0x40021000

080001e8 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001ee:	4b06      	ldr	r3, [pc, #24]	; (8000208 <initialise_board+0x20>)
 80001f0:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f245 5255 	movw	r2, #21845	; 0x5555
 80001f8:	801a      	strh	r2, [r3, #0]
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	48001002 	.word	0x48001002

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b086      	sub	sp, #24
 8000210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t input[8] = "WASD";
 8000212:	4a15      	ldr	r2, [pc, #84]	; (8000268 <main+0x5c>)
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	e892 0003 	ldmia.w	r2, {r0, r1}
 800021a:	6018      	str	r0, [r3, #0]
 800021c:	3304      	adds	r3, #4
 800021e:	7019      	strb	r1, [r3, #0]
 8000220:	f107 0309 	add.w	r3, r7, #9
 8000224:	2200      	movs	r2, #0
 8000226:	801a      	strh	r2, [r3, #0]
 8000228:	709a      	strb	r2, [r3, #2]
	uint32_t *flag = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
	uint32_t count = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	613b      	str	r3, [r7, #16]

	int k = y;
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <main+0x60>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	60fb      	str	r3, [r7, #12]

	enable_clocks();
 8000238:	f7ff ffc6 	bl	80001c8 <enable_clocks>
	initialise_board();
 800023c:	f7ff ffd4 	bl	80001e8 <initialise_board>

	CheckSequence(input, count, flag);
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	697a      	ldr	r2, [r7, #20]
 8000244:	6939      	ldr	r1, [r7, #16]
 8000246:	4618      	mov	r0, r3
 8000248:	f000 f998 	bl	800057c <CheckSequence>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024c:	f000 fb02 	bl	8000854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000250:	f000 f80e 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000254:	f000 f90e 	bl	8000474 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000258:	f000 f86c 	bl	8000334 <MX_I2C1_Init>
  MX_SPI1_Init();
 800025c:	f000 f8aa 	bl	80003b4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000260:	f000 f8e6 	bl	8000430 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000264:	e7fe      	b.n	8000264 <main+0x58>
 8000266:	bf00      	nop
 8000268:	08002be8 	.word	0x08002be8
 800026c:	20000004 	.word	0x20000004

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b09e      	sub	sp, #120	; 0x78
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800027a:	2228      	movs	r2, #40	; 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fc9e 	bl	8002bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000294:	463b      	mov	r3, r7
 8000296:	223c      	movs	r2, #60	; 0x3c
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fc90 	bl	8002bc0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002a0:	2303      	movs	r3, #3
 80002a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ae:	2301      	movs	r3, #1
 80002b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b2:	2310      	movs	r3, #16
 80002b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b6:	2302      	movs	r3, #2
 80002b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002c4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 ff98 	bl	8001200 <HAL_RCC_OscConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002d6:	f000 f94b 	bl	8000570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	230f      	movs	r3, #15
 80002dc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002de:	2302      	movs	r3, #2
 80002e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002f4:	2101      	movs	r1, #1
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 ffc0 	bl	800227c <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000302:	f000 f935 	bl	8000570 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000306:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <SystemClock_Config+0xc0>)
 8000308:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800030a:	2300      	movs	r3, #0
 800030c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800030e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000312:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000314:	463b      	mov	r3, r7
 8000316:	4618      	mov	r0, r3
 8000318:	f002 f996 	bl	8002648 <HAL_RCCEx_PeriphCLKConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000322:	f000 f925 	bl	8000570 <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3778      	adds	r7, #120	; 0x78
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	00020020 	.word	0x00020020

08000334 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_I2C1_Init+0x74>)
 800033a:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <MX_I2C1_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000340:	4a1b      	ldr	r2, [pc, #108]	; (80003b0 <MX_I2C1_Init+0x7c>)
 8000342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <MX_I2C1_Init+0x74>)
 800034c:	2201      	movs	r2, #1
 800034e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036e:	480e      	ldr	r0, [pc, #56]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000370:	f000 fd4e 	bl	8000e10 <HAL_I2C_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800037a:	f000 f8f9 	bl	8000570 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037e:	2100      	movs	r1, #0
 8000380:	4809      	ldr	r0, [pc, #36]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000382:	f000 fdd4 	bl	8000f2e <HAL_I2CEx_ConfigAnalogFilter>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800038c:	f000 f8f0 	bl	8000570 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000390:	2100      	movs	r1, #0
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000394:	f000 fe16 	bl	8000fc4 <HAL_I2CEx_ConfigDigitalFilter>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800039e:	f000 f8e7 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000030 	.word	0x20000030
 80003ac:	40005400 	.word	0x40005400
 80003b0:	2000090e 	.word	0x2000090e

080003b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003b8:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <MX_SPI1_Init+0x74>)
 80003ba:	4a1c      	ldr	r2, [pc, #112]	; (800042c <MX_SPI1_Init+0x78>)
 80003bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003be:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <MX_SPI1_Init+0x74>)
 80003c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003c6:	4b18      	ldr	r3, [pc, #96]	; (8000428 <MX_SPI1_Init+0x74>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003cc:	4b16      	ldr	r3, [pc, #88]	; (8000428 <MX_SPI1_Init+0x74>)
 80003ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003d4:	4b14      	ldr	r3, [pc, #80]	; (8000428 <MX_SPI1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003da:	4b13      	ldr	r3, [pc, #76]	; (8000428 <MX_SPI1_Init+0x74>)
 80003dc:	2200      	movs	r2, #0
 80003de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <MX_SPI1_Init+0x74>)
 80003e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <MX_SPI1_Init+0x74>)
 80003ea:	2208      	movs	r2, #8
 80003ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_SPI1_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_SPI1_Init+0x74>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <MX_SPI1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000400:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_SPI1_Init+0x74>)
 8000402:	2207      	movs	r2, #7
 8000404:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000406:	4b08      	ldr	r3, [pc, #32]	; (8000428 <MX_SPI1_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_SPI1_Init+0x74>)
 800040e:	2208      	movs	r2, #8
 8000410:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000412:	4805      	ldr	r0, [pc, #20]	; (8000428 <MX_SPI1_Init+0x74>)
 8000414:	f002 fac8 	bl	80029a8 <HAL_SPI_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800041e:	f000 f8a7 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000084 	.word	0x20000084
 800042c:	40013000 	.word	0x40013000

08000430 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000434:	4b0d      	ldr	r3, [pc, #52]	; (800046c <MX_USB_PCD_Init+0x3c>)
 8000436:	4a0e      	ldr	r2, [pc, #56]	; (8000470 <MX_USB_PCD_Init+0x40>)
 8000438:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_USB_PCD_Init+0x3c>)
 800043c:	2208      	movs	r2, #8
 800043e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <MX_USB_PCD_Init+0x3c>)
 8000442:	2202      	movs	r2, #2
 8000444:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_USB_PCD_Init+0x3c>)
 8000448:	2202      	movs	r2, #2
 800044a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <MX_USB_PCD_Init+0x3c>)
 800044e:	2200      	movs	r2, #0
 8000450:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_USB_PCD_Init+0x3c>)
 8000454:	2200      	movs	r2, #0
 8000456:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000458:	4804      	ldr	r0, [pc, #16]	; (800046c <MX_USB_PCD_Init+0x3c>)
 800045a:	f000 fdff 	bl	800105c <HAL_PCD_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000464:	f000 f884 	bl	8000570 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	200000e8 	.word	0x200000e8
 8000470:	40005c00 	.word	0x40005c00

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800048a:	4b37      	ldr	r3, [pc, #220]	; (8000568 <MX_GPIO_Init+0xf4>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a36      	ldr	r2, [pc, #216]	; (8000568 <MX_GPIO_Init+0xf4>)
 8000490:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b34      	ldr	r3, [pc, #208]	; (8000568 <MX_GPIO_Init+0xf4>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004a2:	4b31      	ldr	r3, [pc, #196]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a30      	ldr	r2, [pc, #192]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b2e      	ldr	r3, [pc, #184]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ba:	4b2b      	ldr	r3, [pc, #172]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a2a      	ldr	r2, [pc, #168]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b28      	ldr	r3, [pc, #160]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b25      	ldr	r3, [pc, #148]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a24      	ldr	r2, [pc, #144]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b22      	ldr	r3, [pc, #136]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ea:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a1e      	ldr	r2, [pc, #120]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <MX_GPIO_Init+0xf4>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000502:	2200      	movs	r2, #0
 8000504:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000508:	4818      	ldr	r0, [pc, #96]	; (800056c <MX_GPIO_Init+0xf8>)
 800050a:	f000 fc69 	bl	8000de0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800050e:	2337      	movs	r3, #55	; 0x37
 8000510:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000512:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	4619      	mov	r1, r3
 8000522:	4812      	ldr	r0, [pc, #72]	; (800056c <MX_GPIO_Init+0xf8>)
 8000524:	f000 fae2 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000528:	f64f 7308 	movw	r3, #65288	; 0xff08
 800052c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	2301      	movs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	2300      	movs	r3, #0
 8000538:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	4619      	mov	r1, r3
 8000540:	480a      	ldr	r0, [pc, #40]	; (800056c <MX_GPIO_Init+0xf8>)
 8000542:	f000 fad3 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000546:	2301      	movs	r3, #1
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055c:	f000 fac6 	bl	8000aec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000560:	bf00      	nop
 8000562:	3728      	adds	r7, #40	; 0x28
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000
 800056c:	48001000 	.word	0x48001000

08000570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
}
 8000576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000578:	e7fe      	b.n	8000578 <Error_Handler+0x8>
	...

0800057c <CheckSequence>:
//	for (i = 0; len(sequence); ++i){
//		*seq[i] = sequence[i];
//	}
//}

void CheckSequence(uint8_t *input, uint32_t count, uint32_t *flag){
 800057c:	b480      	push	{r7}
 800057e:	b087      	sub	sp, #28
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
//	}
//	default: {
//		*flag = 0;
//	}
//	}
	char k = (char) input[0];
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	75fb      	strb	r3, [r7, #23]
	if (k == x[0]){
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <CheckSequence+0x2c>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	7dfa      	ldrb	r2, [r7, #23]
 8000594:	429a      	cmp	r2, r3
 8000596:	d101      	bne.n	800059c <CheckSequence+0x20>
		flag = 1;
 8000598:	2301      	movs	r3, #1
 800059a:	607b      	str	r3, [r7, #4]
	}
}
 800059c:	bf00      	nop
 800059e:	371c      	adds	r7, #28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_MspInit+0x44>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <HAL_MspInit+0x44>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <HAL_MspInit+0x44>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <HAL_MspInit+0x44>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <HAL_MspInit+0x44>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_MspInit+0x44>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005e2:	2007      	movs	r0, #7
 80005e4:	f000 fa4e 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000

080005f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a17      	ldr	r2, [pc, #92]	; (8000670 <HAL_I2C_MspInit+0x7c>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d127      	bne.n	8000666 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <HAL_I2C_MspInit+0x80>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a16      	ldr	r2, [pc, #88]	; (8000674 <HAL_I2C_MspInit+0x80>)
 800061c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <HAL_I2C_MspInit+0x80>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800062e:	23c0      	movs	r3, #192	; 0xc0
 8000630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000632:	2312      	movs	r3, #18
 8000634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000636:	2301      	movs	r3, #1
 8000638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800063e:	2304      	movs	r3, #4
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <HAL_I2C_MspInit+0x84>)
 800064a:	f000 fa4f 	bl	8000aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_I2C_MspInit+0x80>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <HAL_I2C_MspInit+0x80>)
 8000654:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_I2C_MspInit+0x80>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000666:	bf00      	nop
 8000668:	3728      	adds	r7, #40	; 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40005400 	.word	0x40005400
 8000674:	40021000 	.word	0x40021000
 8000678:	48000400 	.word	0x48000400

0800067c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <HAL_SPI_MspInit+0x7c>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d128      	bne.n	80006f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800069e:	4b17      	ldr	r3, [pc, #92]	; (80006fc <HAL_SPI_MspInit+0x80>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <HAL_SPI_MspInit+0x80>)
 80006a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006a8:	6193      	str	r3, [r2, #24]
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <HAL_SPI_MspInit+0x80>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <HAL_SPI_MspInit+0x80>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a10      	ldr	r2, [pc, #64]	; (80006fc <HAL_SPI_MspInit+0x80>)
 80006bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_SPI_MspInit+0x80>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80006ce:	23e0      	movs	r3, #224	; 0xe0
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d2:	2302      	movs	r3, #2
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006da:	2303      	movs	r3, #3
 80006dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006de:	2305      	movs	r3, #5
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	4619      	mov	r1, r3
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f000 f9fe 	bl	8000aec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006f0:	bf00      	nop
 80006f2:	3728      	adds	r7, #40	; 0x28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40013000 	.word	0x40013000
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a18      	ldr	r2, [pc, #96]	; (8000780 <HAL_PCD_MspInit+0x80>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d129      	bne.n	8000776 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <HAL_PCD_MspInit+0x84>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <HAL_PCD_MspInit+0x84>)
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <HAL_PCD_MspInit+0x84>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800073a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800073e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800074c:	230e      	movs	r3, #14
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075a:	f000 f9c7 	bl	8000aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_PCD_MspInit+0x84>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_PCD_MspInit+0x84>)
 8000764:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_PCD_MspInit+0x84>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	; 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40005c00 	.word	0x40005c00
 8000784:	40021000 	.word	0x40021000

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler+0x4>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d4:	f000 f884 	bl	80008e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}

080007dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <SystemInit+0x20>)
 80007e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e6:	4a05      	ldr	r2, [pc, #20]	; (80007fc <SystemInit+0x20>)
 80007e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000838 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000804:	f7ff ffea 	bl	80007dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <LoopForever+0x6>)
  ldr r1, =_edata
 800080a:	490d      	ldr	r1, [pc, #52]	; (8000840 <LoopForever+0xa>)
  ldr r2, =_sidata
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <LoopForever+0xe>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000820:	4c0a      	ldr	r4, [pc, #40]	; (800084c <LoopForever+0x16>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800082e:	f002 f9a3 	bl	8002b78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000832:	f7ff fceb 	bl	800020c <main>

08000836 <LoopForever>:

LoopForever:
    b LoopForever
 8000836:	e7fe      	b.n	8000836 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000838:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000844:	08002c28 	.word	0x08002c28
  ldr r2, =_sbss
 8000848:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800084c:	200003d8 	.word	0x200003d8

08000850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_2_IRQHandler>
	...

08000854 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_Init+0x28>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <HAL_Init+0x28>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f000 f90d 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086a:	2000      	movs	r0, #0
 800086c:	f000 f808 	bl	8000880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000870:	f7ff fe9c 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40022000 	.word	0x40022000

08000880 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_InitTick+0x54>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x58>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000896:	fbb3 f3f1 	udiv	r3, r3, r1
 800089a:	fbb2 f3f3 	udiv	r3, r2, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f917 	bl	8000ad2 <HAL_SYSTICK_Config>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e00e      	b.n	80008cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b0f      	cmp	r3, #15
 80008b2:	d80a      	bhi.n	80008ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b4:	2200      	movs	r2, #0
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008bc:	f000 f8ed 	bl	8000a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <HAL_InitTick+0x5c>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008c6:	2300      	movs	r3, #0
 80008c8:	e000      	b.n	80008cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000008 	.word	0x20000008
 80008d8:	20000010 	.word	0x20000010
 80008dc:	2000000c 	.word	0x2000000c

080008e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_IncTick+0x20>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_IncTick+0x24>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_IncTick+0x24>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000010 	.word	0x20000010
 8000904:	200003d4 	.word	0x200003d4

08000908 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;  
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <HAL_GetTick+0x14>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	200003d4 	.word	0x200003d4

08000920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800094c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <__NVIC_SetPriorityGrouping+0x44>)
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	60d3      	str	r3, [r2, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <__NVIC_GetPriorityGrouping+0x18>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	0a1b      	lsrs	r3, r3, #8
 8000972:	f003 0307 	and.w	r3, r3, #7
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	db0a      	blt.n	80009ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	490c      	ldr	r1, [pc, #48]	; (80009d0 <__NVIC_SetPriority+0x4c>)
 800099e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a2:	0112      	lsls	r2, r2, #4
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	440b      	add	r3, r1
 80009a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009ac:	e00a      	b.n	80009c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4908      	ldr	r1, [pc, #32]	; (80009d4 <__NVIC_SetPriority+0x50>)
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	3b04      	subs	r3, #4
 80009bc:	0112      	lsls	r2, r2, #4
 80009be:	b2d2      	uxtb	r2, r2
 80009c0:	440b      	add	r3, r1
 80009c2:	761a      	strb	r2, [r3, #24]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000e100 	.word	0xe000e100
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b480      	push	{r7}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	f1c3 0307 	rsb	r3, r3, #7
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	bf28      	it	cs
 80009f6:	2304      	movcs	r3, #4
 80009f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3304      	adds	r3, #4
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d902      	bls.n	8000a08 <NVIC_EncodePriority+0x30>
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3b03      	subs	r3, #3
 8000a06:	e000      	b.n	8000a0a <NVIC_EncodePriority+0x32>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43da      	mvns	r2, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	43d9      	mvns	r1, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	4313      	orrs	r3, r2
         );
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3724      	adds	r7, #36	; 0x24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a50:	d301      	bcc.n	8000a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00f      	b.n	8000a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <SysTick_Config+0x40>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5e:	210f      	movs	r1, #15
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a64:	f7ff ff8e 	bl	8000984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <SysTick_Config+0x40>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <SysTick_Config+0x40>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	e000e010 	.word	0xe000e010

08000a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff47 	bl	8000920 <__NVIC_SetPriorityGrouping>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aac:	f7ff ff5c 	bl	8000968 <__NVIC_GetPriorityGrouping>
 8000ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	6978      	ldr	r0, [r7, #20]
 8000ab8:	f7ff ff8e 	bl	80009d8 <NVIC_EncodePriority>
 8000abc:	4602      	mov	r2, r0
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff5d 	bl	8000984 <__NVIC_SetPriority>
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f7ff ffb0 	bl	8000a40 <SysTick_Config>
 8000ae0:	4603      	mov	r3, r0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afa:	e154      	b.n	8000da6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	2101      	movs	r1, #1
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	fa01 f303 	lsl.w	r3, r1, r3
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f000 8146 	beq.w	8000da0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d005      	beq.n	8000b2c <HAL_GPIO_Init+0x40>
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d130      	bne.n	8000b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	2203      	movs	r2, #3
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b62:	2201      	movs	r2, #1
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	091b      	lsrs	r3, r3, #4
 8000b78:	f003 0201 	and.w	r2, r3, #1
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d017      	beq.n	8000bca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d123      	bne.n	8000c1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	08da      	lsrs	r2, r3, #3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3208      	adds	r2, #8
 8000bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	220f      	movs	r2, #15
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	691a      	ldr	r2, [r3, #16]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	f003 0307 	and.w	r3, r3, #7
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	08da      	lsrs	r2, r3, #3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3208      	adds	r2, #8
 8000c18:	6939      	ldr	r1, [r7, #16]
 8000c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 0203 	and.w	r2, r3, #3
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 80a0 	beq.w	8000da0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c60:	4b58      	ldr	r3, [pc, #352]	; (8000dc4 <HAL_GPIO_Init+0x2d8>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a57      	ldr	r2, [pc, #348]	; (8000dc4 <HAL_GPIO_Init+0x2d8>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b55      	ldr	r3, [pc, #340]	; (8000dc4 <HAL_GPIO_Init+0x2d8>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c78:	4a53      	ldr	r2, [pc, #332]	; (8000dc8 <HAL_GPIO_Init+0x2dc>)
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	3302      	adds	r3, #2
 8000c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	220f      	movs	r2, #15
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ca2:	d019      	beq.n	8000cd8 <HAL_GPIO_Init+0x1ec>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a49      	ldr	r2, [pc, #292]	; (8000dcc <HAL_GPIO_Init+0x2e0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d013      	beq.n	8000cd4 <HAL_GPIO_Init+0x1e8>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a48      	ldr	r2, [pc, #288]	; (8000dd0 <HAL_GPIO_Init+0x2e4>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d00d      	beq.n	8000cd0 <HAL_GPIO_Init+0x1e4>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a47      	ldr	r2, [pc, #284]	; (8000dd4 <HAL_GPIO_Init+0x2e8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d007      	beq.n	8000ccc <HAL_GPIO_Init+0x1e0>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a46      	ldr	r2, [pc, #280]	; (8000dd8 <HAL_GPIO_Init+0x2ec>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d101      	bne.n	8000cc8 <HAL_GPIO_Init+0x1dc>
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	e008      	b.n	8000cda <HAL_GPIO_Init+0x1ee>
 8000cc8:	2305      	movs	r3, #5
 8000cca:	e006      	b.n	8000cda <HAL_GPIO_Init+0x1ee>
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e004      	b.n	8000cda <HAL_GPIO_Init+0x1ee>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	e002      	b.n	8000cda <HAL_GPIO_Init+0x1ee>
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e000      	b.n	8000cda <HAL_GPIO_Init+0x1ee>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	f002 0203 	and.w	r2, r2, #3
 8000ce0:	0092      	lsls	r2, r2, #2
 8000ce2:	4093      	lsls	r3, r2
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cea:	4937      	ldr	r1, [pc, #220]	; (8000dc8 <HAL_GPIO_Init+0x2dc>)
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	089b      	lsrs	r3, r3, #2
 8000cf0:	3302      	adds	r3, #2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cf8:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <HAL_GPIO_Init+0x2f0>)
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d1c:	4a2f      	ldr	r2, [pc, #188]	; (8000ddc <HAL_GPIO_Init+0x2f0>)
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d22:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <HAL_GPIO_Init+0x2f0>)
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d46:	4a25      	ldr	r2, [pc, #148]	; (8000ddc <HAL_GPIO_Init+0x2f0>)
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <HAL_GPIO_Init+0x2f0>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d70:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <HAL_GPIO_Init+0x2f0>)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_GPIO_Init+0x2f0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <HAL_GPIO_Init+0x2f0>)
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3301      	adds	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	fa22 f303 	lsr.w	r3, r2, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f47f aea3 	bne.w	8000afc <HAL_GPIO_Init+0x10>
  }
}
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	48000800 	.word	0x48000800
 8000dd4:	48000c00 	.word	0x48000c00
 8000dd8:	48001000 	.word	0x48001000
 8000ddc:	40010400 	.word	0x40010400

08000de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]
 8000dec:	4613      	mov	r3, r2
 8000dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000df0:	787b      	ldrb	r3, [r7, #1]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000df6:	887a      	ldrh	r2, [r7, #2]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dfe:	887a      	ldrh	r2, [r7, #2]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e081      	b.n	8000f26 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d106      	bne.n	8000e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff fbdc 	bl	80005f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2224      	movs	r2, #36	; 0x24
 8000e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 0201 	bic.w	r2, r2, #1
 8000e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d107      	bne.n	8000e8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	e006      	b.n	8000e98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d104      	bne.n	8000eaa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ea8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	6812      	ldr	r2, [r2, #0]
 8000eb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ebc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68da      	ldr	r2, [r3, #12]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ecc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69d9      	ldr	r1, [r3, #28]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a1a      	ldr	r2, [r3, #32]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 0201 	orr.w	r2, r2, #1
 8000f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2220      	movs	r2, #32
 8000f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b20      	cmp	r3, #32
 8000f42:	d138      	bne.n	8000fb6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d101      	bne.n	8000f52 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	e032      	b.n	8000fb8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2224      	movs	r2, #36	; 0x24
 8000f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0201 	bic.w	r2, r2, #1
 8000f70:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f80:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6819      	ldr	r1, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f042 0201 	orr.w	r2, r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000fb6:	2302      	movs	r3, #2
  }
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b20      	cmp	r3, #32
 8000fd8:	d139      	bne.n	800104e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e033      	b.n	8001050 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2224      	movs	r2, #36	; 0x24
 8000ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001016:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0201 	orr.w	r2, r2, #1
 8001038:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2220      	movs	r2, #32
 800103e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800104e:	2302      	movs	r3, #2
  }
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800105c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105e:	b08b      	sub	sp, #44	; 0x2c
 8001060:	af06      	add	r7, sp, #24
 8001062:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e0c4      	b.n	80011f8 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d106      	bne.n	8001088 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff fb3c 	bl	8000700 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2203      	movs	r2, #3
 800108c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f001 fd32 	bl	8002afe <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e040      	b.n	8001122 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	1c5a      	adds	r2, r3, #1
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	440b      	add	r3, r1
 80010b0:	3301      	adds	r3, #1
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	440b      	add	r3, r1
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	440b      	add	r3, r1
 80010da:	3303      	adds	r3, #3
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	440b      	add	r3, r1
 80010ee:	3338      	adds	r3, #56	; 0x38
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	440b      	add	r3, r1
 8001102:	333c      	adds	r3, #60	; 0x3c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	440b      	add	r3, r1
 8001116:	3340      	adds	r3, #64	; 0x40
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	3301      	adds	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	7bfa      	ldrb	r2, [r7, #15]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	d3b9      	bcc.n	80010a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e044      	b.n	80011bc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001132:	7bfa      	ldrb	r2, [r7, #15]
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	440b      	add	r3, r1
 8001140:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	440b      	add	r3, r1
 8001156:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800115a:	7bfa      	ldrb	r2, [r7, #15]
 800115c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	440b      	add	r3, r1
 800116c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	440b      	add	r3, r1
 8001182:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	440b      	add	r3, r1
 8001198:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	440b      	add	r3, r1
 80011ae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	3301      	adds	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d3b5      	bcc.n	8001132 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	687e      	ldr	r6, [r7, #4]
 80011ce:	466d      	mov	r5, sp
 80011d0:	f106 0410 	add.w	r4, r6, #16
 80011d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	602b      	str	r3, [r5, #0]
 80011dc:	1d33      	adds	r3, r6, #4
 80011de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e0:	6838      	ldr	r0, [r7, #0]
 80011e2:	f001 fca7 	bl	8002b34 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001200 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001206:	af00      	add	r7, sp, #0
 8001208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800120c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001210:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001216:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	f001 b823 	b.w	800226c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800122a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 817d 	beq.w	8001536 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800123c:	4bbc      	ldr	r3, [pc, #752]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	2b04      	cmp	r3, #4
 8001246:	d00c      	beq.n	8001262 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001248:	4bb9      	ldr	r3, [pc, #740]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b08      	cmp	r3, #8
 8001252:	d15c      	bne.n	800130e <HAL_RCC_OscConfig+0x10e>
 8001254:	4bb6      	ldr	r3, [pc, #728]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001260:	d155      	bne.n	800130e <HAL_RCC_OscConfig+0x10e>
 8001262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001266:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001276:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127a:	fab3 f383 	clz	r3, r3
 800127e:	b2db      	uxtb	r3, r3
 8001280:	095b      	lsrs	r3, r3, #5
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d102      	bne.n	8001294 <HAL_RCC_OscConfig+0x94>
 800128e:	4ba8      	ldr	r3, [pc, #672]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	e015      	b.n	80012c0 <HAL_RCC_OscConfig+0xc0>
 8001294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001298:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80012a0:	fa93 f3a3 	rbit	r3, r3
 80012a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80012b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80012bc:	4b9c      	ldr	r3, [pc, #624]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80012c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80012cc:	fa92 f2a2 	rbit	r2, r2
 80012d0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80012d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80012d8:	fab2 f282 	clz	r2, r2
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	f042 0220 	orr.w	r2, r2, #32
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	f002 021f 	and.w	r2, r2, #31
 80012e8:	2101      	movs	r1, #1
 80012ea:	fa01 f202 	lsl.w	r2, r1, r2
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 811f 	beq.w	8001534 <HAL_RCC_OscConfig+0x334>
 80012f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f040 8116 	bne.w	8001534 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	f000 bfaf 	b.w	800226c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001312:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131e:	d106      	bne.n	800132e <HAL_RCC_OscConfig+0x12e>
 8001320:	4b83      	ldr	r3, [pc, #524]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a82      	ldr	r2, [pc, #520]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 8001326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e036      	b.n	800139c <HAL_RCC_OscConfig+0x19c>
 800132e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001332:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10c      	bne.n	8001358 <HAL_RCC_OscConfig+0x158>
 800133e:	4b7c      	ldr	r3, [pc, #496]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a7b      	ldr	r2, [pc, #492]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 8001344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b79      	ldr	r3, [pc, #484]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a78      	ldr	r2, [pc, #480]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 8001350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e021      	b.n	800139c <HAL_RCC_OscConfig+0x19c>
 8001358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x184>
 800136a:	4b71      	ldr	r3, [pc, #452]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a70      	ldr	r2, [pc, #448]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 8001370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b6e      	ldr	r3, [pc, #440]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a6d      	ldr	r2, [pc, #436]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 800137c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0x19c>
 8001384:	4b6a      	ldr	r3, [pc, #424]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a69      	ldr	r2, [pc, #420]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 800138a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b67      	ldr	r3, [pc, #412]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a66      	ldr	r2, [pc, #408]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 8001396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800139c:	4b64      	ldr	r3, [pc, #400]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	f023 020f 	bic.w	r2, r3, #15
 80013a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	495f      	ldr	r1, [pc, #380]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d059      	beq.n	800147a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c6:	f7ff fa9f 	bl	8000908 <HAL_GetTick>
 80013ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fa9a 	bl	8000908 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b64      	cmp	r3, #100	; 0x64
 80013de:	d902      	bls.n	80013e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	f000 bf43 	b.w	800226c <HAL_RCC_OscConfig+0x106c>
 80013e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80013fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fe:	fab3 f383 	clz	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	095b      	lsrs	r3, r3, #5
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d102      	bne.n	8001418 <HAL_RCC_OscConfig+0x218>
 8001412:	4b47      	ldr	r3, [pc, #284]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	e015      	b.n	8001444 <HAL_RCC_OscConfig+0x244>
 8001418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800142c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001430:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001434:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001440:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001448:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800144c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001450:	fa92 f2a2 	rbit	r2, r2
 8001454:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001458:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800145c:	fab2 f282 	clz	r2, r2
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	f042 0220 	orr.w	r2, r2, #32
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	f002 021f 	and.w	r2, r2, #31
 800146c:	2101      	movs	r1, #1
 800146e:	fa01 f202 	lsl.w	r2, r1, r2
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0ab      	beq.n	80013d0 <HAL_RCC_OscConfig+0x1d0>
 8001478:	e05d      	b.n	8001536 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fa45 	bl	8000908 <HAL_GetTick>
 800147e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fa40 	bl	8000908 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b64      	cmp	r3, #100	; 0x64
 8001492:	d902      	bls.n	800149a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	f000 bee9 	b.w	800226c <HAL_RCC_OscConfig+0x106c>
 800149a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800149e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80014ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b2:	fab3 f383 	clz	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	095b      	lsrs	r3, r3, #5
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d102      	bne.n	80014cc <HAL_RCC_OscConfig+0x2cc>
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	e015      	b.n	80014f8 <HAL_RCC_OscConfig+0x2f8>
 80014cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80014e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80014e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80014ec:	fa93 f3a3 	rbit	r3, r3
 80014f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_RCC_OscConfig+0x330>)
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014fc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001500:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001504:	fa92 f2a2 	rbit	r2, r2
 8001508:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800150c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001510:	fab2 f282 	clz	r2, r2
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	f042 0220 	orr.w	r2, r2, #32
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	f002 021f 	and.w	r2, r2, #31
 8001520:	2101      	movs	r1, #1
 8001522:	fa01 f202 	lsl.w	r2, r1, r2
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ab      	bne.n	8001484 <HAL_RCC_OscConfig+0x284>
 800152c:	e003      	b.n	8001536 <HAL_RCC_OscConfig+0x336>
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 817d 	beq.w	8001846 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800154c:	4ba6      	ldr	r3, [pc, #664]	; (80017e8 <HAL_RCC_OscConfig+0x5e8>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00b      	beq.n	8001570 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001558:	4ba3      	ldr	r3, [pc, #652]	; (80017e8 <HAL_RCC_OscConfig+0x5e8>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b08      	cmp	r3, #8
 8001562:	d172      	bne.n	800164a <HAL_RCC_OscConfig+0x44a>
 8001564:	4ba0      	ldr	r3, [pc, #640]	; (80017e8 <HAL_RCC_OscConfig+0x5e8>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d16c      	bne.n	800164a <HAL_RCC_OscConfig+0x44a>
 8001570:	2302      	movs	r3, #2
 8001572:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800157a:	fa93 f3a3 	rbit	r3, r3
 800157e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001582:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	095b      	lsrs	r3, r3, #5
 800158e:	b2db      	uxtb	r3, r3
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b01      	cmp	r3, #1
 8001598:	d102      	bne.n	80015a0 <HAL_RCC_OscConfig+0x3a0>
 800159a:	4b93      	ldr	r3, [pc, #588]	; (80017e8 <HAL_RCC_OscConfig+0x5e8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	e013      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c8>
 80015a0:	2302      	movs	r3, #2
 80015a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80015aa:	fa93 f3a3 	rbit	r3, r3
 80015ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015b2:	2302      	movs	r3, #2
 80015b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80015c4:	4b88      	ldr	r3, [pc, #544]	; (80017e8 <HAL_RCC_OscConfig+0x5e8>)
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	2202      	movs	r2, #2
 80015ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80015ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80015d2:	fa92 f2a2 	rbit	r2, r2
 80015d6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80015da:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80015de:	fab2 f282 	clz	r2, r2
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	f042 0220 	orr.w	r2, r2, #32
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	f002 021f 	and.w	r2, r2, #31
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00a      	beq.n	8001610 <HAL_RCC_OscConfig+0x410>
 80015fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d002      	beq.n	8001610 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f000 be2e 	b.w	800226c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b75      	ldr	r3, [pc, #468]	; (80017e8 <HAL_RCC_OscConfig+0x5e8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	21f8      	movs	r1, #248	; 0xf8
 8001626:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800162e:	fa91 f1a1 	rbit	r1, r1
 8001632:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001636:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800163a:	fab1 f181 	clz	r1, r1
 800163e:	b2c9      	uxtb	r1, r1
 8001640:	408b      	lsls	r3, r1
 8001642:	4969      	ldr	r1, [pc, #420]	; (80017e8 <HAL_RCC_OscConfig+0x5e8>)
 8001644:	4313      	orrs	r3, r2
 8001646:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001648:	e0fd      	b.n	8001846 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800164a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8088 	beq.w	800176c <HAL_RCC_OscConfig+0x56c>
 800165c:	2301      	movs	r3, #1
 800165e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800166e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800167c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	461a      	mov	r2, r3
 8001684:	2301      	movs	r3, #1
 8001686:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff f93e 	bl	8000908 <HAL_GetTick>
 800168c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	e00a      	b.n	80016a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff f939 	bl	8000908 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d902      	bls.n	80016a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	f000 bde2 	b.w	800226c <HAL_RCC_OscConfig+0x106c>
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80016ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	095b      	lsrs	r3, r3, #5
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d102      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4d8>
 80016d2:	4b45      	ldr	r3, [pc, #276]	; (80017e8 <HAL_RCC_OscConfig+0x5e8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	e013      	b.n	8001700 <HAL_RCC_OscConfig+0x500>
 80016d8:	2302      	movs	r3, #2
 80016da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80016e2:	fa93 f3a3 	rbit	r3, r3
 80016e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80016ea:	2302      	movs	r3, #2
 80016ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80016f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80016f4:	fa93 f3a3 	rbit	r3, r3
 80016f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80016fc:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <HAL_RCC_OscConfig+0x5e8>)
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	2202      	movs	r2, #2
 8001702:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001706:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800170a:	fa92 f2a2 	rbit	r2, r2
 800170e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001712:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001716:	fab2 f282 	clz	r2, r2
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	f042 0220 	orr.w	r2, r2, #32
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	f002 021f 	and.w	r2, r2, #31
 8001726:	2101      	movs	r1, #1
 8001728:	fa01 f202 	lsl.w	r2, r1, r2
 800172c:	4013      	ands	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0af      	beq.n	8001692 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <HAL_RCC_OscConfig+0x5e8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	21f8      	movs	r1, #248	; 0xf8
 8001748:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001750:	fa91 f1a1 	rbit	r1, r1
 8001754:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001758:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800175c:	fab1 f181 	clz	r1, r1
 8001760:	b2c9      	uxtb	r1, r1
 8001762:	408b      	lsls	r3, r1
 8001764:	4920      	ldr	r1, [pc, #128]	; (80017e8 <HAL_RCC_OscConfig+0x5e8>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
 800176a:	e06c      	b.n	8001846 <HAL_RCC_OscConfig+0x646>
 800176c:	2301      	movs	r3, #1
 800176e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001772:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001776:	fa93 f3a3 	rbit	r3, r3
 800177a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800177e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001782:	fab3 f383 	clz	r3, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800178c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	461a      	mov	r2, r3
 8001794:	2300      	movs	r3, #0
 8001796:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff f8b6 	bl	8000908 <HAL_GetTick>
 800179c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a2:	f7ff f8b1 	bl	8000908 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d902      	bls.n	80017b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	f000 bd5a 	b.w	800226c <HAL_RCC_OscConfig+0x106c>
 80017b8:	2302      	movs	r3, #2
 80017ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017c2:	fa93 f3a3 	rbit	r3, r3
 80017c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80017ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	095b      	lsrs	r3, r3, #5
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d104      	bne.n	80017ec <HAL_RCC_OscConfig+0x5ec>
 80017e2:	4b01      	ldr	r3, [pc, #4]	; (80017e8 <HAL_RCC_OscConfig+0x5e8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	e015      	b.n	8001814 <HAL_RCC_OscConfig+0x614>
 80017e8:	40021000 	.word	0x40021000
 80017ec:	2302      	movs	r3, #2
 80017ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80017fe:	2302      	movs	r3, #2
 8001800:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001804:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001810:	4bc8      	ldr	r3, [pc, #800]	; (8001b34 <HAL_RCC_OscConfig+0x934>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	2202      	movs	r2, #2
 8001816:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800181a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800181e:	fa92 f2a2 	rbit	r2, r2
 8001822:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001826:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800182a:	fab2 f282 	clz	r2, r2
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f042 0220 	orr.w	r2, r2, #32
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	f002 021f 	and.w	r2, r2, #31
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f202 	lsl.w	r2, r1, r2
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1ad      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8110 	beq.w	8001a7c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800185c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001860:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d079      	beq.n	8001960 <HAL_RCC_OscConfig+0x760>
 800186c:	2301      	movs	r3, #1
 800186e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800187e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	4bab      	ldr	r3, [pc, #684]	; (8001b38 <HAL_RCC_OscConfig+0x938>)
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	461a      	mov	r2, r3
 8001892:	2301      	movs	r3, #1
 8001894:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001896:	f7ff f837 	bl	8000908 <HAL_GetTick>
 800189a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff f832 	bl	8000908 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d902      	bls.n	80018b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	f000 bcdb 	b.w	800226c <HAL_RCC_OscConfig+0x106c>
 80018b6:	2302      	movs	r3, #2
 80018b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018c0:	fa93 f3a3 	rbit	r3, r3
 80018c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018d0:	2202      	movs	r2, #2
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	fa93 f2a3 	rbit	r2, r3
 80018e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80018f4:	2202      	movs	r2, #2
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	fa93 f2a3 	rbit	r2, r3
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800190e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001910:	4b88      	ldr	r3, [pc, #544]	; (8001b34 <HAL_RCC_OscConfig+0x934>)
 8001912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001918:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800191c:	2102      	movs	r1, #2
 800191e:	6019      	str	r1, [r3, #0]
 8001920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001924:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	fa93 f1a3 	rbit	r1, r3
 800192e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001932:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001936:	6019      	str	r1, [r3, #0]
  return result;
 8001938:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f003 031f 	and.w	r3, r3, #31
 8001952:	2101      	movs	r1, #1
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0a0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x6a0>
 800195e:	e08d      	b.n	8001a7c <HAL_RCC_OscConfig+0x87c>
 8001960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001964:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001968:	2201      	movs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001970:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	fa93 f2a3 	rbit	r2, r3
 800197a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001982:	601a      	str	r2, [r3, #0]
  return result;
 8001984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001988:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800198c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <HAL_RCC_OscConfig+0x938>)
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	461a      	mov	r2, r3
 800199e:	2300      	movs	r3, #0
 80019a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a2:	f7fe ffb1 	bl	8000908 <HAL_GetTick>
 80019a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ac:	f7fe ffac 	bl	8000908 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d902      	bls.n	80019c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	f000 bc55 	b.w	800226c <HAL_RCC_OscConfig+0x106c>
 80019c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019ca:	2202      	movs	r2, #2
 80019cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	fa93 f2a3 	rbit	r2, r3
 80019dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80019ee:	2202      	movs	r2, #2
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	fa93 f2a3 	rbit	r2, r3
 8001a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a12:	2202      	movs	r2, #2
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	fa93 f2a3 	rbit	r2, r3
 8001a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a28:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2e:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <HAL_RCC_OscConfig+0x934>)
 8001a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	6019      	str	r1, [r3, #0]
 8001a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a42:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fa93 f1a3 	rbit	r1, r3
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a54:	6019      	str	r1, [r3, #0]
  return result;
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d197      	bne.n	80019ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 81a1 	beq.w	8001dd4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a98:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <HAL_RCC_OscConfig+0x934>)
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d116      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_RCC_OscConfig+0x934>)
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	4a22      	ldr	r2, [pc, #136]	; (8001b34 <HAL_RCC_OscConfig+0x934>)
 8001aaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aae:	61d3      	str	r3, [r2, #28]
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_RCC_OscConfig+0x934>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001aca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001acc:	2301      	movs	r3, #1
 8001ace:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_RCC_OscConfig+0x93c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d11a      	bne.n	8001b14 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_RCC_OscConfig+0x93c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a16      	ldr	r2, [pc, #88]	; (8001b3c <HAL_RCC_OscConfig+0x93c>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aea:	f7fe ff0d 	bl	8000908 <HAL_GetTick>
 8001aee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af2:	e009      	b.n	8001b08 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af4:	f7fe ff08 	bl	8000908 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b64      	cmp	r3, #100	; 0x64
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e3b1      	b.n	800226c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_RCC_OscConfig+0x93c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ef      	beq.n	8001af4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d10d      	bne.n	8001b40 <HAL_RCC_OscConfig+0x940>
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_RCC_OscConfig+0x934>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4a02      	ldr	r2, [pc, #8]	; (8001b34 <HAL_RCC_OscConfig+0x934>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6213      	str	r3, [r2, #32]
 8001b30:	e03c      	b.n	8001bac <HAL_RCC_OscConfig+0x9ac>
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	10908120 	.word	0x10908120
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10c      	bne.n	8001b6a <HAL_RCC_OscConfig+0x96a>
 8001b50:	4bc1      	ldr	r3, [pc, #772]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4ac0      	ldr	r2, [pc, #768]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	6213      	str	r3, [r2, #32]
 8001b5c:	4bbe      	ldr	r3, [pc, #760]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4abd      	ldr	r2, [pc, #756]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001b62:	f023 0304 	bic.w	r3, r3, #4
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	e020      	b.n	8001bac <HAL_RCC_OscConfig+0x9ac>
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x994>
 8001b7a:	4bb7      	ldr	r3, [pc, #732]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4ab6      	ldr	r2, [pc, #728]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	4bb4      	ldr	r3, [pc, #720]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4ab3      	ldr	r2, [pc, #716]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6213      	str	r3, [r2, #32]
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0x9ac>
 8001b94:	4bb0      	ldr	r3, [pc, #704]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4aaf      	ldr	r2, [pc, #700]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	4bad      	ldr	r3, [pc, #692]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4aac      	ldr	r2, [pc, #688]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001ba6:	f023 0304 	bic.w	r3, r3, #4
 8001baa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 8081 	beq.w	8001cc0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbe:	f7fe fea3 	bl	8000908 <HAL_GetTick>
 8001bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7fe fe9e 	bl	8000908 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e345      	b.n	800226c <HAL_RCC_OscConfig+0x106c>
 8001be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001be8:	2202      	movs	r2, #2
 8001bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	fa93 f2a3 	rbit	r2, r3
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	fa93 f2a3 	rbit	r2, r3
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c26:	601a      	str	r2, [r3, #0]
  return result;
 8001c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001c30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_OscConfig+0xa4c>
 8001c46:	4b84      	ldr	r3, [pc, #528]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	e013      	b.n	8001c74 <HAL_RCC_OscConfig+0xa74>
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c54:	2202      	movs	r2, #2
 8001c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	fa93 f2a3 	rbit	r2, r3
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	4b79      	ldr	r3, [pc, #484]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c78:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	6011      	str	r1, [r2, #0]
 8001c80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	fa92 f1a2 	rbit	r1, r2
 8001c8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001c96:	6011      	str	r1, [r2, #0]
  return result;
 8001c98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c9c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	fab2 f282 	clz	r2, r2
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f002 021f 	and.w	r2, r2, #31
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d084      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x9c8>
 8001cbe:	e07f      	b.n	8001dc0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7fe fe22 	bl	8000908 <HAL_GetTick>
 8001cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc8:	e00b      	b.n	8001ce2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cca:	f7fe fe1d 	bl	8000908 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e2c4      	b.n	800226c <HAL_RCC_OscConfig+0x106c>
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001cea:	2202      	movs	r2, #2
 8001cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d0e:	2202      	movs	r2, #2
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d16:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	fa93 f2a3 	rbit	r2, r3
 8001d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d28:	601a      	str	r2, [r3, #0]
  return result;
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001d32:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f043 0302 	orr.w	r3, r3, #2
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d102      	bne.n	8001d4e <HAL_RCC_OscConfig+0xb4e>
 8001d48:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	e013      	b.n	8001d76 <HAL_RCC_OscConfig+0xb76>
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d56:	2202      	movs	r2, #2
 8001d58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	fa93 f2a3 	rbit	r2, r3
 8001d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d7a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001d7e:	2102      	movs	r1, #2
 8001d80:	6011      	str	r1, [r2, #0]
 8001d82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d86:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	fa92 f1a2 	rbit	r1, r2
 8001d90:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d94:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001d98:	6011      	str	r1, [r2, #0]
  return result;
 8001d9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d9e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	fab2 f282 	clz	r2, r2
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	f002 021f 	and.w	r2, r2, #31
 8001db4:	2101      	movs	r1, #1
 8001db6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d184      	bne.n	8001cca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d105      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 8242 	beq.w	800226a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <HAL_RCC_OscConfig+0xc58>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	f000 8213 	beq.w	800221a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001df8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	f040 8162 	bne.w	80020ca <HAL_RCC_OscConfig+0xeca>
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001e0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e18:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e26:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e2a:	601a      	str	r2, [r3, #0]
  return result;
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001e34:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	461a      	mov	r2, r3
 8001e48:	2300      	movs	r3, #0
 8001e4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fd5c 	bl	8000908 <HAL_GetTick>
 8001e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e54:	e00c      	b.n	8001e70 <HAL_RCC_OscConfig+0xc70>
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7fe fd54 	bl	8000908 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e1fd      	b.n	800226c <HAL_RCC_OscConfig+0x106c>
 8001e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e74:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	fa93 f2a3 	rbit	r2, r3
 8001e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e90:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e94:	601a      	str	r2, [r3, #0]
  return result;
 8001e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001e9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d102      	bne.n	8001eba <HAL_RCC_OscConfig+0xcba>
 8001eb4:	4bb0      	ldr	r3, [pc, #704]	; (8002178 <HAL_RCC_OscConfig+0xf78>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	e027      	b.n	8001f0a <HAL_RCC_OscConfig+0xd0a>
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ec2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ecc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	fa93 f2a3 	rbit	r2, r3
 8001ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eda:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ee8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	fa93 f2a3 	rbit	r2, r3
 8001efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	4b9c      	ldr	r3, [pc, #624]	; (8002178 <HAL_RCC_OscConfig+0xf78>)
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f0e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001f12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f16:	6011      	str	r1, [r2, #0]
 8001f18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f1c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	fa92 f1a2 	rbit	r1, r2
 8001f26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f2a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f2e:	6011      	str	r1, [r2, #0]
  return result;
 8001f30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f34:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	fab2 f282 	clz	r2, r2
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	f042 0220 	orr.w	r2, r2, #32
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f002 021f 	and.w	r2, r2, #31
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d182      	bne.n	8001e5c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f56:	4b88      	ldr	r3, [pc, #544]	; (8002178 <HAL_RCC_OscConfig+0xf78>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	430b      	orrs	r3, r1
 8001f78:	497f      	ldr	r1, [pc, #508]	; (8002178 <HAL_RCC_OscConfig+0xf78>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
 8001f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f82:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001f86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f90:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	fa93 f2a3 	rbit	r2, r3
 8001f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001fa2:	601a      	str	r2, [r3, #0]
  return result;
 8001fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001fac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fca0 	bl	8000908 <HAL_GetTick>
 8001fc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fcc:	e009      	b.n	8001fe2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fce:	f7fe fc9b 	bl	8000908 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e144      	b.n	800226c <HAL_RCC_OscConfig+0x106c>
 8001fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001fea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	fa93 f2a3 	rbit	r2, r3
 8001ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002002:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002006:	601a      	str	r2, [r3, #0]
  return result;
 8002008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800200c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002010:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d102      	bne.n	800202c <HAL_RCC_OscConfig+0xe2c>
 8002026:	4b54      	ldr	r3, [pc, #336]	; (8002178 <HAL_RCC_OscConfig+0xf78>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	e027      	b.n	800207c <HAL_RCC_OscConfig+0xe7c>
 800202c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002030:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002034:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fa93 f2a3 	rbit	r2, r3
 8002048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002056:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800205a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fa93 f2a3 	rbit	r2, r3
 800206e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002072:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <HAL_RCC_OscConfig+0xf78>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002080:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002084:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002088:	6011      	str	r1, [r2, #0]
 800208a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800208e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	fa92 f1a2 	rbit	r1, r2
 8002098:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800209c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80020a0:	6011      	str	r1, [r2, #0]
  return result;
 80020a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80020a6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	fab2 f282 	clz	r2, r2
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	f042 0220 	orr.w	r2, r2, #32
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	f002 021f 	and.w	r2, r2, #31
 80020bc:	2101      	movs	r1, #1
 80020be:	fa01 f202 	lsl.w	r2, r1, r2
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d082      	beq.n	8001fce <HAL_RCC_OscConfig+0xdce>
 80020c8:	e0cf      	b.n	800226a <HAL_RCC_OscConfig+0x106a>
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80020d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020dc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	fa93 f2a3 	rbit	r2, r3
 80020e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80020ee:	601a      	str	r2, [r3, #0]
  return result;
 80020f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80020f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002104:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	461a      	mov	r2, r3
 800210c:	2300      	movs	r3, #0
 800210e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7fe fbfa 	bl	8000908 <HAL_GetTick>
 8002114:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002118:	e009      	b.n	800212e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211a:	f7fe fbf5 	bl	8000908 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e09e      	b.n	800226c <HAL_RCC_OscConfig+0x106c>
 800212e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002132:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002136:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800213a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002140:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	fa93 f2a3 	rbit	r2, r3
 800214a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002152:	601a      	str	r2, [r3, #0]
  return result;
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800215c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	b2db      	uxtb	r3, r3
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d104      	bne.n	800217c <HAL_RCC_OscConfig+0xf7c>
 8002172:	4b01      	ldr	r3, [pc, #4]	; (8002178 <HAL_RCC_OscConfig+0xf78>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	e029      	b.n	80021cc <HAL_RCC_OscConfig+0xfcc>
 8002178:	40021000 	.word	0x40021000
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002184:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	fa93 f2a3 	rbit	r2, r3
 8002198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80021aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCC_OscConfig+0x1078>)
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021d0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80021d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021d8:	6011      	str	r1, [r2, #0]
 80021da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021de:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	fa92 f1a2 	rbit	r1, r2
 80021e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021ec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80021f0:	6011      	str	r1, [r2, #0]
  return result;
 80021f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021f6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	fab2 f282 	clz	r2, r2
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	f042 0220 	orr.w	r2, r2, #32
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	f002 021f 	and.w	r2, r2, #31
 800220c:	2101      	movs	r1, #1
 800220e:	fa01 f202 	lsl.w	r2, r1, r2
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d180      	bne.n	800211a <HAL_RCC_OscConfig+0xf1a>
 8002218:	e027      	b.n	800226a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800221a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e01e      	b.n	800226c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800222e:	4b12      	ldr	r3, [pc, #72]	; (8002278 <HAL_RCC_OscConfig+0x1078>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002236:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800223a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800223e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	429a      	cmp	r2, r3
 800224c:	d10b      	bne.n	8002266 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800224e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002252:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002262:	429a      	cmp	r2, r3
 8002264:	d001      	beq.n	800226a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000

0800227c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b09e      	sub	sp, #120	; 0x78
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e162      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b90      	ldr	r3, [pc, #576]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d910      	bls.n	80022c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b8d      	ldr	r3, [pc, #564]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	498b      	ldr	r1, [pc, #556]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b89      	ldr	r3, [pc, #548]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e14a      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b82      	ldr	r3, [pc, #520]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	497f      	ldr	r1, [pc, #508]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80dc 	beq.w	80024a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d13c      	bne.n	8002372 <HAL_RCC_ClockConfig+0xf6>
 80022f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d102      	bne.n	8002322 <HAL_RCC_ClockConfig+0xa6>
 800231c:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	e00f      	b.n	8002342 <HAL_RCC_ClockConfig+0xc6>
 8002322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002326:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	667b      	str	r3, [r7, #100]	; 0x64
 8002330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002334:	663b      	str	r3, [r7, #96]	; 0x60
 8002336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800233e:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002346:	65ba      	str	r2, [r7, #88]	; 0x58
 8002348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800234a:	fa92 f2a2 	rbit	r2, r2
 800234e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002352:	fab2 f282 	clz	r2, r2
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	f042 0220 	orr.w	r2, r2, #32
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	f002 021f 	and.w	r2, r2, #31
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f202 	lsl.w	r2, r1, r2
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d17b      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0f3      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d13c      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x178>
 800237a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800237e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x128>
 800239e:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e00f      	b.n	80023c4 <HAL_RCC_ClockConfig+0x148>
 80023a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	647b      	str	r3, [r7, #68]	; 0x44
 80023b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40
 80023b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c0:	4b46      	ldr	r3, [pc, #280]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80023ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023cc:	fa92 f2a2 	rbit	r2, r2
 80023d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023d4:	fab2 f282 	clz	r2, r2
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f042 0220 	orr.w	r2, r2, #32
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f002 021f 	and.w	r2, r2, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d13a      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0b2      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
 80023f4:	2302      	movs	r3, #2
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d102      	bne.n	800241c <HAL_RCC_ClockConfig+0x1a0>
 8002416:	4b31      	ldr	r3, [pc, #196]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	e00d      	b.n	8002438 <HAL_RCC_ClockConfig+0x1bc>
 800241c:	2302      	movs	r3, #2
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
 8002428:	2302      	movs	r3, #2
 800242a:	623b      	str	r3, [r7, #32]
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	2202      	movs	r2, #2
 800243a:	61ba      	str	r2, [r7, #24]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	fa92 f2a2 	rbit	r2, r2
 8002442:	617a      	str	r2, [r7, #20]
  return result;
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	fab2 f282 	clz	r2, r2
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f042 0220 	orr.w	r2, r2, #32
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	f002 021f 	and.w	r2, r2, #31
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e079      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	491a      	ldr	r1, [pc, #104]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7fe fa46 	bl	8000908 <HAL_GetTick>
 800247c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe fa42 	bl	8000908 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e061      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d214      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 0207 	bic.w	r2, r3, #7
 80024be:	4906      	ldr	r1, [pc, #24]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e040      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	491a      	ldr	r1, [pc, #104]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4912      	ldr	r1, [pc, #72]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800251e:	f000 f829 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002522:	4601      	mov	r1, r0
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800252c:	22f0      	movs	r2, #240	; 0xf0
 800252e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	fa92 f2a2 	rbit	r2, r2
 8002536:	60fa      	str	r2, [r7, #12]
  return result;
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	fab2 f282 	clz	r2, r2
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	40d3      	lsrs	r3, r2
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x2ec>)
 8002544:	5cd3      	ldrb	r3, [r2, r3]
 8002546:	fa21 f303 	lsr.w	r3, r1, r3
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_RCC_ClockConfig+0x2f0>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_RCC_ClockConfig+0x2f4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe f994 	bl	8000880 <HAL_InitTick>
  
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3778      	adds	r7, #120	; 0x78
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	08002bf0 	.word	0x08002bf0
 800256c:	20000008 	.word	0x20000008
 8002570:	2000000c 	.word	0x2000000c

08002574 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b08b      	sub	sp, #44	; 0x2c
 8002578:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800258e:	4b29      	ldr	r3, [pc, #164]	; (8002634 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b04      	cmp	r3, #4
 800259c:	d002      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x30>
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d003      	beq.n	80025aa <HAL_RCC_GetSysClockFreq+0x36>
 80025a2:	e03c      	b.n	800261e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025a4:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025a6:	623b      	str	r3, [r7, #32]
      break;
 80025a8:	e03c      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	fa92 f2a2 	rbit	r2, r2
 80025bc:	607a      	str	r2, [r7, #4]
  return result;
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	fab2 f282 	clz	r2, r2
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	40d3      	lsrs	r3, r2
 80025c8:	4a1c      	ldr	r2, [pc, #112]	; (800263c <HAL_RCC_GetSysClockFreq+0xc8>)
 80025ca:	5cd3      	ldrb	r3, [r2, r3]
 80025cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025ce:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	220f      	movs	r2, #15
 80025d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	fa92 f2a2 	rbit	r2, r2
 80025e0:	60fa      	str	r2, [r7, #12]
  return result;
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	fab2 f282 	clz	r2, r2
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	40d3      	lsrs	r3, r2
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025fc:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	fbb2 f2f3 	udiv	r2, r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	e004      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	4a0c      	ldr	r2, [pc, #48]	; (8002644 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	623b      	str	r3, [r7, #32]
      break;
 800261c:	e002      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002620:	623b      	str	r3, [r7, #32]
      break;
 8002622:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002624:	6a3b      	ldr	r3, [r7, #32]
}
 8002626:	4618      	mov	r0, r3
 8002628:	372c      	adds	r7, #44	; 0x2c
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	007a1200 	.word	0x007a1200
 800263c:	08002c00 	.word	0x08002c00
 8002640:	08002c10 	.word	0x08002c10
 8002644:	003d0900 	.word	0x003d0900

08002648 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b092      	sub	sp, #72	; 0x48
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002658:	2300      	movs	r3, #0
 800265a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80d4 	beq.w	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266c:	4b4e      	ldr	r3, [pc, #312]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10e      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002678:	4b4b      	ldr	r3, [pc, #300]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	4a4a      	ldr	r2, [pc, #296]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002682:	61d3      	str	r3, [r2, #28]
 8002684:	4b48      	ldr	r3, [pc, #288]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002690:	2301      	movs	r3, #1
 8002692:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002696:	4b45      	ldr	r3, [pc, #276]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d118      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a2:	4b42      	ldr	r3, [pc, #264]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a41      	ldr	r2, [pc, #260]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ae:	f7fe f92b 	bl	8000908 <HAL_GetTick>
 80026b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	e008      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7fe f927 	bl	8000908 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b64      	cmp	r3, #100	; 0x64
 80026c2:	d901      	bls.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e169      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	4b38      	ldr	r3, [pc, #224]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026d4:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8084 	beq.w	80027ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d07c      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026f4:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002702:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	461a      	mov	r2, r3
 800271e:	2301      	movs	r3, #1
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002726:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	461a      	mov	r2, r3
 8002742:	2300      	movs	r3, #0
 8002744:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002746:	4a18      	ldr	r2, [pc, #96]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800274c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d04b      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fe f8d7 	bl	8000908 <HAL_GetTick>
 800275a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275c:	e00a      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275e:	f7fe f8d3 	bl	8000908 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f241 3288 	movw	r2, #5000	; 0x1388
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e113      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002774:	2302      	movs	r3, #2
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
 8002780:	2302      	movs	r3, #2
 8002782:	623b      	str	r3, [r7, #32]
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	61fb      	str	r3, [r7, #28]
  return result;
 800278c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d108      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80027a2:	4b01      	ldr	r3, [pc, #4]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	e00d      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40007000 	.word	0x40007000
 80027b0:	10908100 	.word	0x10908100
 80027b4:	2302      	movs	r3, #2
 80027b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	4b78      	ldr	r3, [pc, #480]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	2202      	movs	r2, #2
 80027c6:	613a      	str	r2, [r7, #16]
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	fa92 f2a2 	rbit	r2, r2
 80027ce:	60fa      	str	r2, [r7, #12]
  return result;
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	fab2 f282 	clz	r2, r2
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027dc:	b2d2      	uxtb	r2, r2
 80027de:	f002 021f 	and.w	r2, r2, #31
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f202 	lsl.w	r2, r1, r2
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0b7      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80027ee:	4b6d      	ldr	r3, [pc, #436]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	496a      	ldr	r1, [pc, #424]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002800:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	4a65      	ldr	r2, [pc, #404]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800280e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002812:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002820:	4b60      	ldr	r3, [pc, #384]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	f023 0203 	bic.w	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	495d      	ldr	r1, [pc, #372]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800282e:	4313      	orrs	r3, r2
 8002830:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d008      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800283e:	4b59      	ldr	r3, [pc, #356]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	4956      	ldr	r1, [pc, #344]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800284c:	4313      	orrs	r3, r2
 800284e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800285c:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	494e      	ldr	r1, [pc, #312]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800286a:	4313      	orrs	r3, r2
 800286c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800287a:	4b4a      	ldr	r3, [pc, #296]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f023 0210 	bic.w	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	4947      	ldr	r1, [pc, #284]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002888:	4313      	orrs	r3, r2
 800288a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002898:	4b42      	ldr	r3, [pc, #264]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	493f      	ldr	r1, [pc, #252]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028b6:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f023 0220 	bic.w	r2, r3, #32
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	4938      	ldr	r1, [pc, #224]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028d4:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	4930      	ldr	r1, [pc, #192]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028f2:	4b2c      	ldr	r3, [pc, #176]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	4929      	ldr	r1, [pc, #164]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002900:	4313      	orrs	r3, r2
 8002902:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	4921      	ldr	r1, [pc, #132]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	2b00      	cmp	r3, #0
 800292c:	d008      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	491a      	ldr	r1, [pc, #104]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800293c:	4313      	orrs	r3, r2
 800293e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800294c:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	4912      	ldr	r1, [pc, #72]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d008      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800296a:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	490b      	ldr	r1, [pc, #44]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002978:	4313      	orrs	r3, r2
 800297a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002994:	4903      	ldr	r1, [pc, #12]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002996:	4313      	orrs	r3, r2
 8002998:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3748      	adds	r7, #72	; 0x48
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000

080029a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e09d      	b.n	8002af6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d108      	bne.n	80029d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ca:	d009      	beq.n	80029e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	61da      	str	r2, [r3, #28]
 80029d2:	e005      	b.n	80029e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fd fe3e 	bl	800067c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a20:	d902      	bls.n	8002a28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	e002      	b.n	8002a2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a36:	d007      	beq.n	8002a48 <HAL_SPI_Init+0xa0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a40:	d002      	beq.n	8002a48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	ea42 0103 	orr.w	r1, r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	0c1b      	lsrs	r3, r3, #16
 8002aa4:	f003 0204 	and.w	r2, r3, #4
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002ac4:	ea42 0103 	orr.w	r1, r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ae4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002b06:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002b0a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b34:	b084      	sub	sp, #16
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	f107 0014 	add.w	r0, r7, #20
 8002b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	b004      	add	sp, #16
 8002b74:	4770      	bx	lr
	...

08002b78 <__libc_init_array>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	4d0d      	ldr	r5, [pc, #52]	; (8002bb0 <__libc_init_array+0x38>)
 8002b7c:	4c0d      	ldr	r4, [pc, #52]	; (8002bb4 <__libc_init_array+0x3c>)
 8002b7e:	1b64      	subs	r4, r4, r5
 8002b80:	10a4      	asrs	r4, r4, #2
 8002b82:	2600      	movs	r6, #0
 8002b84:	42a6      	cmp	r6, r4
 8002b86:	d109      	bne.n	8002b9c <__libc_init_array+0x24>
 8002b88:	4d0b      	ldr	r5, [pc, #44]	; (8002bb8 <__libc_init_array+0x40>)
 8002b8a:	4c0c      	ldr	r4, [pc, #48]	; (8002bbc <__libc_init_array+0x44>)
 8002b8c:	f000 f820 	bl	8002bd0 <_init>
 8002b90:	1b64      	subs	r4, r4, r5
 8002b92:	10a4      	asrs	r4, r4, #2
 8002b94:	2600      	movs	r6, #0
 8002b96:	42a6      	cmp	r6, r4
 8002b98:	d105      	bne.n	8002ba6 <__libc_init_array+0x2e>
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ba0:	4798      	blx	r3
 8002ba2:	3601      	adds	r6, #1
 8002ba4:	e7ee      	b.n	8002b84 <__libc_init_array+0xc>
 8002ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002baa:	4798      	blx	r3
 8002bac:	3601      	adds	r6, #1
 8002bae:	e7f2      	b.n	8002b96 <__libc_init_array+0x1e>
 8002bb0:	08002c20 	.word	0x08002c20
 8002bb4:	08002c20 	.word	0x08002c20
 8002bb8:	08002c20 	.word	0x08002c20
 8002bbc:	08002c24 	.word	0x08002c24

08002bc0 <memset>:
 8002bc0:	4402      	add	r2, r0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d100      	bne.n	8002bca <memset+0xa>
 8002bc8:	4770      	bx	lr
 8002bca:	f803 1b01 	strb.w	r1, [r3], #1
 8002bce:	e7f9      	b.n	8002bc4 <memset+0x4>

08002bd0 <_init>:
 8002bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd2:	bf00      	nop
 8002bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd6:	bc08      	pop	{r3}
 8002bd8:	469e      	mov	lr, r3
 8002bda:	4770      	bx	lr

08002bdc <_fini>:
 8002bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bde:	bf00      	nop
 8002be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be2:	bc08      	pop	{r3}
 8002be4:	469e      	mov	lr, r3
 8002be6:	4770      	bx	lr
