
serial_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003130  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a8  080033a8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  080033a8  080033a8  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033a8  080033a8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a8  080033a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080033b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          0000041c  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004c4  200004c4  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea89  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022d6  00000000  00000000  0002eb61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  00030e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ae8  00000000  00000000  00031a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ffee  00000000  00000000  000324f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f837  00000000  00000000  000624e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae29e  00000000  00000000  00071d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011ffbb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030b8  00000000  00000000  0012000c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032a0 	.word	0x080032a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	080032a0 	.word	0x080032a0

080001c8 <enable_clocks>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <enable_clocks+0x28>)
 80001ce:	695b      	ldr	r3, [r3, #20]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <enable_clocks+0x28>)
 80001d2:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80001d6:	6153      	str	r3, [r2, #20]

	// store a 1 in bit for the TIM2 enable flag
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <enable_clocks+0x28>)
 80001da:	69db      	ldr	r3, [r3, #28]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <enable_clocks+0x28>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	61d3      	str	r3, [r2, #28]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40021000 	.word	0x40021000

080001f4 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001fa:	4b06      	ldr	r3, [pc, #24]	; (8000214 <initialise_board+0x20>)
 80001fc:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f245 5255 	movw	r2, #21845	; 0x5555
 8000204:	801a      	strh	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	48001002 	.word	0x48001002

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fe79 	bl	8000f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f82d 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000226:	f000 f92d 	bl	8000484 <MX_GPIO_Init>
  MX_I2C1_Init();
 800022a:	f000 f88b 	bl	8000344 <MX_I2C1_Init>
  MX_SPI1_Init();
 800022e:	f000 f8c9 	bl	80003c4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000232:	f000 f905 	bl	8000440 <MX_USB_PCD_Init>

  /* USER CODE BEGIN 2 */
  enable_clocks();
 8000236:	f7ff ffc7 	bl	80001c8 <enable_clocks>
  initialise_board();
 800023a:	f7ff ffdb 	bl	80001f4 <initialise_board>



  SerialInitialise(BAUD_115200, &USART2_PORT);
 800023e:	490e      	ldr	r1, [pc, #56]	; (8000278 <main+0x60>)
 8000240:	2000      	movs	r0, #0
 8000242:	f000 fbf3 	bl	8000a2c <SerialInitialise>
  uint8_t message[32] = "Test\n";
 8000246:	4a0d      	ldr	r2, [pc, #52]	; (800027c <main+0x64>)
 8000248:	463b      	mov	r3, r7
 800024a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800024e:	6018      	str	r0, [r3, #0]
 8000250:	3304      	adds	r3, #4
 8000252:	8019      	strh	r1, [r3, #0]
 8000254:	1dbb      	adds	r3, r7, #6
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]
 8000262:	615a      	str	r2, [r3, #20]
 8000264:	831a      	strh	r2, [r3, #24]
  SerialOutputString(message, &USART2_PORT);
 8000266:	463b      	mov	r3, r7
 8000268:	4903      	ldr	r1, [pc, #12]	; (8000278 <main+0x60>)
 800026a:	4618      	mov	r0, r3
 800026c:	f000 fc7d 	bl	8000b6a <SerialOutputString>

  Stage2();
 8000270:	f000 fa4a 	bl	8000708 <Stage2>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000274:	e7fe      	b.n	8000274 <main+0x5c>
 8000276:	bf00      	nop
 8000278:	2000005c 	.word	0x2000005c
 800027c:	080032b8 	.word	0x080032b8

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b09e      	sub	sp, #120	; 0x78
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f002 fff6 	bl	8003280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a4:	463b      	mov	r3, r7
 80002a6:	223c      	movs	r2, #60	; 0x3c
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 ffe8 	bl	8003280 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002b0:	2303      	movs	r3, #3
 80002b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002be:	2301      	movs	r3, #1
 80002c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c2:	2310      	movs	r3, #16
 80002c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	2302      	movs	r3, #2
 80002c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002d4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 faf0 	bl	80018c0 <HAL_RCC_OscConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002e6:	f000 f94b 	bl	8000580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	230f      	movs	r3, #15
 80002ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ee:	2302      	movs	r3, #2
 80002f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000300:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000304:	2101      	movs	r1, #1
 8000306:	4618      	mov	r0, r3
 8000308:	f002 fb18 	bl	800293c <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000312:	f000 f935 	bl	8000580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <SystemClock_Config+0xc0>)
 8000318:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800031a:	2300      	movs	r3, #0
 800031c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800031e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000322:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000324:	463b      	mov	r3, r7
 8000326:	4618      	mov	r0, r3
 8000328:	f002 fcee 	bl	8002d08 <HAL_RCCEx_PeriphCLKConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000332:	f000 f925 	bl	8000580 <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3778      	adds	r7, #120	; 0x78
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	00020020 	.word	0x00020020

08000344 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000348:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <MX_I2C1_Init+0x74>)
 800034a:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <MX_I2C1_Init+0x78>)
 800034c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800034e:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <MX_I2C1_Init+0x74>)
 8000350:	4a1b      	ldr	r2, [pc, #108]	; (80003c0 <MX_I2C1_Init+0x7c>)
 8000352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000354:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <MX_I2C1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <MX_I2C1_Init+0x74>)
 800035c:	2201      	movs	r2, #1
 800035e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <MX_I2C1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_I2C1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <MX_I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_I2C1_Init+0x74>)
 8000374:	2200      	movs	r2, #0
 8000376:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_I2C1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800037e:	480e      	ldr	r0, [pc, #56]	; (80003b8 <MX_I2C1_Init+0x74>)
 8000380:	f001 f8a6 	bl	80014d0 <HAL_I2C_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800038a:	f000 f8f9 	bl	8000580 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800038e:	2100      	movs	r1, #0
 8000390:	4809      	ldr	r0, [pc, #36]	; (80003b8 <MX_I2C1_Init+0x74>)
 8000392:	f001 f92c 	bl	80015ee <HAL_I2CEx_ConfigAnalogFilter>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800039c:	f000 f8f0 	bl	8000580 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003a0:	2100      	movs	r1, #0
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_I2C1_Init+0x74>)
 80003a4:	f001 f96e 	bl	8001684 <HAL_I2CEx_ConfigDigitalFilter>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003ae:	f000 f8e7 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	200000c4 	.word	0x200000c4
 80003bc:	40005400 	.word	0x40005400
 80003c0:	2000090e 	.word	0x2000090e

080003c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <MX_SPI1_Init+0x74>)
 80003ca:	4a1c      	ldr	r2, [pc, #112]	; (800043c <MX_SPI1_Init+0x78>)
 80003cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ce:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <MX_SPI1_Init+0x74>)
 80003d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003d6:	4b18      	ldr	r3, [pc, #96]	; (8000438 <MX_SPI1_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003dc:	4b16      	ldr	r3, [pc, #88]	; (8000438 <MX_SPI1_Init+0x74>)
 80003de:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <MX_SPI1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ea:	4b13      	ldr	r3, [pc, #76]	; (8000438 <MX_SPI1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <MX_SPI1_Init+0x74>)
 80003f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <MX_SPI1_Init+0x74>)
 80003fa:	2208      	movs	r2, #8
 80003fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_SPI1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_SPI1_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <MX_SPI1_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_SPI1_Init+0x74>)
 8000412:	2207      	movs	r2, #7
 8000414:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <MX_SPI1_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_SPI1_Init+0x74>)
 800041e:	2208      	movs	r2, #8
 8000420:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <MX_SPI1_Init+0x74>)
 8000424:	f002 fe20 	bl	8003068 <HAL_SPI_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800042e:	f000 f8a7 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000118 	.word	0x20000118
 800043c:	40013000 	.word	0x40013000

08000440 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000444:	4b0d      	ldr	r3, [pc, #52]	; (800047c <MX_USB_PCD_Init+0x3c>)
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <MX_USB_PCD_Init+0x40>)
 8000448:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_USB_PCD_Init+0x3c>)
 800044c:	2208      	movs	r2, #8
 800044e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000450:	4b0a      	ldr	r3, [pc, #40]	; (800047c <MX_USB_PCD_Init+0x3c>)
 8000452:	2202      	movs	r2, #2
 8000454:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_USB_PCD_Init+0x3c>)
 8000458:	2202      	movs	r2, #2
 800045a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <MX_USB_PCD_Init+0x3c>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_USB_PCD_Init+0x3c>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <MX_USB_PCD_Init+0x3c>)
 800046a:	f001 f957 	bl	800171c <HAL_PCD_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000474:	f000 f884 	bl	8000580 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	2000017c 	.word	0x2000017c
 8000480:	40005c00 	.word	0x40005c00

08000484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800049a:	4b37      	ldr	r3, [pc, #220]	; (8000578 <MX_GPIO_Init+0xf4>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a36      	ldr	r2, [pc, #216]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004a4:	6153      	str	r3, [r2, #20]
 80004a6:	4b34      	ldr	r3, [pc, #208]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b2:	4b31      	ldr	r3, [pc, #196]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a30      	ldr	r2, [pc, #192]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b2e      	ldr	r3, [pc, #184]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004ca:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a2a      	ldr	r2, [pc, #168]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d4:	6153      	str	r3, [r2, #20]
 80004d6:	4b28      	ldr	r3, [pc, #160]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	4b25      	ldr	r3, [pc, #148]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	4a24      	ldr	r2, [pc, #144]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ec:	6153      	str	r3, [r2, #20]
 80004ee:	4b22      	ldr	r3, [pc, #136]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fa:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <MX_GPIO_Init+0xf4>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a1e      	ldr	r2, [pc, #120]	; (8000578 <MX_GPIO_Init+0xf4>)
 8000500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <MX_GPIO_Init+0xf4>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000512:	2200      	movs	r2, #0
 8000514:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000518:	4818      	ldr	r0, [pc, #96]	; (800057c <MX_GPIO_Init+0xf8>)
 800051a:	f000 ffc1 	bl	80014a0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800051e:	2337      	movs	r3, #55	; 0x37
 8000520:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000522:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	4619      	mov	r1, r3
 8000532:	4812      	ldr	r0, [pc, #72]	; (800057c <MX_GPIO_Init+0xf8>)
 8000534:	f000 fe3a 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000538:	f64f 7308 	movw	r3, #65288	; 0xff08
 800053c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	480a      	ldr	r0, [pc, #40]	; (800057c <MX_GPIO_Init+0xf8>)
 8000552:	f000 fe2b 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000556:	2301      	movs	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	4619      	mov	r1, r3
 8000568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056c:	f000 fe1e 	bl	80011ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	; 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40021000 	.word	0x40021000
 800057c:	48001000 	.word	0x48001000

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000588:	e7fe      	b.n	8000588 <Error_Handler+0x8>
	...

0800058c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	db0b      	blt.n	80005b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	f003 021f 	and.w	r2, r3, #31
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <__NVIC_EnableIRQ+0x38>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	095b      	lsrs	r3, r3, #5
 80005ac:	2001      	movs	r0, #1
 80005ae:	fa00 f202 	lsl.w	r2, r0, r2
 80005b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000e100 	.word	0xe000e100

080005c8 <CheckSequence>:
volatile int count;
volatile int next_stage;
volatile int nest = 0;
volatile int timer_expired = 0; // Timer expiration flag

void CheckSequence(uint8_t *input){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b096      	sub	sp, #88	; 0x58
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	char seq[7];
	int i;
	if (count == 1){
 80005d0:	4b43      	ldr	r3, [pc, #268]	; (80006e0 <CheckSequence+0x118>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d106      	bne.n	80005e6 <CheckSequence+0x1e>
		strcpy(seq, seq1);
 80005d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005dc:	4941      	ldr	r1, [pc, #260]	; (80006e4 <CheckSequence+0x11c>)
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fe56 	bl	8003290 <strcpy>
 80005e4:	e01f      	b.n	8000626 <CheckSequence+0x5e>
	}
	else if (count == 2){
 80005e6:	4b3e      	ldr	r3, [pc, #248]	; (80006e0 <CheckSequence+0x118>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	d106      	bne.n	80005fc <CheckSequence+0x34>
		strcpy(seq, seq2);
 80005ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005f2:	493d      	ldr	r1, [pc, #244]	; (80006e8 <CheckSequence+0x120>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 fe4b 	bl	8003290 <strcpy>
 80005fa:	e014      	b.n	8000626 <CheckSequence+0x5e>
	}
	else if (count == 3){
 80005fc:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <CheckSequence+0x118>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b03      	cmp	r3, #3
 8000602:	d106      	bne.n	8000612 <CheckSequence+0x4a>
		strcpy(seq, seq3);
 8000604:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000608:	4938      	ldr	r1, [pc, #224]	; (80006ec <CheckSequence+0x124>)
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fe40 	bl	8003290 <strcpy>
 8000610:	e009      	b.n	8000626 <CheckSequence+0x5e>
	}
	else if (count == 4){
 8000612:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <CheckSequence+0x118>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b04      	cmp	r3, #4
 8000618:	d105      	bne.n	8000626 <CheckSequence+0x5e>
		strcpy(seq, seq4);
 800061a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800061e:	4934      	ldr	r1, [pc, #208]	; (80006f0 <CheckSequence+0x128>)
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fe35 	bl	8003290 <strcpy>
	}

	uint8_t fail_message[32] = "Fail\n";
 8000626:	4a33      	ldr	r2, [pc, #204]	; (80006f4 <CheckSequence+0x12c>)
 8000628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800062c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000630:	6018      	str	r0, [r3, #0]
 8000632:	3304      	adds	r3, #4
 8000634:	8019      	strh	r1, [r3, #0]
 8000636:	f107 0332 	add.w	r3, r7, #50	; 0x32
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	831a      	strh	r2, [r3, #24]
	uint8_t pass_message[32] = "Success\n";
 800064a:	4a2b      	ldr	r2, [pc, #172]	; (80006f8 <CheckSequence+0x130>)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	ca07      	ldmia	r2, {r0, r1, r2}
 8000652:	c303      	stmia	r3!, {r0, r1}
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	f107 0315 	add.w	r3, r7, #21
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]
 8000666:	f8c3 2013 	str.w	r2, [r3, #19]

	char current_char;
	for (i = 0; i < count+3; i++){
 800066a:	2300      	movs	r3, #0
 800066c:	657b      	str	r3, [r7, #84]	; 0x54
 800066e:	e01b      	b.n	80006a8 <CheckSequence+0xe0>
		current_char = (char)input[i];
 8000670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		if (current_char != seq[i]){
 800067c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800068a:	429a      	cmp	r2, r3
 800068c:	d009      	beq.n	80006a2 <CheckSequence+0xda>
			SerialOutputString(fail_message, &USART1_PORT);
 800068e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000692:	491a      	ldr	r1, [pc, #104]	; (80006fc <CheckSequence+0x134>)
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fa68 	bl	8000b6a <SerialOutputString>
			substage_state = 0;
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <CheckSequence+0x138>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
			break;
 80006a0:	e008      	b.n	80006b4 <CheckSequence+0xec>
	for (i = 0; i < count+3; i++){
 80006a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006a4:	3301      	adds	r3, #1
 80006a6:	657b      	str	r3, [r7, #84]	; 0x54
 80006a8:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <CheckSequence+0x118>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3302      	adds	r3, #2
 80006ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dddd      	ble.n	8000670 <CheckSequence+0xa8>
		}
	}

	if (substage_state == 1){
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <CheckSequence+0x138>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d10d      	bne.n	80006d8 <CheckSequence+0x110>
		SerialOutputString(pass_message, &USART1_PORT);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	490e      	ldr	r1, [pc, #56]	; (80006fc <CheckSequence+0x134>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fa51 	bl	8000b6a <SerialOutputString>
		count ++;
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <CheckSequence+0x118>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <CheckSequence+0x118>)
 80006d0:	6013      	str	r3, [r2, #0]
		next_stage = 1;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <CheckSequence+0x13c>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	601a      	str	r2, [r3, #0]
	}
}
 80006d8:	bf00      	nop
 80006da:	3758      	adds	r7, #88	; 0x58
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000046c 	.word	0x2000046c
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000004 	.word	0x20000004
 80006ec:	2000000c 	.word	0x2000000c
 80006f0:	20000014 	.word	0x20000014
 80006f4:	080032d8 	.word	0x080032d8
 80006f8:	080032f8 	.word	0x080032f8
 80006fc:	2000001c 	.word	0x2000001c
 8000700:	20000468 	.word	0x20000468
 8000704:	20000470 	.word	0x20000470

08000708 <Stage2>:

void Stage2(){
 8000708:	b5b0      	push	{r4, r5, r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
	substage_state = 1;
 800070e:	4b37      	ldr	r3, [pc, #220]	; (80007ec <Stage2+0xe4>)
 8000710:	2201      	movs	r2, #1
 8000712:	601a      	str	r2, [r3, #0]
	count = 1;
 8000714:	4b36      	ldr	r3, [pc, #216]	; (80007f0 <Stage2+0xe8>)
 8000716:	2201      	movs	r2, #1
 8000718:	601a      	str	r2, [r3, #0]

	while (count < 5){
 800071a:	e03c      	b.n	8000796 <Stage2+0x8e>
		next_stage = 0;
 800071c:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <Stage2+0xec>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]

		//put LED function here
		Display_LED();
 8000722:	f000 f89d 	bl	8000860 <Display_LED>

		//enable timer polling here
		init_timer();
 8000726:	f000 f8fb 	bl	8000920 <init_timer>

		//enable serial receive interrupt
		SerialInitialise(BAUD_115200, &USART1_PORT);
 800072a:	4933      	ldr	r1, [pc, #204]	; (80007f8 <Stage2+0xf0>)
 800072c:	2000      	movs	r0, #0
 800072e:	f000 f97d 	bl	8000a2c <SerialInitialise>
		EnableSerialInterrupt(&USART1_PORT);
 8000732:	4831      	ldr	r0, [pc, #196]	; (80007f8 <Stage2+0xf0>)
 8000734:	f000 f9cc 	bl	8000ad0 <EnableSerialInterrupt>

		//add timer polling condition when integrating
		while(next_stage == 0 && substage_state == 1){
 8000738:	e007      	b.n	800074a <Stage2+0x42>
            if (timer_expired) {
 800073a:	4b30      	ldr	r3, [pc, #192]	; (80007fc <Stage2+0xf4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d003      	beq.n	800074a <Stage2+0x42>
                timer_expired = 0; // Reset timer expiration flag
 8000742:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <Stage2+0xf4>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
                break; // Exit the loop if timer expired
 8000748:	e007      	b.n	800075a <Stage2+0x52>
		while(next_stage == 0 && substage_state == 1){
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <Stage2+0xec>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d103      	bne.n	800075a <Stage2+0x52>
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <Stage2+0xe4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d0ef      	beq.n	800073a <Stage2+0x32>
            }
		}

		if(substage_state == 0){
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <Stage2+0xe4>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d119      	bne.n	8000796 <Stage2+0x8e>
			uint8_t restart_message[32] = "Restarting Stage 2\n";
 8000762:	4b27      	ldr	r3, [pc, #156]	; (8000800 <Stage2+0xf8>)
 8000764:	463c      	mov	r4, r7
 8000766:	461d      	mov	r5, r3
 8000768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076c:	682b      	ldr	r3, [r5, #0]
 800076e:	6023      	str	r3, [r4, #0]
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
			SerialOutputString(restart_message, &USART1_PORT);
 800077c:	463b      	mov	r3, r7
 800077e:	491e      	ldr	r1, [pc, #120]	; (80007f8 <Stage2+0xf0>)
 8000780:	4618      	mov	r0, r3
 8000782:	f000 f9f2 	bl	8000b6a <SerialOutputString>

			nest ++;
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <Stage2+0xfc>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <Stage2+0xfc>)
 800078e:	6013      	str	r3, [r2, #0]
			Stage2();
 8000790:	f7ff ffba 	bl	8000708 <Stage2>
			break;
 8000794:	e003      	b.n	800079e <Stage2+0x96>
	while (count < 5){
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <Stage2+0xe8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b04      	cmp	r3, #4
 800079c:	ddbe      	ble.n	800071c <Stage2+0x14>
		}
	}

	if (nest == 0){
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <Stage2+0xfc>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d118      	bne.n	80007d8 <Stage2+0xd0>
		uint8_t progress_message[32] = "You've passed Stage 2\n";
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <Stage2+0x100>)
 80007a8:	463c      	mov	r4, r7
 80007aa:	461d      	mov	r5, r3
 80007ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007b4:	6020      	str	r0, [r4, #0]
 80007b6:	3404      	adds	r4, #4
 80007b8:	8021      	strh	r1, [r4, #0]
 80007ba:	3402      	adds	r4, #2
 80007bc:	0c0b      	lsrs	r3, r1, #16
 80007be:	7023      	strb	r3, [r4, #0]
 80007c0:	f107 0317 	add.w	r3, r7, #23
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	721a      	strb	r2, [r3, #8]
		SerialOutputString(progress_message, &USART1_PORT);
 80007cc:	463b      	mov	r3, r7
 80007ce:	490a      	ldr	r1, [pc, #40]	; (80007f8 <Stage2+0xf0>)
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f9ca 	bl	8000b6a <SerialOutputString>
		//call next stage
	}
	else{
		nest --;
	}
}
 80007d6:	e004      	b.n	80007e2 <Stage2+0xda>
		nest --;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <Stage2+0xfc>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3b01      	subs	r3, #1
 80007de:	4a09      	ldr	r2, [pc, #36]	; (8000804 <Stage2+0xfc>)
 80007e0:	6013      	str	r3, [r2, #0]
}
 80007e2:	bf00      	nop
 80007e4:	3720      	adds	r7, #32
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bdb0      	pop	{r4, r5, r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000468 	.word	0x20000468
 80007f0:	2000046c 	.word	0x2000046c
 80007f4:	20000470 	.word	0x20000470
 80007f8:	2000001c 	.word	0x2000001c
 80007fc:	20000478 	.word	0x20000478
 8000800:	08003318 	.word	0x08003318
 8000804:	20000474 	.word	0x20000474
 8000808:	08003338 	.word	0x08003338

0800080c <Current_LED>:

void Current_LED(uint8_t current){
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	// turn on NWSE LED based on WASD
	// Function to control LEDs based on the input direction (current)
	// This implementation assumes there are four LEDs (N, W, S, E)
	// Replace the following code with the appropriate hardware-specific calls or API functions

	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <Current_LED+0x50>)
 8000818:	60fb      	str	r3, [r7, #12]

	if (current == 'W') {
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b57      	cmp	r3, #87	; 0x57
 800081e:	d103      	bne.n	8000828 <Current_LED+0x1c>
		// Turn on North LED
		*led_register = 0b00000010; // Set the bit for the desired LED
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2202      	movs	r2, #2
 8000824:	701a      	strb	r2, [r3, #0]
	else if (current == 'D') {
		// Turn on East LED
		*led_register = 0b00001000; // Set the bit for the desired LED
	}

}
 8000826:	e013      	b.n	8000850 <Current_LED+0x44>
	else if (current == 'A') {
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b41      	cmp	r3, #65	; 0x41
 800082c:	d103      	bne.n	8000836 <Current_LED+0x2a>
		*led_register = 0b10000000; // Set the bit for the desired LED
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	701a      	strb	r2, [r3, #0]
}
 8000834:	e00c      	b.n	8000850 <Current_LED+0x44>
	else if (current == 'S') {
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b53      	cmp	r3, #83	; 0x53
 800083a:	d103      	bne.n	8000844 <Current_LED+0x38>
		*led_register = 0b00100000; // Set the bit for the desired LED
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2220      	movs	r2, #32
 8000840:	701a      	strb	r2, [r3, #0]
}
 8000842:	e005      	b.n	8000850 <Current_LED+0x44>
	else if (current == 'D') {
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b44      	cmp	r3, #68	; 0x44
 8000848:	d102      	bne.n	8000850 <Current_LED+0x44>
		*led_register = 0b00001000; // Set the bit for the desired LED
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2208      	movs	r2, #8
 800084e:	701a      	strb	r2, [r3, #0]
}
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	48001015 	.word	0x48001015

08000860 <Display_LED>:

void Display_LED(){
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
	char seq[7];
		int i;
		if (count == 1){
 8000866:	4b27      	ldr	r3, [pc, #156]	; (8000904 <Display_LED+0xa4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d105      	bne.n	800087a <Display_LED+0x1a>
			strcpy(seq, seq1);
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4925      	ldr	r1, [pc, #148]	; (8000908 <Display_LED+0xa8>)
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fd0c 	bl	8003290 <strcpy>
 8000878:	e01c      	b.n	80008b4 <Display_LED+0x54>
		}
		else if (count == 2){
 800087a:	4b22      	ldr	r3, [pc, #136]	; (8000904 <Display_LED+0xa4>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d105      	bne.n	800088e <Display_LED+0x2e>
			strcpy(seq, seq2);
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	4921      	ldr	r1, [pc, #132]	; (800090c <Display_LED+0xac>)
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fd02 	bl	8003290 <strcpy>
 800088c:	e012      	b.n	80008b4 <Display_LED+0x54>
		}
		else if (count == 3){
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <Display_LED+0xa4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d105      	bne.n	80008a2 <Display_LED+0x42>
			strcpy(seq, seq3);
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	491d      	ldr	r1, [pc, #116]	; (8000910 <Display_LED+0xb0>)
 800089a:	4618      	mov	r0, r3
 800089c:	f002 fcf8 	bl	8003290 <strcpy>
 80008a0:	e008      	b.n	80008b4 <Display_LED+0x54>
		}
		else if (count == 4){
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <Display_LED+0xa4>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	d104      	bne.n	80008b4 <Display_LED+0x54>
			strcpy(seq, seq4);
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4919      	ldr	r1, [pc, #100]	; (8000914 <Display_LED+0xb4>)
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 fcee 	bl	8003290 <strcpy>
		}

		uint8_t current_char;
		for (i = 0; i < count+3; i++){
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	e015      	b.n	80008e6 <Display_LED+0x86>
			current_char =  seq[i];
 80008ba:	1d3a      	adds	r2, r7, #4
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	4413      	add	r3, r2
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	72fb      	strb	r3, [r7, #11]
			Current_LED(current_char);
 80008c4:	7afb      	ldrb	r3, [r7, #11]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ffa0 	bl	800080c <Current_LED>
			for (int i = 0; i < 8000000; ++i) {
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	e002      	b.n	80008d8 <Display_LED+0x78>
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	3301      	adds	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <Display_LED+0xb8>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	dbf8      	blt.n	80008d2 <Display_LED+0x72>
		for (i = 0; i < count+3; i++){
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	3301      	adds	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <Display_LED+0xa4>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	3302      	adds	r3, #2
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	dde3      	ble.n	80008ba <Display_LED+0x5a>
			        // Do nothing
			    }
		}

		//turn off LED
		uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <Display_LED+0xbc>)
 80008f4:	60fb      	str	r3, [r7, #12]
		*led_register = 0b00000000;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]

}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000046c 	.word	0x2000046c
 8000908:	20000000 	.word	0x20000000
 800090c:	20000004 	.word	0x20000004
 8000910:	2000000c 	.word	0x2000000c
 8000914:	20000014 	.word	0x20000014
 8000918:	007a1200 	.word	0x007a1200
 800091c:	48001015 	.word	0x48001015

08000920 <init_timer>:

void init_timer(){
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
	__disable_irq();
    TIM2->PSC = 7999; // 1 ms per tick
 8000928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800092c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 30000; // 30 seconds
 8000932:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000936:	f247 5230 	movw	r2, #30000	; 0x7530
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->DIER |= TIM_DIER_UIE;
 800093c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);
 800094c:	201c      	movs	r0, #28
 800094e:	f7ff fe1d 	bl	800058c <__NVIC_EnableIRQ>
    TIM2->CR1 |= TIM_CR1_CEN;
 8000952:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000962:	b662      	cpsie	i
}
 8000964:	bf00      	nop
    // Re-enable all interrupts (now that we are finished)
    __enable_irq();

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <TIM2_IRQHandler>:

void TIM2_IRQHandler() {
 800096c:	b5b0      	push	{r4, r5, r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
    if ((TIM2->SR & TIM_SR_UIF) != 0) {
 8000972:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000976:	691b      	ldr	r3, [r3, #16]
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	2b00      	cmp	r3, #0
 800097e:	d02c      	beq.n	80009da <TIM2_IRQHandler+0x6e>
        TIM2->SR &= ~TIM_SR_UIF; 	//put down overflow flag
 8000980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000984:	691b      	ldr	r3, [r3, #16]
 8000986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800098a:	f023 0301 	bic.w	r3, r3, #1
 800098e:	6113      	str	r3, [r2, #16]
        TIM2->CR1 &= ~TIM_CR1_CEN;	//disable timer
 8000990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800099a:	f023 0301 	bic.w	r3, r3, #1
 800099e:	6013      	str	r3, [r2, #0]
        TIM2->CNT &= ~TIM_CNT_CNT_Msk;//reset timer
 80009a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
        uint8_t message[32] = "Time's up, restarting stage 2\n";
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <TIM2_IRQHandler+0x78>)
 80009b0:	463c      	mov	r4, r7
 80009b2:	461d      	mov	r5, r3
 80009b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009bc:	c407      	stmia	r4!, {r0, r1, r2}
 80009be:	8023      	strh	r3, [r4, #0]
 80009c0:	3402      	adds	r4, #2
 80009c2:	0c1b      	lsrs	r3, r3, #16
 80009c4:	7023      	strb	r3, [r4, #0]
 80009c6:	2300      	movs	r3, #0
 80009c8:	77fb      	strb	r3, [r7, #31]
        SerialOutputString(message, &USART1_PORT);
 80009ca:	463b      	mov	r3, r7
 80009cc:	4906      	ldr	r1, [pc, #24]	; (80009e8 <TIM2_IRQHandler+0x7c>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f8cb 	bl	8000b6a <SerialOutputString>

        // Set the timer expiration flag
        timer_expired = 1;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <TIM2_IRQHandler+0x80>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
    }
}
 80009da:	bf00      	nop
 80009dc:	3720      	adds	r7, #32
 80009de:	46bd      	mov	sp, r7
 80009e0:	bdb0      	pop	{r4, r5, r7, pc}
 80009e2:	bf00      	nop
 80009e4:	08003358 	.word	0x08003358
 80009e8:	2000001c 	.word	0x2000001c
 80009ec:	20000478 	.word	0x20000478

080009f0 <__NVIC_EnableIRQ>:
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	db0b      	blt.n	8000a1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	f003 021f 	and.w	r2, r3, #31
 8000a08:	4907      	ldr	r1, [pc, #28]	; (8000a28 <__NVIC_EnableIRQ+0x38>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	095b      	lsrs	r3, r3, #5
 8000a10:	2001      	movs	r0, #1
 8000a12:	fa00 f202 	lsl.w	r2, r0, r2
 8000a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000e100 	.word	0xe000e100

08000a2c <SerialInitialise>:



// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <SerialInitialise+0xa0>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4a24      	ldr	r2, [pc, #144]	; (8000acc <SerialInitialise+0xa0>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <SerialInitialise+0xa0>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	4a21      	ldr	r2, [pc, #132]	; (8000acc <SerialInitialise+0xa0>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	6a1b      	ldr	r3, [r3, #32]
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d106      	bne.n	8000a64 <SerialInitialise+0x38>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <SerialInitialise+0xa0>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <SerialInitialise+0xa0>)
 8000a5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a60:	6153      	str	r3, [r2, #20]
		break;
 8000a62:	e000      	b.n	8000a66 <SerialInitialise+0x3a>
	default:
		break;
 8000a64:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6a:	683a      	ldr	r2, [r7, #0]
 8000a6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000a6e:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a74:	683a      	ldr	r2, [r7, #0]
 8000a76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000a78:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	69d9      	ldr	r1, [r3, #28]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	430a      	orrs	r2, r1
 8000a98:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	60fb      	str	r3, [r7, #12]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d104      	bne.n	8000ab0 <SerialInitialise+0x84>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000aac:	801a      	strh	r2, [r3, #0]
		break;
 8000aae:	bf00      	nop
	}

	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f042 020d 	orr.w	r2, r2, #13
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	40021000 	.word	0x40021000

08000ad0 <EnableSerialInterrupt>:

void EnableSerialInterrupt(SerialPort *serial_port) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
	__disable_irq(); // Disable the interrupts while editing settings.

	*(serial_port->ControlRegister1) |= USART_CR1_RXNEIE;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f042 0220 	orr.w	r2, r2, #32
 8000aea:	601a      	str	r2, [r3, #0]

    // Enable the system configuration controller (SYSCFG in RCC).
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <EnableSerialInterrupt+0x5c>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <EnableSerialInterrupt+0x5c>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6193      	str	r3, [r2, #24]

	// Configure EXTI line for USART1.
	SYSCFG->EXTICR[1] &= ~SYSCFG_EXTICR2_EXTI5_Msk; // Clear EXTI5, remove previous settings.
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <EnableSerialInterrupt+0x60>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <EnableSerialInterrupt+0x60>)
 8000afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b02:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI5_PA; // Set EXTI5 bits to PA for  (USART1)
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <EnableSerialInterrupt+0x60>)
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <EnableSerialInterrupt+0x60>)
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	60d3      	str	r3, [r2, #12]

	// Enable EXTI5 interrupt (corresponding to USART1).
	EXTI->IMR |= EXTI_IMR_MR5; // Enable interrupt on EXTI line 5 (corresponding to PA5/USART1).
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <EnableSerialInterrupt+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <EnableSerialInterrupt+0x64>)
 8000b12:	f043 0320 	orr.w	r3, r3, #32
 8000b16:	6013      	str	r3, [r2, #0]

    NVIC_EnableIRQ(USART1_IRQn);
 8000b18:	2025      	movs	r0, #37	; 0x25
 8000b1a:	f7ff ff69 	bl	80009f0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b1e:	b662      	cpsie	i
}
 8000b20:	bf00      	nop

    __enable_irq(); // Re-enable all interrupts now that we are finished editing settings.
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010000 	.word	0x40010000
 8000b34:	40010400 	.word	0x40010400

08000b38 <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8000b44:	bf00      	nop
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0f8      	beq.n	8000b46 <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	79fa      	ldrb	r2, [r7, #7]
 8000b5a:	b292      	uxth	r2, r2
 8000b5c:	801a      	strh	r2, [r3, #0]
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <SerialOutputString>:

void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000b78:	e00b      	b.n	8000b92 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	6839      	ldr	r1, [r7, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ffd9 	bl	8000b38 <SerialOutputChar>
		counter++;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
		pt++;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1ef      	bne.n	8000b7a <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	4798      	blx	r3
}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <SerialInputSequence>:



void SerialInputSequence(SerialPort *serial_port) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
		if (rx_index < 32) {
 8000bbc:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <SerialInputSequence+0x9c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b1f      	cmp	r3, #31
 8000bc4:	d82d      	bhi.n	8000c22 <SerialInputSequence+0x6e>
			uint8_t rx_data = *(serial_port->DataInputRegister);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	73fb      	strb	r3, [r7, #15]

			// exit if new line is detected
			if (rx_data == CARRIAGE_RETURN) {
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	2b0d      	cmp	r3, #13
 8000bd4:	d113      	bne.n	8000bfe <SerialInputSequence+0x4a>
				// disable receive interrupt
				*(serial_port->ControlRegister1) &= ~USART_CR1_RXNEIE;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f022 0220 	bic.w	r2, r2, #32
 8000be4:	601a      	str	r2, [r3, #0]

				CheckSequence(rx_buffer);
 8000be6:	481b      	ldr	r0, [pc, #108]	; (8000c54 <SerialInputSequence+0xa0>)
 8000be8:	f7ff fcee 	bl	80005c8 <CheckSequence>

				// reset index & buffer
				rx_index = 0;
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <SerialInputSequence+0x9c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
				memset(rx_buffer, 0, sizeof(rx_buffer));
 8000bf2:	2240      	movs	r2, #64	; 0x40
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4817      	ldr	r0, [pc, #92]	; (8000c54 <SerialInputSequence+0xa0>)
 8000bf8:	f002 fb42 	bl	8003280 <memset>

			// reset index & buffer
			rx_index = 0;
			memset(rx_buffer, 0, sizeof(rx_buffer));
		}
}
 8000bfc:	e024      	b.n	8000c48 <SerialInputSequence+0x94>
			else if (rx_data == LINE_FEED){
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	2b0a      	cmp	r3, #10
 8000c02:	d021      	beq.n	8000c48 <SerialInputSequence+0x94>
				rx_buffer[rx_index]= rx_data;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <SerialInputSequence+0x9c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <SerialInputSequence+0xa0>)
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	5453      	strb	r3, [r2, r1]
				rx_index++;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <SerialInputSequence+0x9c>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	3301      	adds	r3, #1
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <SerialInputSequence+0x9c>)
 8000c1e:	701a      	strb	r2, [r3, #0]
}
 8000c20:	e012      	b.n	8000c48 <SerialInputSequence+0x94>
			*(serial_port->ControlRegister1) &= ~USART_CR1_RXNEIE;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f022 0220 	bic.w	r2, r2, #32
 8000c30:	601a      	str	r2, [r3, #0]
			CheckSequence(rx_buffer);
 8000c32:	4808      	ldr	r0, [pc, #32]	; (8000c54 <SerialInputSequence+0xa0>)
 8000c34:	f7ff fcc8 	bl	80005c8 <CheckSequence>
			rx_index = 0;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <SerialInputSequence+0x9c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8000c3e:	2240      	movs	r2, #64	; 0x40
 8000c40:	2100      	movs	r1, #0
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <SerialInputSequence+0xa0>)
 8000c44:	f002 fb1c 	bl	8003280 <memset>
}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200004bc 	.word	0x200004bc
 8000c54:	2000047c 	.word	0x2000047c

08000c58 <USART1_IRQHandler>:
		rx_index++;
	}
}

void USART1_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	// disable timer
	SerialInputSequence(&USART1_PORT);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <USART1_IRQHandler+0x10>)
 8000c5e:	f7ff ffa9 	bl	8000bb4 <SerialInputSequence>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000001c 	.word	0x2000001c

08000c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6193      	str	r3, [r2, #24]
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_MspInit+0x44>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ca2:	2007      	movs	r0, #7
 8000ca4:	f000 fa4e 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_I2C_MspInit+0x7c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d127      	bne.n	8000d26 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ce0:	6153      	str	r3, [r2, #20]
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000cee:	23c0      	movs	r3, #192	; 0xc0
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf2:	2312      	movs	r3, #18
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	480b      	ldr	r0, [pc, #44]	; (8000d38 <HAL_I2C_MspInit+0x84>)
 8000d0a:	f000 fa4f 	bl	80011ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d18:	61d3      	str	r3, [r2, #28]
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40005400 	.word	0x40005400
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48000400 	.word	0x48000400

08000d3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <HAL_SPI_MspInit+0x7c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d128      	bne.n	8000db0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_SPI_MspInit+0x80>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a16      	ldr	r2, [pc, #88]	; (8000dbc <HAL_SPI_MspInit+0x80>)
 8000d64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d68:	6193      	str	r3, [r2, #24]
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_SPI_MspInit+0x80>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_SPI_MspInit+0x80>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_SPI_MspInit+0x80>)
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	6153      	str	r3, [r2, #20]
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_SPI_MspInit+0x80>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000d8e:	23e0      	movs	r3, #224	; 0xe0
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dac:	f000 f9fe 	bl	80011ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	; 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40013000 	.word	0x40013000
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <HAL_PCD_MspInit+0x80>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d129      	bne.n	8000e36 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_PCD_MspInit+0x84>)
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <HAL_PCD_MspInit+0x84>)
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	6153      	str	r3, [r2, #20]
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_PCD_MspInit+0x84>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000dfa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000e0c:	230e      	movs	r3, #14
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1a:	f000 f9c7 	bl	80011ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_PCD_MspInit+0x84>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <HAL_PCD_MspInit+0x84>)
 8000e24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e28:	61d3      	str	r3, [r2, #28]
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_PCD_MspInit+0x84>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40005c00 	.word	0x40005c00
 8000e44:	40021000 	.word	0x40021000

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 f884 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <SystemInit+0x20>)
 8000ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <SystemInit+0x20>)
 8000ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec4:	f7ff ffea 	bl	8000e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <LoopForever+0x6>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	; (8000f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <LoopForever+0xe>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	; (8000f0c <LoopForever+0x16>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eee:	f002 f9a3 	bl	8003238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ef2:	f7ff f991 	bl	8000218 <main>

08000ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef6:	e7fe      	b.n	8000ef6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ef8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000f04:	080033b0 	.word	0x080033b0
  ldr r2, =_sbss
 8000f08:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000f0c:	200004c4 	.word	0x200004c4

08000f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_2_IRQHandler>
	...

08000f14 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x28>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x28>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f90d 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fe9c 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40022000 	.word	0x40022000

08000f40 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f917 	bl	8001192 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f7c:	f000 f8ed 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	2000009c 	.word	0x2000009c
 8000f98:	200000a4 	.word	0x200000a4
 8000f9c:	200000a0 	.word	0x200000a0

08000fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200000a4 	.word	0x200000a4
 8000fc4:	200004c0 	.word	0x200004c0

08000fc8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200004c0 	.word	0x200004c0

08000fe0 <__NVIC_SetPriorityGrouping>:
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_GetPriorityGrouping>:
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001124:	f7ff ff8e 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff47 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff5c 	bl	8001028 <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff8e 	bl	8001098 <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff5d 	bl	8001044 <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffb0 	bl	8001100 <SysTick_Config>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ba:	e154      	b.n	8001466 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	4013      	ands	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 8146 	beq.w	8001460 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d005      	beq.n	80011ec <HAL_GPIO_Init+0x40>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d130      	bne.n	800124e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001222:	2201      	movs	r2, #1
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	f003 0201 	and.w	r2, r3, #1
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	2b03      	cmp	r3, #3
 8001258:	d017      	beq.n	800128a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d123      	bne.n	80012de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	08da      	lsrs	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3208      	adds	r2, #8
 800129e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	6939      	ldr	r1, [r7, #16]
 80012da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0203 	and.w	r2, r3, #3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 80a0 	beq.w	8001460 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001320:	4b58      	ldr	r3, [pc, #352]	; (8001484 <HAL_GPIO_Init+0x2d8>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a57      	ldr	r2, [pc, #348]	; (8001484 <HAL_GPIO_Init+0x2d8>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b55      	ldr	r3, [pc, #340]	; (8001484 <HAL_GPIO_Init+0x2d8>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001338:	4a53      	ldr	r2, [pc, #332]	; (8001488 <HAL_GPIO_Init+0x2dc>)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001362:	d019      	beq.n	8001398 <HAL_GPIO_Init+0x1ec>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a49      	ldr	r2, [pc, #292]	; (800148c <HAL_GPIO_Init+0x2e0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d013      	beq.n	8001394 <HAL_GPIO_Init+0x1e8>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a48      	ldr	r2, [pc, #288]	; (8001490 <HAL_GPIO_Init+0x2e4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d00d      	beq.n	8001390 <HAL_GPIO_Init+0x1e4>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a47      	ldr	r2, [pc, #284]	; (8001494 <HAL_GPIO_Init+0x2e8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d007      	beq.n	800138c <HAL_GPIO_Init+0x1e0>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a46      	ldr	r2, [pc, #280]	; (8001498 <HAL_GPIO_Init+0x2ec>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d101      	bne.n	8001388 <HAL_GPIO_Init+0x1dc>
 8001384:	2304      	movs	r3, #4
 8001386:	e008      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001388:	2305      	movs	r3, #5
 800138a:	e006      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 800138c:	2303      	movs	r3, #3
 800138e:	e004      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001390:	2302      	movs	r3, #2
 8001392:	e002      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001398:	2300      	movs	r3, #0
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	f002 0203 	and.w	r2, r2, #3
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	4093      	lsls	r3, r2
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013aa:	4937      	ldr	r1, [pc, #220]	; (8001488 <HAL_GPIO_Init+0x2dc>)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b8:	4b38      	ldr	r3, [pc, #224]	; (800149c <HAL_GPIO_Init+0x2f0>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013dc:	4a2f      	ldr	r2, [pc, #188]	; (800149c <HAL_GPIO_Init+0x2f0>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_GPIO_Init+0x2f0>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001406:	4a25      	ldr	r2, [pc, #148]	; (800149c <HAL_GPIO_Init+0x2f0>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800140c:	4b23      	ldr	r3, [pc, #140]	; (800149c <HAL_GPIO_Init+0x2f0>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001430:	4a1a      	ldr	r2, [pc, #104]	; (800149c <HAL_GPIO_Init+0x2f0>)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <HAL_GPIO_Init+0x2f0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <HAL_GPIO_Init+0x2f0>)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	f47f aea3 	bne.w	80011bc <HAL_GPIO_Init+0x10>
  }
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	371c      	adds	r7, #28
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000
 800148c:	48000400 	.word	0x48000400
 8001490:	48000800 	.word	0x48000800
 8001494:	48000c00 	.word	0x48000c00
 8001498:	48001000 	.word	0x48001000
 800149c:	40010400 	.word	0x40010400

080014a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
 80014ac:	4613      	mov	r3, r2
 80014ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b0:	787b      	ldrb	r3, [r7, #1]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e081      	b.n	80015e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d106      	bne.n	80014fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fbdc 	bl	8000cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2224      	movs	r2, #36	; 0x24
 8001500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001520:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001530:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d107      	bne.n	800154a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	e006      	b.n	8001558 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001556:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d104      	bne.n	800156a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001568:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800158c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69d9      	ldr	r1, [r3, #28]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1a      	ldr	r2, [r3, #32]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2220      	movs	r2, #32
 80015d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b20      	cmp	r3, #32
 8001602:	d138      	bne.n	8001676 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800160e:	2302      	movs	r3, #2
 8001610:	e032      	b.n	8001678 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2224      	movs	r2, #36	; 0x24
 800161e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0201 	bic.w	r2, r2, #1
 8001630:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001640:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6819      	ldr	r1, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0201 	orr.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2220      	movs	r2, #32
 8001666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	e000      	b.n	8001678 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001676:	2302      	movs	r3, #2
  }
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b20      	cmp	r3, #32
 8001698:	d139      	bne.n	800170e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e033      	b.n	8001710 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2224      	movs	r2, #36	; 0x24
 80016b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0201 	orr.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2220      	movs	r2, #32
 80016fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800170e:	2302      	movs	r3, #2
  }
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	b08b      	sub	sp, #44	; 0x2c
 8001720:	af06      	add	r7, sp, #24
 8001722:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e0c4      	b.n	80018b8 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fb3c 	bl	8000dc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2203      	movs	r2, #3
 800174c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f001 fd32 	bl	80031be <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800175a:	2300      	movs	r3, #0
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	e040      	b.n	80017e2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	3301      	adds	r3, #1
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	440b      	add	r3, r1
 8001786:	7bfa      	ldrb	r2, [r7, #15]
 8001788:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	440b      	add	r3, r1
 800179a:	3303      	adds	r3, #3
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	3338      	adds	r3, #56	; 0x38
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	333c      	adds	r3, #60	; 0x3c
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3340      	adds	r3, #64	; 0x40
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	3301      	adds	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d3b9      	bcc.n	8001760 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	e044      	b.n	800187c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	440b      	add	r3, r1
 8001816:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800181e:	7bfa      	ldrb	r2, [r7, #15]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	3301      	adds	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	429a      	cmp	r2, r3
 8001884:	d3b5      	bcc.n	80017f2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	687e      	ldr	r6, [r7, #4]
 800188e:	466d      	mov	r5, sp
 8001890:	f106 0410 	add.w	r4, r6, #16
 8001894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	602b      	str	r3, [r5, #0]
 800189c:	1d33      	adds	r3, r6, #4
 800189e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a0:	6838      	ldr	r0, [r7, #0]
 80018a2:	f001 fca7 	bl	80031f4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018d0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	f001 b823 	b.w	800292c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 817d 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018fc:	4bbc      	ldr	r3, [pc, #752]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b04      	cmp	r3, #4
 8001906:	d00c      	beq.n	8001922 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001908:	4bb9      	ldr	r3, [pc, #740]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d15c      	bne.n	80019ce <HAL_RCC_OscConfig+0x10e>
 8001914:	4bb6      	ldr	r3, [pc, #728]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001920:	d155      	bne.n	80019ce <HAL_RCC_OscConfig+0x10e>
 8001922:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001926:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001936:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	095b      	lsrs	r3, r3, #5
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b01      	cmp	r3, #1
 800194c:	d102      	bne.n	8001954 <HAL_RCC_OscConfig+0x94>
 800194e:	4ba8      	ldr	r3, [pc, #672]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	e015      	b.n	8001980 <HAL_RCC_OscConfig+0xc0>
 8001954:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001958:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001968:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800196c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001970:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001974:	fa93 f3a3 	rbit	r3, r3
 8001978:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800197c:	4b9c      	ldr	r3, [pc, #624]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001984:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001988:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800198c:	fa92 f2a2 	rbit	r2, r2
 8001990:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001994:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001998:	fab2 f282 	clz	r2, r2
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	f042 0220 	orr.w	r2, r2, #32
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	f002 021f 	and.w	r2, r2, #31
 80019a8:	2101      	movs	r1, #1
 80019aa:	fa01 f202 	lsl.w	r2, r1, r2
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 811f 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x334>
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 8116 	bne.w	8001bf4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	f000 bfaf 	b.w	800292c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x12e>
 80019e0:	4b83      	ldr	r3, [pc, #524]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a82      	ldr	r2, [pc, #520]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 80019e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	e036      	b.n	8001a5c <HAL_RCC_OscConfig+0x19c>
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x158>
 80019fe:	4b7c      	ldr	r3, [pc, #496]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7b      	ldr	r2, [pc, #492]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b79      	ldr	r3, [pc, #484]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a78      	ldr	r2, [pc, #480]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e021      	b.n	8001a5c <HAL_RCC_OscConfig+0x19c>
 8001a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x184>
 8001a2a:	4b71      	ldr	r3, [pc, #452]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a70      	ldr	r2, [pc, #448]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b6e      	ldr	r3, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6d      	ldr	r2, [pc, #436]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0x19c>
 8001a44:	4b6a      	ldr	r3, [pc, #424]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a69      	ldr	r2, [pc, #420]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b67      	ldr	r3, [pc, #412]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a66      	ldr	r2, [pc, #408]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a5c:	4b64      	ldr	r3, [pc, #400]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	f023 020f 	bic.w	r2, r3, #15
 8001a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	495f      	ldr	r1, [pc, #380]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d059      	beq.n	8001b3a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff fa9f 	bl	8000fc8 <HAL_GetTick>
 8001a8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff fa9a 	bl	8000fc8 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b64      	cmp	r3, #100	; 0x64
 8001a9e:	d902      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	f000 bf43 	b.w	800292c <HAL_RCC_OscConfig+0x106c>
 8001aa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aaa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001aba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	095b      	lsrs	r3, r3, #5
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d102      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x218>
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	e015      	b.n	8001b04 <HAL_RCC_OscConfig+0x244>
 8001ad8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001adc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001aec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001af0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001af4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b00:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b08:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b0c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b10:	fa92 f2a2 	rbit	r2, r2
 8001b14:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b18:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b1c:	fab2 f282 	clz	r2, r2
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	f042 0220 	orr.w	r2, r2, #32
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	f002 021f 	and.w	r2, r2, #31
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0ab      	beq.n	8001a90 <HAL_RCC_OscConfig+0x1d0>
 8001b38:	e05d      	b.n	8001bf6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fa45 	bl	8000fc8 <HAL_GetTick>
 8001b3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff fa40 	bl	8000fc8 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b64      	cmp	r3, #100	; 0x64
 8001b52:	d902      	bls.n	8001b5a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	f000 bee9 	b.w	800292c <HAL_RCC_OscConfig+0x106c>
 8001b5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b6e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	095b      	lsrs	r3, r3, #5
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d102      	bne.n	8001b8c <HAL_RCC_OscConfig+0x2cc>
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	e015      	b.n	8001bb8 <HAL_RCC_OscConfig+0x2f8>
 8001b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b90:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b98:	fa93 f3a3 	rbit	r3, r3
 8001b9c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ba8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_RCC_OscConfig+0x330>)
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bbc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001bc0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001bc4:	fa92 f2a2 	rbit	r2, r2
 8001bc8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001bcc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001bd0:	fab2 f282 	clz	r2, r2
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	f042 0220 	orr.w	r2, r2, #32
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	f002 021f 	and.w	r2, r2, #31
 8001be0:	2101      	movs	r1, #1
 8001be2:	fa01 f202 	lsl.w	r2, r1, r2
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1ab      	bne.n	8001b44 <HAL_RCC_OscConfig+0x284>
 8001bec:	e003      	b.n	8001bf6 <HAL_RCC_OscConfig+0x336>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 817d 	beq.w	8001f06 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c0c:	4ba6      	ldr	r3, [pc, #664]	; (8001ea8 <HAL_RCC_OscConfig+0x5e8>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c18:	4ba3      	ldr	r3, [pc, #652]	; (8001ea8 <HAL_RCC_OscConfig+0x5e8>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d172      	bne.n	8001d0a <HAL_RCC_OscConfig+0x44a>
 8001c24:	4ba0      	ldr	r3, [pc, #640]	; (8001ea8 <HAL_RCC_OscConfig+0x5e8>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d16c      	bne.n	8001d0a <HAL_RCC_OscConfig+0x44a>
 8001c30:	2302      	movs	r3, #2
 8001c32:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001c42:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	095b      	lsrs	r3, r3, #5
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d102      	bne.n	8001c60 <HAL_RCC_OscConfig+0x3a0>
 8001c5a:	4b93      	ldr	r3, [pc, #588]	; (8001ea8 <HAL_RCC_OscConfig+0x5e8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	e013      	b.n	8001c88 <HAL_RCC_OscConfig+0x3c8>
 8001c60:	2302      	movs	r3, #2
 8001c62:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c66:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c72:	2302      	movs	r3, #2
 8001c74:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c7c:	fa93 f3a3 	rbit	r3, r3
 8001c80:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c84:	4b88      	ldr	r3, [pc, #544]	; (8001ea8 <HAL_RCC_OscConfig+0x5e8>)
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c8e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c92:	fa92 f2a2 	rbit	r2, r2
 8001c96:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c9a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c9e:	fab2 f282 	clz	r2, r2
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	f042 0220 	orr.w	r2, r2, #32
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	f002 021f 	and.w	r2, r2, #31
 8001cae:	2101      	movs	r1, #1
 8001cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00a      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x410>
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d002      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f000 be2e 	b.w	800292c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b75      	ldr	r3, [pc, #468]	; (8001ea8 <HAL_RCC_OscConfig+0x5e8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	21f8      	movs	r1, #248	; 0xf8
 8001ce6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001cee:	fa91 f1a1 	rbit	r1, r1
 8001cf2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001cf6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001cfa:	fab1 f181 	clz	r1, r1
 8001cfe:	b2c9      	uxtb	r1, r1
 8001d00:	408b      	lsls	r3, r1
 8001d02:	4969      	ldr	r1, [pc, #420]	; (8001ea8 <HAL_RCC_OscConfig+0x5e8>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d08:	e0fd      	b.n	8001f06 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 8088 	beq.w	8001e2c <HAL_RCC_OscConfig+0x56c>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	461a      	mov	r2, r3
 8001d44:	2301      	movs	r3, #1
 8001d46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff f93e 	bl	8000fc8 <HAL_GetTick>
 8001d4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d52:	f7ff f939 	bl	8000fc8 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d902      	bls.n	8001d68 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	f000 bde2 	b.w	800292c <HAL_RCC_OscConfig+0x106c>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d72:	fa93 f3a3 	rbit	r3, r3
 8001d76:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d7a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	095b      	lsrs	r3, r3, #5
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d102      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4d8>
 8001d92:	4b45      	ldr	r3, [pc, #276]	; (8001ea8 <HAL_RCC_OscConfig+0x5e8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	e013      	b.n	8001dc0 <HAL_RCC_OscConfig+0x500>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001daa:	2302      	movs	r3, #2
 8001dac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001db0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001dbc:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <HAL_RCC_OscConfig+0x5e8>)
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001dc6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001dca:	fa92 f2a2 	rbit	r2, r2
 8001dce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001dd2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001dd6:	fab2 f282 	clz	r2, r2
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	f042 0220 	orr.w	r2, r2, #32
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	f002 021f 	and.w	r2, r2, #31
 8001de6:	2101      	movs	r1, #1
 8001de8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0af      	beq.n	8001d52 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <HAL_RCC_OscConfig+0x5e8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	21f8      	movs	r1, #248	; 0xf8
 8001e08:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e10:	fa91 f1a1 	rbit	r1, r1
 8001e14:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e18:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e1c:	fab1 f181 	clz	r1, r1
 8001e20:	b2c9      	uxtb	r1, r1
 8001e22:	408b      	lsls	r3, r1
 8001e24:	4920      	ldr	r1, [pc, #128]	; (8001ea8 <HAL_RCC_OscConfig+0x5e8>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
 8001e2a:	e06c      	b.n	8001f06 <HAL_RCC_OscConfig+0x646>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001e3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	461a      	mov	r2, r3
 8001e54:	2300      	movs	r3, #0
 8001e56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff f8b6 	bl	8000fc8 <HAL_GetTick>
 8001e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e62:	f7ff f8b1 	bl	8000fc8 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d902      	bls.n	8001e78 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	f000 bd5a 	b.w	800292c <HAL_RCC_OscConfig+0x106c>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	095b      	lsrs	r3, r3, #5
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d104      	bne.n	8001eac <HAL_RCC_OscConfig+0x5ec>
 8001ea2:	4b01      	ldr	r3, [pc, #4]	; (8001ea8 <HAL_RCC_OscConfig+0x5e8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	e015      	b.n	8001ed4 <HAL_RCC_OscConfig+0x614>
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	2302      	movs	r3, #2
 8001eae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ec4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001ed0:	4bc8      	ldr	r3, [pc, #800]	; (80021f4 <HAL_RCC_OscConfig+0x934>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001eda:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ede:	fa92 f2a2 	rbit	r2, r2
 8001ee2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ee6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001eea:	fab2 f282 	clz	r2, r2
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	f042 0220 	orr.w	r2, r2, #32
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	f002 021f 	and.w	r2, r2, #31
 8001efa:	2101      	movs	r1, #1
 8001efc:	fa01 f202 	lsl.w	r2, r1, r2
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ad      	bne.n	8001e62 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8110 	beq.w	800213c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d079      	beq.n	8002020 <HAL_RCC_OscConfig+0x760>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4bab      	ldr	r3, [pc, #684]	; (80021f8 <HAL_RCC_OscConfig+0x938>)
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	461a      	mov	r2, r3
 8001f52:	2301      	movs	r3, #1
 8001f54:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7ff f837 	bl	8000fc8 <HAL_GetTick>
 8001f5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f60:	f7ff f832 	bl	8000fc8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d902      	bls.n	8001f76 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	f000 bcdb 	b.w	800292c <HAL_RCC_OscConfig+0x106c>
 8001f76:	2302      	movs	r3, #2
 8001f78:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f90:	2202      	movs	r2, #2
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	fa93 f2a3 	rbit	r2, r3
 8001fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001fce:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd0:	4b88      	ldr	r3, [pc, #544]	; (80021f4 <HAL_RCC_OscConfig+0x934>)
 8001fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fdc:	2102      	movs	r1, #2
 8001fde:	6019      	str	r1, [r3, #0]
 8001fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	fa93 f1a3 	rbit	r1, r3
 8001fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ff6:	6019      	str	r1, [r3, #0]
  return result;
 8001ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800200c:	b2db      	uxtb	r3, r3
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0a0      	beq.n	8001f60 <HAL_RCC_OscConfig+0x6a0>
 800201e:	e08d      	b.n	800213c <HAL_RCC_OscConfig+0x87c>
 8002020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002024:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002028:	2201      	movs	r2, #1
 800202a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002030:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	fa93 f2a3 	rbit	r2, r3
 800203a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002042:	601a      	str	r2, [r3, #0]
  return result;
 8002044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002048:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800204c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	461a      	mov	r2, r3
 8002056:	4b68      	ldr	r3, [pc, #416]	; (80021f8 <HAL_RCC_OscConfig+0x938>)
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	461a      	mov	r2, r3
 800205e:	2300      	movs	r3, #0
 8002060:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002062:	f7fe ffb1 	bl	8000fc8 <HAL_GetTick>
 8002066:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206a:	e00a      	b.n	8002082 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800206c:	f7fe ffac 	bl	8000fc8 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d902      	bls.n	8002082 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	f000 bc55 	b.w	800292c <HAL_RCC_OscConfig+0x106c>
 8002082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002086:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800208a:	2202      	movs	r2, #2
 800208c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002092:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fa93 f2a3 	rbit	r2, r3
 800209c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020ae:	2202      	movs	r2, #2
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	fa93 f2a3 	rbit	r2, r3
 80020c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80020d2:	2202      	movs	r2, #2
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	fa93 f2a3 	rbit	r2, r3
 80020e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ee:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_RCC_OscConfig+0x934>)
 80020f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020fa:	2102      	movs	r1, #2
 80020fc:	6019      	str	r1, [r3, #0]
 80020fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002102:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f1a3 	rbit	r1, r3
 800210c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002110:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002114:	6019      	str	r1, [r3, #0]
  return result;
 8002116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800211a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	fab3 f383 	clz	r3, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	2101      	movs	r1, #1
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d197      	bne.n	800206c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002140:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 81a1 	beq.w	8002494 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002158:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <HAL_RCC_OscConfig+0x934>)
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d116      	bne.n	8002192 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <HAL_RCC_OscConfig+0x934>)
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <HAL_RCC_OscConfig+0x934>)
 800216a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216e:	61d3      	str	r3, [r2, #28]
 8002170:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_RCC_OscConfig+0x934>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002186:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800218a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800218c:	2301      	movs	r3, #1
 800218e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HAL_RCC_OscConfig+0x93c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d11a      	bne.n	80021d4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_RCC_OscConfig+0x93c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a16      	ldr	r2, [pc, #88]	; (80021fc <HAL_RCC_OscConfig+0x93c>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021aa:	f7fe ff0d 	bl	8000fc8 <HAL_GetTick>
 80021ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b2:	e009      	b.n	80021c8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b4:	f7fe ff08 	bl	8000fc8 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b64      	cmp	r3, #100	; 0x64
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e3b1      	b.n	800292c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <HAL_RCC_OscConfig+0x93c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ef      	beq.n	80021b4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d10d      	bne.n	8002200 <HAL_RCC_OscConfig+0x940>
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <HAL_RCC_OscConfig+0x934>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4a02      	ldr	r2, [pc, #8]	; (80021f4 <HAL_RCC_OscConfig+0x934>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	e03c      	b.n	800226c <HAL_RCC_OscConfig+0x9ac>
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	10908120 	.word	0x10908120
 80021fc:	40007000 	.word	0x40007000
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10c      	bne.n	800222a <HAL_RCC_OscConfig+0x96a>
 8002210:	4bc1      	ldr	r3, [pc, #772]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4ac0      	ldr	r2, [pc, #768]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	6213      	str	r3, [r2, #32]
 800221c:	4bbe      	ldr	r3, [pc, #760]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4abd      	ldr	r2, [pc, #756]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 8002222:	f023 0304 	bic.w	r3, r3, #4
 8002226:	6213      	str	r3, [r2, #32]
 8002228:	e020      	b.n	800226c <HAL_RCC_OscConfig+0x9ac>
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b05      	cmp	r3, #5
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x994>
 800223a:	4bb7      	ldr	r3, [pc, #732]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4ab6      	ldr	r2, [pc, #728]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	6213      	str	r3, [r2, #32]
 8002246:	4bb4      	ldr	r3, [pc, #720]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4ab3      	ldr	r2, [pc, #716]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6213      	str	r3, [r2, #32]
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0x9ac>
 8002254:	4bb0      	ldr	r3, [pc, #704]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4aaf      	ldr	r2, [pc, #700]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	4bad      	ldr	r3, [pc, #692]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4aac      	ldr	r2, [pc, #688]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 8002266:	f023 0304 	bic.w	r3, r3, #4
 800226a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8081 	beq.w	8002380 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227e:	f7fe fea3 	bl	8000fc8 <HAL_GetTick>
 8002282:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7fe fe9e 	bl	8000fc8 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	; 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e345      	b.n	800292c <HAL_RCC_OscConfig+0x106c>
 80022a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80022a8:	2202      	movs	r2, #2
 80022aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80022cc:	2202      	movs	r2, #2
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	fa93 f2a3 	rbit	r2, r3
 80022de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022e6:	601a      	str	r2, [r3, #0]
  return result;
 80022e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022f0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d102      	bne.n	800230c <HAL_RCC_OscConfig+0xa4c>
 8002306:	4b84      	ldr	r3, [pc, #528]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	e013      	b.n	8002334 <HAL_RCC_OscConfig+0xa74>
 800230c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002310:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002314:	2202      	movs	r2, #2
 8002316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	fa93 f2a3 	rbit	r2, r3
 8002326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	4b79      	ldr	r3, [pc, #484]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002338:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800233c:	2102      	movs	r1, #2
 800233e:	6011      	str	r1, [r2, #0]
 8002340:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002344:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	fa92 f1a2 	rbit	r1, r2
 800234e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002352:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002356:	6011      	str	r1, [r2, #0]
  return result;
 8002358:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800235c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	fab2 f282 	clz	r2, r2
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	f002 021f 	and.w	r2, r2, #31
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f202 	lsl.w	r2, r1, r2
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d084      	beq.n	8002288 <HAL_RCC_OscConfig+0x9c8>
 800237e:	e07f      	b.n	8002480 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7fe fe22 	bl	8000fc8 <HAL_GetTick>
 8002384:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002388:	e00b      	b.n	80023a2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7fe fe1d 	bl	8000fc8 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e2c4      	b.n	800292c <HAL_RCC_OscConfig+0x106c>
 80023a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80023aa:	2202      	movs	r2, #2
 80023ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	fa93 f2a3 	rbit	r2, r3
 80023bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80023ce:	2202      	movs	r2, #2
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	fa93 f2a3 	rbit	r2, r3
 80023e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023e8:	601a      	str	r2, [r3, #0]
  return result;
 80023ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ee:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f043 0302 	orr.w	r3, r3, #2
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d102      	bne.n	800240e <HAL_RCC_OscConfig+0xb4e>
 8002408:	4b43      	ldr	r3, [pc, #268]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	e013      	b.n	8002436 <HAL_RCC_OscConfig+0xb76>
 800240e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002412:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002416:	2202      	movs	r2, #2
 8002418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	fa93 f2a3 	rbit	r2, r3
 8002428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800242c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	4b39      	ldr	r3, [pc, #228]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800243a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800243e:	2102      	movs	r1, #2
 8002440:	6011      	str	r1, [r2, #0]
 8002442:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002446:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	fa92 f1a2 	rbit	r1, r2
 8002450:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002454:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002458:	6011      	str	r1, [r2, #0]
  return result;
 800245a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800245e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	fab2 f282 	clz	r2, r2
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	f002 021f 	and.w	r2, r2, #31
 8002474:	2101      	movs	r1, #1
 8002476:	fa01 f202 	lsl.w	r2, r1, r2
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d184      	bne.n	800238a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002480:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002488:	4b23      	ldr	r3, [pc, #140]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	4a22      	ldr	r2, [pc, #136]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 800248e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002492:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 8242 	beq.w	800292a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a6:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <HAL_RCC_OscConfig+0xc58>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	f000 8213 	beq.w	80028da <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	f040 8162 	bne.w	800278a <HAL_RCC_OscConfig+0xeca>
 80024c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ca:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80024ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	fa93 f2a3 	rbit	r2, r3
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024ea:	601a      	str	r2, [r3, #0]
  return result;
 80024ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002500:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	461a      	mov	r2, r3
 8002508:	2300      	movs	r3, #0
 800250a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fd5c 	bl	8000fc8 <HAL_GetTick>
 8002510:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002514:	e00c      	b.n	8002530 <HAL_RCC_OscConfig+0xc70>
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251c:	f7fe fd54 	bl	8000fc8 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e1fd      	b.n	800292c <HAL_RCC_OscConfig+0x106c>
 8002530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002534:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002538:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800253c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002542:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	fa93 f2a3 	rbit	r2, r3
 800254c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002550:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002554:	601a      	str	r2, [r3, #0]
  return result;
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800255e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d102      	bne.n	800257a <HAL_RCC_OscConfig+0xcba>
 8002574:	4bb0      	ldr	r3, [pc, #704]	; (8002838 <HAL_RCC_OscConfig+0xf78>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	e027      	b.n	80025ca <HAL_RCC_OscConfig+0xd0a>
 800257a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800257e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002582:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002586:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	fa93 f2a3 	rbit	r2, r3
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80025a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fa93 f2a3 	rbit	r2, r3
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	4b9c      	ldr	r3, [pc, #624]	; (8002838 <HAL_RCC_OscConfig+0xf78>)
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ce:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80025d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025d6:	6011      	str	r1, [r2, #0]
 80025d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025dc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	fa92 f1a2 	rbit	r1, r2
 80025e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025ea:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025ee:	6011      	str	r1, [r2, #0]
  return result;
 80025f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025f4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	fab2 f282 	clz	r2, r2
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f042 0220 	orr.w	r2, r2, #32
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	f002 021f 	and.w	r2, r2, #31
 800260a:	2101      	movs	r1, #1
 800260c:	fa01 f202 	lsl.w	r2, r1, r2
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d182      	bne.n	800251c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002616:	4b88      	ldr	r3, [pc, #544]	; (8002838 <HAL_RCC_OscConfig+0xf78>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800261e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002622:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800262a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	430b      	orrs	r3, r1
 8002638:	497f      	ldr	r1, [pc, #508]	; (8002838 <HAL_RCC_OscConfig+0xf78>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
 800263e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002642:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002646:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800264a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002650:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	fa93 f2a3 	rbit	r2, r3
 800265a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002662:	601a      	str	r2, [r3, #0]
  return result;
 8002664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002668:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800266c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002678:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	461a      	mov	r2, r3
 8002680:	2301      	movs	r3, #1
 8002682:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fca0 	bl	8000fc8 <HAL_GetTick>
 8002688:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268c:	e009      	b.n	80026a2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe fc9b 	bl	8000fc8 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e144      	b.n	800292c <HAL_RCC_OscConfig+0x106c>
 80026a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80026aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	fa93 f2a3 	rbit	r2, r3
 80026be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80026c6:	601a      	str	r2, [r3, #0]
  return result;
 80026c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026cc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80026d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026d2:	fab3 f383 	clz	r3, r3
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d102      	bne.n	80026ec <HAL_RCC_OscConfig+0xe2c>
 80026e6:	4b54      	ldr	r3, [pc, #336]	; (8002838 <HAL_RCC_OscConfig+0xf78>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	e027      	b.n	800273c <HAL_RCC_OscConfig+0xe7c>
 80026ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026fe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fa93 f2a3 	rbit	r2, r3
 8002708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800271a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002724:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	fa93 f2a3 	rbit	r2, r3
 800272e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002732:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	4b3f      	ldr	r3, [pc, #252]	; (8002838 <HAL_RCC_OscConfig+0xf78>)
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002740:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002744:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002748:	6011      	str	r1, [r2, #0]
 800274a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800274e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	fa92 f1a2 	rbit	r1, r2
 8002758:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800275c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002760:	6011      	str	r1, [r2, #0]
  return result;
 8002762:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002766:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	fab2 f282 	clz	r2, r2
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f042 0220 	orr.w	r2, r2, #32
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	f002 021f 	and.w	r2, r2, #31
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f202 	lsl.w	r2, r1, r2
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d082      	beq.n	800268e <HAL_RCC_OscConfig+0xdce>
 8002788:	e0cf      	b.n	800292a <HAL_RCC_OscConfig+0x106a>
 800278a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002792:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002796:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fa93 f2a3 	rbit	r2, r3
 80027a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80027ae:	601a      	str	r2, [r3, #0]
  return result;
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80027b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ba:	fab3 f383 	clz	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	461a      	mov	r2, r3
 80027cc:	2300      	movs	r3, #0
 80027ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fbfa 	bl	8000fc8 <HAL_GetTick>
 80027d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d8:	e009      	b.n	80027ee <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027da:	f7fe fbf5 	bl	8000fc8 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e09e      	b.n	800292c <HAL_RCC_OscConfig+0x106c>
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002800:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fa93 f2a3 	rbit	r2, r3
 800280a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002812:	601a      	str	r2, [r3, #0]
  return result;
 8002814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002818:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800281c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	095b      	lsrs	r3, r3, #5
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d104      	bne.n	800283c <HAL_RCC_OscConfig+0xf7c>
 8002832:	4b01      	ldr	r3, [pc, #4]	; (8002838 <HAL_RCC_OscConfig+0xf78>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	e029      	b.n	800288c <HAL_RCC_OscConfig+0xfcc>
 8002838:	40021000 	.word	0x40021000
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002844:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	fa93 f2a3 	rbit	r2, r3
 8002858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800285c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002866:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800286a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002874:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	fa93 f2a3 	rbit	r2, r3
 800287e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002882:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <HAL_RCC_OscConfig+0x1078>)
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002890:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002894:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002898:	6011      	str	r1, [r2, #0]
 800289a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800289e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	fa92 f1a2 	rbit	r1, r2
 80028a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ac:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80028b0:	6011      	str	r1, [r2, #0]
  return result;
 80028b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	fab2 f282 	clz	r2, r2
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	f042 0220 	orr.w	r2, r2, #32
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	f002 021f 	and.w	r2, r2, #31
 80028cc:	2101      	movs	r1, #1
 80028ce:	fa01 f202 	lsl.w	r2, r1, r2
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d180      	bne.n	80027da <HAL_RCC_OscConfig+0xf1a>
 80028d8:	e027      	b.n	800292a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e01e      	b.n	800292c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_RCC_OscConfig+0x1078>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002902:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	429a      	cmp	r2, r3
 800290c:	d10b      	bne.n	8002926 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800290e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002912:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002922:	429a      	cmp	r2, r3
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000

0800293c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b09e      	sub	sp, #120	; 0x78
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e162      	b.n	8002c1a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b90      	ldr	r3, [pc, #576]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d910      	bls.n	8002984 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b8d      	ldr	r3, [pc, #564]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 0207 	bic.w	r2, r3, #7
 800296a:	498b      	ldr	r1, [pc, #556]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b89      	ldr	r3, [pc, #548]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e14a      	b.n	8002c1a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002990:	4b82      	ldr	r3, [pc, #520]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	497f      	ldr	r1, [pc, #508]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80dc 	beq.w	8002b68 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d13c      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xf6>
 80029b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d102      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xa6>
 80029dc:	4b6f      	ldr	r3, [pc, #444]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	e00f      	b.n	8002a02 <HAL_RCC_ClockConfig+0xc6>
 80029e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	667b      	str	r3, [r7, #100]	; 0x64
 80029f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f4:	663b      	str	r3, [r7, #96]	; 0x60
 80029f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029fe:	4b67      	ldr	r3, [pc, #412]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a06:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a0a:	fa92 f2a2 	rbit	r2, r2
 8002a0e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002a10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a12:	fab2 f282 	clz	r2, r2
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	f042 0220 	orr.w	r2, r2, #32
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	f002 021f 	and.w	r2, r2, #31
 8002a22:	2101      	movs	r1, #1
 8002a24:	fa01 f202 	lsl.w	r2, r1, r2
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d17b      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0f3      	b.n	8002c1a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d13c      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x178>
 8002a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d102      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x128>
 8002a5e:	4b4f      	ldr	r3, [pc, #316]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	e00f      	b.n	8002a84 <HAL_RCC_ClockConfig+0x148>
 8002a64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a6c:	fa93 f3a3 	rbit	r3, r3
 8002a70:	647b      	str	r3, [r7, #68]	; 0x44
 8002a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a76:	643b      	str	r3, [r7, #64]	; 0x40
 8002a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a80:	4b46      	ldr	r3, [pc, #280]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a88:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a8c:	fa92 f2a2 	rbit	r2, r2
 8002a90:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a94:	fab2 f282 	clz	r2, r2
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	f042 0220 	orr.w	r2, r2, #32
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	f002 021f 	and.w	r2, r2, #31
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d13a      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0b2      	b.n	8002c1a <HAL_RCC_ClockConfig+0x2de>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d102      	bne.n	8002adc <HAL_RCC_ClockConfig+0x1a0>
 8002ad6:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	e00d      	b.n	8002af8 <HAL_RCC_ClockConfig+0x1bc>
 8002adc:	2302      	movs	r3, #2
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	2302      	movs	r3, #2
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	2202      	movs	r2, #2
 8002afa:	61ba      	str	r2, [r7, #24]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	fa92 f2a2 	rbit	r2, r2
 8002b02:	617a      	str	r2, [r7, #20]
  return result;
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	fab2 f282 	clz	r2, r2
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f042 0220 	orr.w	r2, r2, #32
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f002 021f 	and.w	r2, r2, #31
 8002b16:	2101      	movs	r1, #1
 8002b18:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e079      	b.n	8002c1a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	491a      	ldr	r1, [pc, #104]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fa46 	bl	8000fc8 <HAL_GetTick>
 8002b3c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7fe fa42 	bl	8000fc8 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e061      	b.n	8002c1a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <HAL_RCC_ClockConfig+0x260>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d214      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 0207 	bic.w	r2, r3, #7
 8002b7e:	4906      	ldr	r1, [pc, #24]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <HAL_RCC_ClockConfig+0x25c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e040      	b.n	8002c1a <HAL_RCC_ClockConfig+0x2de>
 8002b98:	40022000 	.word	0x40022000
 8002b9c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_RCC_ClockConfig+0x2e8>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	491a      	ldr	r1, [pc, #104]	; (8002c24 <HAL_RCC_ClockConfig+0x2e8>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bca:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <HAL_RCC_ClockConfig+0x2e8>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4912      	ldr	r1, [pc, #72]	; (8002c24 <HAL_RCC_ClockConfig+0x2e8>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bde:	f000 f829 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002be2:	4601      	mov	r1, r0
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <HAL_RCC_ClockConfig+0x2e8>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bec:	22f0      	movs	r2, #240	; 0xf0
 8002bee:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	fa92 f2a2 	rbit	r2, r2
 8002bf6:	60fa      	str	r2, [r7, #12]
  return result;
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	fab2 f282 	clz	r2, r2
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	40d3      	lsrs	r3, r2
 8002c02:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x2ec>)
 8002c04:	5cd3      	ldrb	r3, [r2, r3]
 8002c06:	fa21 f303 	lsr.w	r3, r1, r3
 8002c0a:	4a08      	ldr	r2, [pc, #32]	; (8002c2c <HAL_RCC_ClockConfig+0x2f0>)
 8002c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <HAL_RCC_ClockConfig+0x2f4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe f994 	bl	8000f40 <HAL_InitTick>
  
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3778      	adds	r7, #120	; 0x78
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08003378 	.word	0x08003378
 8002c2c:	2000009c 	.word	0x2000009c
 8002c30:	200000a0 	.word	0x200000a0

08002c34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b08b      	sub	sp, #44	; 0x2c
 8002c38:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	2300      	movs	r3, #0
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c4e:	4b29      	ldr	r3, [pc, #164]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d002      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x30>
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x36>
 8002c62:	e03c      	b.n	8002cde <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c66:	623b      	str	r3, [r7, #32]
      break;
 8002c68:	e03c      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c70:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c74:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	fa92 f2a2 	rbit	r2, r2
 8002c7c:	607a      	str	r2, [r7, #4]
  return result;
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	fab2 f282 	clz	r2, r2
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	40d3      	lsrs	r3, r2
 8002c88:	4a1c      	ldr	r2, [pc, #112]	; (8002cfc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c8e:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	220f      	movs	r2, #15
 8002c98:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	fa92 f2a2 	rbit	r2, r2
 8002ca0:	60fa      	str	r2, [r7, #12]
  return result;
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	fab2 f282 	clz	r2, r2
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	40d3      	lsrs	r3, r2
 8002cac:	4a14      	ldr	r2, [pc, #80]	; (8002d00 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cae:	5cd3      	ldrb	r3, [r2, r3]
 8002cb0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cbc:	4a0e      	ldr	r2, [pc, #56]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fb02 f303 	mul.w	r3, r2, r3
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ccc:	e004      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cd2:	fb02 f303 	mul.w	r3, r2, r3
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	623b      	str	r3, [r7, #32]
      break;
 8002cdc:	e002      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ce0:	623b      	str	r3, [r7, #32]
      break;
 8002ce2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	372c      	adds	r7, #44	; 0x2c
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	007a1200 	.word	0x007a1200
 8002cfc:	08003388 	.word	0x08003388
 8002d00:	08003398 	.word	0x08003398
 8002d04:	003d0900 	.word	0x003d0900

08002d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b092      	sub	sp, #72	; 0x48
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80d4 	beq.w	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2c:	4b4e      	ldr	r3, [pc, #312]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10e      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d38:	4b4b      	ldr	r3, [pc, #300]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	4a4a      	ldr	r2, [pc, #296]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d42:	61d3      	str	r3, [r2, #28]
 8002d44:	4b48      	ldr	r3, [pc, #288]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	4b45      	ldr	r3, [pc, #276]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d118      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d62:	4b42      	ldr	r3, [pc, #264]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a41      	ldr	r2, [pc, #260]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe f92b 	bl	8000fc8 <HAL_GetTick>
 8002d72:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	e008      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d76:	f7fe f927 	bl	8000fc8 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b64      	cmp	r3, #100	; 0x64
 8002d82:	d901      	bls.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e169      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d94:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8084 	beq.w	8002eae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d07c      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002db4:	4b2c      	ldr	r3, [pc, #176]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2301      	movs	r3, #1
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002de6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	461a      	mov	r2, r3
 8002e02:	2300      	movs	r3, #0
 8002e04:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e06:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d04b      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fe f8d7 	bl	8000fc8 <HAL_GetTick>
 8002e1a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe f8d3 	bl	8000fc8 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e113      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002e34:	2302      	movs	r3, #2
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e40:	2302      	movs	r3, #2
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	61fb      	str	r3, [r7, #28]
  return result;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d108      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e62:	4b01      	ldr	r3, [pc, #4]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	e00d      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	10908100 	.word	0x10908100
 8002e74:	2302      	movs	r3, #2
 8002e76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	4b78      	ldr	r3, [pc, #480]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2202      	movs	r2, #2
 8002e86:	613a      	str	r2, [r7, #16]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	fa92 f2a2 	rbit	r2, r2
 8002e8e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	fab2 f282 	clz	r2, r2
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	f002 021f 	and.w	r2, r2, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0b7      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002eae:	4b6d      	ldr	r3, [pc, #436]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	496a      	ldr	r1, [pc, #424]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ec0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec8:	4b66      	ldr	r3, [pc, #408]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	4a65      	ldr	r2, [pc, #404]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee0:	4b60      	ldr	r3, [pc, #384]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f023 0203 	bic.w	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	495d      	ldr	r1, [pc, #372]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002efe:	4b59      	ldr	r3, [pc, #356]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	4956      	ldr	r1, [pc, #344]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f1c:	4b51      	ldr	r3, [pc, #324]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	494e      	ldr	r1, [pc, #312]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f3a:	4b4a      	ldr	r3, [pc, #296]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f023 0210 	bic.w	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4947      	ldr	r1, [pc, #284]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f58:	4b42      	ldr	r3, [pc, #264]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	493f      	ldr	r1, [pc, #252]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f76:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f023 0220 	bic.w	r2, r3, #32
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	4938      	ldr	r1, [pc, #224]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f94:	4b33      	ldr	r3, [pc, #204]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	4930      	ldr	r1, [pc, #192]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fb2:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	4929      	ldr	r1, [pc, #164]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fd0:	4b24      	ldr	r3, [pc, #144]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	4921      	ldr	r1, [pc, #132]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	491a      	ldr	r1, [pc, #104]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800300c:	4b15      	ldr	r3, [pc, #84]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	4912      	ldr	r1, [pc, #72]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800301a:	4313      	orrs	r3, r2
 800301c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800302a:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	490b      	ldr	r1, [pc, #44]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003038:	4313      	orrs	r3, r2
 800303a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003054:	4903      	ldr	r1, [pc, #12]	; (8003064 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3748      	adds	r7, #72	; 0x48
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000

08003068 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e09d      	b.n	80031b6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800308a:	d009      	beq.n	80030a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	61da      	str	r2, [r3, #28]
 8003092:	e005      	b.n	80030a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd fe3e 	bl	8000d3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030e0:	d902      	bls.n	80030e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	e002      	b.n	80030ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030f6:	d007      	beq.n	8003108 <HAL_SPI_Init+0xa0>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003100:	d002      	beq.n	8003108 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	ea42 0103 	orr.w	r1, r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	0c1b      	lsrs	r3, r3, #16
 8003164:	f003 0204 	and.w	r2, r3, #4
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003184:	ea42 0103 	orr.w	r1, r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80031c6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80031ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4013      	ands	r3, r2
 80031de:	b29a      	uxth	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80031f4:	b084      	sub	sp, #16
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	f107 0014 	add.w	r0, r7, #20
 8003202:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	b004      	add	sp, #16
 8003234:	4770      	bx	lr
	...

08003238 <__libc_init_array>:
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	4d0d      	ldr	r5, [pc, #52]	; (8003270 <__libc_init_array+0x38>)
 800323c:	4c0d      	ldr	r4, [pc, #52]	; (8003274 <__libc_init_array+0x3c>)
 800323e:	1b64      	subs	r4, r4, r5
 8003240:	10a4      	asrs	r4, r4, #2
 8003242:	2600      	movs	r6, #0
 8003244:	42a6      	cmp	r6, r4
 8003246:	d109      	bne.n	800325c <__libc_init_array+0x24>
 8003248:	4d0b      	ldr	r5, [pc, #44]	; (8003278 <__libc_init_array+0x40>)
 800324a:	4c0c      	ldr	r4, [pc, #48]	; (800327c <__libc_init_array+0x44>)
 800324c:	f000 f828 	bl	80032a0 <_init>
 8003250:	1b64      	subs	r4, r4, r5
 8003252:	10a4      	asrs	r4, r4, #2
 8003254:	2600      	movs	r6, #0
 8003256:	42a6      	cmp	r6, r4
 8003258:	d105      	bne.n	8003266 <__libc_init_array+0x2e>
 800325a:	bd70      	pop	{r4, r5, r6, pc}
 800325c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003260:	4798      	blx	r3
 8003262:	3601      	adds	r6, #1
 8003264:	e7ee      	b.n	8003244 <__libc_init_array+0xc>
 8003266:	f855 3b04 	ldr.w	r3, [r5], #4
 800326a:	4798      	blx	r3
 800326c:	3601      	adds	r6, #1
 800326e:	e7f2      	b.n	8003256 <__libc_init_array+0x1e>
 8003270:	080033a8 	.word	0x080033a8
 8003274:	080033a8 	.word	0x080033a8
 8003278:	080033a8 	.word	0x080033a8
 800327c:	080033ac 	.word	0x080033ac

08003280 <memset>:
 8003280:	4402      	add	r2, r0
 8003282:	4603      	mov	r3, r0
 8003284:	4293      	cmp	r3, r2
 8003286:	d100      	bne.n	800328a <memset+0xa>
 8003288:	4770      	bx	lr
 800328a:	f803 1b01 	strb.w	r1, [r3], #1
 800328e:	e7f9      	b.n	8003284 <memset+0x4>

08003290 <strcpy>:
 8003290:	4603      	mov	r3, r0
 8003292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003296:	f803 2b01 	strb.w	r2, [r3], #1
 800329a:	2a00      	cmp	r2, #0
 800329c:	d1f9      	bne.n	8003292 <strcpy+0x2>
 800329e:	4770      	bx	lr

080032a0 <_init>:
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	bf00      	nop
 80032a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a6:	bc08      	pop	{r3}
 80032a8:	469e      	mov	lr, r3
 80032aa:	4770      	bx	lr

080032ac <_fini>:
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ae:	bf00      	nop
 80032b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b2:	bc08      	pop	{r3}
 80032b4:	469e      	mov	lr, r3
 80032b6:	4770      	bx	lr
