
serial_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000574  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080006fc  080006fc  000106fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800073c  0800073c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800073c  0800073c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800073c  0800073c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800073c  0800073c  0001073c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000740  08000740  00010740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08000744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00000068  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002ef9  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a48  00000000  00000000  00022f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000258  00000000  00000000  000239d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000208  00000000  00000000  00023c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e291  00000000  00000000  00023e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002da1  00000000  00000000  000520c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9145  00000000  00000000  00054e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fdfaf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000744  00000000  00000000  000fe000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080006e4 	.word	0x080006e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	080006e4 	.word	0x080006e4

080001c8 <enable_clocks>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <enable_clocks+0x1c>)
 80001ce:	695b      	ldr	r3, [r3, #20]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <enable_clocks+0x1c>)
 80001d2:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80001d6:	6153      	str	r3, [r2, #20]
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	40021000 	.word	0x40021000

080001e8 <initialise_board>:


// initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001ee:	4b06      	ldr	r3, [pc, #24]	; (8000208 <initialise_board+0x20>)
 80001f0:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f245 5255 	movw	r2, #21845	; 0x5555
 80001f8:	801a      	strh	r2, [r3, #0]
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	48001002 	.word	0x48001002

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
//  MX_GPIO_Init();
//  MX_I2C1_Init();
//  MX_SPI1_Init();
//  MX_USB_PCD_Init();
  /* USER CODE BEGIN 2 */
  count = 1;
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <main+0x1c>)
 8000212:	2201      	movs	r2, #1
 8000214:	601a      	str	r2, [r3, #0]

  enable_clocks();
 8000216:	f7ff ffd7 	bl	80001c8 <enable_clocks>
  initialise_board();
 800021a:	f7ff ffe5 	bl	80001e8 <initialise_board>

  SerialInitialise(BAUD_115200, &USART1_PORT);
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <main+0x20>)
 8000220:	2000      	movs	r0, #0
 8000222:	f000 f8bf 	bl	80003a4 <SerialInitialise>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000226:	e7fe      	b.n	8000226 <main+0x1a>
 8000228:	2000007c 	.word	0x2000007c
 800022c:	2000001c 	.word	0x2000001c

08000230 <CheckSequence>:
static char seq2[5] = "WWASD";
static char seq3[6] = "WASDDD";
static char seq4[7] = "WAASSDW";
int count;

void CheckSequence(uint8_t *input){
 8000230:	b580      	push	{r7, lr}
 8000232:	b096      	sub	sp, #88	; 0x58
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]

	char seq[7];
	int i;
	if (count == 1){
 8000238:	4b43      	ldr	r3, [pc, #268]	; (8000348 <CheckSequence+0x118>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b01      	cmp	r3, #1
 800023e:	d106      	bne.n	800024e <CheckSequence+0x1e>
		strcpy(seq, seq1);
 8000240:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000244:	4941      	ldr	r1, [pc, #260]	; (800034c <CheckSequence+0x11c>)
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fa44 	bl	80006d4 <strcpy>
 800024c:	e01f      	b.n	800028e <CheckSequence+0x5e>
	}
	else if (count == 2){
 800024e:	4b3e      	ldr	r3, [pc, #248]	; (8000348 <CheckSequence+0x118>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b02      	cmp	r3, #2
 8000254:	d106      	bne.n	8000264 <CheckSequence+0x34>
		strcpy(seq, seq2);
 8000256:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800025a:	493d      	ldr	r1, [pc, #244]	; (8000350 <CheckSequence+0x120>)
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fa39 	bl	80006d4 <strcpy>
 8000262:	e014      	b.n	800028e <CheckSequence+0x5e>
	}
	else if (count == 3){
 8000264:	4b38      	ldr	r3, [pc, #224]	; (8000348 <CheckSequence+0x118>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b03      	cmp	r3, #3
 800026a:	d106      	bne.n	800027a <CheckSequence+0x4a>
		strcpy(seq, seq3);
 800026c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000270:	4938      	ldr	r1, [pc, #224]	; (8000354 <CheckSequence+0x124>)
 8000272:	4618      	mov	r0, r3
 8000274:	f000 fa2e 	bl	80006d4 <strcpy>
 8000278:	e009      	b.n	800028e <CheckSequence+0x5e>
	}
	else if (count == 4){
 800027a:	4b33      	ldr	r3, [pc, #204]	; (8000348 <CheckSequence+0x118>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b04      	cmp	r3, #4
 8000280:	d105      	bne.n	800028e <CheckSequence+0x5e>
		strcpy(seq, seq4);
 8000282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000286:	4934      	ldr	r1, [pc, #208]	; (8000358 <CheckSequence+0x128>)
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fa23 	bl	80006d4 <strcpy>
	}

	uint8_t fail_message[32] = "Fail\n";
 800028e:	4a33      	ldr	r2, [pc, #204]	; (800035c <CheckSequence+0x12c>)
 8000290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000294:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000298:	6018      	str	r0, [r3, #0]
 800029a:	3304      	adds	r3, #4
 800029c:	8019      	strh	r1, [r3, #0]
 800029e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]
 80002ae:	615a      	str	r2, [r3, #20]
 80002b0:	831a      	strh	r2, [r3, #24]
	uint8_t pass_message[32] = "Success\n";
 80002b2:	4a2b      	ldr	r2, [pc, #172]	; (8000360 <CheckSequence+0x130>)
 80002b4:	f107 0308 	add.w	r3, r7, #8
 80002b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ba:	c303      	stmia	r3!, {r0, r1}
 80002bc:	701a      	strb	r2, [r3, #0]
 80002be:	f107 0311 	add.w	r3, r7, #17
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]
 80002ce:	f8c3 2013 	str.w	r2, [r3, #19]

	char current_char;
	int fail = 0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	653b      	str	r3, [r7, #80]	; 0x50
	for (i = 0; i < count+3; i++){
 80002d6:	2300      	movs	r3, #0
 80002d8:	657b      	str	r3, [r7, #84]	; 0x54
 80002da:	e01e      	b.n	800031a <CheckSequence+0xea>
		current_char = (char)input[i];
 80002dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	4413      	add	r3, r2
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (current_char != seq[i]){
 80002e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80002ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80002ee:	4413      	add	r3, r2
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d00c      	beq.n	8000314 <CheckSequence+0xe4>
			SerialInitialise(BAUD_115200, &USART1_PORT);
 80002fa:	491a      	ldr	r1, [pc, #104]	; (8000364 <CheckSequence+0x134>)
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 f851 	bl	80003a4 <SerialInitialise>
			SerialOutputString(fail_message, &USART1_PORT);
 8000302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000306:	4917      	ldr	r1, [pc, #92]	; (8000364 <CheckSequence+0x134>)
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f8ba 	bl	8000482 <SerialOutputString>
			fail = 1;
 800030e:	2301      	movs	r3, #1
 8000310:	653b      	str	r3, [r7, #80]	; 0x50
			break;
 8000312:	e008      	b.n	8000326 <CheckSequence+0xf6>
	for (i = 0; i < count+3; i++){
 8000314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000316:	3301      	adds	r3, #1
 8000318:	657b      	str	r3, [r7, #84]	; 0x54
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <CheckSequence+0x118>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	3302      	adds	r3, #2
 8000320:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000322:	429a      	cmp	r2, r3
 8000324:	ddda      	ble.n	80002dc <CheckSequence+0xac>
		}
	}

	if (fail == 0){
 8000326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000328:	2b00      	cmp	r3, #0
 800032a:	d109      	bne.n	8000340 <CheckSequence+0x110>
		SerialInitialise(BAUD_115200, &USART1_PORT);
 800032c:	490d      	ldr	r1, [pc, #52]	; (8000364 <CheckSequence+0x134>)
 800032e:	2000      	movs	r0, #0
 8000330:	f000 f838 	bl	80003a4 <SerialInitialise>
		SerialOutputString(pass_message, &USART1_PORT);
 8000334:	f107 0308 	add.w	r3, r7, #8
 8000338:	490a      	ldr	r1, [pc, #40]	; (8000364 <CheckSequence+0x134>)
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f8a1 	bl	8000482 <SerialOutputString>
	}

}
 8000340:	bf00      	nop
 8000342:	3758      	adds	r7, #88	; 0x58
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	2000007c 	.word	0x2000007c
 800034c:	20000000 	.word	0x20000000
 8000350:	20000004 	.word	0x20000004
 8000354:	2000000c 	.word	0x2000000c
 8000358:	20000014 	.word	0x20000014
 800035c:	080006fc 	.word	0x080006fc
 8000360:	0800071c 	.word	0x0800071c
 8000364:	2000001c 	.word	0x2000001c

08000368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000376:	2b00      	cmp	r3, #0
 8000378:	db0b      	blt.n	8000392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	f003 021f 	and.w	r2, r3, #31
 8000380:	4907      	ldr	r1, [pc, #28]	; (80003a0 <__NVIC_EnableIRQ+0x38>)
 8000382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000386:	095b      	lsrs	r3, r3, #5
 8000388:	2001      	movs	r0, #1
 800038a:	fa00 f202 	lsl.w	r2, r0, r2
 800038e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000e100 	.word	0xe000e100

080003a4 <SerialInitialise>:



// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003ae:	4b27      	ldr	r3, [pc, #156]	; (800044c <SerialInitialise+0xa8>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4a26      	ldr	r2, [pc, #152]	; (800044c <SerialInitialise+0xa8>)
 80003b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b8:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003ba:	4b24      	ldr	r3, [pc, #144]	; (800044c <SerialInitialise+0xa8>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a23      	ldr	r2, [pc, #140]	; (800044c <SerialInitialise+0xa8>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	6a1b      	ldr	r3, [r3, #32]
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	d106      	bne.n	80003dc <SerialInitialise+0x38>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80003ce:	4b1f      	ldr	r3, [pc, #124]	; (800044c <SerialInitialise+0xa8>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a1e      	ldr	r2, [pc, #120]	; (800044c <SerialInitialise+0xa8>)
 80003d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003d8:	6153      	str	r3, [r2, #20]
		break;
 80003da:	e000      	b.n	80003de <SerialInitialise+0x3a>
	default:
		break;
 80003dc:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e2:	683a      	ldr	r2, [r7, #0]
 80003e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80003e6:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ec:	683a      	ldr	r2, [r7, #0]
 80003ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80003f0:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	69d9      	ldr	r1, [r3, #28]
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	430a      	orrs	r2, r1
 8000410:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	60fb      	str	r3, [r7, #12]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d103      	bne.n	8000426 <SerialInitialise+0x82>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	2246      	movs	r2, #70	; 0x46
 8000422:	801a      	strh	r2, [r3, #0]
		break;
 8000424:	bf00      	nop
	}

	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 8000434:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000436:	b672      	cpsid	i
}
 8000438:	bf00      	nop

	__disable_irq();
	NVIC_EnableIRQ(USART1_IRQn);
 800043a:	2025      	movs	r0, #37	; 0x25
 800043c:	f7ff ff94 	bl	8000368 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000440:	b662      	cpsie	i
}
 8000442:	bf00      	nop
	__enable_irq();
}
 8000444:	bf00      	nop
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000

08000450 <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	6039      	str	r1, [r7, #0]
 800045a:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 800045c:	bf00      	nop
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000468:	2b00      	cmp	r3, #0
 800046a:	d0f8      	beq.n	800045e <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	691b      	ldr	r3, [r3, #16]
 8000470:	79fa      	ldrb	r2, [r7, #7]
 8000472:	b292      	uxth	r2, r2
 8000474:	801a      	strh	r2, [r3, #0]
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr

08000482 <SerialOutputString>:

void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000482:	b580      	push	{r7, lr}
 8000484:	b084      	sub	sp, #16
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
 800048a:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000490:	e00b      	b.n	80004aa <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	6839      	ldr	r1, [r7, #0]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ffd9 	bl	8000450 <SerialOutputChar>
		counter++;
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	3301      	adds	r3, #1
 80004a2:	60fb      	str	r3, [r7, #12]
		pt++;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3301      	adds	r3, #1
 80004a8:	607b      	str	r3, [r7, #4]
	while(*pt) {
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1ef      	bne.n	8000492 <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d003      	beq.n	80004c2 <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004be:	68f8      	ldr	r0, [r7, #12]
 80004c0:	4798      	blx	r3
}
 80004c2:	bf00      	nop
 80004c4:	3710      	adds	r7, #16
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <SerialInputString>:

void SerialInputString(SerialPort *serial_port) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
		if (rx_index < 7) {
 80004d4:	4b25      	ldr	r3, [pc, #148]	; (800056c <SerialInputString+0xa0>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	2b06      	cmp	r3, #6
 80004dc:	d82e      	bhi.n	800053c <SerialInputString+0x70>
			uint8_t rx_data = *(serial_port->DataInputRegister);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	73fb      	strb	r3, [r7, #15]

			// exit if new line is detected
			if (rx_data == CARRIAGE_RETURN || rx_data == LINE_FEED) {
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	2b0d      	cmp	r3, #13
 80004ec:	d002      	beq.n	80004f4 <SerialInputString+0x28>
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	2b0a      	cmp	r3, #10
 80004f2:	d114      	bne.n	800051e <SerialInputString+0x52>
				CheckSequence(rx_buffer);
 80004f4:	481e      	ldr	r0, [pc, #120]	; (8000570 <SerialInputString+0xa4>)
 80004f6:	f7ff fe9b 	bl	8000230 <CheckSequence>

				// reset index & buffer
				rx_index = 0;
 80004fa:	4b1c      	ldr	r3, [pc, #112]	; (800056c <SerialInputString+0xa0>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
				memset(rx_buffer, 0, sizeof(rx_buffer));
 8000500:	2240      	movs	r2, #64	; 0x40
 8000502:	2100      	movs	r1, #0
 8000504:	481a      	ldr	r0, [pc, #104]	; (8000570 <SerialInputString+0xa4>)
 8000506:	f000 f8dd 	bl	80006c4 <memset>

				// disable receive interrupt
				*(serial_port->ControlRegister1) &= ~USART_CR1_RXNEIE;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	f022 0220 	bic.w	r2, r2, #32
 8000518:	601a      	str	r2, [r3, #0]
			if (rx_data == CARRIAGE_RETURN || rx_data == LINE_FEED) {
 800051a:	bf00      	nop

			// reset index & buffer
			rx_index = 0;
			memset(rx_buffer, 0, sizeof(rx_buffer));
		}
}
 800051c:	e021      	b.n	8000562 <SerialInputString+0x96>
				rx_buffer[rx_index]= rx_data;
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <SerialInputString+0xa0>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	4619      	mov	r1, r3
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <SerialInputString+0xa4>)
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	5453      	strb	r3, [r2, r1]
				rx_index++;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <SerialInputString+0xa0>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	b2db      	uxtb	r3, r3
 8000532:	3301      	adds	r3, #1
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <SerialInputString+0xa0>)
 8000538:	701a      	strb	r2, [r3, #0]
}
 800053a:	e012      	b.n	8000562 <SerialInputString+0x96>
			*(serial_port->ControlRegister1) &= ~USART_CR1_RXNEIE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	f022 0220 	bic.w	r2, r2, #32
 800054a:	601a      	str	r2, [r3, #0]
			CheckSequence(rx_buffer);
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <SerialInputString+0xa4>)
 800054e:	f7ff fe6f 	bl	8000230 <CheckSequence>
			rx_index = 0;
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <SerialInputString+0xa0>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8000558:	2240      	movs	r2, #64	; 0x40
 800055a:	2100      	movs	r1, #0
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <SerialInputString+0xa4>)
 800055e:	f000 f8b1 	bl	80006c4 <memset>
}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000c0 	.word	0x200000c0
 8000570:	20000080 	.word	0x20000080

08000574 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	// disable timer
	SerialInputString(&USART1_PORT);
 8000578:	4802      	ldr	r0, [pc, #8]	; (8000584 <USART1_IRQHandler+0x10>)
 800057a:	f7ff ffa7 	bl	80004cc <SerialInputString>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	2000001c 	.word	0x2000001c

08000588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800058c:	e7fe      	b.n	800058c <NMI_Handler+0x4>

0800058e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <HardFault_Handler+0x4>

08000594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <MemManage_Handler+0x4>

0800059a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059e:	e7fe      	b.n	800059e <BusFault_Handler+0x4>

080005a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <UsageFault_Handler+0x4>

080005a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d4:	f000 f83e 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <SystemInit+0x20>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <SystemInit+0x20>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000638 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000604:	f7ff ffea 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <LoopForever+0x6>)
  ldr r1, =_edata
 800060a:	490d      	ldr	r1, [pc, #52]	; (8000640 <LoopForever+0xa>)
  ldr r2, =_sidata
 800060c:	4a0d      	ldr	r2, [pc, #52]	; (8000644 <LoopForever+0xe>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000610:	e002      	b.n	8000618 <LoopCopyDataInit>

08000612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000616:	3304      	adds	r3, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800061a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800061c:	d3f9      	bcc.n	8000612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000620:	4c0a      	ldr	r4, [pc, #40]	; (800064c <LoopForever+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000624:	e001      	b.n	800062a <LoopFillZerobss>

08000626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000628:	3204      	adds	r2, #4

0800062a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800062a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800062c:	d3fb      	bcc.n	8000626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800062e:	f000 f825 	bl	800067c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000632:	f7ff fdeb 	bl	800020c <main>

08000636 <LoopForever>:

LoopForever:
    b LoopForever
 8000636:	e7fe      	b.n	8000636 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000638:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000644:	08000744 	.word	0x08000744
  ldr r2, =_sbss
 8000648:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800064c:	200000c8 	.word	0x200000c8

08000650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC1_2_IRQHandler>
	...

08000654 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x20>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_IncTick+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_IncTick+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	2000005c 	.word	0x2000005c
 8000678:	200000c4 	.word	0x200000c4

0800067c <__libc_init_array>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	4d0d      	ldr	r5, [pc, #52]	; (80006b4 <__libc_init_array+0x38>)
 8000680:	4c0d      	ldr	r4, [pc, #52]	; (80006b8 <__libc_init_array+0x3c>)
 8000682:	1b64      	subs	r4, r4, r5
 8000684:	10a4      	asrs	r4, r4, #2
 8000686:	2600      	movs	r6, #0
 8000688:	42a6      	cmp	r6, r4
 800068a:	d109      	bne.n	80006a0 <__libc_init_array+0x24>
 800068c:	4d0b      	ldr	r5, [pc, #44]	; (80006bc <__libc_init_array+0x40>)
 800068e:	4c0c      	ldr	r4, [pc, #48]	; (80006c0 <__libc_init_array+0x44>)
 8000690:	f000 f828 	bl	80006e4 <_init>
 8000694:	1b64      	subs	r4, r4, r5
 8000696:	10a4      	asrs	r4, r4, #2
 8000698:	2600      	movs	r6, #0
 800069a:	42a6      	cmp	r6, r4
 800069c:	d105      	bne.n	80006aa <__libc_init_array+0x2e>
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a4:	4798      	blx	r3
 80006a6:	3601      	adds	r6, #1
 80006a8:	e7ee      	b.n	8000688 <__libc_init_array+0xc>
 80006aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ae:	4798      	blx	r3
 80006b0:	3601      	adds	r6, #1
 80006b2:	e7f2      	b.n	800069a <__libc_init_array+0x1e>
 80006b4:	0800073c 	.word	0x0800073c
 80006b8:	0800073c 	.word	0x0800073c
 80006bc:	0800073c 	.word	0x0800073c
 80006c0:	08000740 	.word	0x08000740

080006c4 <memset>:
 80006c4:	4402      	add	r2, r0
 80006c6:	4603      	mov	r3, r0
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d100      	bne.n	80006ce <memset+0xa>
 80006cc:	4770      	bx	lr
 80006ce:	f803 1b01 	strb.w	r1, [r3], #1
 80006d2:	e7f9      	b.n	80006c8 <memset+0x4>

080006d4 <strcpy>:
 80006d4:	4603      	mov	r3, r0
 80006d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80006da:	f803 2b01 	strb.w	r2, [r3], #1
 80006de:	2a00      	cmp	r2, #0
 80006e0:	d1f9      	bne.n	80006d6 <strcpy+0x2>
 80006e2:	4770      	bx	lr

080006e4 <_init>:
 80006e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e6:	bf00      	nop
 80006e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ea:	bc08      	pop	{r3}
 80006ec:	469e      	mov	lr, r3
 80006ee:	4770      	bx	lr

080006f0 <_fini>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	bf00      	nop
 80006f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f6:	bc08      	pop	{r3}
 80006f8:	469e      	mov	lr, r3
 80006fa:	4770      	bx	lr
